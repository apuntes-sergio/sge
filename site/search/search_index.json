{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"1_2_IntroduccionERP/","title":"1.2. Introducci\u00f3n a la Gesti\u00f3n Empresarial","text":"<p>La gesti\u00f3n empresarial es aquella actividad que, a trav\u00e9s de diferentes individuos especializados \u2014directores institucionales, consultores, productores, gerentes, entre otros\u2014 y acciones, busca mejorar la productividad y competitividad de una empresa o negocio.</p>"},{"location":"1_2_IntroduccionERP/#principales-caracteristicas-de-la-gestion-empresarial","title":"Principales caracter\u00edsticas de la gesti\u00f3n empresarial","text":"<ul> <li>Una empresa existe mientras genere beneficios.  </li> <li>Una empresa debe gestionar bien sus recursos para ser competitiva.  </li> <li>El principal objetivo de la empresa es el cliente.</li> </ul> <p>No todas las personas tienen la capacidad de llevar a cabo una buena administraci\u00f3n en su empresa. Por eso, de alguna manera, la gesti\u00f3n empresarial se considera un arte o una virtud particular, ya que se requiere organizaci\u00f3n, control y liderazgo efectivo para alcanzar los resultados deseados de la forma m\u00e1s eficiente posible.</p> <p>Siempre se busca mejorar la productividad y las finanzas de una organizaci\u00f3n para ser competitivos en el mercado, y en este \u00e1mbito el tiempo es un factor importante para lograr los objetivos propuestos. Una empresa que realiza una gesti\u00f3n \u00f3ptima siempre tendr\u00e1 mejores resultados tanto en su producci\u00f3n y log\u00edstica como en el mercado, logrando buenas ventas y obteniendo un margen de beneficio adecuado (esto tambi\u00e9n aplica a las empresas de servicios).</p> Gesti\u00f3n Empresarial. <p>La persona que asume la direcci\u00f3n de una empresa lleva la responsabilidad de optimizar recursos como el tiempo, los productos y el personal para dirigir esa organizaci\u00f3n hacia una econom\u00eda deseable. En este \u00e1mbito siempre existen normas y est\u00e1ndares que cumplir, aunque por otro lado, un emprendedor debe ser innovador y creativo para destacar frente a otros que trabajan en el mismo sector.</p>"},{"location":"1_3_IT/","title":"Inform\u00e1tica en la Gesti\u00f3n Empresarial","text":"<p>La inform\u00e1tica consiste b\u00e1sicamente en el procesamiento autom\u00e1tico de la informaci\u00f3n. Si una empresa tiene como una de sus principales actividades la generaci\u00f3n, gesti\u00f3n y an\u00e1lisis de cierta informaci\u00f3n, parece l\u00f3gico pensar que la tecnolog\u00eda de la informaci\u00f3n va a desempe\u00f1ar un papel importante en la gesti\u00f3n empresarial.</p> <p>La inform\u00e1tica hace mucho m\u00e1s que ayudar a las empresas a crear presentaciones profesionales y reportes de ventas impresionantes. Los ordenadores pueden automatizar tareas que consumen mucho tiempo, dando ideas a los desarrolladores para crear programas que resuelvan una gran variedad de problemas. Ya seas due\u00f1o de una joyer\u00eda o de una multinacional como Sony, la inform\u00e1tica te ayudar\u00e1 a mejorar la gesti\u00f3n de tu negocio.</p> Inform\u00e1tica en la Empresa. <p>Veamos algunas de las formas en que la inform\u00e1tica puede ayudarte a gestionar tu empresa.</p>"},{"location":"1_3_IT/#gestion-de-datos","title":"Gesti\u00f3n de Datos","text":"<p>Las tareas de gesti\u00f3n de datos son la base de muchas de las actividades que realizan las empresas. La inform\u00e1tica permite organizar y manipular grandes cantidades de informaci\u00f3n de forma productiva. Las empresas pueden usar bases de datos para monitorizar sus operaciones.</p> <p>Independientemente del tama\u00f1o de tu empresa, es probable que trabajes con informaci\u00f3n y necesites almacenarla. Los sitios web de comercio electr\u00f3nico tambi\u00e9n utilizan software de bases de datos para vender productos e incluso permitir que las personas se registren en sus plataformas. Si tu empresa tiene un sitio web, puedes configurar el software de gesti\u00f3n de datos t\u00fa mismo o contratar a una empresa para que lo haga por ti.</p>"},{"location":"1_3_IT/#gestion-de-oficina-y-almacen","title":"Gesti\u00f3n de Oficina y Almac\u00e9n","text":"<p>Muchas empresas obtienen ingresos mediante la compra y venta de productos con un margen de beneficio, y la inform\u00e1tica ayuda a gestionar todo ese inventario y materiales de manera eficiente. Los grandes almacenes, por ejemplo, utilizan software de gesti\u00f3n de inventario sofisticado que puede ser desarrollado por sus propios departamentos de IT o adaptaciones de productos est\u00e1ndar. Estas aplicaciones permiten a las compa\u00f1\u00edas asegurarse de que los productos est\u00e9n disponibles en las tiendas cuando los clientes los necesitan. Los ordenadores tambi\u00e9n son \u00fatiles para rastrear y administrar suministros b\u00e1sicos como papel de impresora, l\u00e1pices y otros materiales de oficina.</p>"},{"location":"1_3_IT/#gestion-de-personal","title":"Gesti\u00f3n de Personal","text":"<p>Comunicarse con un compa\u00f1ero que est\u00e1 en el cub\u00edculo de al lado no suele ser un problema, pero coordinar reuniones cuando las personas est\u00e1n en distintas ubicaciones puede ser un desaf\u00edo. El software inform\u00e1tico permite realizar reuniones virtuales a trav\u00e9s de Internet y facilita que todos en la empresa compartan un calendario com\u00fan. Algunas empresas buscan aumentar la productividad controlando los ordenadores que usan sus empleados. Monitorearlos permite hacer seguimiento de las horas facturables e identificar actividades rentables. Si haces seguimiento del tiempo o planificaci\u00f3n de reuniones, una herramienta de software puede ayudarte.</p>"},{"location":"1_3_IT/#gestion-de-contabilidad-y-facturacion","title":"Gesti\u00f3n de Contabilidad y Facturaci\u00f3n","text":"<p>Cuando llega la temporada de impuestos, estos pueden prepararse accediendo a los registros financieros mantenidos durante el a\u00f1o en un ordenador. El software de contabilidad ayuda a gestionar el dinero, crear presupuestos, seguir ventas y controlar el uso de recursos. Estas aplicaciones ofrecen soluciones para empresas de todos los tama\u00f1os. Incluso puedes encontrar programas de contabilidad y facturaci\u00f3n accesibles desde la web, algunos gratuitos hasta cierto l\u00edmite. Si los miembros de tu organizaci\u00f3n necesitan acceder y compartir informaci\u00f3n contable desde m\u00faltiples ubicaciones, esta puede ser una soluci\u00f3n ideal. Tambi\u00e9n encontrar\u00e1s programas de hojas de c\u00e1lculo \u00fatiles para tareas como listas de asistencia o gesti\u00f3n de n\u00f3minas.</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_4_ERP_CRM/","title":"1.4. ERP-CRM","text":""},{"location":"1_4_ERP_CRM/#que-es-un-erp","title":"\u00bfQu\u00e9 es un ERP?","text":"Youtube: \u00bfQu\u00e9 es un ERP y para qu\u00e9 sirve? <p>Un ERP (Enterprise Resource Planning o Planificaci\u00f3n de Recursos Empresariales) es un sistema dise\u00f1ado para planificar, modelar y automatizar la mayor\u00eda de los procesos de una empresa, tales como: finanzas, \u00e1rea comercial, log\u00edstica, producci\u00f3n, contabilidad, inventario, etc.</p> <p>Organiza y unifica toda la informaci\u00f3n de la empresa en un solo lugar, facilitando as\u00ed las tareas empresariales. El ERP utiliza una arquitectura modular, y cada m\u00f3dulo se encarga de gestionar un \u00e1rea diferente: finanzas, comercial, log\u00edstica, producci\u00f3n, contabilidad, inventario\u2026</p> Modulos ERP."},{"location":"1_4_ERP_CRM/#ventajas-de-un-sistema-erp","title":"Ventajas de un sistema ERP","text":"<p>Las principales ventajas de estos sistemas son:</p> <ul> <li>Automatizaci\u00f3n de los procesos empresariales.  </li> <li>Disponibilidad de la informaci\u00f3n de la empresa en una misma plataforma.  </li> <li>Integraci\u00f3n de las distintas bases de datos en un \u00fanico programa.  </li> <li>Ahorro de tiempo y costes.</li> </ul> <p>Adem\u00e1s, el ERP ofrece integraci\u00f3n con soluciones de BI (Business Intelligence), lo que permite generar informes sobre el estado de la empresa directamente a partir de los datos del sistema ERP. Esto proporciona un conocimiento detallado y actualizado que resulta esencial para analizar y mejorar procesos internos como marketing, ventas, organizaci\u00f3n y otros aspectos clave.</p>"},{"location":"1_4_ERP_CRM/#que-empresas-necesitan-un-sistema-erp","title":"\u00bfQu\u00e9 empresas necesitan un sistema ERP?","text":"<p>Un sistema ERP es adecuado para todo tipo de empresas, tanto multinacionales como pymes. Gracias a los diferentes m\u00f3dulos personalizables, cualquier empresa \u2014independientemente de sus procesos o del sector al que pertenezca\u2014 puede adaptar su propio ERP.</p> <p>Existen proveedores especializados en la implementaci\u00f3n de determinados ERPs, ya sea por tipo de producto o sector, lo que permite obtener mejores resultados tras su adquisici\u00f3n.</p>"},{"location":"1_4_ERP_CRM/#que-es-un-crm","title":"\u00bfQu\u00e9 es un CRM?","text":"<p>Un CRM (Customer Relationship Management o Gesti\u00f3n de Relaciones con Clientes) es una soluci\u00f3n orientada a gestionar tres \u00e1reas b\u00e1sicas: gesti\u00f3n comercial, marketing y atenci\u00f3n al cliente o postventa.</p> <p>El uso de un CRM forma parte de una estrategia centrada en el cliente, en la que todas las acciones tienen como objetivo final mejorar el servicio y la relaci\u00f3n con los clientes actuales y potenciales.</p> <p>La herramienta CRM y la orientaci\u00f3n al cliente ofrecen resultados demostrables, tanto por una gesti\u00f3n comercial estructurada que mejora la productividad en ventas, como por el conocimiento profundo del cliente que permite campa\u00f1as de marketing m\u00e1s efectivas.</p> <p>Las funciones de atenci\u00f3n al cliente de un CRM tambi\u00e9n fomentan la fidelizaci\u00f3n y satisfacci\u00f3n del cliente, lo que tiene un impacto muy positivo en t\u00e9rminos de ventas recurrentes y cruzadas.</p> CRM."},{"location":"1_4_ERP_CRM/#actividad","title":"Actividad","text":"<p>\ud83d\udd0d Investiga algunos ERPs actuales disponibles en el mercado.</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_5_ERP_actuales/","title":"1.5. Revisi\u00f3n de ERPs Actuales","text":""},{"location":"1_5_ERP_actuales/#historia-del-erp","title":"Historia del ERP","text":"<p>Los sistemas ERP han evolucionado con el tiempo de la siguiente manera:</p> <p>Los antecedentes del ERP fueron los sistemas MRP (Material Requirements Planning \u2013 Planificaci\u00f3n de Requerimientos de Materiales).</p> <ul> <li>En los a\u00f1os 50, los sistemas MRP permit\u00edan realizar operaciones como: facturaci\u00f3n, administraci\u00f3n de n\u00f3minas, control de inventario...</li> <li>En los a\u00f1os 60 y 70, los MRP evolucionaron ayudando a reducir costes.</li> <li>En los a\u00f1os 80, los MRP pasaron a llamarse MRP II (Manufacturing Resource Planning \u2013 Planificaci\u00f3n de Recursos de Manufactura).</li> <li>En los a\u00f1os 90, el MRP II se expandi\u00f3 a \u00e1reas como Recursos Humanos, Finanzas, Gesti\u00f3n de Proyectos... dando lugar al ERP.</li> </ul> Historia del ERP."},{"location":"1_5_ERP_actuales/#clasificacion-de-los-erp","title":"Clasificaci\u00f3n de los ERP","text":""},{"location":"1_5_ERP_actuales/#segun-el-diseno","title":"Seg\u00fan el dise\u00f1o","text":"<ul> <li>ERP a medida: Es la soluci\u00f3n m\u00e1s costosa, ya que se desarrolla espec\u00edficamente para una empresa concreta. Se adapta al 100% al negocio, pero su principal inconveniente es el alto coste.</li> <li>ERP est\u00e1ndar: Tiene la ventaja de estar probado y ser m\u00e1s f\u00e1cil de implementar. Gracias a sus m\u00f3dulos adicionales, es altamente personalizable y m\u00e1s econ\u00f3mico que uno a medida. Muy utilizado por peque\u00f1as empresas.</li> </ul>"},{"location":"1_5_ERP_actuales/#segun-la-instalacion","title":"Seg\u00fan la instalaci\u00f3n","text":"<ul> <li>ERP local: Los servidores y dispositivos est\u00e1n instalados en la propia empresa. Su uso se limita a los equipos donde est\u00e1 instalado.</li> <li>ERP en la nube: Los servidores est\u00e1n alojados en la nube, lo que permite acceder desde cualquier dispositivo con conexi\u00f3n a Internet. La informaci\u00f3n se guarda en los servidores del proveedor, que suelen realizar copias de seguridad para evitar p\u00e9rdidas.</li> </ul>"},{"location":"1_5_ERP_actuales/#segun-solucion-vertical-u-horizontal","title":"Seg\u00fan soluci\u00f3n vertical u horizontal","text":"<ul> <li>ERP vertical: Dise\u00f1ado espec\u00edficamente para un sector concreto. Por ejemplo, bodegas y hospitales suelen usar este tipo de ERP.</li> <li>ERP horizontal: Puede servir para cualquier empresa, aunque requiere m\u00e1s adaptaci\u00f3n que uno vertical.</li> </ul>"},{"location":"1_5_ERP_actuales/#segun-el-tipo-de-software","title":"Seg\u00fan el tipo de software","text":"<ul> <li>ERP de c\u00f3digo abierto: Permite acceder libremente al c\u00f3digo fuente, lo que facilita su modificaci\u00f3n sin pagar al desarrollador. Requiere personal inform\u00e1tico capacitado. Su principal inconveniente es el tiempo necesario para desarrollar los m\u00f3dulos personalizados.</li> </ul> ERP de C\u00f3digo Abierto. <ul> <li>ERP de c\u00f3digo privado: No permite acceso al c\u00f3digo fuente. Solo puede ser modificado por los desarrolladores. Las pymes suelen optar por este tipo de ERP, ya que no requieren funcionalidades muy espec\u00edficas.</li> </ul> Ranking ERPs."},{"location":"1_5_ERP_actuales/#caracteristicas-de-los-erp","title":"Caracter\u00edsticas de los ERP","text":"<p>Las principales caracter\u00edsticas de un sistema ERP son:</p> <ul> <li>Integral: Todas las \u00e1reas de la empresa se comunican e intercambian informaci\u00f3n durante la ejecuci\u00f3n de los procesos. La gesti\u00f3n y control deben estar integrados para evitar duplicidades y asegurar eficiencia y trazabilidad.</li> <li>Modular: Cada empresa tiene procesos y departamentos distintos. El ERP debe permitir elegir los componentes necesarios: compras, ventas, materiales, finanzas, almac\u00e9n, recursos humanos, etc.</li> <li>Adaptable: Debe poder configurarse seg\u00fan los procesos, est\u00e1ndares y par\u00e1metros espec\u00edficos de cada empresa.</li> </ul>"},{"location":"1_5_ERP_actuales/#actividad-2","title":"Actividad 2","text":"<p>\ud83d\udccc Clasifica los ERPs que has investigado en la actividad 1 seg\u00fan sus caracter\u00edsticas.</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_6_ERP_Libres_Privativos/","title":"1.6. ERPs Propietarios vs ERPs de C\u00f3digo Abierto","text":""},{"location":"1_6_ERP_Libres_Privativos/#comparativa-entre-erps","title":"Comparativa entre ERPs","text":"<p>Los ERPs propietarios son elegidos por muchas empresas por la seguridad que ofrece trabajar con grandes compa\u00f1\u00edas especializadas en desarrollo de software. Adem\u00e1s, estos ERPs suelen ser m\u00e1s intuitivos en su uso gracias a interfaces m\u00e1s refinadas.</p> <p>Sin embargo, las peque\u00f1as y medianas empresas no tienen necesidades tan complejas; buscan m\u00f3dulos flexibles y personalizables. Esto hace que los ERPs de software libre sean m\u00e1s atractivos para este tipo de empresas.</p> <p>Para resolver problemas de soporte y facilidad de uso, las organizaciones que desarrollan ERPs de software libre ofrecen tutoriales que ayudan al usuario a entender el entorno de aplicaci\u00f3n. Adem\u00e1s, gracias al crecimiento de este tipo de soluciones, los desarrolladores est\u00e1n creando software cada vez m\u00e1s est\u00e9tico y manejable. Al tener acceso al c\u00f3digo fuente, los errores pueden compartirse y corregirse por otros usuarios.</p>"},{"location":"1_6_ERP_Libres_Privativos/#costes-e-implementacion","title":"Costes e implementaci\u00f3n","text":"<p>Software como SAP u Oracle requiere una gran inversi\u00f3n inicial, no solo por la compra de la licencia, sino tambi\u00e9n por los costes derivados del proceso de implementaci\u00f3n. Muchas empresas, tanto grandes como peque\u00f1as, no pueden asumir estos gastos, por lo que optan por ERPs como Odoo o Dolibarr.</p> <p>El proceso de implementaci\u00f3n con software propietario es m\u00e1s sencillo en cuanto a complejidad, pero suele ser m\u00e1s lento que con software de c\u00f3digo abierto. La mayor\u00eda de estos ERPs son modulares, lo que permite a las empresas instalar solo los m\u00f3dulos necesarios, reduciendo as\u00ed el tiempo de instalaci\u00f3n.</p>"},{"location":"1_6_ERP_Libres_Privativos/#tendencias-del-mercado","title":"Tendencias del mercado","text":"<p>En cuanto a la situaci\u00f3n del mercado, los ERPs de c\u00f3digo abierto est\u00e1n ganando terreno frente a las soluciones propietarias. Aunque llegaron m\u00e1s tarde, han conseguido ponerse al d\u00eda.</p> <p>Adem\u00e1s de los factores mencionados y las posibilidades que ofrecen, otro punto clave que ha contribuido a su \u00e9xito ha sido el desarrollo de aplicaciones compatibles con ERPs existentes. Es decir, estos sistemas de gesti\u00f3n de software libre han logrado trabajar conjuntamente con m\u00f3dulos ofrecidos por ERPs propietarios.</p> <p>Incluso en un escenario donde todos los consumidores optaran por software propietario, la presencia del software libre como alternativa reduce los precios, aumentando su valor. Esta compatibilidad se deriva de los efectos de red: las relaciones entre empresas, como clientes y proveedores en log\u00edstica y compras, hacen que estas interconexiones sean un factor competitivo clave.</p>"},{"location":"1_6_ERP_Libres_Privativos/#eleccion-del-erp","title":"Elecci\u00f3n del ERP","text":"<p>Al elegir entre un software u otro, es importante tener en cuenta diversos factores y definir claramente las necesidades que queremos cubrir en nuestra empresa tras la instalaci\u00f3n de un ERP.</p> Matriz de decisi\u00f3n de ERPs. <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_7_CRM_Actuales/","title":"1.7. CRM Actual","text":"<p>Una soluci\u00f3n o herramienta CRM \u2014Customer Relationship Management o Gesti\u00f3n de Relaciones con Clientes\u2014 puede incorporar distintos tipos de funciones con prop\u00f3sitos complementarios.</p>"},{"location":"1_7_CRM_Actuales/#crm-operativo","title":"CRM Operativo","text":"<p>El CRM operativo permite organizar los procesos empresariales. Por un lado, facilita la coordinaci\u00f3n y estandariza los procedimientos de trabajo de cada departamento. Por otro, permite gestionar las actividades directamente relacionadas con el cliente, como el centro de llamadas, el servicio de asistencia o las campa\u00f1as de marketing.</p> <p>En resumen, optimiza la gesti\u00f3n operativa de la empresa.</p>"},{"location":"1_7_CRM_Actuales/#crm-analitico","title":"CRM Anal\u00edtico","text":"<p>El CRM anal\u00edtico facilita el an\u00e1lisis de la informaci\u00f3n disponible sobre clientes y ventas. El t\u00e9rmino \u201canal\u00edtico\u201d se refiere al procesamiento y tratamiento de datos.</p> <p>Estas herramientas permiten conocer el impacto de la actividad en los resultados de la empresa y la rentabilidad de las distintas unidades de negocio. Esta informaci\u00f3n es muy valiosa, ya que facilita la toma de decisiones e identifica las estrategias comerciales y de marketing m\u00e1s rentables.</p>"},{"location":"1_7_CRM_Actuales/#crm-colaborativo","title":"CRM Colaborativo","text":"<p>El CRM colaborativo centraliza todos los canales de comunicaci\u00f3n utilizados por las partes interesadas (personal, proveedores, clientes\u2026). El objetivo es compartir y centralizar toda la informaci\u00f3n para ofrecer un trato individual y personalizado.</p> <p>Conocer de antemano todas las caracter\u00edsticas de un cliente \u2014como si fuera \u00fanico\u2014 (nombre, apellidos, lugar de residencia, h\u00e1bitos y preferencias de compra) permite segmentar mejor y proponer el producto o servicio ideal en el momento adecuado.</p>"},{"location":"1_7_CRM_Actuales/#modelos-de-crm-mas-utilizados-por-las-empresas","title":"Modelos de CRM m\u00e1s utilizados por las empresas","text":"<p>Un software CRM es un sistema para:</p> <ul> <li>Gestionar autom\u00e1ticamente y de forma centralizada la relaci\u00f3n con el cliente.  </li> <li>Mejorar los intercambios con clientes y contactos en general.  </li> <li>Fidelizar, transmitir una imagen positiva y coherente de la empresa.  </li> <li>Generar leads (clientes potenciales) y aumentar las ventas.  </li> <li>Optimizar procesos comerciales como la prospecci\u00f3n, las ventas y el marketing.</li> </ul>"},{"location":"1_7_CRM_Actuales/#las-soluciones-crm-mas-completas-del-mercado","title":"Las soluciones CRM m\u00e1s completas del mercado","text":"<p>Las soluciones m\u00e1s completas integran los tres tipos de CRM: operativo, anal\u00edtico y colaborativo.</p>"},{"location":"1_7_CRM_Actuales/#sugarcrm","title":"SugarCRM","text":"<p>Herramienta con arquitectura abierta que facilita la sincronizaci\u00f3n con otros programas internos y aplicaciones de terceros. Prioriza la flexibilidad, el intercambio de informaci\u00f3n y la facilidad de uso.</p>"},{"location":"1_7_CRM_Actuales/#vtiger","title":"VTiger","text":"<p>Adem\u00e1s de las funciones b\u00e1sicas, incluye gesti\u00f3n de facturaci\u00f3n y pedidos:</p> <ul> <li>Proveedores  </li> <li>Listas de precios  </li> <li>Cat\u00e1logo de productos  </li> <li>Presupuestos  </li> <li>Emisi\u00f3n de facturas</li> </ul> <p>Permite gestionar por contactos, cuentas, proyectos o l\u00edneas de negocio. Ambas herramientas se caracterizan por una presentaci\u00f3n sobria pero intuitiva y eficiente.</p>"},{"location":"1_7_CRM_Actuales/#salesforce","title":"Salesforce","text":"<p>Con m\u00e1s de 17 a\u00f1os de experiencia, Salesforce es una de las soluciones m\u00e1s completas y populares del mercado.</p> <p>La nueva plataforma Lightning Design ofrece un servicio en la nube adaptado a la era digital. No solo mejora las ventas y atrae nuevos clientes, sino que tambi\u00e9n analiza inteligentemente los datos disponibles para anticiparse a sus necesidades.</p>"},{"location":"1_7_CRM_Actuales/#microsoft-dynamics-365","title":"Microsoft Dynamics 365","text":"<p>Gracias a la transformaci\u00f3n digital y al desarrollo de aplicaciones inteligentes en la nube, Microsoft ofrece su propia soluci\u00f3n.</p> <p>Facilita la integraci\u00f3n de un CRM y un ERP, adem\u00e1s de otros dispositivos y herramientas de Microsoft que las empresas utilizan a diario, como Outlook.</p>"},{"location":"1_7_CRM_Actuales/#que-tipo-de-aplicacion-crm-necesita-mi-empresa","title":"\u00bfQu\u00e9 tipo de aplicaci\u00f3n CRM necesita mi empresa?","text":"<p>Depende del uso que vayas a darle, de las necesidades de tu negocio y del tama\u00f1o de tu empresa.</p> <p>Compara funciones, precios y caracter\u00edsticas de los distintos softwares disponibles y elige el que cumpla con todos tus requisitos.</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_8_Terminolog%C3%ADa/","title":"1.8. Terminolog\u00eda ERP","text":"<p>Este glosario recoge los t\u00e9rminos m\u00e1s utilizados en el \u00e1mbito de los sistemas ERP (Enterprise Resource Planning), traducidos al castellano para facilitar su comprensi\u00f3n.</p>"},{"location":"1_8_Terminolog%C3%ADa/#glosario-de-terminos","title":"Glosario de t\u00e9rminos","text":"<ul> <li>Aplicaci\u00f3n de terceros: Software que no ha sido desarrollado por el proveedor del ERP.  </li> <li>An\u00e1lisis ABC: Clasificaci\u00f3n de art\u00edculos seg\u00fan su valor y frecuencia de uso.  </li> <li>Periodo contable: Intervalo de tiempo que incluye todas las transacciones financieras (normalmente 12 meses).  </li> <li>Cuentas por pagar: Saldos pendientes que la empresa debe a sus proveedores.  </li> <li>Cuentas por cobrar: Saldos pendientes que los clientes deben a la empresa.  </li> <li>Costo real: Valor de una transacci\u00f3n seg\u00fan el coste pagado al proveedor o empleado.  </li> <li>Planificaci\u00f3n avanzada (APS): M\u00e9todo que equilibra capacidad y materiales para optimizar la producci\u00f3n.  </li> <li>Antig\u00fcedad (Aging): D\u00edas transcurridos desde la emisi\u00f3n de una factura.  </li> <li>Asignaci\u00f3n: Reserva de materiales para una orden espec\u00edfica.  </li> <li>API (Interfaz de programaci\u00f3n de aplicaciones): Funciones del ERP accesibles para desarrolladores.  </li> <li>Montaje bajo pedido (ATO): Estrategia de producci\u00f3n r\u00e1pida de productos personalizados.  </li> <li>Disponible para prometer (ATP): Fecha estimada de disponibilidad de producto para env\u00edo.  </li> <li>B2B / B2C: Venta entre empresas / Venta a consumidores.  </li> <li>Backflush: Emisi\u00f3n autom\u00e1tica de materiales desde inventario a una orden de trabajo.  </li> <li>Pedido pendiente (Backorder): Pedido que no puede completarse por falta de stock.  </li> <li>C\u00f3digo de barras: Representaci\u00f3n gr\u00e1fica de datos legibles por esc\u00e1ner.  </li> <li>Inteligencia empresarial (BI): Herramientas para visualizar indicadores clave (KPIs).  </li> <li>Carta de porte (BOL): Detalle de lo que se env\u00eda, entregado al transportista.  </li> <li>Lista de materiales (BOM): Materias primas necesarias para fabricar un producto.  </li> <li>Cuello de botella: Recurso cuya capacidad limita el rendimiento global.  </li> <li>Fabricar para stock: Producci\u00f3n basada en previsiones de demanda.  </li> <li>Carga indirecta (Burden): Costes no relacionados directamente con materiales o mano de obra.  </li> <li>Capacidad: Tiempo disponible en un recurso.  </li> <li>Planificaci\u00f3n de necesidades de capacidad (CRP): C\u00e1lculo de capacidad necesaria para la demanda.  </li> <li>Nube (Cloud): M\u00e9todo de despliegue que usa servidores remotos.  </li> <li>CPQ (Configurar, Precio, Cotizar): Software para configurar productos y generar presupuestos.  </li> <li>Consumibles: Art\u00edculos que se gastan al recibirlos, sin pasar por inventario.  </li> <li>CRM (Gesti\u00f3n de relaciones con clientes): Software para gestionar interacciones con clientes.  </li> <li>Contaje c\u00edclico: Auditor\u00eda regular de inventario por muestreo.  </li> <li>Demanda: Art\u00edculos necesarios para cumplir pedidos.  </li> <li>Desglose (Drill Down): Acceso al detalle de los datos visualizados.  </li> <li>Env\u00edo directo (Drop Ship): Art\u00edculos enviados directamente al cliente desde el proveedor.  </li> <li>Comercio electr\u00f3nico: Transacciones de compra/venta por Internet.  </li> <li>EDI (Intercambio electr\u00f3nico de datos): Transferencia autom\u00e1tica de datos entre sistemas.  </li> <li>EFT (Transferencia electr\u00f3nica de fondos): Transferencia autom\u00e1tica de dinero entre bancos.  </li> <li>Ingenier\u00eda bajo pedido (ETO): Producci\u00f3n personalizada tras recibir el pedido.  </li> <li>ERP (Planificaci\u00f3n de recursos empresariales): Software que integra todas las \u00e1reas de la empresa.  </li> <li>Estimaci\u00f3n: C\u00e1lculo de coste y precio de venta de un art\u00edculo.  </li> <li>FIFO / LIFO: M\u00e9todos de valoraci\u00f3n de inventario (primero en entrar / \u00faltimo en entrar).  </li> <li>A\u00f1o fiscal: A\u00f1o definido por la empresa para informes financieros.  </li> <li>Activos fijos: Bienes necesarios para la producci\u00f3n que no generan liquidez inmediata.  </li> <li>Cantidad fija de pedido: Reposici\u00f3n autom\u00e1tica de una cantidad predefinida.  </li> <li>FOB (Libre a bordo): Punto en que se transfiere la propiedad del producto.  </li> <li>Previsi\u00f3n: Estimaci\u00f3n de demanda futura.  </li> <li>Error de previsi\u00f3n: Diferencia entre valor real y previsto.  </li> <li>Libro mayor (G/L): Registro de todas las transacciones financieras.  </li> <li>Implementaci\u00f3n: Configuraci\u00f3n del ERP y formaci\u00f3n del personal.  </li> <li>Estado de resultados: Informe de ingresos y gastos para determinar beneficios o p\u00e9rdidas.  </li> <li>Software integrado: Aplicaci\u00f3n que combina m\u00faltiples funciones.  </li> <li>Inventario: Lista de art\u00edculos disponibles con cantidad y valor.  </li> <li>Ajuste de inventario: Modificaci\u00f3n manual del inventario.  </li> <li>Factura: Documento que detalla productos/servicios y su valor.  </li> <li>Fecha de factura: Fecha de emisi\u00f3n de la factura.  </li> <li>Art\u00edculo: Unidad individual en inventario.  </li> <li>JIT (Justo a tiempo): M\u00e9todo para minimizar inventario.  </li> <li>Orden de trabajo: Autorizaci\u00f3n para producir una cantidad definida de un art\u00edculo.  </li> <li>Coste de orden de trabajo: Valor de materiales, mano de obra y otros costes asociados.  </li> <li>KPI (Indicador clave de rendimiento): M\u00e9trica que refleja el cumplimiento de objetivos.  </li> <li>Tiempo de entrega (Lead Time): Tiempo entre pedido y disponibilidad del producto.  </li> <li>Fabricaci\u00f3n ajustada (Lean): M\u00e9todo que busca reducir desperdicios.  </li> <li>N\u00famero de lote: Identificador de una cantidad espec\u00edfica de material.  </li> <li>Fabricar bajo pedido (MTO): Producci\u00f3n que comienza tras recibir el pedido.  </li> <li>Fabricar para stock (MTS): Producci\u00f3n basada en previsiones.  </li> <li>Programa maestro de producci\u00f3n (MPS): Planificaci\u00f3n de producci\u00f3n por periodo.  </li> <li>MRP / MRP II: Planificaci\u00f3n de necesidades de materiales / Recursos de manufactura.  </li> <li>NAICS: Clasificaci\u00f3n industrial est\u00e1ndar en EE. UU.  </li> <li>Subcontrataci\u00f3n: Uso de terceros para realizar tareas.  </li> <li>Costes indirectos (Overhead): Costes generales no ligados a producci\u00f3n.  </li> <li>Albar\u00e1n: Lista de art\u00edculos incluidos en un env\u00edo.  </li> <li>N\u00famero de parte: Identificador \u00fanico de cada art\u00edculo.  </li> <li>Recuento f\u00edsico: Conteo manual de todo el inventario.  </li> <li>Compra: Proceso de adquisici\u00f3n de materiales o servicios.  </li> <li>Orden de compra: Autorizaci\u00f3n para adquirir productos o servicios.  </li> <li>Solicitud de compra: Petici\u00f3n de aprobaci\u00f3n para comprar.  </li> <li>Cotizaci\u00f3n: Lista de productos/servicios con precios.  </li> <li>Materia prima: Materiales utilizados en la fabricaci\u00f3n.  </li> <li>Recepci\u00f3n: Proceso de entrada de mercanc\u00eda.  </li> <li>Nivel de reposici\u00f3n: Punto que activa una nueva compra.  </li> <li>Reposici\u00f3n: Reabastecimiento de inventario.  </li> <li>Autorizaci\u00f3n de devoluci\u00f3n (RMA): Permiso para devolver productos.  </li> <li>Ruta de producci\u00f3n: Secuencia de pasos para fabricar un art\u00edculo.  </li> <li>Stock de seguridad: Reserva para imprevistos.  </li> <li>Pedido de venta: Autorizaci\u00f3n del cliente para recibir productos.  </li> <li>Planificaci\u00f3n: Organizaci\u00f3n de pedidos para optimizar recursos.  </li> <li>SCM (Gesti\u00f3n de la cadena de suministro): Control de todas las actividades log\u00edsticas.  </li> <li>M\u00e9todo de env\u00edo (Ship Via): Forma de transporte del producto.  </li> <li>Env\u00edo: Proceso de documentaci\u00f3n y entrega de productos.  </li> <li>Licencia de software: Autorizaci\u00f3n para usar un programa.  </li> <li>C\u00f3digo fuente: Propiedad intelectual del software.  </li> <li>Repuestos: Art\u00edculos en stock para mantenimiento.  </li> <li>Proveedor: Organizaci\u00f3n externa que abastece inventario.  </li> <li>Cadena de suministro: Red de actividades desde proveedor hasta cliente final.  </li> <li>Administrador de sistemas: Responsable de configuraci\u00f3n y mantenimiento del ERP.  </li> <li>Hoja de ruta (Traveler): Documento que acompa\u00f1a al producto en producci\u00f3n.  </li> <li>Campo definido por el usuario (UDF): Campo personalizable en el ERP.  </li> <li>Interfaz de usuario (UI): Forma en que el usuario interact\u00faa con el sistema.  </li> <li>Unidad de medida (UOM): Forma de contar un art\u00edculo (unidad, kg, cm\u2026).  </li> <li>Actualizaci\u00f3n: Reemplazo de la versi\u00f3n actual del software por una m\u00e1s reciente.  </li> <li>Usuario: Persona autorizada para acceder al ERP.  </li> <li>Inventario gestionado por proveedor: Stock controlado por el proveedor.  </li> <li>Almac\u00e9n: Lugar donde se guarda inventario.  </li> <li>Trabajo en curso: Art\u00edculos en proceso de producci\u00f3n.</li> </ul> <p>_Licenciado bajo la [Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.</p>"},{"location":"1_intro/","title":"Introducci\u00f3n a Odoo","text":"<p>Estos apuntes son para desarrollar para Odoo en el m\u00f3dulo SGE de DAM. Muchas instrucciones est\u00e1n adaptadas para el funcionamiento de Odoo en un entorno de aprendizaje.</p> <p>El objetivo es desarrollar m\u00f3dulos para ampliar las funcionalidades del ERP seg\u00fan las necesidades de la empresa.</p> <p>Odoo es un ERP completo hecho en software libre. Adem\u00e1s, es un framework de programaci\u00f3n RAD, puede ser considerado un framework web full stack con un prop\u00f3sito empresarial, pero con la posibilidad de hacer cualquier aplicaci\u00f3n web. El ERP que encontramos cuando lo instalamos aprovecha este framework para mostrar un backoffice listo para ser utilizado en cualquier empresa de cualquier tama\u00f1o. Al tener coste 0 (la versi\u00f3n community) no hay coste inicial de implantaci\u00f3n.</p> <p>Por estos motivos es ideal para la ense\u00f1anza y muchas empresas lo han adoptado frente a las famosas soluciones privativas y muy caras.</p>"},{"location":"2_1_InstalarOdoo/","title":"Instalar <code>Odoo</code>","text":"<p><code>Odoo</code> puede instalarse en cualquier sistema operativo. Sin embargo, se desarrolla pensando en Ubuntu o Debian y es el sistema en el que vamos a trabajar.</p> <p><code>Odoo</code>, en esencia, es un servidor web hecho en Python que se conecta con una base de datos PostgreSQL. Hay muchas maneras de instalar <code>Odoo</code>, desde las m\u00e1s avanzadas, que son descargar por git el repositorio y hacer que arranque al inicio, hasta las m\u00e1s simples, que son desplegar un docker con todo funcionando.</p>"},{"location":"2_1_InstalarOdoo/#opciones-para-la-instalacion-de-odoo","title":"Opciones para la instalaci\u00f3n de <code>Odoo</code>","text":"<p>Cada empresa tiene unas necesidades y cada necesidad se puede cubrir de diferente forma.</p> <p>Para el caso de Odoo tenemos diferentes formas de instalarlo, o en un servidor dedicado o mediante virtualizaci\u00f3n o utilizando las diferentes opciones que nos encontramos en la nube.</p> <p>Vamos a hacer una comparativa no rigurosa de las distintas opciones:</p> Lugar Tecnolog\u00eda Prop\u00f3sito Servidor local Directamente instalado en Ubuntu Server En funci\u00f3n de la potencia, capacidad y seguridad del servidor, puede servir para cualquier empresa. Instalar directamente da menos flexibilidad, pero aprovecha toda la potencia de la m\u00e1quina y la compatibilidad con todo. La empresa tiene control total de los datos y es responsable de la seguridad. Tambi\u00e9n controla los gastos. Es poco escalable y migrable. Servidor local En Docker, Proxmox o VirtualBox Igual que la opci\u00f3n anterior, pero con m\u00e1s posibilidades de ser escalable y migrable. Permite compartir mejor los recursos de la m\u00e1quina con otros servicios. En la nube VPS No es necesario pensar en la seguridad f\u00edsica, pero s\u00ed en la l\u00f3gica. Es escalable si el proveedor permite ampliar la m\u00e1quina. El precio suele estar predeterminado, pero a la larga es m\u00e1s caro que los servidores propios. En el caso de proveedores principales como AWS, Azure, Google Cloud... el precio es por uso y es peligroso no controlarlo. En la nube SAAS (Odoo.sh) Ya no es necesario preocuparse tanto por la seguridad l\u00f3gica, solo por los usuarios de Odoo. Es escalable, pero mucho m\u00e1s caro. No es personalizable. En la nube PAAS (Render, Railway, Fly.io...) Cada servicio tiene sus caracter\u00edsticas, pero combinan las ventajas de Docker en cuanto a personalizaci\u00f3n con una interfaz muy c\u00f3moda para DevOps y CI/CD. El despliegue se trata como si fuera c\u00f3digo. <p>La respuesta sigue sin ser clara. Cada empresa tiene sus posibilidades y necesidades. </p> <p>Una microempresa con pocos ordenadores y solo necesidad de intranet puede instalar en un Docker en un servidor de bajo consumo con copias de seguridad peri\u00f3dicas. Una empresa peque\u00f1a puede desplegar en VPS o PAAS con precios predefinidos y controlados e ir aumentando seg\u00fan lo necesite. </p> <p>Una empresa m\u00e1s grande puede optar por nubes m\u00e1s de bajo nivel (IAAS) o por una instalaci\u00f3n on-premise m\u00e1s seria con alta disponibilidad en la propia empresa. </p> <p>Un SAAS puede ser \u00fatil para empresas que no necesitan ninguna personalizaci\u00f3n. </p> <p>Si el negocio es ofrecer el propio servicio de Odoo, se puede optar por contratar un IAAS y, sobre \u00e9l, dar un servicio SAAS con personalizaciones a medida y cobrar por el servicio y por las personalizaciones.</p> <p>Si estamos en una empresa que no puede depender de tener o no red por el sistema productivo, entonces eliminaremos todas las opciones de la nube.</p>"},{"location":"2_1_InstalarOdoo/#enlaces","title":"Enlaces","text":"<ul> <li>Manual technical training Odoo</li> <li>V\u00eddeo de instalar Odoo manualmente</li> <li>V\u00eddeo de configurar Odoo como servicio</li> <li>V\u00eddeo de Copias de seguridad</li> </ul>"},{"location":"2_2_InstalarDocker/","title":"Instalar con Docker","text":"<p>Revisa siempre la documentaci\u00f3n oficial, ah\u00ed tendr\u00e1s los \u00faltimos cambios</p> <p>Documentaci\u00f3n oficial de Odoo funcionando bajo docker</p> <p>Desplegar <code>Odoo</code> con Docker permite instalar y gestionar el sistema de manera m\u00e1s sencilla, sin necesidad de configurar manualmente dependencias o bases de datos. Docker encapsula <code>Odoo</code> en un contenedor, que es como una caja autosuficiente con todo lo necesario para funcionar, haciendo que sea m\u00e1s f\u00e1cil de ejecutar en cualquier servidor u ordenador sin problemas de compatibilidad. Esto tambi\u00e9n facilita la creaci\u00f3n de entornos de desarrollo y producci\u00f3n consistentes, permite actualizaciones y pruebas sin riesgo de afectar el sistema principal y optimiza el uso de recursos. Adem\u00e1s, con Docker es posible desplegar <code>Odoo</code> junto con otros servicios necesarios, como PostgreSQL, con un solo archivo de configuraci\u00f3n.</p> <p>Nota</p> <p>En clase trabajaremos finalmente con Docker Compose, el texto siguiente sirve para entender la configuraci\u00f3n final, pero no es necesario hacerlos en el trabajo diario. La configuraci\u00f3n definitiva la haremos con Docker Compose.</p>"},{"location":"2_2_InstalarDocker/#instalacion-de-docker","title":"Instalaci\u00f3n de docker","text":"<p>https://docs.docker.com/engine/install/ubuntu/</p> <p>Si queremos GUI, podemos utilizar Docker Desktop para contenedores locales o Portainer para gestionar tambi\u00e9n contenedores remotos.</p> <p>Se puede instalar Docker de muchas maneras, pero vamos a hacerlo de la manera m\u00e1s recomendable para nuestro caso, que es la de la web oficial:</p> <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n\n# Instalaci\u00f3n\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Probar docker\nsudo docker run hello-world\n\n# Gestionar docker sin ser root:\nsudo usermod -aG docker $USER\n</code></pre>"},{"location":"2_2_InstalarDocker/#instalar-un-docker-con-odoo","title":"Instalar un docker con <code>Odoo</code>","text":"<p>En Docker es muy sencillo desplegar <code>Odoo</code>, aunque debemos tener en cuenta que para que Odoo funcione necesitamos tener instada la base de datos PostgreSQL. As\u00ed pues debemos:</p> <ol> <li>Instalamos PosggreSQL y la ponemos en marcha</li> <li>Instalamos *Odoo, le dicemos quien es la base de datos y lo ponemos en marcha.</li> </ol> <p>Para hacer esto,  tan solo hace falta estos comandos:</p> <p>Primero, se inicia un docker que contenga que inicie un servicio de la base de datos PostgreSQL</p> <pre><code>docker run -d -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo -e POSTGRES_DB=postgres --name db postgres:15\n</code></pre> <p>Donde: </p> <ul> <li> <p><code>docker run</code>: Inicia un nuevo contenedor.</p> </li> <li> <p><code>-d</code>: Ejecuta el contenedor en segundo plano (modo detached).</p> </li> <li> <p><code>-e POSTGRES_USER=odoo</code>: Define la variable de entorno <code>POSTGRES_USER</code>, que crea un usuario llamado <code>odoo</code>.</p> </li> <li> <p><code>-e POSTGRES_PASSWORD=odoo</code>: Define la contrase\u00f1a del usuario <code>odoo</code>.</p> </li> <li> <p><code>-e POSTGRES_DB=postgres</code>: Crea una base de datos llamada <code>postgres</code>.</p> </li> <li> <p><code>--name db</code>: Asigna el nombre <code>db</code> al contenedor, lo que facilita su referencia desde otros contenedores (como el de Odoo).</p> </li> <li> <p><code>postgres:15</code>: Especifica la imagen de PostgreSQL versi\u00f3n 15.</p> </li> </ul> <p>Despu\u00e9s se inicia una instancia de Odoo utilizando la base de datos anterior</p> <pre><code>docker run -p 8069:8069 --name odoo --link db:db -t odoo\n</code></pre> <p>Donde:</p> <ul> <li> <p><code>docker run</code>: Inicia un nuevo contenedor a partir de una imagen.</p> </li> <li> <p><code>-p 8069:8069</code>: Mapea el puerto 8069 del contenedor al puerto 8069 del host. Esto permite acceder a Odoo desde el navegador en http://localhost:8069.</p> </li> <li> <p><code>--name odoo</code>: Asigna el nombre odoo al contenedor. Esto facilita su referencia en otros comandos.</p> </li> <li> <p><code>--link db:db</code>: Crea un enlace entre este contenedor (odoo) y otro contenedor llamado db. El alias db:db significa que dentro del contenedor de Odoo, podr\u00e1 acceder al contenedor de base de datos usando el nombre db. Observar que el alias <code>db</code> hace referencia a la base de datos iniciada anteriormente.</p> </li> <li> <p><code>-t</code>: Asigna un pseudo-TTY, \u00fatil para ver la salida del contenedor en la terminal. A menudo se combina con -i (-it) para interacci\u00f3n.</p> </li> <li> <p><code>odoo</code>: Es el nombre de la imagen de Docker que se usar\u00e1 para crear el contenedor. Puede ser una imagen oficial de Odoo o una personalizada</p> </li> </ul> <p>Tip</p> <p>Se podr\u00eda iniciar tantos Odoo como se quiera cambiando el nombre del contenedor. Dos contenedores no pueden tener el mismo nombre.</p> <p>Por ejemplo</p> <pre><code>docker run -d -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo -e POSTGRES_DB=postgres --name db-demo postgres:latest\ndocker run -p 8069:8069 --name odoo-demo --link db-demo:db -t odoo\n</code></pre> <p>Con estos comandos iniciamos contenedores llamados db-demo y odoo-demo respectivamente</p> <p>Y para finalizar e iniciar la instancia de Odoo, si estamos dentro de la ejecuci\u00f3n del comando que inici\u00f3 el docker, entonces pulsamos <code>Ctrl+X</code>, y si no estamos acoplados a la ejecuci\u00f3n: </p> <pre><code>docker stop odoo\n</code></pre> <p>Si no estamos acoplasdos o attached podemos hacer </p> <pre><code>docker attach odoo\n</code></pre> <p>y veremos la salida de la ejecuci\u00f3n del docker </p> <p>Y para iniciar de nuevo el contenedor hacemos </p> <pre><code>docker start -a odoo\n</code></pre> <p>Si no queremos estar attached con la ejecuci\u00f3n del contenedor, no ponemos la <code>-a</code></p> <p>Recordar tambien, que podemos ejecutar haciendo </p> <pre><code>docker run -d\n</code></pre> <p>pero en este caso, el <code>run</code> reinicializa todo frente al <code>start</code> que mantiene el estado de la \u00faltima ejecuci\u00f3n. </p> <p>Para acceder solo hay que ir a la direcci\u00f3n del anfitri\u00f3n:8069 (http://localhost:8069/), o sea, que el servicio de Odoo es accesible a trav\u00e9s del puerto 8069. En el comando se puede ver como se han redireccionado los puertos con <code>-p 8069:8069</code></p> Primera imagen al acceder al Odoo."},{"location":"2_2_InstalarDocker/#creacion-de-modulos-de-odoo-usando-docker","title":"Creaci\u00f3n de m\u00f3dulos de Odoo usando Docker","text":"<p>Nuestro objetivo final, ser\u00e1 el de crear m\u00f3dulos nuevos o heredados de los ya existente con nuestra propias necesidades.</p> <p>El problema de esta ejecuci\u00f3n es que si perdemos el contenedor, perdemos todo lo que hemos hecho en el. Por lo tanto la soluci\u00f3n ser\u00e1 enlazar carpeta locales con carpetas (o vol\u00famenes) del contenedor, de forma que la informaci\u00f3n no se encontrar\u00e1 f\u00edsicamente en el contenedor, si no en la carpeta que elijamos.</p> <p>As\u00ed pues, para crear nuestros m\u00f3dulos podemos generarlos en un directorio fuera del contenedor y ejecutarlo de esta manera:</p> <pre><code>docker run -v odoo-data:/var/lib/odoo -d -p 8069:8069 --name odoo --link db:db -t odoo\n</code></pre> <p>y lo mismo deber\u00edamos haber hecho con el contenedor de PostgreSQL:</p> <pre><code>docker run -d -v odoo-db:/var/lib/postgresql/data -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo -e POSTGRES_DB=postgres --name db postgres:15\n</code></pre> <p>Mientras estamos desarrollando nuevos m\u00f3dulos, necesitaremos reiniciar el servicio y arrancarlo actualizando un m\u00f3dulo. Primero debemos parar el contenedor, despu\u00e9s iniciarlo indicando que queremos entrar a la consola y finalmente actualizar el m\u00f3dulo.</p> <pre><code>docker stop odoo\ndocker start -a odoo\ndocker exec odoo odoo --config /etc/odoo/odoo.conf -u nombremodulo -d nombasededatos -r odoo -w odoo --db_host 172.17.0.2 --db_port 5432\n</code></pre>"},{"location":"2_2_InstalarDocker/#mejorando-la-creacion-de-modulos","title":"Mejorando la creaci\u00f3n de m\u00f3dulos","text":"<p>Como se puede ver, el \u00faltimo comando es un poco complicado. Por tanto, vamos a hacerlo de forma m\u00e1s ordenada. Para ello necesitamos un archivo propio de configuraci\u00f3n de <code>Odoo</code> al que llamaremos odoo.conf. Podemos utilizar esta plantilla:</p> <pre><code>docker exec odoo cat /etc/odoo/odoo.conf &gt; odoo.conf\n</code></pre> <p>Lo que hemos hecho es copiar el archivo que tiene el contenedor por defecto. Si lo analizamos, no indica correctamente d\u00f3nde est\u00e1 la base de datos, ya que esa informaci\u00f3n la pasamos con el par\u00e1metro --link del docker run. Nosotros tenemos que crear un directorio, poner dentro el archivo, editarlo y a\u00f1adir esta informaci\u00f3n:</p> <pre><code>db_user = odoo\ndb_password = odoo\ndb_host = 172.17.0.2\ndb_port = 5432\n</code></pre> <p>Ahora ya podemos arrancar el contenedor con todo:</p> <pre><code>docker stop odoo\ndocker run --volumes-from odoo -v /home/jose/modules/:/mnt/extra-addons -v /home/jose/config/:/etc/odoo -p 8069:8069 --name odoo2 --link db:db -t odoo\n</code></pre> <p>Observamos que tenemos un directorio para nuestros m\u00f3dulos, otro con el archivo de configuraci\u00f3n, la redirecci\u00f3n del puerto, el nombre del nuevo m\u00f3dulo, el enlace a la base de datos y el tipo de contenedor.</p> <p>Por \u00faltimo, mientras tenemos en marcha el servicio, en otra terminal podemos ejecutar:</p> <pre><code>docker exec odoo odoo -u nombremodulo -d nombasededatos\n</code></pre> <p>Aun con esta mejora, no va a ser una tarea sencilla la gesti\u00f3n de nuestro sistema, por lo que se antoja imprescindible buscar nuevas soluciones</p>"},{"location":"2_2_InstalarDocker/#usando-docker-compose","title":"Usando <code>Docker Compose</code>","text":"<p>El m\u00e9todo anterior supone la ejecuci\u00f3n de un docker run/start muy complejo por el motivo de que se debe ejecutar cada contenedor con una \u00fanica l\u00ednea, y adem\u00e1s tenemos que iniciar los servicios de uno en uno en orden. Esto es un trabajo tedioso, que se puede automatizar y adem\u00e1s es propenso a que tengamos errores. </p> <p>Para evitar errores, podemos usar un docker compose que tiene una configuraci\u00f3n como la que sigue:</p> <pre><code>services:\n  odoo:\n    container_name: odoo\n    image: odoo:18.0\n    depends_on:\n      - db\n    ports:\n      - \"8069:8069\"\n    volumes:\n      - odoo-web-data:/var/lib/odoo\n      - ./config:/etc/odoo\n      - ./addons:/mnt/extra-addons\n    environment:\n      - HOST=db\n      - USER=odoo\n      - PASSWORD=odoo\n    command: --dev=all\n    tty: true\n\n  db:\n    container_name: postgresql\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=odoo\n      - POSTGRES_PASSWORD=odoo\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - odoo-db-data:/var/lib/postgresql/data\n\nvolumes:\n  odoo-web-data:\n  odoo-db-data:\n</code></pre> <p>Observamos que declaramos dos servicios y que odoo depende de db. Tambi\u00e9n hay que indicar qu\u00e9 red utilizan y el resto de datos que normalmente ponemos en el run.</p> <p>Tambi\u00e9n podemos ver que hay unas secciones de volumes donde por ejemplo, para <code>odoo</code> tenemos 3 vol\u00famenes o carpetas que el contenedor tiene redireccionadas a carpetas locales:</p> <ul> <li><code>odoo-web-data</code> ser\u00e1 un volumen en nuestra m\u00e1quina que se crea de forma autom\u00e1tica y que reemplaza la carpeta del contenedor <code>/var/lib/odoo</code></li> <li><code>./config</code> que quiere decir tendremos una subcarpeta donde estar\u00e1 la configuraci\u00f3n de odoo, en vez de estar dentro del contenedor en <code>/etc/odoo</code></li> <li><code>./addons</code> que contienen los m\u00f3dulos (oficiales y los que crearemos) y lo tendremos en local en vez de en el contenedor en <code>/mnt/extra-addons</code></li> </ul> <p>Por otra parte, dentro de esta configuraci\u00f3n tambi\u00e9n es interesante que hemos preparado Odoo para poder trabajar en modo desarrollador, esto es gracias al comando <code>--dev=all</code> que veremos posteriormente con m\u00e1s detalle. Una vez vistas estas puntualizaciones, para montar el sistema: </p> <ol> <li>Creamos una carpeta con el nombre que queramos, por ejemplo <code>odoo-compose</code>.</li> <li>Dentro de esta carpeta creamos un archivo llamado docker-compose.yml con el contenido descrito anteriormente.</li> <li>Desde el terminal, nos ubicamos en la carpeta comentada y solo hay que ejecutar cada vez:</li> </ol> <pre><code>docker compose up -d\n</code></pre> <p>En el caso definido en el fichero de configuraci\u00f3n docker-compose.yml, necesitamos un archivo <code>odoo.conf</code> que podemos extraer de un contenedor sin el volumen de <code>./config</code>.</p> <p>Este fichero de configuraci\u00f3n por defecto, lo podemos obtener por internet, o seguimos los siguientes pasos donde creamos un docker con odoo, le extraemos el fichero de configuraci\u00f3n y lo paramos y eliminamos:</p> <pre><code>docker run -d --name odoo-temp odoo:18.0\ndocker cp odoo-temp:/etc/odoo/odoo.conf ./config/odoo.conf\ndocker rm -f odoo-temp\n</code></pre> <p>Veamos la secuencia de creaci\u00f3n del sistema y copia del fichero de configuraci\u00f3n por defecto:</p> Obtenci\u00f3n de fichero de configuraci\u00f3n odoo.conf. <p>Hemos asociado un volumen a las carpetas de los dos contenedores y por otra parte tenemos en la carpeta del docker compose los directorios <code>config</code> y <code>addons</code>. Esto permite compartir el c\u00f3digo y la configuraci\u00f3n de Odoo sin compartir demasiados archivos o los datos privados de la base de datos. Para compartir solo hay que comprimir o subir a <code>Git</code> la carpeta contenedora de los archivos y carpetas que estamos creando.</p> <p>Si queremos entrar en la base de datos PostgreSQL para hacer cosas manualmente, podemos ejecutar:</p> <pre><code>docker exec -ti postgresql psql -U odoo -d postgres\n</code></pre> <p>Ejecutamos el comando psql de forma interactiva en la base de datos <code>postgres</code> y con el usuario <code>odoo</code>.</p> Verificando que la base de datos esta en marcha. <p>En ocasiones es interesante revisar logs por si tenemos alg\u00fan problema. Para ver los logs podemos hacer si no estamos attached con la ejecuci\u00f3n del docker, tambi\u00e9n podemos hacer :</p> <pre><code>docker logs odoo -f\n</code></pre> <p>Con este comando filtramos solo los mensajes de logs de odoo. </p> <p>Tip</p> <p>Los logs se ven en color gracias a poner <code>tty:true</code> en el archivo de configuraci\u00f3n.</p>"},{"location":"2_2_InstalarDocker/#activando-odoo-en-modo-desarrollador","title":"Activando <code>Odoo</code> en Modo desarrollador","text":"<p>Como se puede ver, hemos configurado un directorio para los m\u00f3dulos en <code>./addons</code>. En este directorio haremos los <code>scaffold</code>. </p> <p>Nota</p> <p>Un scaffold es una herramienta que te permite generar autom\u00e1ticamente la estructura b\u00e1sica de un m\u00f3dulo personalizado. Es como un \"esqueleto\" inicial que incluye todos los archivos y carpetas necesarios para empezar a desarrollar un m\u00f3dulo</p> <p>Adem\u00e1s, hemos a\u00f1adido al comando <code>--dev=all</code> a la ejecuci\u00f3n de <code>docker</code>. Esto simplifica mucho el desarrollo, ya que muchos de los cambios provocan un reinicio del servidor y actualizaci\u00f3n de algunas partes de los m\u00f3dulos.</p> <p>La opci\u00f3n <code>--dev &lt;feature,feature,...,feature&gt;</code> en Odoo permite activar varias caracter\u00edsticas \u00fatiles para el desarrollo. Esta opci\u00f3n no debe usarse en producci\u00f3n, ya que est\u00e1 pensada exclusivamente para facilitar la tarea de los desarrolladores. A continuaci\u00f3n, se explican las opciones disponibles:</p> <ul> <li>all: Activa todas las funcionalidades de desarrollo descritas a continuaci\u00f3n.</li> <li>xml: Carga las plantillas QWeb directamente desde los archivos XML en lugar de la base de datos. Si una plantilla se modifica en la base de datos, no se volver\u00e1 a cargar desde el archivo XML hasta la pr\u00f3xima actualizaci\u00f3n o reinicio. Adem\u00e1s, las plantillas no se traducen cuando se usa esta opci\u00f3n.</li> <li>reload: Reinicia el servidor autom\u00e1ticamente cuando se detecta un cambio en un archivo Python.</li> <li>qweb: Permite interrumpir la ejecuci\u00f3n de una plantilla QWeb si un nodo contiene <code>t-debug=\"debugger\"</code>, lo que facilita la depuraci\u00f3n.</li> <li>(i)p(u)db: Activa un depurador de Python (como <code>pdb</code>, <code>ipdb</code> o <code>pudb</code>) cuando se produce un error inesperado, antes de registrarlo en los logs y devolverlo.</li> <li>werkzeug: Muestra la traza completa del error en la p\u00e1gina web cuando se produce una excepci\u00f3n, algo muy \u00fatil para identificar problemas en el c\u00f3digo.</li> </ul> <p>Esta opci\u00f3n es muy \u00fatil durante el desarrollo, ya que facilita la depuraci\u00f3n de c\u00f3digo, la recarga en caliente de archivos y la revisi\u00f3n de errores de manera m\u00e1s visual. </p> <p>Sin embargo, est\u00e1 limitada en ciertos aspectos. Por ejemplo, vuelve a ejecutar el Python pero no crea nuevos modelos o campos. Tampoco actualiza todos los XML, solo el contenido de las vistas en <code>ir.ui.view</code> que ya se han registrado actualizando el m\u00f3dulo. Por tanto, no siempre sirve y menos en las etapas iniciales de la creaci\u00f3n de m\u00f3dulos.</p> <p>Como el comando con <code>--dev=all</code> no actualiza la base de datos, la creaci\u00f3n de nuevas vistas, nuevos modelos o campos no se actualizar\u00e1 y dar\u00e1 errores. Una soluci\u00f3n es a\u00f1adir al comando:</p> <pre><code>command: [\"--dev=all\", \"-u\", \"modulo\", \"-d\", \"basededatos\"]\n</code></pre> <p>Pero solo cuando ya existe la base de datos y el m\u00f3dulo est\u00e1 instalado. En caso de arrancar docker con este comando por primera vez, se crear\u00e1 la base de datos con una configuraci\u00f3n est\u00e1ndar que no nos interesa, en ingl\u00e9s, sin datos de demo y con usuario/contrase\u00f1a admin/admin.</p> <p>Adem\u00e1s, solo se ejecutar\u00e1 cuando arranquemos Docker, por lo tanto, hay que hacer un <code>docker-compose down</code> y volver a arrancar los contenedores de nuevo. </p> <p>Configuraci\u00f3n de VSCode</p> <p>Para no tener que estar reiniciando <code>docker</code> desde la l\u00ednea de comando, podemos a\u00f1adir a <code>Visual Studio Code</code> una extensi\u00f3n como VS Code Action Buttons. Una vez instalada esta extensi\u00f3n, vamos la configuraci\u00f3n de la extensi\u00f3n y completamos el <code>json</code>  de configuraci\u00f3n as\u00ed:</p> <pre><code>\"commands\": [\n{\n     \"name\": \"$(triangle-right) Run Odoo\",\n     \"color\": \"purple\",\n     \"singleInstance\": true,\n     \"command\": \"docker-compose down &amp;&amp; docker-compose up -d &amp;&amp; docker logs odoo -f\"\n},\n{\n     \"name\": \"$(triangle-right) Rerun Odoo\",\n     \"color\": \"purple\",\n     \"singleInstance\": true,\n     \"command\": \"docker-compose restart odoo &amp;&amp; docker logs odoo -f\"\n}\n],\n</code></pre> <p>El primer comando lo reinicia todo, tanto la base de datos como Odoo y elimina los contenedores para recrearlos. </p> <p>Esto puede solucionar algunos problemas. Pero en principio, el segundo reinicia solo el contenedor Odoo sin recrearlo. Es m\u00e1s r\u00e1pido y tambi\u00e9n actualiza la base de datos. El comando se puede utilizar en una terminal si no queremos hacer los botones o estamos en un entorno sin interfaz gr\u00e1fica.</p>"},{"location":"2_2_InstalarDocker/#creacion-de-un-nuevo-modulo","title":"Creaci\u00f3n de un nuevo m\u00f3dulo","text":"<p>Uno de nuestros objetivos en el curso ser\u00e1 el de dotar de nuevas funcionalidades personalizadas a el ERP base que ofrece Odoo, por lo tanto deberemos aprender a crear nuevos m\u00f3dulos.</p> <p>Veamos de forma sencilla c\u00f3mo crear m\u00f3dulos nuevos y posteriormente profundizaremos durante el curso:</p> <p>Para crear un m\u00f3udulo ejecutamos hacemos un scaffold que hemos comentado antes, damos un nombre al m\u00f3dulo (en este caso pruebas) y le decimos que los vamos a ubicar en la carpeta <code>extra-addons</code> del contenedor que se encuentra redireccionada a la carpeta <code>./addons</code> que tenemos en la uticaci\u00f3n del docker-compose</p> <pre><code>docker exec -ti odoo odoo scaffold pruebas /mnt/extra-addons\n</code></pre> <p>Posteriormente es aconsejable dar permisos para poder acceder a esta carpeta. Debemos tener en cuenta siempre los permisos para que tanto el proceso docker que se ejecuta como <code>root</code> como nosotros con nuestro usuario podemos acceder a la carpeta.</p> <pre><code>docker exec -ti odoo chmod 777 -R /mnt/extra-addons/pruebas\n</code></pre> <p>y podemos comprobar como se ha creado una carpeta <code>pruebas</code> que contiene la estructura de nuestro nuevo m\u00f3dulo</p> Creaci\u00f3n de m\u00f3dulo de pruebas. <p>Tip</p> <p>Si queremos ejecutar el <code>shell</code> de Odoo podemos ejecutar el comando:</p> <pre><code>docker compose exec odoo odoo shell -d pruebas --db_host db --db_password odoo\n</code></pre> <p>Aqu\u00ed estamos diciendo que ejecute en el contenedor odoo el comando odoo especificando la base de datos y el host y password de postgres. Es necesario especificar la base de datos porque Docker Compose crea m\u00faltiples contenedores Docker bas\u00e1ndose en la configuraci\u00f3n del archivo <code>docker-compose.yml</code>. En este caso, hay varios contenedores en ejecuci\u00f3n, uno que corre Odoo, otro que corre PostgreSQL, y posiblemente otros m\u00e1s.</p> <p>Por \u00faltimo, debemos tener en cuenta que cada contenedor es una m\u00e1quina virtual separada con su propia direcci\u00f3n IP, por lo que si ejecutas este comando:</p> <pre><code>docker exec -it odoo_odoo_1 bash -c \"odoo shell -d postgres\"\n</code></pre> <p>Odoo intentar\u00e1 conectarse a la base de datos usando <code>localhost</code>, pero en este contexto, <code>localhost</code> se refiere al propio contenedor de Odoo, no al de PostgreSQL.</p> <p>Para solucionarlo, debes indicar expl\u00edcitamente el host de la base de datos y la contrase\u00f1a en el comando.</p> <p>Para ello, podemos ejecutar el siguiente comando docker que nos lista las IP de los contenedores que tenemos activos.</p> <pre><code>docker ps -q | xargs -n 1 docker inspect --format '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'\n</code></pre> Listando IPs de contenedores activos."},{"location":"2_2_InstalarDocker/#poner-en-produccion-con-docker","title":"Poner en producci\u00f3n con Docker","text":"<p>Si podemos dejar corriendo un Docker en un servidor con conexi\u00f3n a Internet y los puertos expuestos, ya estar\u00eda en producci\u00f3n. Sin embargo, esto supone varios problemas de seguridad y rendimiento.</p>"},{"location":"2_2_InstalarDocker/#docker-de-nginx","title":"Docker de Nginx","text":"<p>Podemos a\u00f1adir al archivo de Docker Compose la configuraci\u00f3n de un contenedor Nginx. Este implementar\u00e1 HTTPS y har\u00e1 de proxy a Odoo.</p> <p>Nginx</p> <p>Un servidor Nginx (pronunciado \"engine-x\") es un software de servidor web de alto rendimiento que tambi\u00e9n puede funcionar como:</p> <ul> <li>Servidor proxy inverso</li> <li>Balanceador de carga</li> <li>Servidor de correo (limitado)</li> <li>Proxy para protocolos como HTTP, HTTPS, SMTP, POP3 y IMAP</li> </ul> <p>Usaremos un archivo Dockerfile basado en la imagen oficial de Nginx, pero adaptada a nuestras necesidades. Los certificados se generan de manera autom\u00e1tica y est\u00e1n autofirmados.</p> <p>Aunque los navegadores muestran un aviso de error, la informaci\u00f3n sigue viajando de forma segura. Lo que ocurre es que no hay ninguna autoridad certificadora que haya validado el certificado (no es lo mismo un certificado autofirmado que ninguna protecci\u00f3n).</p> <p>Se podr\u00eda hacer un script con CertBot para utilizar Let's Encrypt y renovar el certificado cada tres meses.</p> <p>En Nginx, definimos la misma carpeta para HTTP y HTTPS, intentando simplificar al m\u00e1ximo la configuraci\u00f3n y automatizar la creaci\u00f3n tanto de la imagen como del contenedor con scripts.</p> <p>El primer paso es crear nuestra clave y certificado autofirmado dentro de un directorio nginx junto al resto de archivos de los dockers:</p> <pre><code>mkdir nginx\ncd nginx\nopenssl req -x509 -sha256 -nodes -newkey rsa:2048 -keyout ser.key -out ser.pem\n</code></pre> <p>Despu\u00e9s creamos un <code>Dockerfile</code> dentro de la misma carpeta. Este archivo servir\u00e1 para ejecutar ciertos comandos cada vez que se lance el docker:</p> <pre><code>FROM nginx\n\nRUN rm -f /etc/nginx/conf.d/default.conf\nCOPY nginx.conf /etc/nginx/conf.d/\nCOPY ser.key /etc/nginx/\nCOPY ser.pem /etc/nginx/\n\nEXPOSE 80 443\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre> <p>A\u00f1adiremos al <code>docker-compose.yml</code>:</p> <pre><code>  nginx:\n    build:\n      context: ./nginx\n      dockerfile: Dockerfile  # este campo es opcional si el archivo se llama as\u00ed\n    container_name: nginx\n    depends_on:\n      - odoo\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n</code></pre> <p>Falta crear el <code>nginx.conf</code> que ser\u00e1 la configuraci\u00f3n:</p> <pre><code># odoo server\nupstream odoo {\n  server odoo:8069;\n}\nupstream odoochat {\n  server odoo:8072;\n}\n# Se han definido los upstream a localhost y a los puertos determinados\n\n# http -&gt; https (todas las peticiones por HTTP se redirigen a HTTPS)\nserver {\n   listen 80;\n   server_name _;\n   # Si tuvi\u00e9ramos nombre de dominio lo pondr\u00edamos, en otro caso: _\n   rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n  listen 443 ssl;\n  server_name _;\n  # La _ porque en el ejemplo no tenemos dominio, como arriba\n  proxy_read_timeout 720s;\n  proxy_connect_timeout 720s;\n  proxy_send_timeout 720s;\n\n  # Add Headers for odoo proxy mode\n  proxy_set_header X-Forwarded-Host $host;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header X-Forwarded-Proto $scheme;\n  proxy_set_header X-Real-IP $remote_addr;\n\n  # SSL parameters\n  ssl_certificate /etc/nginx/ser.pem;\n  ssl_certificate_key /etc/nginx/ser.key;\n  # IMPORTANTE: poner bien las rutas de los certificados\n  ssl_session_timeout 30m;\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n  ssl_prefer_server_ciphers on;\n\n  # log\n  access_log /var/log/nginx/odoo.access.log;\n  error_log /var/log/nginx/odoo.error.log;\n\n  # Redirect requests to odoo backend server\n  location / {\n    proxy_redirect off;\n    proxy_pass http://odoo;\n  }\n  location /longpolling {\n      proxy_pass http://odoochat;\n  }\n\n  # common gzip\n  gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;\n  gzip on;\n}\n</code></pre>"},{"location":"2_2_InstalarDocker/#workers","title":"Workers","text":"<p>Por defecto, Odoo es <code>multithread</code>. Esto significa que puede mantener varios hilos de ejecuci\u00f3n. Sin embargo, es algo ineficiente en producci\u00f3n si tienes muchos usuarios. Es mejor, adem\u00e1s, que sea <code>multi-processing</code> para poder distribuir la carga entre distintos procesadores o n\u00facleos (no disponible en Windows).</p> <p>Para conseguirlo, solo hay que indicar en el archivo de configuraci\u00f3n odoo.conf</p> Edici\u00f3n del fichero de configuraci\u00f3n de Odoo. <p>A\u00f1adiremos al final la cantidad de <code>workers</code> que queremos, adem\u00e1s de otros par\u00e1metros:</p> <pre><code>[options]\nlimit_memory_hard = 1677721600\nlimit_memory_soft = 629145600\nlimit_request = 8192\nlimit_time_cpu = 600\nlimit_time_real = 1200\nmax_cron_threads = 1\nworkers = 8\n</code></pre> <p>Como regla aproximada, se pueden calcular los workers \u00f3ptimos como 1 worker por cada 6 usuarios simult\u00e1neos y el doble + 1 de workers por CPU. As\u00ed, si tenemos un servidor con 4 n\u00facleos, 8 threads y unos 60 usuarios simult\u00e1neos:</p> <ul> <li>60/6 \u2248 10 workers</li> <li>4*2+1 = 9 workers que soporta la m\u00e1quina</li> <li>En este caso, se pueden utilizar 8 workers + 1 para el cron</li> <li>La RAM, de forma simple, se puede estimar en 1GB por worker. Sin embargo, hay peticiones que no necesitan m\u00e1s de 150MB. Seg\u00fan la documentaci\u00f3n de Odoo, para 9 workers: 9 * ((0.8150) + (0.21024)) \u2248 3GB de RAM m\u00ednimo.</li> </ul>"},{"location":"2_3_InstalarUbuntu/","title":"Instalar en Debian y Ubuntu","text":"<p>Antes de nada, hay que preparar un poco el sistema:</p> <p>En el caso de Ubuntu o Debian, que es el que nos interesa, Odoo proporciona unos repositorios llamados Nightly, que pueden ser a\u00f1adidos al sources.list para instalar de manera autom\u00e1tica todo. Estos repositorios se actualizan cada noche, por lo que es posible que, con el tiempo, algunas funciones o archivos cambien si actualizamos.</p> <p>En principio, todo deber\u00eda funcionar como indican los manuales, pero si necesitamos utilizar utf-8 por el idioma, hay que hacer algunos pasos previos.</p> <p>Es posible que Debian o Ubuntu no tenga bien configurados los locales. Se puede hacer con:</p> <pre><code>dpkg-reconfigure locales\n</code></pre> <p>Y seleccionar los de es_ES y el de UTF8 por defecto. Es necesario cerrar la sesi\u00f3n y volver a entrar.</p> <p>Si <code>dpkg-reconfigure</code> no muestra un asistente, puedes hacer:</p> <pre><code>locale-gen \"es_ES.UTF-8\"\ndpkg-reconfigure locales\n</code></pre> <p>Enlace a los repositorios: https://nightly.odoo.com/</p> <p>Y como indica el propio manual, se puede hacer todo con estos comandos (el primero si estamos en Debian):</p> <pre><code>sudo apt-get install ca-certificates\nwget -O - https://nightly.odoo.com/odoo.key | sudo gpg --dearmor -o /usr/share/keyrings/odoo-archive-keyring.gpg\necho 'deb [signed-by=/usr/share/keyrings/odoo-archive-keyring.gpg] https://nightly.odoo.com/16.0/nightly/deb/ ./' | sudo tee /etc/apt/sources.list.d/odoo.list\nsudo apt-get update &amp;&amp; sudo apt-get install odoo\n</code></pre> <p>Estos comandos instalan los certificados que los navegadores o, en este caso, <code>wget</code> necesitan para admitir HTTPS, despu\u00e9s descargan la clave, a\u00f1aden el repositorio e instalan Odoo.</p> <p>A continuaci\u00f3n, hay que ir a la direcci\u00f3n en el navegador:</p> <pre><code>http://&lt;ip o url&gt;:8069\n</code></pre> <p>Asciinema. Video del proceso.</p>"},{"location":"2_3_InstalarUbuntu/#configuracion-de-la-ruta-de-los-modulos","title":"Configuraci\u00f3n de la ruta de los m\u00f3dulos","text":"<p>Como la instalaci\u00f3n de Odoo crea el usuario odoo, que es el que debemos utilizar para el desarrollo, vamos a asignarle una contrase\u00f1a y le pondremos como shell <code>bash</code>:</p> <pre><code>sudo passwd odoo\nsudo usermod -s /bin/bash odoo\n</code></pre> <p>Warning</p> <p>A partir de este momento, todos los comandos deben ejecutarse con el usuario odoo.  O nos logeamos como usuario odoo o mejor hacemos <code>su odoo</code></p> <p>La configuraci\u00f3n del servidor Odoo tiene una opci\u00f3n llamada addons-path. Podemos a\u00f1adir m\u00e1s rutas para nuestros addons personalizados. Se puede dejar de forma definitiva en el archivo de configuraci\u00f3n o iniciar el servidor indicando la ruta de los addons:</p> <pre><code>odoo -d demodb --addons-path=\"&lt;ruta&gt;\"\n</code></pre> <p>Si queremos que quede guardado de forma definitiva, hay que a\u00f1adir --save al comando. Los comandos ser\u00edan, por tanto:</p> <pre><code>mkdir /var/lib/odoo/modules\nodoo scaffold pruebas /var/lib/odoo/modules\nodoo --addons-path=\"/var/lib/odoo/modules,/usr/lib/python3/dist-packages/odoo/addons\" --save\n</code></pre> <p>Tip</p> <p>La opci\u00f3n --save guarda la configuraci\u00f3n en <code>$HOME/.odoorc</code>, que es un archivo para el usuario odoo. Si queremos que sea para todos los usuarios que puedan ejecutar el servidor odoo, se puede poner en el archivo de <code>/etc/odoo</code>.</p>"},{"location":"2_3_InstalarUbuntu/#depurar-odoo","title":"Depurar Odoo","text":"<p>Para crear m\u00f3dulos o ver los problemas que est\u00e1n ocurriendo, es necesario leer los archivos de log, pero existe una manera m\u00e1s eficiente de hacerlo. Si observamos el comando que realmente est\u00e1 ejecutando Odoo:</p> <pre><code>python3 /usr/bin/odoo --config /etc/odoo/odoo.conf --logfile /var/log/odoo/odoo-server.log\n</code></pre> <p>Podemos ver que la opci\u00f3n <code>--logfile</code> env\u00eda la salida a un archivo. Si detenemos el servicio con:</p> <p><pre><code>systemctl stop odoo\n</code></pre> o <pre><code>/etc/init.d/odoo stop\n</code></pre></p> <p>Podemos iniciar sesi\u00f3n con el usuario <code>odoo</code> (es necesario que pueda iniciar sesi\u00f3n en Linux) y ejecutar:</p> <pre><code>odoo --config /etc/odoo/odoo.conf\n</code></pre> <p>De esta manera, los mensajes del servidor aparecen en tiempo real en la consola.</p> <p>Si adem\u00e1s queremos actualizar un m\u00f3dulo al arrancar, podemos especificar la base de datos y el m\u00f3dulo a actualizar:</p> <pre><code>odoo --config /etc/odoo/odoo.conf -u modulo -d empresa\n</code></pre> <p>Puede que nuestro usuario <code>odoo</code> tenga una configuraci\u00f3n personalizada. En ese caso, habr\u00eda que hacer, por ejemplo:</p> <pre><code>odoo --config /var/lib/odoo/.odoorc -d empresa -u modulo\n</code></pre> <p>De hecho, una vez hecho el <code>--save</code>, cada vez que ejecutamos el comando odoo, busca el archivo <code>.odoorc</code> en el directorio personal del usuario. Por tanto, solo hay que hacer:</p> <pre><code>odoo -d empresa -u modulo\n</code></pre> <p>Adem\u00e1s, podemos modificar el nivel de log con la opci\u00f3n <code>--log-level</code>, por ejemplo: <code>--log-level=debug</code>.</p> <p>Asciinema con todos los pasos para depurar.</p> <p>Para saber m\u00e1s, puedes consultar la ayuda:</p> <pre><code>odoo --help\n</code></pre> <p>O la documentaci\u00f3n oficial: https://www.odoo.com/documentation/12.0/reference/cmdline.html</p>"},{"location":"2_3_InstalarUbuntu/#mejorar-la-salida-de-log","title":"Mejorar la salida de Log","text":"<p>Para a\u00f1adir salida de log en nuestros m\u00e9todos y facilitar la depuraci\u00f3n, se puede utilizar la API de Odoo:</p> <p>Al principio del archivo <code>.py</code>:</p> <pre><code>from openerp import models, fields, api\nimport logging\n\n_logger = logging.getLogger(__name__)\n</code></pre> <p>Dentro de las funciones:</p> <pre><code>_logger.debug(\"Usa _logger.debug para depuraci\u00f3n, solo para este prop\u00f3sito.\")\n_logger.info(\"Usa _logger.info para mensajes informativos. Se utiliza para notificar algo importante.\")\n_logger.warning(\"Usa _logger.warning para problemas menores, que no har\u00e1n fallar tu m\u00f3dulo.\")\n_logger.error(\"Usa _logger.error para informar de una operaci\u00f3n fallida.\")\n_logger.critical(\"Usa _logger.critical para mensajes cr\u00edticos: si esto aparece, el m\u00f3dulo dejar\u00e1 de funcionar.\")\n# \u00bfQuieres incluir datos de tu campo? P\u00e1salos en el contexto, obt\u00e9nlos del pool o del diccionario.\n_logger.critical(\"El nombre '\" + str(record.get('name')) + \"' no es v\u00e1lido para nosotros.\")\n</code></pre>"},{"location":"2_3_InstalarUbuntu/#opciones-de-log","title":"Opciones de log","text":"<p>Por defecto, Odoo env\u00eda su log a un archivo en /var/log/odoo/, pero se puede redirigir a otro archivo con --log-file=LOGFILE.</p> <p>Si queremos m\u00e1s detalle en determinadas acciones de Odoo, podemos a\u00f1adir al comando las siguientes opciones:</p> <ul> <li>--log-request: Muestra las peticiones RPC (remote procedure call) hechas por http desde el cliente.</li> <li>--log-response: Muestra el contenido de la respuesta que da el servidor a las peticiones anteriores. Muy \u00fatil para saber qu\u00e9 est\u00e1 enviando y c\u00f3mo lo interpreta el cliente.</li> <li>--log-web: Da m\u00e1s detalles de todas las peticiones GET o POST que se hacen a la web.</li> <li>--log-sql: Muestra el SQL que lanza al servidor PostgreSQL. Esta opci\u00f3n ayuda a entender c\u00f3mo funciona el ORM.</li> <li>--log-level=LOG_LEVEL</li> </ul> <pre><code>['info', 'debug_rpc', 'warn', 'test', 'critical', 'debug_sql', 'error', 'debug', 'debug_rpc_answer', 'notset']\n</code></pre>"},{"location":"2_3_InstalarUbuntu/#modo-debug","title":"Modo debug","text":"<p>Odoo permite entrar en modo debug con --debug.</p> <p>Tambi\u00e9n se puede importar la biblioteca pdb y colocar un trace en el c\u00f3digo que nos interesa:</p> <pre><code>import pdb\n...\npdb.set_trace()\n</code></pre> <p>Una vez dentro, se pueden utilizar los comandos de pdb: https://docs.python.org/3/library/pdb.html</p>"},{"location":"2_3_InstalarUbuntu/#poner-en-produccion-en-ubuntu","title":"Poner en producci\u00f3n en Ubuntu","text":"<p>https://www.odoo.com/documentation/17.0/administration/install/deploy.html?highlight=workers</p>"},{"location":"2_3_InstalarUbuntu/#odoo-por-https","title":"Odoo por HTTPS","text":"<p>El servidor Odoo, por defecto, ofrece su web en el puerto 8069 y en HTTP, es decir, sin capa de seguridad SSL.</p> <p>Para dotarlo de esa seguridad, necesitamos utilizar un servidor web que act\u00fae como proxy y proporcione la conectividad por HTTPS.</p> <p>Situaci\u00f3n inicial:</p> <pre><code> ------------               -----------\n|            |        8069|            |\n|  Cliente   |&lt;----------&gt;|  Servidor  |\n|            |            |   Odoo     |\n ------------              ------------\n</code></pre> <p>Situaci\u00f3n que buscamos:</p> <pre><code> ------------              -------------------\n|            |        443 |                   |\n|  Cliente   |&lt;----------&gt;|   Nginx &lt;---\u2510     |\n|            |            |              |    |\n ------------             |              |8069|\n                          |              v    |\n                          |            ------ |\n                          |            |Odoo| |\n                          |            ------ |\n                           -------------------\n</code></pre> <p>Todos los servicios que utilizan SSL necesitan un certificado. En una situaci\u00f3n ideal, disponemos de un certificado firmado por una entidad certificadora. Si no es as\u00ed, debemos crear uno autosignado.</p> <p>Tutorial para crear el certificado</p> <pre><code>    # openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/odoo-selfsigned.key -out /etc/ssl/certs/odoo-selfsigned.crt\n    Generating a 2048 bit RSA private key\n    ...........................................................................................................+++\n    ...........................................................................................+++\n    writing new private key to '/etc/ssl/private/odoo-selfsigned.key'\n    -----\n    You are about to be asked to enter information that will be incorporated\n    into your certificate request.\n    What you are about to enter is what is called a Distinguished Name or a DN.\n    There are quite a few fields but you can leave some blank\n    For some fields there will be a default value,\n    If you enter '.', the field will be left blank.\n    -----\n    Country Name (2 letter code) [AU]:ES\n    State or Province Name (full name) [Some-State]:Valencia\n    Locality Name (eg, city) []: X\u00e0tiva\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:\n    Organizational Unit Name (eg, section) []:\n    Common Name (e.g. server FQDN or YOUR name) []: nom o domini\n    Email Address []: correu@servidor.com\n</code></pre> <p>A continuaci\u00f3n se debe configurar el https en Nginx para hacer el proxy en Odoo. manual oficial</p> <p>En /etc/odoo.conf:</p> <p><pre><code>proxy_mode = True \n</code></pre> En /etc/nginx/sites-enabled/odoo.conf:</p> <pre><code>    #odoo server\n    upstream odoo {\n     server 127.0.0.1:8069;\n    }\n    upstream odoochat {\n     server 127.0.0.1:8072;\n    }\n    # S'han definit els upstream a localhost i als port determinats\n\n    # http -&gt; https (totes les peticions per HTTP se reformulen a HTTPS)\n    server {\n       listen 80;\n       server_name _;                            \n       # Si tinguerem nom de domini el ficariem, en altre cas: _\n       rewrite ^(.*) https://$host$1 permanent;\n    }\n\n    server {\n     listen 443;\n     server_name _;\n     # La _ perqu\u00e8 en l'exemple no tenim domini, com dalt\n     proxy_read_timeout 720s;\n     proxy_connect_timeout 720s;\n     proxy_send_timeout 720s;\n\n     # Add Headers for odoo proxy mode\n     proxy_set_header X-Forwarded-Host $host;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;\n     proxy_set_header X-Real-IP $remote_addr;\n\n     # SSL parameters\n     ssl on;\n     ssl_certificate /etc/ssl/certs/odoo-selfsigned.crt;\n     ssl_certificate_key /etc/ssl/private/odoo-selfsigned.key ;\n     # IMPORTANT: ficar b\u00e9 les rutes dels certificats\n     ssl_session_timeout 30m;\n     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n     ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n     ssl_prefer_server_ciphers on;\n\n     # log\n     access_log /var/log/nginx/odoo.access.log;\n     error_log /var/log/nginx/odoo.error.log;\n\n     # Redirect requests to odoo backend server\n     location / {\n       proxy_redirect off;\n       proxy_pass http://odoo;\n     }\n     location /longpolling {\n         proxy_pass http://odoochat;\n     }\n\n     # common gzip\n     gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;\n     gzip on;\n    }\n</code></pre> <p>Tambi\u00e9n es necesario borrar el default de sites-enabled de nginx o modificarlo para que no afecte al puerto 80 de Odoo.</p> <p>Ahora se reinician tanto Odoo como nginx.</p>"},{"location":"2_3_InstalarUbuntu/#seguridad-en-odoo","title":"Seguridad en Odoo","text":"<p>Cuando hablamos de seguridad en Odoo nos referimos tanto a cuestiones generales que afectan a cualquier aplicaci\u00f3n web como a aspectos espec\u00edficos de Odoo. En general, cualquier aplicaci\u00f3n web debe cumplir unos m\u00ednimos de seguridad, como ofrecer el servicio solo por HTTPS, controlar los puertos, evitar ataques DDOS, utilizar contrase\u00f1as seguras, etc.</p> <p>En cuanto al HTTPS, en los apartados correspondientes se explica c\u00f3mo configurarlo, aunque lo ideal ser\u00eda contratar un certificado v\u00e1lido. La seguridad y alta disponibilidad del servidor es un tema complejo que excede el alcance de este m\u00f3dulo y puede ser tarea del ciclo de ASIX. Sin embargo, s\u00ed podemos realizar acciones espec\u00edficas en Odoo para evitar problemas o recuperarnos r\u00e1pidamente de ellos.</p>"},{"location":"2_3_InstalarUbuntu/#persistencia-de-los-datos","title":"Persistencia de los datos","text":"<p>Una empresa no puede permitirse perder datos. Existen m\u00faltiples formas de evitar la p\u00e9rdida de datos en Odoo. Si tenemos una instalaci\u00f3n on-premise, debemos controlar todos los factores, tanto f\u00edsicos como l\u00f3gicos. Esto implica varias tareas imprescindibles:</p>"},{"location":"2_3_InstalarUbuntu/#copias-de-seguridad","title":"Copias de seguridad","text":"<p>Odoo, en su interfaz gr\u00e1fica, permite exportar tablas y realizar copias de seguridad manuales de tablas individuales. Esto, por supuesto, solo es recomendable para exportaciones o importaciones puntuales.</p> <p>En la interfaz gr\u00e1fica tambi\u00e9n se puede acceder al gestor de bases de datos y exportar o importar el backup. Ser\u00eda recomendable hacerlo peri\u00f3dicamente. Si queremos que sea autom\u00e1tico, se puede programar externamente un servicio que, cada cierto tiempo, se conecte de forma remota por XML-RPC:</p> <pre><code>import requests\n\n# Datos de conexi\u00f3n\nodoo_host = 'https://tuservidorodoo.com'  # o http://localhost:8069 si es local\ndatabase = 'tu_basededatos'\nadmin_password = 'tu_contrase\u00f1a_admin'\n\n# URL para hacer backup\nurl = f'{odoo_host}/web/database/backup'\n\n# Datos para la solicitud POST\npayload = {\n    'master_pwd': admin_password,\n    'name': database,\n    'backup_format': 'zip'  # o 'dump'\n}\n\n# Realizar la solicitud POST\nresponse = requests.post(url, data=payload)\n\n# Verificar la respuesta y guardar el archivo si es v\u00e1lida\nif response.status_code == 200:\n    filename = f\"{database}_backup.zip\"\n    with open(filename, 'wb') as f:\n        f.write(response.content)\n    print(f\"Backup guardado como {filename}\")\nelse:\n    print(f\"Error al hacer backup: {response.status_code} - {response.text}\")\n</code></pre> <p>Tambi\u00e9n podemos hacerlo a nivel de la l\u00ednea de comandos de la base de datos:</p> <pre><code>pg_dump db_name\n</code></pre> <p>La copia de seguridad de la base de datos no incluye los archivos y fotos. Ser\u00e1 necesario copiar el directorio <code>filestore</code> si realizamos la copia a nivel de base de datos.</p> <p>A un nivel m\u00e1s bajo, se puede hacer una copia de seguridad del sistema de archivos o incluso de las particiones.</p> <p>Es importante destacar que dicha copia de seguridad no debe almacenarse en el mismo disco duro que la base de datos original ni en la misma ubicaci\u00f3n f\u00edsica.</p>"},{"location":"2_3_InstalarUbuntu/#alta-disponibilidad","title":"Alta disponibilidad","text":"<p>Un sistema empresarial debe estar alojado en un servidor seguro a nivel f\u00edsico. Esto implica el uso de SAIs y RAIDs o sistemas similares. Si estamos utilizando un VPS en la nube, normalmente no tendremos que preocuparnos de esto. En caso contrario, necesitaremos un CPD, aunque sea sencillo, con seguridad f\u00edsica, sistemas de alimentaci\u00f3n ininterrumpida y discos redundantes, adem\u00e1s de sistemas de copias de seguridad remotas. El sistema deber\u00eda poder recuperarse de un fallo sin interrumpir el servicio.</p>"},{"location":"2_3_InstalarUbuntu/#usuarios-y-permisos","title":"Usuarios y permisos","text":"<p>Odoo cuenta con un sistema complejo de usuarios, grupos, roles y permisos. Un administrador de Odoo debe gestionar de forma precisa estos permisos. Adem\u00e1s, debemos distinguir los diferentes tipos de usuarios que hay que gestionar, de mayor a menor nivel de privilegio:</p> <ul> <li>Root del sistema operativo: Usuario con control total sobre el sistema operativo; deber\u00eda ser un administrador de sistemas.</li> <li>Administrador de PostgreSQL: Tiene control total sobre los datos de toda la empresa y posiblemente de varias empresas. Si PostgreSQL se utiliza para otros fines adem\u00e1s de Odoo, tambi\u00e9n tiene poder sobre ellos.</li> <li>Administrador de bases de datos de Odoo: Su contrase\u00f1a est\u00e1 en <code>odoo.conf</code> y puede crear, borrar y hacer copias de todas las bases de datos. Accede normalmente v\u00eda web. Es posible que los programadores no necesiten este nivel de acceso.</li> <li>Administrador t\u00e9cnico de una base de datos: Puede administrar m\u00f3dulos y cambiar la interfaz. Los programadores suelen necesitar este nivel de permisos.</li> <li>Administrador de la empresa: Puede administrar todo lo relativo al negocio, pero no puede instalar m\u00f3dulos ni programar. Normalmente son los propietarios o responsables de la empresa. No es recomendable que una persona sin experiencia en programaci\u00f3n tenga m\u00e1s permisos.</li> <li>Usuarios normales: Vendedores, administrativos, etc. Pueden acceder a ciertas partes del backend. Sus permisos dependen del grupo o rol al que pertenezcan.</li> <li>Clientes y proveedores: Normalmente tienen acceso a la p\u00e1gina web, que puede estar hecha con Odoo. Tambi\u00e9n pueden tener acceso a una API desarrollada por nosotros si queremos automatizar las relaciones comerciales con ellos.</li> </ul>"},{"location":"2_3_InstalarUbuntu/#creacion-de-una-base-de-datos","title":"Creaci\u00f3n de una base de datos","text":"<p>Tip</p> <p>En general no cal fer aquest pas i \u00e9s recomanable fer la base de dades per la interf\u00edcie web.</p> <p>En el usuario de odoo, creamos una base de datos y le aplicamos el esquema de datos de Odoo:</p> <pre><code>createdb --encoding=UTF-8 --template=template0 testdb\nodoo -d testdb\n</code></pre> <p>Esto crea una base de datos con los datos de prueba para empezar a trabajar.</p> <p>Por defecto, el usuario ser\u00e1 admin con contrase\u00f1a admin.</p> <p>Comandos b\u00e1sicos de postgreSQL</p>"},{"location":"2_3_InstalarUbuntu/#errores-documentados","title":"Errores documentados","text":"<p>Tip</p> <p>Importante Antes de ejecutar estos comandos, consulta el final del archivo de log, generalmente en /var/log/odoo/odoo-server.log</p>"},{"location":"2_3_InstalarUbuntu/#error-con-el-rol-odoo","title":"Error con el rol Odoo","text":"<p>Si aparece un error similar a:</p> <p><code>OperationalError: FATAL:  no existe el rol \u00abodoo\u00bb</code> <code>OperationalError: FATAL:  role \"odoo\" does not exist</code></p> <p>Hay que ejecutar el comando:</p> <pre><code>su - postgres -c \"createuser -s odoo\"\n</code></pre> <p>Esto crea el usuario odoo con permiso de superusuario (-s).</p>"},{"location":"2_3_InstalarUbuntu/#error-con-utf-8","title":"Error con UTF-8","text":"<p>Muchas veces, al instalar, no se configura el template0 de la base de datos en utf-8. 1</p> <p>Se soluciona borrando y volviendo a crear la base de datos template1 utilizando la codificaci\u00f3n UTF8. 2</p> <pre><code># su postgres\npsql\npostgres=# update pg_database set datallowconn = TRUE where datname = 'template0';\npostgres=# \\c template0\ntemplate0=# update pg_database set datistemplate = FALSE where datname = 'template1';\ntemplate0=# drop database template1;\ntemplate0=# create database template1 with template = template0 encoding = 'UTF8';\ntemplate0=# update pg_database set datistemplate = TRUE where datname = 'template1';\ntemplate0=# \\c template1\ntemplate1=# update pg_database set datallowconn = FALSE where datname = 'template0';\n</code></pre> <p>Puede que no se cree el cl\u00faster de postgresql. Primero hay que reconfigurar los locales y despu\u00e9s:</p> <pre><code>pg_createcluster 9.4 main --start\n</code></pre>"},{"location":"2_3_InstalarUbuntu/#recuperar-la-contrasena-del-administrador","title":"Recuperar la contrase\u00f1a del administrador","text":"<p>Del administrador de una base de datos: Dentro de la base de datos:</p> <pre><code>update res_users set password='test' where login='admin';\n</code></pre> <p>Del administrador de Odoo</p> <p>Si no puedes administrar o crear nuevas bases de datos, hay que modificar la l\u00ednea admin_passwd de /etc/odoo/odoo.conf o .odoorc, dependiendo de qu\u00e9 archivo de configuraci\u00f3n est\u00e9s usando.</p>"},{"location":"2_3_InstalarUbuntu/#problemas-en-los-repositorios-oficiales-de-ubuntu","title":"Problemas en los repositorios oficiales de ubuntu","text":"<p>En el caso del IES, los repositorios oficiales no funcionan bien por alguna interferencia con los de Lliurex. Hay que cambiarlos, por ejemplo, por los de Caliu. Una manera es entrar en vim y ejecutar este comando:</p> <pre><code>:%s_http://archive.ubuntu.com/ubuntu_http://ftp.udc.es/ubuntu/_\n</code></pre> <p>(Usamos _ en lugar de / en la sustituci\u00f3n porque la / ya est\u00e1 en las URL.)</p>"},{"location":"2_3_InstalarUbuntu/#no-conecta-con-postgresql","title":"No conecta con PostgreSQL","text":"<p>Puede ser porque el servicio no est\u00e1 en funcionamiento.</p> <pre><code>service postgresql [restart,start,stop,status]\n</code></pre> <p>En caso de que falle, podemos ver el log:</p> <pre><code>cat /var/log/postgresql/(version)...\n</code></pre> <p>A veces la base de datos queda corrupta. Se puede intentar recuperar con:</p> <pre><code>su - postgres -c '/usr/lib/postgresql/12/bin/pg_resetwal -f /var/lib/postgresql/12/main'\n</code></pre> <p>Si se han perdido datos, no son muy importantes o tenemos copia de seguridad, tal vez hay que eliminar la base de datos de la empresa que no funciona:</p> <pre><code>postgres$ psql\npsql&gt; drop database &lt;nombre_base_de_datos&gt;;\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/","title":"3.1. Arquitectura de Odoo","text":"<p>Antes de comenzar ha desarrollar en Odoo necesitamos conocer un poco de su arquitectura para comprender c\u00f3mo trabaja y la forma en la que debemos programar y c\u00f3mo poder utilizar el framework que nos facilitar para poder implementar nuestros propios m\u00f3dulos</p>"},{"location":"3_1_ArquitecturaOdoo/#arquitectura","title":"Arquitectura","text":"<p>Odoo es un ERP con una arquitectura de Tenencia M\u00faltiple. Es decir, tiene una base de datos y un servidor com\u00fan para todos los clientes. Lo contrario ser\u00eda tener un servidor o base de datos por cliente o virtualizar.</p> <p>El framework de Odoo facilita diversos componentes que permiten construir la aplicaci\u00f3n:</p> <ul> <li>La capa ORM (Object Relational Mapping) entre los objetos Python y la base de datos PostgreSQL. El dise\u00f1ador-programador no realiza el dise\u00f1o de la base de datos; \u00fanicamente dise\u00f1a clases, y la capa ORM de Odoo se encarga de mapearlas sobre el SGBD PostgreSQL. Mas info en An overview of ORM Methods in Odoo</li> </ul> Diagrama ***Odoo*** ORM (Object Relational Mapping) <ul> <li>Una arquitectura MVC (modelo-vista-controlador), en la que el modelo reside en los datos de las clases dise\u00f1adas con Python, la vista reside en los formularios, listas, calendarios, gr\u00e1ficos... definidos en archivos XML, y el controlador reside en los m\u00e9todos definidos en las clases que proporcionan la l\u00f3gica de negocio.</li> </ul> Diagrama Modelo - Vista - Controlador. <ul> <li>Dise\u00f1adores de informes.</li> <li>Facilidades para la traducci\u00f3n de la aplicaci\u00f3n a varios idiomas.</li> </ul> <p>El servidor Odoo proporciona acceso a la base de datos mediante ORM. El servidor necesita tener instalados m\u00f3dulos, ya que comienza vac\u00edo.</p> <p>Por otro lado, el cliente se comunica con el servidor mediante XML-RPC, y los clientes web por JSON-RPC. El cliente solo tiene que mostrar lo que proporciona el servidor o solicitar correctamente los datos. Por tanto, un cliente puede ser muy simple y desarrollarse en cualquier lenguaje de programaci\u00f3n. Odoo proporciona un cliente web, aunque se puede crear un cliente en cualquier plataforma.</p> <p>Los datos est\u00e1n almacenados en una base de datos relacional como es PostgreSQL y gracias al ORM, no es necesario realizar consultas SQL directamente. El ORM proporciona una serie de m\u00e9todos para trabajar de manera m\u00e1s r\u00e1pida y segura. En lugar de hablar de tablas, se habla de modelos. Estos son \"mapeados\" por el ORM en tablas. Sin embargo, un modelo es m\u00e1s que datos en una tabla. Un modelo se comporta como un objeto al tener campos funcionales, restricciones y campos relacionales que dejan la normalizaci\u00f3n de la base de datos en manos de Odoo.</p> <p>El acceso del cliente a los datos se realiza mediante un servicio. Este puede ser WSGI. WSGI es una soluci\u00f3n est\u00e1ndar para crear servidores y clientes HTTP en Python. En el caso de Odoo, este utiliza <code>Werkzeug</code>, que interpreta las peticiones y las transforma en funciones que Odoo puede entender.</p> <p>Otro concepto dentro de Odoo son los Business Objects. Se implementan con <code>models</code> y contienen tanto datos como l\u00f3gica de negocio.</p> <p>Odoo tambi\u00e9n proporciona los llamados Wizards, que funcionan como asistentes para introducir datos de una manera m\u00e1s sencilla para el usuario.</p> <p>El cliente web es f\u00e1cil de desarrollar gracias a los Widgets o Window GaDGETS. Estos proporcionan un comportamiento y visualizaci\u00f3n adecuados para cada tipo de dato. Por ejemplo, si el campo es para definir una fecha, mostrar\u00e1 un calendario. Algunos tienen diferentes visualizaciones seg\u00fan el tipo de vista y se pueden definir Widgets personalizados. Los Widgets y dem\u00e1s interfaz web funcionan gracias a <code>OWL</code>, un framework de cliente web desarrollado en el proyecto <code>Odoo</code> y similar a <code>React</code>.</p> <p>Resumiendo todos estos conceptos: </p> Componente Descripci\u00f3n Base de Datos (PostgreSQL) Donde se almacenan los datos de forma relacional. ORM Traduce modelos Python a tablas SQL, gestionando relaciones y l\u00f3gica. Business Objects Modelos que contienen datos y l\u00f3gica de negocio. WSGI/Werkzeug Intermediario que convierte peticiones HTTP en funciones de Odoo. Wizards Asistentes que facilitan la introducci\u00f3n de datos. Cliente Web (OWL + Widgets) Interfaz interactiva que adapta la visualizaci\u00f3n seg\u00fan el tipo de dato."},{"location":"3_1_ArquitecturaOdoo/#la-base-de-datos-de-odoo","title":"La base de datos de Odoo","text":"<p>En Odoo no existe un dise\u00f1o expl\u00edcito de la base de datos, si no que la base de datos de una empresa en Odoo es el resultado del mapeo del dise\u00f1o de clases del ERP hacia el SGBD PostgreSQL, que es el que proporciona la persistencia necesaria para los objetos. Esto es el ORM.</p> <p>En consecuencia, Odoo no facilita ning\u00fan dise\u00f1o entidad-relaci\u00f3n sobre la base de datos de una empresa ni tampoco ning\u00fan diagrama del modelo relacional.</p> <p>Odoo permite, mediante el cliente web, recuperar el nombre de la clase Python que define la informaci\u00f3n que se introduce a trav\u00e9s de un formulario y el nombre del dato miembro de la clase correspondiente a cada campo del formulario. Esta informaci\u00f3n permite llegar a la tabla y columna afectadas, teniendo en cuenta dos cuestiones:</p> <ul> <li> <p>El nombre de las clases Python de Odoo siempre est\u00e1 en min\u00fasculas (se utiliza el guion bajo para hacer legibles las palabras compuestas) y sigue la nomenclatura <code>nombre_del_modulo.nom1.nom2.nom3...</code> en la cual se utiliza el punto para indicar un cierto nivel de jerarqu\u00eda. Cada clase Python de Odoo se mapea en una tabla de PostgreSQL con muchas posibilidades de que su nombre coincida con el de la clase, sustituyendo los puntos por guiones bajos.</p> </li> <li> <p>Los nombres de los atributos de una clase Python tambi\u00e9n est\u00e1n siempre en min\u00fasculas (se utiliza el guion bajo para hacer legibles las palabras compuestas). Cada dato miembro de una clase Python de Odoo que sea persistente (una clase puede tener datos miembros calculados no persistentes) se mapea como un atributo en la correspondiente tabla de PostgreSQL con el mismo nombre.</p> </li> </ul> <p>Ejemplo</p> <p>La clase Python <code>sale.order</code> de Odoo est\u00e1 pensada para describir la cabecera de los pedidos de venta y la correspondiente tabla en PostgreSQL es <code>sale_order</code>.</p> <p>De esta manera, conociendo el nombre de la clase y el nombre del dato miembro, es muy posible conocer el nombre de la tabla y de la columna correspondientes. Se puede configurar el cliente web para que informe del nombre de la clase y del dato miembro al situar el rat\u00f3n sobre las etiquetas de los campos de los formularios.</p>"},{"location":"3_1_ArquitecturaOdoo/#estructura-de-carpetas-de-odoo","title":"Estructura de carpetas de Odoo","text":"<p>La estructura de carpetas est\u00e1 organizada para facilitar el desarrollo, mantenimiento y extensi\u00f3n de funcionalidades. </p> <p>De esta forma, a continuaci\u00f3n tenemos el listado de las carpetas m\u00e1s importantes dentro del c\u00f3digo fuente de Odoo:</p> <ul> <li> <p><code>addons/</code> : Contiene todos los m\u00f3dulos est\u00e1ndar y personalizados de Odoo. Cada m\u00f3dulo tiene su propia carpeta con modelos, vistas, controladores, datos, etc. Ejemplos: <code>sale</code>, <code>account</code>, <code>crm</code>, <code>inventory</code>.</p> </li> <li> <p><code>config/</code>: Contiene archivos de configuraci\u00f3n del servidor Odoo, como <code>odoo.conf</code>. Es esencial para iniciar Odoo correctamente en entornos de producci\u00f3n o desarrollo.</p> </li> <li> <p><code>data/</code>: Carpeta opcional usada para almacenar datos persistentes o archivos cargados por el usuario. Aunque no es parte del core, es com\u00fan en despliegues personalizados o cuando se configura <code>filestore</code> fuera de la base de datos.</p> </li> <li> <p><code>odoo/</code>:  N\u00facleo del framework. Aqu\u00ed se encuentran los componentes esenciales como el ORM, controladores, herramientas de seguridad, y utilidades. Subcarpetas importantes:</p> <ul> <li><code>odoo/models/</code>: Definici\u00f3n del ORM y clases base.</li> <li><code>odoo/addons/</code>: M\u00f3dulos integrados directamente en el core.</li> <li><code>odoo/tools/</code>: Funciones auxiliares (utilidades, validaciones, etc.).</li> <li><code>odoo/http.py</code>: Manejo de peticiones HTTP y controladores web.</li> </ul> </li> <li> <p><code>setup/</code>: Archivos de configuraci\u00f3n para la instalaci\u00f3n del entorno de desarrollo y despliegue.</p> </li> <li> <p><code>tests/</code>: Pruebas automatizadas para asegurar la calidad del c\u00f3digo. Incluye pruebas unitarias y de integraci\u00f3n.</p> </li> <li> <p><code>doc/</code>: Documentaci\u00f3n t\u00e9cnica del framework y sus componentes.</p> </li> <li> <p><code>static/</code>:  Archivos est\u00e1ticos como CSS, JS e im\u00e1genes utilizados por la interfaz web.</p> </li> <li> <p><code>web/</code>: M\u00f3dulo base para la interfaz web de Odoo. Incluye componentes JavaScript, vistas web, y widgets.</p> </li> <li> <p><code>custom_addons/</code> (opcional): Carpeta com\u00fanmente usada para m\u00f3dulos personalizados fuera del core. Se configura en el archivo de inicio (<code>odoo.conf</code>).</p> </li> </ul> <p>Si observamos, las tres primera carpetas son las que hemos definido en el <code>docker-compose.yml</code> del punto anterior, por lo que ahora ya conocemos su cometido: </p> <pre><code>services:\n  odoo:\n    container_name: odoo\n    image: odoo:18.0\n    depends_on:\n      - db\n    ports:\n      - \"8069:8069\"\n    volumes:\n      - odoo-web-data:/var/lib/odoo\n      - ./config:/etc/odoo\n      - ./addons:/mnt/extra-addons\n    environment:\n      - HOST=db\n      - USER=odoo\n      - PASSWORD=odoo\n    command: --dev=all\n    tty: true\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#modulos","title":"M\u00f3dulos","text":"<p>Tanto el servidor como los clientes son m\u00f3dulos. Todos est\u00e1n guardados en una base de datos. Todo lo que se pueda hacer para modificar Odoo se hace en m\u00f3dulos.</p>"},{"location":"3_1_ArquitecturaOdoo/#composicion-de-un-modulo","title":"Composici\u00f3n de un m\u00f3dulo","text":"<p>Los m\u00f3dulos de Odoo ampl\u00edan o modifican partes del Modelo-Vista-Controlador. De esta manera, un m\u00f3dulo puede tener:</p> <ul> <li>Objetos de negocio: Son la parte del modelo, definidos en clases de Python seg\u00fan una sintaxis propia del ORM de Odoo.</li> <li>Archivos de datos: Son archivos XML que pueden definir datos, vistas o configuraciones.</li> <li>Controladores web: Gestionan las peticiones de los navegadores web.</li> <li>Datos est\u00e1ticos: Im\u00e1genes, CSS o JavaScript utilizados por la interfaz web. Es necesario que los datos est\u00e1ticos se guarden en el directorio static. Por ejemplo, el icono del m\u00f3dulo va en <code>static/description/icon.png</code>.</li> </ul>"},{"location":"3_1_ArquitecturaOdoo/#estructura-de-archivos-de-un-modulo","title":"Estructura de archivos de un m\u00f3dulo","text":"<ul> <li>Todos los m\u00f3dulos est\u00e1n en un directorio definido en la opci\u00f3n --addons-path o en el archivo de configuraci\u00f3n, normalmente <code>addons</code>. Cada m\u00f3dulo esta un un subdirectorio dentro de esta carpeta y por lo que puede haber m\u00e1s de un directorio.</li> <li>Un m\u00f3dulo de Python se declara en un archivo de manifest que da informaci\u00f3n sobre el m\u00f3dulo, lo que hace, los m\u00f3dulos de los que depende y c\u00f3mo se debe instalar o actualizar. Manifest in Odoo</li> <li>Un m\u00f3dulo es un paquete de Python que necesita un archivo __init__.py para instanciar todos los archivos Python.</li> </ul>"},{"location":"3_1_ArquitecturaOdoo/#creacion-de-modulos","title":"Creaci\u00f3n de m\u00f3dulos","text":"<p>Para ayudar al programador, Odoo contiene un comando para crear m\u00f3dulos vac\u00edos. Este crea la estructura de archivos necesaria para empezar a trabajar:</p> <pre><code> $ odoo scaffold &lt;nombre_del_m\u00f3dulo&gt; &lt;d\u00f3nde_crearlo&gt;\n</code></pre> <p>Posteriormente veremos m\u00e1s sobre <code>scaffold</code>, pero si quieres m\u00e1s informaci\u00f3n puedes recurrir al Manual oficial Scaffolding</p> <p>El par\u00e1metro scaffold puede tener la opci\u00f3n -t para indicar el directorio de la plantilla. Esta est\u00e1 hecha utilizando jinja2, que es un motor de plantillas para Python.</p> <p>Las plantillas est\u00e1n en el directorio de instalaci\u00f3n de Odoo, en el directorio cli. En nuestro caso: cli/templates/ dentro del directorio de instalaci\u00f3n de Odoo.</p> <p>Podemos crear una plantilla copiando el directorio default o theme y modificando los archivos. Esto puede ser \u00fatil si siempre hacemos m\u00f3dulos con la misma plantilla. Por ejemplo, para poner nuestro logo, copyright, etc.</p>"},{"location":"3_1_ArquitecturaOdoo/#orm","title":"ORM","text":"<p>Odoo mapea sus objetos en una base de datos mediante ORM, evitando al programador la mayor\u00eda de consultas SQL. De esta manera, el desarrollo de los m\u00f3dulos es muy r\u00e1pido y se evitan errores de programaci\u00f3n.</p> <p>Los modelos se crean como clases de Python que extienden la clase models.Model, que contiene los campos y m\u00e9todos \u00fatiles para trabajar con el ORM.</p> <p>Nota</p> <p>Los modelos, al heredar de models.Model, necesitan obligatoriamente asignar valores a algunas variables, como por ejemplo _name.</p> <p>Odoo considera que un modelo es la referencia a una o m\u00e1s tablas en la base de datos. Un modelo no es una fila en la tabla, es toda la tabla.</p> <p>En programaci\u00f3n, el Modelo es una forma de relacionar el programa con la base de datos. Es de m\u00e1s alto nivel que las consultas directas a la base de datos y que las clases y objetos respecto a la programaci\u00f3n orientada a objetos. El modelo une en un \u00fanico concepto las estructuras de datos, las restricciones de integridad y las opciones de manipulaci\u00f3n de los datos.</p> <p>Los modelos en Odoo pueden</p> <ul> <li>Heredar de models.Model y ser los normales, mapeados y permanentes en la base de datos. </li> <li>Pueden ser models.TransientModel, que son iguales pero no tienen persistencia definitiva en la base de datos. Estos son los recomendados para crear <code>wizards</code>. </li> <li>Tambi\u00e9n pueden ser models.AbstractModel para definir modelos abstractos que luego ser\u00e1n heredados.</li> </ul> <p>En Odoo, existen tres tipos principales de modelos que heredan de clases base diferentes seg\u00fan su prop\u00f3sito, se trata de <code>models.Model</code>, <code>models.TransientModel</code> y <code>models.AbstractModel</code>:</p> <ul> <li><code>models.Model</code> se trata de Modelos persistentes. Representa una tabla real en la base de datos. Los datos almacenados en este modelo son permanentes. Por ejemplo Clientes, productos, facturas, etc.</li> <li><code>models.TransientModel</code> son datos temporales (como asistentes o formularios r\u00e1pidos), por lo tanto es un modelo no persistente. Los registros se eliminan autom\u00e1ticamente despu\u00e9s de un tiempo (por defecto, 7 d\u00edas). Se utilizan para Wizards, asistentes de importaci\u00f3n/exportaci\u00f3n, formularios temporales.</li> <li><code>models.AbstractModel</code> que son modelos base reutilizables, o sea, se trata de modelos abstractos que no crea una tabla en la base de datos. Se utiliza para definir funcionalidades comunes que pueden ser heredadas por otros modelos.</li> </ul> <p>Comparativa r\u00e1pida</p> Caracter\u00edstica <code>models.Model</code> <code>models.TransientModel</code> <code>models.AbstractModel</code> Persistencia S\u00ed No (temporal) No Crea tabla en BD S\u00ed S\u00ed No Uso t\u00edpico Datos reales Formularios/Wizards Funcionalidad com\u00fan Eliminaci\u00f3n autom\u00e1tica No S\u00ed No"},{"location":"3_1_ArquitecturaOdoo/#inspeccionar-los-modelos","title":"Inspeccionar los modelos","text":"<p>Para ver los modelos existentes, se puede acceder a la base de datos PostgreSQL o consultar en Configuraci\u00f3n &gt; Estructura de la base de datos &gt; Modelos dentro del modo desarrollador.</p> <p>Cabe destacar el campo modules, donde se indican los m\u00f3dulos instalados en los que se define o hereda el modelo observado.</p>"},{"location":"3_1_ArquitecturaOdoo/#fields","title":"Fields","text":"<p>Las \"columnas\" del modelo son los fields (campos). Estos pueden ser de datos normales como Integer, Float, Boolean, Date, Char... o especiales como Many2one, One2many, Related...</p> <p>Hay algunos fields reservados:</p> <ul> <li>id (Id): identificador \u00fanico para un registro en su modelo.</li> <li>create_date (Datetime): fecha de creaci\u00f3n del registro.</li> <li>create_uid (Many2one): usuario que cre\u00f3 el registro.</li> <li>write_date (Datetime): fecha de la \u00faltima modificaci\u00f3n del registro.</li> <li>write_uid (Many2one): usuario que realiz\u00f3 la \u00faltima modificaci\u00f3n.</li> </ul> <p>Hay otros fields que podemos declarar y que tienen propiedades especiales. Estos son los m\u00e1s importantes:</p> <ul> <li>name: es el campo utilizado para el Identificador Externo o cuando se hace referencia en los many2one en la vista.</li> <li>active: indica si el registro est\u00e1 activo. Permite ocultar productos que ya no se necesitan, por ejemplo.</li> <li>sequence: permite definir el orden de los registros a mostrar en una lista.</li> </ul> <p>Los fields se declaran con un constructor:</p> <pre><code>from openerp import models, fields\n\nclass LessMinimalModel(models.Model):\n    _name = 'test.model2'\n\n    name = fields.Char()\n</code></pre> <p>Tienen unos atributos comunes:</p> <ul> <li>string (unicode, por defecto: el nombre del field): la etiqueta que ver\u00e1n los usuarios en la vista.</li> <li>required (bool, por defecto: False): si es True, el campo no puede quedar vac\u00edo.</li> <li>help (unicode, por defecto: ''): en los formularios proporciona ayuda al usuario para rellenar el campo.</li> <li>index (bool, por defecto: False): pide a Odoo que sea el \u00edndice de la base de datos. En otro caso, el ORM crea un campo id.</li> </ul> <p>Y algunos, sobre todo los especiales, tienen atributos particulares.</p> <p>Ejemplo completo:</p> <pre><code>class AModel(models.Model):\n\n    _name = 'a_name'\n\n    name = fields.Char(\n        string=\"Name\",                   # Etiqueta opcional del campo\n        compute=\"_compute_name_custom\",  # Convierte el campo en calculado\n        store=True,                      # Si es calculado, almacena el resultado\n        select=True,                     # Fuerza \u00edndice en el campo\n        readonly=True,                   # El campo ser\u00e1 solo lectura en las vistas\n        inverse=\"_write_name\",           # Al actualizar, dispara esta funci\u00f3n\n        required=True,                   # Campo obligatorio\n        translate=True,                  # Habilita traducci\u00f3n\n        help='blabla',                   # Texto de ayuda\n        company_dependent=True,          # Convierte columnas a ir.property\n        search='_search_function',       # B\u00fasqueda personalizada, usado sobre todo con compute\n        copy=True                        # Si se puede copiar con el m\u00e9todo copy()\n    )\n\n    # La clave string no es obligatoria\n    # Por defecto usar\u00e1 el nombre de la propiedad capitalizado\n\n    name = fields.Char()  # Definici\u00f3n v\u00e1lida\n</code></pre> <p>Si queremos valores por defecto, se pueden indicar como un atributo del field.</p> <p><pre><code>name = fields.Char(default='Alberto')\n</code></pre> o <pre><code>name = fields.Char(default=a_fun)\n...\ndef a_fun(self):\n    return self.do_something()\n</code></pre></p>"},{"location":"3_1_ArquitecturaOdoo/#fields-normals","title":"Fields normals","text":"<p>Aquests s\u00f3n els fields per a dades normals que proporciona Odoo:</p> <ul> <li>Integer</li> <li>Char</li> <li>Text</li> <li>Date : Mostra un calendari en la vista.</li> <li>Datetime</li> <li>Float</li> <li>Boolean</li> <li>Html : Guarda un text, per\u00f2 es representa de manera especial en el     client.</li> <li>Binary : Per guardar, per exemple, imatges. Utilitza codificaci\u00f3     base64 al enviar els fitxers al client. En realitat les guarda en     /var/lib/odoo/.local/share/Odoo/filestore i la ruta als fitxers     la diu la taula ir_attachment junt amb el id, nom del field i el     model.</li> <li>Image (Odoo13) : En el cas d\\'imatges, accepta els atributs     max_width i max_height on es pot dir en p\u00edxel que ha de     redimensionar la imatge a eixa mida m\u00e0xima.</li> <li>Selection : Mostra un select amb les opcions indicades.</li> </ul> <pre><code>     type = fields.Selection([('1','Basic'),('2','Intermediate'),('3','Completed')])\n     aselection = fields.Selection(selection='a_function_name') # Es pot cridar a una funci\u00f3 que defineix les opcions.\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#fields-relacionals","title":"Fields Relacionals","text":"<p>Les relacions entre els models (en definitiva, entre les taules de la base de dades) tamb\u00e9 les simplifica l\\'ORM. D\\'aquesta maneram les relacions 1 a molts es fan en el Odoo anomena Many2one i les relacions Mols a Molts es fan el el Many2Many. Les relacions molts a molts, en una base de dades relacional, impliquen una tercera taula en mitg, per\u00f2 en Odoo no tenim que preocupar-nos d\\'aquestes coses si no volem, el mapat dels objectes el detectar\u00e0 i far\u00e0 les taules, claus i restriccions d\\'integritat necessaries. Anem a repasar un a un aquests camps:</p>"},{"location":"3_1_ArquitecturaOdoo/#reference","title":"Reference","text":"<p>Una refer\u00e8ncia arbitr\u00e0ria a un model i un camp. 2</p> <pre><code> aref = fields.Reference([('model_name', 'String')])\n aref = fields.Reference(selection=[('model_name', 'String')])\n aref = fields.Reference(selection='a_function_name')\n\n# Fragment de test_new_api:\n    reference = fields.Reference(string='Related Document', selection='_reference_models')\n    @api.model\n    def _reference_models(self):\n        models = self.env['ir.model'].search([('state', '!=', 'manual')])\n        return [(model.model, model.name)\n                for model in models\n                if not model.model.startswith('ir.')]\n</code></pre> <p>Els fields reference no s\u00f3n molt utilitzats, ja que normalment les relacions entre models s\u00f3n sempre les mateixes.</p>"},{"location":"3_1_ArquitecturaOdoo/#many2one","title":"Many2one","text":"<p>Relaci\u00f3 amb un altre model</p> <pre><code> arel_id = fields.Many2one('res.users')\n arel_id = fields.Many2one(comodel_name='res.users')\n an_other_rel_id = fields.Many2one(comodel_name='res.partner', delegate=True)\n</code></pre> <p>En aquest cas:</p> <pre><code>----------            -----------\n| Pais   |  one       |  Ciutat | \n---------- -----      -----------\n| * id   |     |      | * id    |\n| * name |     |  many| * name  |\n----------     |------| * pais  |\n                      -----------\n</code></pre> <p>El codi resultant ser\u00eda:</p> <pre><code>class ciutat(models.Model):\n    _name = 'mon.ciutat'\n    pais = fields.Many2one(\"mon.pais\", string='Pais', ondelete='restrict')\n</code></pre> <p>delegate est\u00e0 en True per a fer que els fields del model apuntat siguen accessibles des del model actual.</p> <p>Accepta tamb\u00e9 context i domain com en la vista. D\\'aquesta manera queda disponible per a totes les possibles vistes.</p> <p>Un altre argument addicional \u00e9s ondelete que permet definir el comportament al esborrar l\\'element referenciat a set null, restrict o cascade.</p> <p>ondelete cascade esborra els fills a nivel de PostgreSQL, per\u00f2 no elimina en External Id, aix\u00f2 es fa en unlink(), per\u00f2 no executa unlink() dels fills. Per tant, si volem que s'eliminen per complet, cal heretar el unlink del pare i afegir la cridada al dels fills.</p>"},{"location":"3_1_ArquitecturaOdoo/#one2many","title":"One2many","text":"<p>Inversa del Many2one. Necessita de la exist\u00e8ncia d\\'un Many2one en l\\'altre:</p> <pre><code> arel_ids = fields.One2many('res.users', 'arel_id')\n arel_ids = fields.One2many(comodel_name='res.users', inverse_name='arel_id')\n</code></pre> <p>Un One2many funciona perqu\u00e8 hi ha un many2one en l\\'altre model. D\\'aquesta manera, sempre has de especificar el nom del model i el nom del camp Many2one del model que fa referencia a l\\'actual, com es pot veure en l\\'exemple.</p> <p>En l\\'exemple anterior, quedaria com:</p> <pre><code>class pais(models.Model):\n    _name = 'mon.pais'\n    ciutats = fields.One2many('mon.ciutat', 'pais', string='Ciutats')\n</code></pre> <p>```{admonition} Important :class: danger \u00c9s important entendre que el One2many no implica dades addicionals en la base de dades i sempre \u00e9s calculat com un ''select'' en la base de dades on el id del model actual coincidisca amb el Many2one (clau aliena) de l'altre model. Aix\u00f2 fa que no tinga sentit fer One2many computed o ficar un domain per restringit els que es poden afegir. <pre><code>```{admonition} Domains\n:class: tip\nEls One2many poden tindre domain per no mostrar els que no compleixen una condici\u00f3, aix\u00f2 no significa que no existeixi aquesta relaci\u00f3.\n</code></pre></p>"},{"location":"3_1_ArquitecturaOdoo/#many2many","title":"Many2many","text":"<p>Relaci\u00f3 molts a molts.</p> <pre><code> arel_ids = fields.Many2many('res.users')\n arel_ids = fields.Many2many(comodel_name='res.users', # El model en el que es relaciona\n                            relation='table_name', # (opcional) el nom del la taula en mig\n                            column1='col_name', # (opcional) el nom en la taula en mig de la columna d'aquest model\n                            column2='other_col_name')  # (opcional) el nom de la columna de l'altre model.\n</code></pre> <p>El primer exemple sol funcionar directament, per\u00f2 si volem tindre m\u00e9s d\\'una relaci\u00f3 Many2many entre els dos mateixos models, cal utilitzar la sintaxi completa on especifiquem el nom de la relaci\u00f3 i el nom de les columnes que identifiquem els dos models. Pensem que una relaci\u00f3 Many2many implica una taula en mig i estem especificant les seues claus alienes.</p> <p><pre><code>Tamb\u00e9 \u00e9s prec\u00eds especificar la taula en mig si es fa una relaci\u00f3 Many2many al propi model.\n</code></pre> <pre><code>Un Many2many implica una taula en mig. Si volem afegir atributs a aquesta relaci\u00f3, cal crear expl\u00edcitament el model del mig. \n\nEl many2many pot ser ''computed'' i en el c\u00f2mput es pot ordenar o filtrar. Un Many2many computed no crea la taula en mig.\n</code></pre></p>"},{"location":"3_1_ArquitecturaOdoo/#related","title":"Related","text":"<p>Un camp d\\'un altre model, necessita una relaci\u00f3 Many2one. D\\'aquesta manera es poden aprofitar les funcionalitats de guardar, com ara les b\u00fasquedes o refer\u00e8ncies en funcions. En termes de bases de dades, un camp related trenca la tercera forma normal. Aix\u00f2 sol ser problem\u00e0tic, per\u00f2 Odoo t\u00e9 mecanismes per a que no passe res. De totes maneres, si ens preocupa aix\u00f2, amb store=False no guarda res en la taula.</p> <pre><code>participant_nick = fields.Char(string='Nick name',\n                               store=True,\n                               related='partner_id.name'\n</code></pre> <p>Un camp related pot ser de qualsevol tipus. Per exemple, many2one:</p> <pre><code>sala = fields.Many2one('cine.sala',related='sessio.sala',store=True,readonly=True)\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#many2onereference","title":"Many2oneReference","text":"<p>Un Many2one on es guardar tamb\u00e9 el model al qual fa refer\u00e8ncia amb l'atribut: model_field.</p>"},{"location":"3_1_ArquitecturaOdoo/#one2one","title":"One2one","text":"<p>Els camps One2one no existeixen en Odoo. Per\u00f2 si volem aquesta funcionalitat podem utilitzar varies t\u00e8cniques:</p> <ul> <li>Fer dos camps Many2many i restringir amb constrains que sols pot     existir una relaci\u00f3. Problemes:<ul> <li>En la vista no podem ficar un widget com en el Many2one i \u00e9s     complicat evitar relacions creuades.</li> <li>Es pot fer un limit en la vista, per\u00f2 es continuar\u00e0     comportant com un Many2many.</li> </ul> </li> <li>Fer dos Many2one i restringit amb contrains o sql constrains que     sols pot existir una relaci\u00f3 m\u00fatua. (Cal sobreescriure els m\u00e8todes     create i write per a que es cree l\\'associaci\u00f3 autom\u00e0ticament).     Problemes:<ul> <li>Si sobreescribim el write de els dos, es pot produir una cridada     recursiva sense fi i \u00e9s molt complicat aconseguir que no tingam     refer\u00e8ncies creuades.</li> </ul> </li> <li>Fer un Many2one i en l\\'altre model un Many2one computed que busque     en els del primer model. Per poder editar en els dos cal fer una     funci\u00f3 inversa per al camp computed. Aquesta \u00e9s una de les opcions     m\u00e9s elegants. Exemple:</li> </ul> <p><pre><code>class orderline(models.Model):\n    _name = 'sale.order.line'\n    _inherit = 'sale.order.line'\n    booking = fields.Many2one('reserves.bookings')\n\n    _sql_constraints = [\n    ('booking_uniq', 'unique(booking)', 'There is another order line for this booking'),\n    ]\n\nclass bookings(models.Model):\n    _name = 'reserves.bookings'\n\n    name = fields.Char()\n    order_line = fields.Many2one('sale.order.line',compute='_get_order_line',inverse='_set_order_line')\n\n    @api.multi\n    def _get_order_line(self):\n        for b in self:\n            b.order_line=self.env['sale.order.line'].search([('booking.id','=',b.id)]).id\n\n    @api.one\n    def _set_order_line(self):\n        o = self.order_line.id\n        self.env['sale.order.line'].search([('id','=',o)]).write({'booking':self.id})\n</code></pre> -   Fer un Many2one i un One2many i restringir el m\u00e0xim del One2many (     3     ). Problemes:     -   Els mateixos que en els dos many2manys. \u00c9s m\u00e9s simple restringir         les relacions creuades. -   Fer una her\u00e8ncia m\u00faltiple.     4.     Problemes:     -   Esta \u00e9s, en teor\u00eda, la forma m\u00e9s oficial de fer-ho, per\u00f2 obliga         a crear sempre la relaci\u00f3 i els models en un ordre determinat.</p>"},{"location":"3_1_ArquitecturaOdoo/#filtres-domains","title":"Filtres (Domains)","text":"<p>En ocasions \u00e9s necessari afegir un filtre en el codi python per fer que un camp relacional no puga tindre certes refer\u00e8ncies. El comportament del domain \u00e9s diferent depen del tipus de field.</p> <ul> <li>Domain en Many2one: Filtra els elements del model referenciat     que poden ser elegits per al field:</li> </ul> <pre><code>parent = fields.Many2one('game.resource', domain=\"[('template', '=', True)]\")\n</code></pre> <ul> <li>Domain en Many2many: La llista d\\'elements a triar es filtra     segons el domain:</li> </ul> <pre><code>allowed_value_ids = fields.Many2many(\n    comodel_name=\"x\",\n    compute=\"_compute_allowed_value_ids\"\n)\n\ndef _compute_allowed_value_ids(self):\n    for record in self:\n        record.allowed_value_ids = self.env[\"x\"].search(...)\n\nvalue_id = fields.Many2many(\n    comodel_name=\"x\",\n    domain=\"[('id', 'in', allowed_value_ids)]\",\n)\n</code></pre> <ul> <li>Domain en One2many: Al ser una relaci\u00f3 que depen d\\'altre     Many2one, no es pot filtrar, si fiquem un domain, sols deixar\u00e0 de     mostrar els que no compleixen el domain, per\u00f2 no deien d\\'existir:</li> </ul>"},{"location":"3_1_ArquitecturaOdoo/#fields-computed","title":"Fields Computed","text":"<p>Moltes vegades volem que el contingut d\\'un camp siga calculat en el moment en que anem a veure-lo. Tots els tipus de fields poden ser computed. Anem a veure alguns exemples:</p> <pre><code>   taken_seats = fields.Float(string=\"Taken seats\", compute='_taken_seats')   # Aquest camp no es guarda a la base de dades \n                                                                #i sempre es recalcula quan executem un action que el mostra\n\n   @api.depends('seats', 'attendee_ids')  # El decorador @api.depends() indica que es cridar\u00e0 a la funci\u00f3 \n                                          # sempre que es modifiquen els camps seats i attendee_ids. \n                                          #Si no el posem, es recalcula sols al recarregar el action.\n   def _taken_seats(self):          \n      for r in self:  # El for recorre self, que \u00e9s un recordset amb tots els elements del model mostrats \n                      # per la vista, si \u00e9s un tree, seran tots els visibles i si \u00e9s un form, ser\u00e0 un singleton.\n          if not r.seats: # r \u00e9s un singleton i es pot accedir als fields com a variables de l'objecte.      \n              r.taken_seats = 0.0 \n          else:\n              r.taken_seats = 100.0 * len(r.attendee_ids) / r.seats\n</code></pre> <p>En aquest exemple es veu c\u00f3m el camp float taken seats es calcula en una funci\u00f3 privada _taken_seats. \u00c9s interessant observar el for perqu\u00e8 recorre totes les instancies a les que fa refer\u00e8ncia el model. Aquesta funci\u00f3 sols s\\'executar\u00e0 una vegada encara que tinga que calcular tots els elements d\\'una llista. Per aix\u00f2, la propia funci\u00f3 \u00e9s la que t\u00e9 que iterar els elements de self. self \u00e9s un <code>recordset</code>, per tant, \u00e9s com una llista en la que cada element \u00e9s un registre del model. Si el computed \u00e9s cridat al entrar a un formulari, el recordset tindr\u00e0 sols un element, per\u00f2 si el camp computed es veu en una llista (tree), pot ser que siguen m\u00e9s d\\'un registre. \u00c9s important recordar fer el for record in self: encara que pensem que el camp computed sols l\\'utilitzarem en un formulari.</p> <p>Exemples de computed de tots els tipus de fields:</p> <pre><code># -*- coding: utf-8 -*-\n\nfrom openerp import models, fields, api, tools\nfrom datetime import date, datetime\n\nclass proves_computed(models.Model):\n     _name = 'proves_computed.proves_computed'\n\n     name = fields.Char()\n     value = fields.Integer()\n     image = fields.Binary(String=\"Image original\")\n     computedfloat = fields.Float(compute=\"_value_pc\", store=True)\n     computedchar = fields.Char(compute=\"_value_pc\", store=False)\n     medium_image = fields.Binary(compute=\"_redimensionar\", store=True)\n     small_image = fields.Binary(compute=\"_redimensionar\", store=True)\n     computedm2o = fields.Many2one('res.partner',compute=\"_value_pc\", store=False)\n     computedm2m = fields.Many2many(comodel_name='product.template',compute=\"_value_pc\", store=False)\n     computeddate = fields.Date(compute=\"_value_pc\", store=False)\n     computeddatetime = fields.Datetime(compute=\"_value_pc\", store=False)\n\n     description = fields.Text()\n\n     @api.depends('value')\n     def _value_pc(self):\n      for r in self:\n        r.computedfloat = float(r.value) / 100 \n        r.computedchar = \"(\"+str(r.value)+\")\"\n        r.computedm2o = self.env['res.partner'].search([('id','=',r.value)]).id # Many2one espera un id, que \u00e9s un camp Integer. \n        print '\\033[93m'+str(self.env['product.product'].search([('id','&gt;',r.value)]).ids)+'\\033[0m'\n        r.computedm2m = self.env['product.template'].search([('id','&gt;',r.value)]).ids #Many2many espera un array d'ids o un recordset. \n        # El codi comentat a continuaci\u00f3 fa el mateix, per si volem fer altres coses dins del for.\n        #ids = []\n        #for t in self.env['product.template'].search([('id','&gt;',r.value)]):\n        # ids.append(t.id)\n        #r.computedm2m = ids\n\n        #r.computeddate = date.today() # Aquest depen de Python\n        r.computeddate = fields.date.today() # Recomanem aquest, ja que \u00e9s propi de la classe fields d'Odoo\n        #r.computeddate = datetime.now()\n        r.computeddatetime = fields.datetime.now()\n\n\n     @api.depends('image')\n     def _redimensionar(self):\n       for r in self:\n         image_original = r.image\n         if image_original:\n            images = tools.image_get_resized_images(image_original)\n            r.medium_image = images['image_medium']                        \n            r.small_image = images['image_small']                \n         else:\n            r.medium_image = \"\"                        \n            r.small_image = \"\"\n</code></pre> <p>(Codi complet)</p> <p>En l\\'apartat del <code>controlador</code> s\\'expliquem m\u00e9s detalls de les funcions en python-odoo.</p>"},{"location":"3_1_ArquitecturaOdoo/#buscar-i-escriure-en-camps-computed","title":"Buscar i escriure en camps computed","text":"<p>Amb el api.depends podem fer que camps calculats puguen ser buscats o referenciats des d\\'uns altres models, ja que podem dir que s\u00ed se guarden en la base de dades. Si es guarda en la base de dades no es recalcula fins que no canvia el contingut del field del que dep\u00e8n. Per\u00f2 si el camp calculat no dep\u00e8n de valors est\u00e0tics d\\'altres fields i/o necessitem que sempre es calcule, no tenim moltes opcions elegants. Una d\\'elles pot ser fer dos camps, un calculat store=False i altre no i fer un write en la funci\u00f3. L\\'altra possibilitat \u00e9s fer una funci\u00f3 p\u00fablica que puga ser cridada des d\\'un altre model. La m\u00e9s elegant que no sempre funciona \u00e9s utilitzar l\\'opci\u00f3 search i assignar-li una funci\u00f3 que ha de retornar un domini de b\u00fasqueda. El problema \u00e9s que no accepta molta complexitat, ja que suposa una cerca per tota la base de dades i pot ser molt ineficient.</p> <p>Per defecte no es pot escriure en un camp computed. No t\u00e9 massa sentit la majoria dels casos, ja que \u00e9s un camp que dep\u00e8n d\\'altres. Per\u00f2 pot ser que, de vegades volem escriure el resultat i que modifique el camp origen. Imaginem, per exemple, que sabem el preu final i volem que calcule el preu sense IVA. Per fer-ho, la millor manera \u00e9s crear una funci\u00f3 i fer que estiga en l\\'opci\u00f3 inverse.</p> <p>Exemple:</p> <pre><code> preu = fields.Float('Price',compute=\"_get_price\",search='_search_price',inverse='_set_price')\n\n @api.depends('pelicula','descompte')\n      def _get_price(self):\n        for r in self:\n          price = r.pelicula.preu\n          price = price - (price*r.descompte/100)\n          r.preu = price\n\n      def _search_price(self,operator,value): # De moment aquest search sols \u00e9s per a ==\n       preus = self.search([]).mapped(lambda e: [e.id , e.pelicula.preu - (e.pelicula.preu*e.descompte/100)]) # Un bon exemple de mapped en lambda\n       print preus\n       p = [ num[0] for num in preus if num[1] == value]  # condici\u00f3 if en una llista python sense fer un for (list comprehension)\n       # tamb\u00e9 es pot provar en un filter() de python\n       print p\n       # p \u00e9s una llista de les id que ja compleixen la condici\u00f3, per tant sols cal fer que la id estiga en la llista.\n       return [('id','in',p)]\n\n      def _set_price(self):\n       self.pelicula.preu = self.preu  # A\u00e7\u00f2 \u00e9s un exemple, per\u00f2 est\u00e0 mal, ja que modifiques el preu de la peli en totes les sessions\n</code></pre> <p>Documentaci\u00f3 oficial: https://www.odoo.com/documentation/master/developer/reference/backend/orm.html</p>"},{"location":"3_1_ArquitecturaOdoo/#valors-per-defecte","title":"Valors per defecte","text":"<p>En Odoo \u00e9s molt f\u00e0cil fer valors per defecte, ja que \u00e9s un argument m\u00e9s en el constructor dels fields:</p> <pre><code>name = fields.Char(default=\"Unknown\")\nuser_id = fields.Many2one('res.users', default=lambda self: self.env.user)\nstart_date = fields.Date(default=fields.Date.today())\nactive = fields.Boolean(default=True)\ndef compute_default_value(self):\n    return self.get_value()\na_field = fields.Char(default=compute_default_value)\n</code></pre> <p>Si volem, per exemple, ficar la data del moment de crear, no podem fer aix\u00f2:</p> <pre><code>start_date = fields.Date(default=fields.Date.today())  # MAL\n</code></pre> <p>Perqu\u00e8 calcula la data del moment d\\'actualitzar el m\u00f2dul, no el de crear l\\'element en el model. Cal fer:</p> <pre><code>start_date = fields.Date(default=lambda self: fields.Date.today())  # CORRECTE\n</code></pre> <p>o</p> <pre><code>start_date = fields.Datetime(default=lambda self: fields.Datetime.now()) # CORRECTE\n</code></pre> <p>El valor per defecte no pot dependre d\\'un field que est\u00e0 creant-se en eixe moment. En eixe cas es pot utilitzar un on_change.</p> <p>En cas de tindre molts valors per defecte o que depenen del context, es pot utilitzar la funci\u00f3 default_get que ja tenen els models.</p> <pre><code>    @api.model\n    def default_get(self, default_fields):\n        result = super(SelectSalePrice, self).default_get(default_fields)\n        if self._context.get('default_picking_id') is not None:\n            result['picking_id'] = self._context.get('default_picking_id')\n        return result\n</code></pre> <p>El que fa aquesta funci\u00f3 \u00e9s un poc avan\u00e7at de moment, ja que fa \u00fas del <code>context</code> i l\\'herencia per afegir un valor per defecte al diccionari que retorna aquesta funci\u00f3 en la classe Model</p>"},{"location":"3_1_ArquitecturaOdoo/#restriccions-constrains","title":"Restriccions (constrains)","text":"<p>Els objectes poden incorporar, de forma opcional, restriccions d'integritat, addicionals a les de la base de dades. Odoo valida aquestes restriccions en les modificacions de dades i, en cas de violaci\u00f3, mostra una pantalla d'error.</p> <pre><code>from ***Odoo***.exceptions import ValidationError\n\n@api.constrains('age')\ndef _check_something(self):\n    for record in self:\n        if record.age &gt; 20:\n            raise ValidationError(\"Your record is too old: %s\" % record.age)\n    # all records passed the test, don't return anything\n</code></pre> <p>En ocasions, quan tenim clar c\u00f3m far\u00edem aquesta restricci\u00f3 en SQL, tal vegada ens resulte m\u00e9s interessant fer una restricci\u00f3 de la base de dades amb una sql constraint. Aquestes es defineixen amb 3 strings (name, sql_definition, message). Per exemple:</p> <pre><code>_sql_constraints = [\n    ('name_uniq', 'unique(name)', 'Custom Warning Message'),\n    ('contact_uniq', 'unique(contact)', 'Custom Warning Message')\n]\n</code></pre> <p>En aquest cas \u00e9s una restricci\u00f3 d\\'unicitat, la qual \u00e9s m\u00e9s simple que fer una b\u00fasqueda en python.</p>"},{"location":"3_1_ArquitecturaOdoo/#fitxers-de-dades","title":"Fitxers de dades","text":"<p>Quan fem un m\u00f2dul d\\'Odoo, es poden definir dades que es guardaran en la base de dades. Aquestes dades poden ser necess\u00e0ries per al funcionament del m\u00f2dul, de demostraci\u00f3 o incl\u00fas part de la vista.</p> <p><pre><code>Alguns m\u00f2duls sols estan per clavar dades en Odoo\n</code></pre> Tots els fitxers de dades s\u00f3n en XML i tenen una estructura com esta:</p> <pre><code>&lt;odoo&gt;\n        &lt;record model=\"{model name}\" id=\"{record identifier}\"&gt;\n            &lt;field name=\"{a field name}\"&gt;{a value}&lt;/field&gt;\n        &lt;/record&gt;\n&lt;odoo&gt;\n</code></pre> <p>Dins de les etiquetes odoo poden trobar una etiqueta record per cada fila en la taula que volem introduir. Cal especificar el model i el id. El id \u00e9s un identificador extern, que no te perqu\u00e8 coincidir amb la clau prim\u00e0ria que l\\'ORM utilitzar\u00e0 despr\u00e9s. Cada field tindr\u00e0 un nom i un valor.</p>"},{"location":"3_1_ArquitecturaOdoo/#external-ids","title":"External Ids","text":"<p>Tots els records de la base de dades tenen un identificador \u00fanic en la seua taula, el id. \u00c9s un n\u00famero auto incremental assignat per la base de dades. No obstant, si volem fer refer\u00e8ncia a ell en fitxers de dades o altres llocs, no sempre tenim perqu\u00e8 saber el id. La soluci\u00f3 d\\'odoo s\u00f3n els External Identifiers. Aix\u00f2 \u00e9s una taula que relaciona cada id de cada taula en un nom. Es tracta del model ir.model.data. Per trobar-los cal anar a:</p> <p><code>Settings\u00a0&gt;\u00a0Technical\u00a0&gt;\u00a0Sequences\u00a0&amp;\u00a0identifiers\u00a0&gt;\u00a0External\u00a0Indentifiers</code></p> <p>Ah\u00ed dins trobem la columna Complete ID.</p> <p>Per trobar les id al fer fitxers de demostraci\u00f3 o de dades podem anar al men\u00fa, per\u00f2 eixes ids canvien d\\'una instal\u00b7laci\u00f3 a un altra. Per tant, cal utilitzar les external id. Per aconseguir-lo podem obrir el mode desenvolupador i obrir el men\u00fa View Metadata.</p> <p>En les dades de demo, els external Ids s\\'utilitzen per no utilitzar les id, que poden canviar al ser auto incrementals. Per a que funcione cal utilitzar l\\'atribut ref:</p> <pre><code>&lt;field name=\"product_id\" ref=\"product.product1\"/&gt;\n</code></pre> <pre><code>Es recomana fer l'atribut '''id''' en el record, encara que no sobreescriu el id real, serveix per declarar el External Id i \u00e9s m\u00e9s f\u00e0cil despr\u00e9s fer refer\u00e8ncia a ell.\n</code></pre> <p>Veure tamb\u00e9 la funci\u00f3 ref() de l\\'ORM</p>"},{"location":"3_1_ArquitecturaOdoo/#expressions","title":"Expressions","text":"<p>De vegades volem que els fields es calculen cada vegada que s\\'actualitza el m\u00f2dul. Aix\u00f2 es pot fer en l\\'atribut eval que avalua una expressi\u00f3 de Python.</p> <pre><code>&lt;field name=\"date\" eval=\"(datetime.now()+timedelta(-1)).strftime('%Y-%m-%d')\"/&gt;\n&lt;field name=\"product_id\" eval=\"ref('product.product1')\"/&gt; # Equivalent a l'exemple anterior\n&lt;field name=\"price\" eval=\"ref('product.product1').price\"/&gt;\n&lt;field name=\"avatar\" model=\"school.template\" eval=\"obj().env.ref('school.template_student1').image\" &gt;&lt;/field&gt;  # Com que utilitza obj() necessita model=\"...\n</code></pre> <p>Per al x2many, es pot utilitzar el eval per assignar una llista d\\'elements.</p> <pre><code>&lt;field name=\"tag_ids\" eval=\"[(6,0,[ref('vehicle_tag_leasing'),ref('fleet.vehicle_tag_compact'),\n                                   ref('fleet.vehicle_tag_senior')] )]\" /&gt;\n</code></pre> <p>Observem que hem passat una tripleta amb un 6, un 0 i una llista de refs. Les tripletes poden ser:</p> <ul> <li>(0,_ ,{\\'field\\': value}): Crea un nou registre i el vincula</li> <li>(1,id,{\\'field\\': value}): Actualtiza els valors en un registre ja     vinculats</li> <li>(2,id,_): Desvincula i elimina el registre</li> <li>(3,id,_): Desvincula per\u00f2 no elimina el registre de la relaci\u00f3.</li> <li>(4,id,_): Vincula un registre ja existent</li> <li>(5,_,_): Desvincula pero no elimina tots els registres vinculats</li> <li>(6,_,[ids]): Reempla\u00e7a la llista de registres vinculats.</li> </ul>"},{"location":"3_1_ArquitecturaOdoo/#dades-per-als-binary-i-image","title":"Dades per als Binary i Image","text":"<p>Algunes dades com les imatges o fitxers es poden posar en records. Hi ha dos maneres: </p> <ul> <li>Convertir en Base64 el fitxer i copiar i pegar el resultat dins del field.</li> <li>Afegir el atribut <code>type=\"base64\"</code> i el atribut <code>file=\"modul/demo/fitxer\"</code></li> </ul> <p><pre><code>&lt;field name=\"image_1920\" type=\"base64\" file=\"exemple/demo/cares/1000.jpg\"/&gt;\n</code></pre> Observem la ruta que inicia des del directori del m\u00f2dul.</p>"},{"location":"3_1_ArquitecturaOdoo/#esborrar","title":"Esborrar","text":"<p>Amb l\\'etiqueta delete es pot especificar els elements a esborrar amb el external ID o amb un search:</p> <pre><code>&lt;delete model=\"cine.sessio\" id=\"sessio_cine1_1\"&gt;&lt;/delete&gt;\n</code></pre> <pre><code>Si falla l'actualitzaci\u00f3 amb dades de demo, \u00e9s possible que ***Odoo*** deshabilite la possibilitat de tornar-les a instal\u00b7lar. Aix\u00f2 \u00e9s el field demo de ir.module.module que \u00e9s readonly, per tant, cal modificar-lo a ma en la base de dades:\n\n`update\u00a0ir_module_module\u00a0set\u00a0demo\u00a0=\u00a0't'\u00a0where\u00a0name='school';`\n</code></pre> <p>M\u00e9s informaci\u00f3: https://www.odoo.com/documentation/master/developer/reference/backend/data.html</p>"},{"location":"3_1_ArquitecturaOdoo/#accions-i-menus","title":"Accions i men\u00fas","text":"<p>Si vols con\u00e8ixer en m\u00e9s detall c\u00f3m funcionen les accions en Odoo, llig l\\'article Accions i men\u00fas en Odoo</p> <p>El client web de Odoo cont\u00e9 uns men\u00fas dalt i a l\\'esquerra. Aquests men\u00fas, al ser accionats mostren altres men\u00fas i les pantalles del programa. Quant pulsem en un men\u00fa, canvia la pantalla perqu\u00e8 hem fet una acci\u00f3.</p> <p>Una acci\u00f3 b\u00e0sicament t\u00e9:</p> <ul> <li>type: El tipus d\\'acci\u00f3 que \u00e9s i c\u00f3m l\\'acci\u00f3 \u00e9s interpretada.     Quan la definim en el XML, el type no cal especificar-lo, ja que ho     indica el model en que es guarda.</li> <li>name: El nom, que pot ser mostrat en la pantalla o no. Es     recomana que siga llegible per els humans.</li> </ul> <p>Les accions i els men\u00fas es declaren en fitxers de dades en XML o dir\u00e8ctament si una funci\u00f3 retorna un diccionari que la defineix. Les accions poden ser cridades de tres maneres:</p> <ul> <li>Fent clic en un men\u00fa.</li> <li>Fent clic en botons de les vistes (han d\\'estar connectats amb     accions).</li> <li>Com accions contextuals en els objectes.</li> </ul> <p>D\\'aquesta manera, el client web pot saber quina acci\u00f3 ha d\\'executar si rep alguna d\\'aquestes coses:</p> <ul> <li>false: Indica que s\\'ha de tancar el di\u00e0leg actual.</li> <li>Una string: Amb l\\'etiqueta de l\\'acci\u00f3 de client a     executar.</li> <li>Un n\u00famero: Amb el ID o external ID de l\\'acci\u00f3 a trobar a la     base de dades.</li> <li>Un diccionari: Amb la definici\u00f3 de l\\'acci\u00f3, aquesta no est\u00e0 ni     en XML ni en la base de dades. En general, \u00e9s la manera de cridar a     un action al finalitzar una funci\u00f3.</li> </ul>"},{"location":"3_1_ArquitecturaOdoo/#accions-tipus-window","title":"Accions tipus window","text":"<p>Les accions window s\u00f3n un record m\u00e9s (ir.actions.act_window). No obstant, els men\u00fas que les criden, tenen una manera m\u00e9s r\u00e0pida de ser declarats amb una etiqueta menuitem:</p> <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"action_list_ideas\"&gt;\n    &lt;field name=\"name\"&gt;Ideas&lt;/field&gt;\n    &lt;field name=\"res_model\"&gt;idea.idea&lt;/field&gt;\n    &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n&lt;/record&gt;\n&lt;menuitem id=\"menu_ideas\" parent=\"menu_root\" name=\"Ideas\" sequence=\"10\"\n          action=\"action_list_ideas\"/&gt;\n</code></pre> <pre><code> Les accions han de ser declarades al XML abans que els men\u00fas que les accionen. \n</code></pre> <p>Exemple:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;openerp&gt;\n    &lt;data&gt;\n        &lt;!-- window action --&gt;\n        &lt;!--\n            The following tag is an action definition for a \"window action\",\n            that is an action opening a view or a set of views\n        --&gt;\n        &lt;record model=\"ir.actions.act_window\" id=\"course_list_action\"&gt;\n            &lt;field name=\"name\"&gt;Courses&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;openacademy.course&lt;/field&gt;\n            &lt;field name=\"view_type\"&gt;form&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n            &lt;field name=\"help\" type=\"html\"&gt;\n                &lt;p class=\"oe_view_nocontent_create\"&gt;Create the first course\n                &lt;/p&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n\n        &lt;!-- top level menu: no parent --&gt;\n        &lt;menuitem id=\"main_openacademy_menu\" name=\"Open Academy\"/&gt;\n        &lt;!-- A first level in the left side menu is needed\n             before using action= attribute --&gt;\n        &lt;menuitem id=\"openacademy_menu\" name=\"Open Academy\"\n                  parent=\"main_openacademy_menu\"/&gt;\n        &lt;!-- the following menuitem should appear *after*\n             its parent openacademy_menu and *after* its\n             action course_list_action --&gt;\n        &lt;menuitem id=\"courses_menu\" name=\"Courses\" parent=\"openacademy_menu\"\n                  action=\"course_list_action\"/&gt;\n        &lt;!-- Full id location:\n             action=\"openacademy.course_list_action\"\n             It is not required when it is the same module --&gt;\n    &lt;/data&gt;\n&lt;/openerp&gt;\n</code></pre> Sols el tercer nivell de men\u00fas pot tindre associada un action. El primer \u00e9s el men\u00fa de dalt i el segon no es \\'clicable\\'.</p> <pre><code>El que hem vist en esta secci\u00f3 \u00e9s la definici\u00f3 d'una acci\u00f3 en un XML com a part de la vista, per\u00f2 una acci\u00f3 no \u00e9s m\u00e9s que una forma c\u00f2moda d'escriure moltes coses que far\u00e0 el client en javascript per demanar alguna cosa al servidor. Els actions separen i simplifiquen el desenvolupament de la interf\u00edcie d'usuari que \u00e9s el client web. Un men\u00fa o bot\u00f3 en html acciona una funci\u00f3 javascript que en principi no sap el que fer. Aquesta demana que es carregue la definici\u00f3 del seu action. Una vegada carregada la definici\u00f3, queda clar tot el que ha de demanar (les vistes, context, dominis, vistes search, lloc on carregar-ho tot...) aleshores demana les vistes i amb ajuda de les vistes i els fields, demana els records que s\u00f3n les dades a mostrar. Per tant, un action \u00e9s la definici\u00f3 sense programar javascript de coses que ha de fer el javascript. ***Odoo*** permet declarar actions com a resposta de funcions. Aquestes actions no estan en la base de dades, per\u00f2 s\u00f3n enviades igualment al client i el client fa en elles el mateix que en un action que ell ha demanat. Un exemple d'aix\u00f2 s\u00f3n els actions que retornen els botons dels wizards. De fet, podem fer que un bot\u00f3 torne un action i, per tant, obrir una vista diferent. \n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#la-vista","title":"La vista","text":"<p>Per saber m\u00e9s sobre les vistes i c\u00f3mo millorar-les, consulta l\\'article de La vista en Odoo</p>"},{"location":"3_1_ArquitecturaOdoo/#herencia","title":"Her\u00e8ncia","text":"<p>El framework d\\'Odoo facilita el mecanisme de l'her\u00e8ncia per tal que els programadors puguin adaptar m\u00f2duls existents i garantir a la vegada que les actualitzacions dels m\u00f2duls no destrossin les adequacions desenvolupades.</p> <p>L'her\u00e8ncia es pot aplicar en els tres components del patr\u00f3 MVC:</p> <ul> <li>En el model: possibilita ampliar les classes existents o dissenyar     noves classes a partir de les existents.</li> <li>En la vista: possibilita modificar el comportament de vistes     existents o dissenyar noves vistes.</li> <li>En el controlador: possibilita sobreescriure els m\u00e8todes existents o     dissenyar-ne de nous.</li> </ul> <p>OpenObject proporciona tres mecanismes d'her\u00e8ncia: l'her\u00e8ncia de classe, l'her\u00e8ncia per prototip i l'her\u00e8ncia per delegaci\u00f3.</p> Mecanisme Caracter\u00edstiques Com es defineix De classe - Her\u00e8ncia simple. - La classe original queda substitu\u00efda o ampliada.  - Afegeix noves funcionalitats (atributs i/o m\u00e8todes) a la classe original.  - Les vistes definides sobre la classe original continuen funcionant.  - Permet sobreescriure m\u00e8todes de la classe original.  - En PostgreSQL, continua mapada en la mateixa taula que la classe original, ampliada amb els nous atributs que pugui incorporar. - S'utilitza l'atribut <code>_inherit</code> en la definici\u00f3 de la nova classe Python: <code>_inherit = 'obj'</code>.  - El nom de la nova classe ha de continuar sent el mateix que el de la classe original: <code>_name = 'obj'</code>. Per prototip - Her\u00e8ncia simple.  - Aprofita la definici\u00f3 de la classe original (com si fos un \u00abprototipus\u00bb).  - La classe original continua existint.  - Afegeix noves funcionalitats (atributs i/o m\u00e8todes) a les aportades per la classe original.  - Les vistes definides sobre la classe original no existeixen (cal dissenyar-les de nou).  - Permet sobreescriure m\u00e8todes de la classe original.  - En PostgreSQL, queda mapada en una nova taula. - S'utilitza l'atribut <code>_inherit</code> en la definici\u00f3 de la nova classe Python: <code>_inherit = 'obj'</code>.  - Cal indicar el nom de la nova classe: <code>_name = 'nou_nom'</code>. Per delegaci\u00f3 - Her\u00e8ncia simple o m\u00faltiple.  - La nova classe \u00abdelega\u00bb certs funcionaments a altres classes que incorpora a l'interior.  - Els recursos de la nova classe contenen un recurs de cada classe de la que deriven.  - Les classes base continuen existint.  - Afegeix les funcionalitats pr\u00f2pies (atributs i/o m\u00e8todes) que correspongui.  - Les vistes definides sobre les classes bases no existeixen a la nova classe.  - En PostgreSQL, queda mapada en diferents taules: una taula per als atributs propis, mentre que els recursos de les classes derivades resideixen en les taules corresponents a les dites classes. - S'utilitza l'atribut <code>_inherits</code> en la definici\u00f3 de la nova classe Python: <code>_inherits = {'obj': 'field_id'}</code>.  - Cal indicar el nom de la nova classe: <code>_name = 'nou_nom'</code>. <pre><code>```{figure} imgs/Inheritance_methods.png\n:scale: 100 %\n:alt: Her\u00e8ncia\n\nDiferents modes d'her\u00e8ncia\n```\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#herencia-en-el-model","title":"Her\u00e8ncia en el Model","text":"<p>El disseny d'un model d'Odoo heretat \u00e9s paregut al disseny d'un no heretat; \u00fanicament hi ha dues difer\u00e8ncies:</p> <ul> <li>Apareix l'atribut _inherit o _inherits per indicar     l'objecte (her\u00e8ncia simple) o els objectes (her\u00e8ncia m\u00faltiple) dels     quals deriva el nou objecte. La sintaxi a seguir \u00e9s:</li> </ul> <p><code>_inherit\u00a0=\u00a0'nom.objecte.del.que.es.deriva'</code>\\ <code>_inherits\u00a0=\u00a0{'nom.objecte1':'nom_camp_FK1',\u00a0...}</code></p> <ul> <li>En cas d'her\u00e8ncia simple, el nom (atribut _name) de l'objecte     derivat pot coincidir o no amb el nom de l'objecte pare. Tamb\u00e9 \u00e9s     possible no indicar l'atribut _name, fet que indica que el nou     objecte mant\u00e9 el nom de l'objecte pare.</li> </ul> <p>L'her\u00e8ncia simple (_inherit) amb atribut _name id\u00e8ntic al de l'objecte pare, s'anomena her\u00e8ncia de classe i en ella el nou objecte substitueix l'objecte pare, tot i que les vistes sobre l'objecte pare continuen funcionant. Aquest tipus d'her\u00e8ncia, la m\u00e9s habitual, s'utilitza quan es vol afegir fields i/o modificar propietats de dades existents i/o modificar el funcionament d'alguns m\u00e8todes. En cas d'afegir dades, aquestes s'afegeixen a la taula de la base de dades en la qual estava mapat l'objecte pare.</p> <p>Exemple d\\'her\u00e8ncia de classe L'her\u00e8ncia de classe la trobem en molts m\u00f2duls que afegeixen dades i m\u00e8todes a objectes ja existents, com per exemple, el m\u00f2dul comptabilitat (account) que afegix dades i m\u00e8todes a l'objecte res.partner. Fixem-nos en el contingut del m\u00f2dul account:</p> <pre><code>    class res_partner(Model.model):\n    _inherit = 'res.partner'\n    debit_limit = fields.float('Payable limit')\n    ...\n</code></pre> <p>Podeu comprovar que la taula res_partner d'una empresa sense el m\u00f2dul account instal\u00b7lat no cont\u00e9 el camp debit_limit, que en canvi s\u00ed que hi apareix una vegada instal\u00b7lat el m\u00f2dul.</p> <p>Odoo t\u00e9 molts m\u00f2duls que deriven de l'objecte res.partner per afegir-hi caracter\u00edstiques i funcionalitats.</p> <p>L'her\u00e8ncia simple (_inherit) amb atribut _name diferent al de l'objecte pare, s'anomena her\u00e8ncia per prototip i en ella es crea un nou objecte que aglutina les dades i m\u00e8todes que tenia l'objecte del qual deriva, juntament amb les noves dades i m\u00e8todes que pugua incorporar el nou objecte. En aquest cas, sempre es crea una nova taula a la base de dades per mapar el nou objecte.</p> <p>Exemple d\\'her\u00e8ncia per prototip L'her\u00e8ncia per prototip \u00e9s dif\u00edcil de trobar en els m\u00f2duls que incorpora Odoo. Un exemple el tenim en el m\u00f2dul base_calendar en el qual podem observar el m\u00f2dul comptabilitat (account) que afegix dades i m\u00e8todes a l'objecte res.partner. Fixem-nos en el contingut del m\u00f2dul account:</p> <pre><code>    class res_alarm(Model.model):\n    _name = 'res.alarm'\n    ...\n    class calendar_alarm(Model.model):\n    _name = 'calendar.alarm'\n    _inherit = 'res.alarm'\n    ...\n</code></pre> <p>En una empresa que tingui el m\u00f2dul base_calendar instal\u00b7lat podeu comprovar l'exist\u00e8ncia de la taula res_alarm amb els camps definits a l'apartat _atributs de la classe res_alarm i la taula calendar_alarm amb camps id\u00e8ntics als de la taula res_alarm m\u00e9s els camps definits a l'apartat _atributs de la classe calendar_alarm.</p> <p><pre><code>L'her\u00e8ncia per prototip \u00e9s la tradicional en els llenguatges orientats a objectes, ja que crea una nova classe vinculada\n</code></pre> L'her\u00e8ncia m\u00faltiple (_inherits) s'anomena her\u00e8ncia per delegaci\u00f3 i sempre provoca la creaci\u00f3 d'una nova taula a la base de dades. L'objecte derivat ha d'incloure, per cada derivaci\u00f3, un camp many2one apuntant l'objecte del qual deriva, amb la propietat ondelete=\\'cascade\\'. L'her\u00e8ncia per delegaci\u00f3 obliga que cada recurs de l'objecte derivat apunte a un recurs de cadascun dels objectes dels quals deriva i es pot donar el cas que hi hagi diversos recursos de l'objecte derivat que apunten a un mateix recurs per algun dels objectes dels quals deriva.</p> <pre><code>    class res_alarm(Model.model):\n    _name = 'res.alarm'\n    ...\n    class calendar_alarm(Model.model):\n    _name = 'calendar.alarm'\n    _inherits = {'res.alarm':'alarm_id'}\n    ...\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#herencia-en-la-vista","title":"Her\u00e8ncia en la vista","text":"<p>L'her\u00e8ncia de classe possibilita continuar utilitzant les vistes definides sobre l'objecte pare, per\u00f2 en moltes ocasions interessa disposar d'una versi\u00f3 retocada. En aquest cas, \u00e9s molt millor heretar de les vistes existents (per afegir, modificar o eliminar camps) que reempla\u00e7ar-les completament.</p> <pre><code> &lt;field name=\"inherit_id\" ref=\"id_xml_vista_pare\"/&gt;\n</code></pre> <p>En cas que la vista id_xml_vista_pare estiga en un m\u00f2dul diferent del que estem dissenyant, cal afegir el nom del m\u00f2dul al davant:</p> <pre><code> &lt;field name=\"inherit_id\" ref=\"modul.id_xml_vista_pare\"/&gt;\n</code></pre> <p>El motor d'her\u00e8ncia d'OpenObject, en trobar una vista heretada, processa el contingut de l'element arch. Per cada fill d'aquest element que tingui algun atribut, OpenObject cerca a la vista pare una etiqueta amb atributs coincidents (excepte el de la posici\u00f3) i, a continuaci\u00f3, combina els camps de la vista pare amb els de la vista heretada i estableix la posici\u00f3 de les noves etiquetes a partir dels seg\u00fcents valors:</p> <ul> <li>inside (per defecte): els valors s'afegeixen \"dins\" de l'etiqueta.</li> <li>after: afegeix el contingut despr\u00e9s de l'etiqueta.</li> <li>before: afegeix el contingut abans de l'etiqueta.</li> <li>replace: reempla\u00e7a el contingut de l'etiqueta.</li> <li>attributes: Modifica els     atributs.</li> </ul> <p>Reempla\u00e7ar</p> <pre><code> &lt;field name=\"arch\" type=\"xml\"&gt;\n   &lt;field name=\"camp\" position=\"replace\"&gt;\n     &lt;field name=\"nou_camp\" ... /&gt;\n   &lt;/field&gt;\n &lt;/field&gt;\n</code></pre> <p>Esborrar</p> <pre><code> &lt;field name=\"arch\" type=\"xml\"&gt;\n   &lt;field name=\"camp\" position=\"replace\"/&gt;\n &lt;/field&gt;\n</code></pre> <p>Inserir nous camps</p> <pre><code> &lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;field name=\"camp\" position=\"before\"&gt;\n       &lt;field name=\"nou_camp\" .../&gt;\n    &lt;/field&gt;\n &lt;/field&gt;\n\n &lt;field name=\"arch\" type=\"xml\" style=\"font-family:monospace\"&gt;\n    &lt;field name=\"camp\" position=\"after\"&gt;\n       &lt;field name=\"nou_camp\" .../&gt;\n    &lt;/field&gt;\n &lt;/field&gt;\n</code></pre> <p>Fer combinacions</p> <pre><code> &lt;field name=\"arch\"type=\"xml\"&gt;\n   &lt;data&gt;\n     &lt;field name=\"camp1\" position=\"after\"&gt;\n       &lt;field name=\"nou_camp1\"/&gt;\n     &lt;/field&gt;\n     &lt;field name=\"camp2\" position=\"replace\"/&gt;\n     &lt;field name=\"camp3\" position=\"before\"&gt;\n        &lt;field name=\"nou_camp3\"/&gt;\n     &lt;/field&gt;\n   &lt;/data&gt;\n &lt;/field&gt;\n</code></pre> <p>Per definir la posici\u00f3 dels elements que afegim, podem utilitzar una expresi\u00f3 xpath:</p> <pre><code> &lt;xpath expr=\"//field[@name='order_line']/tree/field[@name='price_unit']\" position=\"before\"&gt;\n &lt;xpath expr=\"//form/*\" position=\"before\"&gt;\n  &lt;header&gt;\n    &lt;field name=\"status\" widget=\"statusbar\"/&gt;\n  &lt;/header&gt;\n &lt;/xpath&gt;\n</code></pre> <p>\u00c9s posssible que necessitem una vista totalment nova de l\\'objecte heredat. Si fem un action normal en l\\'XML es veuran els que m\u00e9s prioritat tenen. Si volem especificar quina vista volem en concret hem d\\'utilitzar view_ids, observem aquest exemple:</p> <pre><code>        &lt;record model=\"ir.actions.act_window\" id=\"terraform.player_action_window\"&gt;\n            &lt;field name=\"name\"&gt;Players&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form,kanban&lt;/field&gt;\n            &lt;field name=\"view_ids\" eval=\"[(5, 0, 0),\n            (0, 0, {'view_mode': 'tree', 'view_id': ref('terraform.player_tree')}),\n            (0, 0, {'view_mode': 'form', 'view_id': ref('terraform.player_form')}),]\" /&gt;\n        &lt;/record&gt;\n</code></pre> <p>En (0,0,{registre_a_crear}) li diguem que a eixe Many2many hi ha que afegir un nou registre amb eixes dades en concret. El que necessita \u00e9s el view_mode i el view_id, com en els records anteriors.</p> <p>Si es vol especificar una vista search es pot inclourer la etiqueta search_view_id:</p> <pre><code> &lt;field name=\"search_view_id\" ref=\"cine.pos_order_line_search_view\"/&gt;  \n</code></pre> <p>Domains</p> <p>Si volem que el action heredat sols mostre els elements que volem, s\\'ha de ficar un domain en el action:</p> <pre><code>&lt;field name=\"domain\"&gt; [('isplayer','=',True)]&lt;/field&gt; \n</code></pre> <p>Am\u00e9s, es pot dir que, per defecte, quan es crea un nou registre a trav\u00e9s d\\'aquest action, tinga el field a True:</p> <pre><code>&lt;field name=\"context\"&gt;{'default_is_player': True}&lt;/field&gt;\n</code></pre> <p>Filtre per defecte</p> <p>El problema en la soluci\u00f3 anterior \u00e9s que lleva la possibilitat de veure el que no tenen aquest field a True i cal anar per un altre action a modificar-los. Si volem poder veure tots, podem crear un filtre en la vista search i en l\\'action dir que volem aquest filtre per defecte:</p> <pre><code>&lt;!--   En la vista search --&gt;\n...\n    &lt;search&gt;\n        &lt;filter name=\"player_partner\" string=\"Is Player\" domain=\"[('is_player','=',True)]\" /&gt;\n    &lt;/search&gt;\n...\n&lt;!-- En l'action --&gt;\n            &lt;!--  &lt;field name=\"domain\"&gt; [('is_player','=',True)]&lt;/field&gt; --&gt;\n            &lt;field name=\"domain\"&gt;&lt;/field&gt;\n            &lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n</code></pre> <p>Per tant, un action complet per a vistes personalitzades i amb filtres quedar\u00e0 com aquest:</p> <pre><code>        &lt;record model=\"ir.actions.act_window\" id=\"terraform.player_action_window\"&gt;\n            &lt;field name=\"name\"&gt;Players&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form,kanban&lt;/field&gt;\n            &lt;field name=\"domain\"&gt;&lt;/field&gt;\n            &lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n            &lt;field name=\"view_ids\" eval=\"[(5, 0, 0),\n            (0, 0, {'view_mode': 'tree', 'view_id': ref('terraform.player_tree')}),\n            (0, 0, {'view_mode': 'form', 'view_id': ref('terraform.player_form')}),]\" /&gt;\n        &lt;/record&gt;\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#herencia-en-el-controlador","title":"Her\u00e8ncia en el controlador","text":"<p>L'her\u00e8ncia en el controlador \u00e9s un mecanisme conegut, ja que l'apliquem de forma inconscient quan ens veiem obligats a sobreescriure els m\u00e8todes de la capa ORM d'OpenObject en el disseny de molts m\u00f2duls.</p> <p><pre><code>Funci\u00f3 super()\n\nEl llenguatge Python recomana utilitzar la funci\u00f3 super() per invocar el m\u00e8tode de la classe base quan s\u2019est\u00e0 sobreescrivint en una classe derivada, en lloc d\u2019utilitzar la sintaxi nomClasseBase.metode(self\u2026).\n</code></pre> L'efecte de l'her\u00e8ncia en el controlador es manifesta \u00fanicament quan cal sobreescriure algun dels m\u00e8todes de l'objecte del qual es deriva i per a fer-ho adequadament cal tenir en compte que el m\u00e8tode sobreescrit en l'objecte derivat:</p> <ul> <li>De vegades vol substituir el m\u00e8tode de l'objecte base sense     aprofitar-ne cap funcionalitat: el m\u00e8tode de l'objecte derivat no     invoca el m\u00e8tode sobreescrit.</li> <li>De vegades vol aprofitar la funcionalitat del m\u00e8tode de l'objecte     base: el m\u00e8tode de l'objecte derivat invoca el m\u00e8tode sobreescrit.</li> </ul> <p>Exemples:</p> <p>Sobreescriure el m\u00e8tode create:</p> <pre><code>class res_partner(models.Model):\n    _inherit = 'res.partner'\n    passed_override_write_function = fields.Boolean(string='Has passed our super method')\n\n    @api.model\n    def create(self, values):\n        # Override the original create function for the res.partner model\n        record = super(res_partner, self).create(values)\n\n        # Change the values of a variable in this super function\n        record['passed_override_write_function'] = True\n        print 'Passed this function. passed_override_write_function value: ' + str(record['passed_override_write_function'])\n\n        # Return the record so that the changes are applied and everything is stored.\n    return record\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#el-controlador","title":"El controlador","text":"<p>Part del controlador l\\'hem mencionat al parlar dels camps computed. No obstant, cal comentar les facilitats que proporciona Odoo per a no tindre que accedir dir\u00e8ctament a la base de dades.</p> <p>La capa ORM d'Odoo facilita uns m\u00e8todes que s'encarreguen del mapatge entre els objectes Python i les taules de PostgreSQL. Aix\u00ed, disposem de m\u00e8todes per crear, modificar, eliminar i cercar registres a la base de dades.</p> <p>En ocasions, pot ser necessari alterar l'acci\u00f3 autom\u00e0tica de cerca -- creaci\u00f3 -- modificaci\u00f3 -- eliminaci\u00f3 facilitada per Odoo i haurem de sobreescriure els corresponents m\u00e8todes en les nostres classes.</p> <p>Els programadors en el framework d\\'Odoo hem de con\u00e8ixer els m\u00e8todes subministrats per la capa ORM i hem de dominar el disseny de m\u00e8todes per:</p> <ul> <li>Poder definir camps funcionals en el disseny del model.</li> <li>Poder definir l'acci\u00f3 que cal executar en modificar el contingut     d'un field d'una vista form (@api.onchange)</li> <li>Poder alterar les accions autom\u00e0tiques de cerca, creaci\u00f3,     modificaci\u00f3 i eliminaci\u00f3 de recursos.</li> </ul> <p>Una darrera consideraci\u00f3 a tenir en compte en l'escriptura de m\u00e8todes i funcions en Odoo \u00e9s que els textos de missatges inclosos en m\u00e8todes i funcions, per poder ser tradu\u00efbles, han de ser introdu\u00efts amb la sintaxi _(\\'text\\') i el fitxer .py ha de contenir from tools.translate import _ a la cap\u00e7alera.</p>"},{"location":"3_1_ArquitecturaOdoo/#api-de-lorm","title":"API de l\\'ORM","text":"<pre><code>**Interactuar en la terminal**\n    $ ***Odoo*** shell -d castillo -u containers\n\nObserva c\u00f3m hem ficat el par\u00e0metre '''shell'''. Les coses que se fan en la terminal no s\u00f3n persistents en la base de dades fins que no s'executa '''self.env.cr.commit()'''. Dins de la terminal podem obtindre ajuda dels m\u00e8todes d'Odoo amb help(), per exemple: help(tools.image)\nAmb el seg\u00fcent exemple, podem arrancar ***Odoo*** sense molestar a l'inst\u00e0ncia que est\u00e0 en marxa redefinint els ports:\n\n    $ ***Odoo*** shell -c /path/to/odoo.conf --xmlrpc-port 8888 --longpolling-port 8899\n\nhttps://asciinema.org/a/123126 (Asciinema amb alguns exemples)\n</code></pre> <p>Un m\u00e8tode creat dins d\\'un model actua sobre tots els elements del model que estiguen actius en el moment de cridar al m\u00e8tode. Si \u00e9s un tree, seran molts i si \u00e9s un form sols un. Per\u00f2 en qualsevol cas \u00e9s una \\'llista\\' d\\'elements i es diu recordset.</p> <p>B\u00e0sicament la interacci\u00f3 amb els models en el controlador es fa amb els anomenats recordsets que s\u00f3n col\u00b7leccions d\\'objectes sobre un model. Si iterem dins dels recordset , obtenim els singletons, que s\u00f3n objectes individuals de cada l\u00ednia en la base de dades.</p> <pre><code>def do_operation(self):\n    print self # =&gt; a.model(1, 2, 3, 4, 5)\n    for record in self:\n        print record # =&gt; a.model(1), then a.model(2), then a.model(3), ...\n</code></pre> <p>Podem accedir a tots els fields d\\'un model sempre que estem en un singleton, no en un recordset:</p> <pre><code>&gt;&gt;&gt; record.name\nExample Name\n&gt;&gt;&gt; record.company_id.name\nCompany Name\n&gt;&gt;&gt; record.name = \"Bob\"\n</code></pre> <p>Intentar llegir o escriure un field en un recordset donar\u00e0 un error. Accedir a un many2one, one2many o many2many donar\u00e0 un recordset.</p>"},{"location":"3_1_ArquitecturaOdoo/#set-operations","title":"Set operations","text":"<p>Els recordsets es poden combinar amb operacions espec\u00edfiques que s\u00f3n les t\u00edpiques dels conjunts:</p> <ul> <li>record in set retorna si el record est\u00e0 en el set</li> <li>set1 | set2 Uni\u00f3 de sets</li> <li>set1 &amp; set2 Intersecci\u00f3 de sets</li> <li>set1 - set2 Difer\u00e8ncia de sets</li> </ul> <p>Am\u00e9s, un recordset no t\u00e9 elements repetits i permet accedir a recordsets dins d\\'ell. Per exemple:</p> <pre><code>&gt;&gt;&gt; record.students.classrooms\n</code></pre> <p>Dona la llista de totes les classes de tots els estudiants i sense repetir cap.</p>"},{"location":"3_1_ArquitecturaOdoo/#programacio-funcional-en-lorm","title":"Programaci\u00f3 funcional en l\\'ORM","text":"<p>Python t\u00e9 una serie de funcions que permeten iterar una llista i aplicar una funci\u00f3 als elements. Les m\u00e9s utilitzades s\u00f3n map(), filter(), reduce(), sort(), zip()... Odoo treballa en recordsets, no llistes, i t\u00e9 les seues funcions pr\u00f2pies per a imitar aquestes:</p> <ul> <li>filtered() Filtra el recordset de manera que sols tinga els     records que complixen una condici\u00f3.</li> </ul> <pre><code>records.filtered(lambda r: r.company_id == user.company_id)\nrecords.filtered(\"partner_id.is_company\")\n</code></pre> <ul> <li>sorted() Ordena segons uns funci\u00f3, se defineix una funci\u00f3 lambda     (key) que indica que s\\'ordena per el camp name:</li> </ul> <pre><code># sort records by name\nrecords.sorted(key=lambda r: r.name)\nrecords.sorted(key=lambda r: r.name, reverse=True)\n</code></pre> <ul> <li>mapped() Li aplica una funci\u00f3 a cada recordset i retorna un     recordset amb els canvis demanats:</li> </ul> <pre><code># returns a list of summing two fields for each record in the set\nrecords.mapped(lambda r: r.field1 + r.field2)\n# returns a list of names\nrecords.mapped('name')\n# returns a recordset of partners\nrecord.mapped('partner_id')\n# returns the union of all partner banks, with duplicates removed\nrecord.mapped('partner_id.bank_ids')\n</code></pre> <p>Aquestes funcions s\u00f3n \u00fatils per a fer t\u00e8cniques de programaci\u00f3 funcional</p>"},{"location":"3_1_ArquitecturaOdoo/#enviroment","title":"Enviroment","text":"<p>L\\'anomenat enviroment o env guarda algunes dades contextuals interessants per a treballar amb l\\'ORM, com ara el cursor a la base de dades, l\\'usuari actual o el context (que guarda algunes metadades).</p> <p>Tots els recordsets tenen un enviroment accesible amb env. Quant volem crear un recordset dins d\\'un altre, podem usar env:</p> <pre><code>&gt;&gt;&gt; self.env['res.partner']\nres.partner\n&gt;&gt;&gt; self.env['res.partner'].search([['is_company', '=', True], ['customer', '=', True]])\nres.partner(7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74)\n</code></pre> <p>El primer cas crea un recordset buit per\u00f2 que fa refer\u00e8ncia a res.partner i es poden fer les funcions de l\\'ORM que necessitem.</p>"},{"location":"3_1_ArquitecturaOdoo/#context","title":"Context","text":"<p>El context \u00e9s un diccionari de python que cont\u00e9 dades \u00fatils per a totes les vistes i els m\u00e8todes. Les funcions d\\'Odoo reben el context i el consulten si cal. Context pot tindre de tot, per\u00f2 quasi sempre t\u00e9 al menys el user ID, l\\'idioma o la zona temporal. Quant Odoo va a renderitzar una vista XML, consulta el context per veure si ha d\\'aplicar algun par\u00e0metre.</p> <pre><code>print(self.env.context)\n</code></pre> <p>Al llarg de tot aquest manual utilitzem sovint par\u00e0metres del context. Aquests s\u00f3n els par\u00e0metres que hem utilitzat en algun moment:</p> <ul> <li>active_id : self._context.get(\\'active_id\\') es tracta de l\\'id de     l\\'element del model que est\u00e0 en pantalla.</li> <li>active_ids : Llista de les id seleccionats en un tree.</li> <li>active_model : El model actual.</li> <li>default_<code>&lt;field&gt;</code> : En un action o en un one2many es pot     assignar un valor per defecte a un field.</li> <li>search_default_<code>&lt;filter&gt;</code> : Per aplicar un filtre per     defecte a la vista en un action.</li> <li>group_by : Dins d\\'un camp filter per a crear agrupacions en les     vistes search.</li> <li>graph_mode : En les vistes graph, aquest par\u00e0metre canvia el     type</li> <li>context.get : En les vistes es pot treure algunes dades del context     per a mostrar condicionalment o per als domains</li> </ul> <p>El context va passant d\\'un m\u00e8tode a un altre o a les vistes i, de vegades volem modificar-lo.</p> <p>Imaginem que volem fer un bot\u00f3 que obriga un wizard, per\u00f2 volem passar-li par\u00e0metres al wizard. En els botons i fields relacionals es pot especificar un context:</p> <pre><code>&lt;button name=\"%(reserves.act_w_clients_bookings)d\" type=\"action\" string=\"Select bookings\" context=\"{'b_fs':bookings_fs}\"/&gt;\n</code></pre> <p>Eixe action obre un wizard, que \u00e9s un model transitori en el que podem definir un field amb els continguts del context:</p> <pre><code>def _default_bookings(self):\n         return self._context.get('b_fs')\nbookings_fs = fields.Many2many('reserves.bookings',readonly=True, default=_default_bookings)\n</code></pre> <p>Aquest many2many tindr\u00e0 els mateixos elements que el form que l\\'ha cridat. (Aix\u00f2 \u00e9s com el default_ en els One2many, per\u00f2 fet a m\u00e0)</p> <p>Tamb\u00e9 es pot utilitzar aquesta manera d\\'enviar un recordset per un context per al domain d\\'un field Many2one o Many2many:</p> <pre><code>def _domain_bookings(self):\n         return [('id','=',self._context.get('b_fs').ids)]\nbookings_fs = fields.Many2many('reserves.bookings',readonly=True, domain=_default_bookings)\n</code></pre> <p>En ocasions necessitem especificar valors per defecte i filtres per defecte en un action. Per exemple, quan implementem l\\'her\u00e8ncia, volem que els nous registres que es facen en el nostre action tinguem un valor per defecte. En el seg\u00fcent exemple, en la primera l\u00ednia \u00e9s el que es sol fer en la Her\u00e8ncia i en la segona estem especificant un External ID amb ref() dins d\\'un eval.</p> <pre><code>        &lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n        &lt;field name=\"context\" eval=\"{'default_partner_id':ref('base.main_partner'), 'company_hide':False, 'default_company_id':ref('base.main_company'), 'search_default_my_bank':1}\"/&gt;\n</code></pre> <p>El context \u00e9s un diccionari inmutable (frozendict) que no pot ser alterat en funcions. no obstant, si volem modificar el context actual per enviar-lo a un action o cridar a una funci\u00f3 d\\'un model amb un altre context, es pot fer amb with_context:</p> <pre><code># current context is {'key1': True}\nr2 = records.with_context({}, key2=True)\n# -&gt; r2._context is {'key2': True}\nr2 = records.with_context(key2=True)\n# -&gt; r2._context is {'key1': True, 'key2': True}\n</code></pre> <p>Si \u00e9s prec\u00eds modificar el context es pot fer:</p> <p><pre><code> self.env.context = dict(self.env.context)\n self.env.context.update({'key': 'val'})\n</code></pre> o</p> <pre><code> self = self.with_context(get_sizes=True)\n print self.env.context\n</code></pre> <p>Per\u00f2 no funciona m\u00e9s enll\u00e0 del recordset actual. \u00c9s a dir, no modifica el context en el que s\\'ha cridat.</p> <p>Si el que volem \u00e9s passar el valor d\\'un field per context a un bot\u00f3 dins d\\'una \\'subvista\\', podem utilitzar el par\u00e0metre parent, que funciona tant en en domain, attr, com en context. Ac\u00ed tenim un exemple de tree dins d\\'un field amb botons que env\u00eden per context coses del pare:</p> <pre><code> &lt;field name=\"movies\" &gt;\n    &lt;tree&gt;\n        &lt;field name=\"photo_small\"/&gt;\n        &lt;field name=\"name\"/&gt;\n        &lt;field name=\"score\" widget='priority'/&gt;\n        &lt;button name=\"book_it\" string=\"Book it\" type=\"object\" context=\"{'b_client':parent.client,'b_day':parent.day}\"/&gt;\n     &lt;/tree&gt;\n</code></pre> <p>Podem passar el context per un action i el podem utilitzar en la vista, ja que tenim l\\'objecte context disponible en QWeb. Si, per exemple, volem retornar un action que cride a una vista i un field tinga un domain passat per context:</p> <pre><code>     return {\n            'name': 'Travel wizard action',\n            'type': 'ir.actions.act_window',\n            'res_model': self._name,\n            'res_id': self.id,\n            'view_mode': 'form',\n            'target': 'new',\n            'context': dict(self._context, cities_available_context= (self.cities_available.city).ids),\n        }\n</code></pre> <pre><code>           &lt;field name=\"destiny\"\n                  domain = \"[('id','in',context.get('cities_available_context',[]))]\"\n                  /&gt;\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#metodes-de-lorm","title":"M\u00e8todes de l\\'ORM","text":""},{"location":"3_1_ArquitecturaOdoo/#search","title":"search()","text":"<p>A partir d\\'un domain de Odoo, proporciona un recordset amb tots els elements que coincideixen:</p> <pre><code>&gt;&gt;&gt; # searches the current model\n&gt;&gt;&gt; self.search([('is_company', '=', True), ('customer', '=', True)])\nres.partner(7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74)\n&gt;&gt;&gt; self.search([('is_company', '=', True)], limit=1).name\n'Agrolait'\n</code></pre> <p><pre><code> Es pot obtindre la quantitat d'elements amb el m\u00e8tode '''search_count()'''\n</code></pre> <pre><code>Parameters\n    args -- A search domain. Use an empty list to match all records.\n    offset (int) -- number of results to ignore (default: none)\n    limit (int) -- maximum number of records to return (default: all)\n    order (str) -- sort string\n    count (bool) -- if True, only counts and returns the number of matching records (default: False)\n</code></pre></p>"},{"location":"3_1_ArquitecturaOdoo/#create","title":"create()","text":"<p>Te dona un recordset a partir d\\'una definici\u00f3 de varis fields:</p> <pre><code>&gt;&gt;&gt; self.create({'name': \"New Name\"})\nres.partner(78)\n</code></pre> <p>El m\u00e8tode create s\\'utilitza sovint per a ser sobreescrit en her\u00e8ncia per fer coses en el moment de la creaci\u00f3. Ac\u00ed tenim un exemple en el que modifiquem el create d\\'un model per crear una inst\u00e0ncia associada amb una imatge predefinida:</p> <pre><code>     @api.model\n     def create(self, values):\n        new_id = super(player, self).create(values)\n        print values\n        name_player = new_id.name\n        img = self.env['mmog.fortress'].search([('name','=','f1')])[0].icon\n        self.env['mmog.fortress'].create({'name':name_player+\"-fortress\",'level':1,'soldiers':100,'population':10,'food':1000,'integrity':100,'id_player':new_id.id,'icon':img})\n        return new_id\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#write","title":"write()","text":"<p>Escriu uns fields dins de tots els elements del recordset, no retorna res:</p> <pre><code>self.write({'name': \"Newer Name\"})\n</code></pre> <p>Escriure en un many2many:</p> <p>La manera m\u00e9s senzilla \u00e9s passar una llista d\\'ids. Per\u00f2 si ja existeixen elements abans, necessitem uns codis especials (vegeu Odoo#Expressions):</p> <p>Per exemple:</p> <pre><code> self.sessions = [(4,s.id)] \n self.write({'sessions':[(4,s.id)]})\n self.write({'sessions':[(6,0,[ref('vehicle_tag_leasing'),ref('fleet.vehicle_tag_compact'),ref('fleet.vehicle_tag_senior')] )]})\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#browse","title":"browse()","text":"<p>A partir d\\'una llista de ids, retorna un recordset.</p> <pre><code>&gt;&gt;&gt; self.browse([7, 18, 12])\nres.partner(7, 18, 12)\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#exists","title":"exists()","text":"<p>Retorna si un record en concret encara est\u00e0 en la base de dades.</p> <pre><code>if not record.exists():\n    raise Exception(\"The record has been deleted\")\no:\nrecords.may_remove_some()\n# only keep records which were not deleted\nrecords = records.exists()\n</code></pre> <p>En el segon exemple, refresca un recordset amb aquells que encara existixen.</p>"},{"location":"3_1_ArquitecturaOdoo/#ref","title":"ref()","text":"<p>Retorna un singleton a partir d\\'un External ID</p> <pre><code>&gt;&gt;&gt; env.ref('base.group_public')\nres.groups(2)\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#ensure_one","title":"ensure_one()","text":"<p>S\\'asegura de que el record en concret siga un singleton.</p> <pre><code>records.ensure_one()\n# is equivalent to but clearer than:\nassert len(records) == 1, \"Expected singleton\"\n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#unlink","title":"unlink()","text":"<p>Esborra de la base de dades els elements del recordset actual.</p> <p>Exemple de c\u00f3m sobreescriure el m\u00e8tode unlink per a esborrar en cascada:</p> <pre><code>    def unlink(self):\n        for x in self:\n            x.catid.unlink()\n        return super(product_uom_class, self).unlink()\n</code></pre> <p>read() Es tracta d\\'un m\u00e8tode de baix nivell per llegir un field en concret dels records. \u00c9s preferible emprar browse()</p> <p>\\'name_search(name=, args=None, operator=\\'ilike\\', limit=100)\\'\\'\\' \u2192 records Search for records that have a display name matching the given name pattern when compared with the given operator, while also matching the optional search domain (args).</p> <p>This is used for example to provide suggestions based on a partial value for a relational field. Sometimes be seen as the inverse function of name_get(), but it is not guaranteed to be.</p> <p>This method is equivalent to calling search() with a search domain based on display_name and then name_get() on the result of the search.</p> <p>ids Llista dels ids del recordset actual.</p> <p>sorted(key=None, reverse=False) Retorna el recordset ordenat per un criteri.</p> <p>display_name. Aquest atribut, per defecte, mostra el field name si est\u00e0. Es pot sobreescriure <code>_compute_display_name</code> per mostrar un altre camp o mescla d\\'ells. Tamb\u00e9 es pot canviar <code>_rec_name</code> per indicar un field distint de <code>name</code>.</p> <p>copy() Crea una c\u00f2pia del singleton i permet aportar nous valors per als fields de la copia.</p> <p>En els fields One2many no es pot copiar per defecte, per\u00f2 es pot dir copy=True.</p>"},{"location":"3_1_ArquitecturaOdoo/#onchange","title":"onchange","text":"<p>Si volem que un valor siga modificat en temps real quant modifiquem el valor d\\'un altre field sense encara haver guardat, podem usar els m\u00e8todes on_change.</p> <pre><code> Els camps '''computed''' ja tenen el seu propi onchange, per tant, no cal fer-lo\n</code></pre> <pre><code> Ha quedat \"deprecated\" retornar un domain https://github.com/odoo/odoo/pull/41918#issuecomment-824946980\n</code></pre> <p>En onchange es modifica el valor d\\'un o m\u00e9s camps dir\u00e8ctament i, si cal un filtre o un missatge, es fa en el return:</p> <pre><code>return {\n    'warning': {'title': \"Warning\", 'message': \"What is this?\", 'type': 'notification'},\n}\n</code></pre> <p>Si el type \u00e9s notification es mostrar\u00e0 en una notificaci\u00f3, en un altre cas, en un dialog. (Odoo 13)</p> <p>Exemples:</p> <pre><code># onchange handler\n@api.onchange('amount', 'unit_price')\ndef _onchange_price(self):\n    # set auto-changing field\n    self.price = self.amount * self.unit_price\n    # Can optionally return a warning and domains\n    return {\n        'warning': {\n            'title': \"Something bad happened\",\n            'message': \"It was very bad indeed\",\n        }\n    }\n\n@api.onchange('seats', 'attendee_ids')\ndef _verify_valid_seats(self):\n     if self.seats &lt; 0:\n         return {\n             'warning': {\n                 'title': \"Incorrect 'seats' value\",\n                 'message': \"The number of available seats may not be negative\",\n             },          }\n     if self.seats &lt; len(self.attendee_ids):\n          return {\n             'warning': {\n                 'title': \"Too many attendees\",\n                 'message': \"Increase seats or remove excess attendees\",\n             },\n         }\n</code></pre> <pre><code>Si l'usuari s'equivoca introduint algunes dades, ***Odoo*** proporciona varies maneres d'evitar-lo: \n* Constraints\n* onchange amb missatge d'error i restablint els valors originals\n* Sobreescriptura del m\u00e8tode write o create per comprovar coses abans de guardar \n</code></pre>"},{"location":"3_1_ArquitecturaOdoo/#cron-jobs","title":"Cron Jobs","text":"<p>Cal crear un record en el model ir.cron, per exemple:</p> <pre><code>        &lt;record model=\"ir.cron\" forcecreate=\"True\" id=\"game.cron_update\"&gt;\n            &lt;field name=\"name\"&gt;Game: Cron Update&lt;/field&gt;\n            &lt;field name=\"model_id\" ref=\"model_game_player\"/&gt;\n            &lt;field name=\"state\"&gt;code&lt;/field&gt;\n            &lt;field name=\"code\"&gt;model.update_resources()&lt;/field&gt;\n            &lt;field name=\"user_id\" ref=\"base.user_root\"/&gt;\n            &lt;field name=\"interval_number\"&gt;1&lt;/field&gt;\n            &lt;field name=\"interval_type\"&gt;minutes&lt;/field&gt;\n            &lt;field name=\"numbercall\"&gt;-1&lt;/field&gt;\n            &lt;field name=\"activity_user_type\"&gt;specific&lt;/field&gt;\n            &lt;field name=\"doall\" eval=\"False\" /&gt;\n        &lt;/record&gt;\n</code></pre> <p>I un m\u00e8tode amb el \\@api.model i aquests arguments:</p> <pre><code>    @api.model\n    def update_resources(self):\n        ...\n</code></pre> <p>ir.cron t\u00e9 un many2one amb ir.actions.server i, al ser creat, crea l\\'acci\u00f3 de servidor corresponent. \u00c9s important ficar en el manifest que dep\u00e9n de mail, ja que \u00e9s un m\u00f2dul preinstal\u00b7lat que hereta i afegeix camps a ir.actions.server.</p> <p>https://poncesoft.blogspot.com/2018/05/creacion-metodos-automatizados-en-odoo.html https://webkul.com/blog/creating-cron-server-action-odoo-11/ https://odoo-development.readthedocs.io/en/latest/odoo/models/ir.cron.html</p>"},{"location":"3_1_ArquitecturaOdoo/#els-decoradors","title":"Els Decoradors","text":"<p>Com es veu, abans de moltes funcions es fica \\@api.depends, \\@api.multi...</p> <p>Els decoradors modifiquen la forma en la que \u00e9s cridada la funci\u00f3. Entre altres coses, modifiquen el contingut de self, les vegades que se crida i quant se crida.</p> <ul> <li>\\@api.depends() Aquest decorador crida a la funci\u00f3 sempre que el     camp del que dep\u00e9n siga modificat. Encara que el camp diga     store=True. Per defecte, self \u00e9s un recordset, per tant, cal     fer un for.</li> <li>\\@api.model S\\'utilitza per a funcions que afecten al model i no     als recordsets.</li> <li>\\@api.constrains() S\\'utilitza per a comprovar les constrains.     Self \u00e9s un recordset. Com que quasi sempre es crida en un form,     funciona si utilitzem self directament. Per\u00f2 cal fer for, ja que pot     ser cridat en un recordset quant modifiquem camps en grup.</li> <li>\\@api.onchange() S\\'executa cada vegada que modifiquem el field     indicat en la vista. En aquest, com que es crida quant es modifica     un form, sempre self ser\u00e0 un singleton. Per\u00f2 si fiquem un for no     passa res.</li> </ul>"},{"location":"3_1_ArquitecturaOdoo/#calculs-en-dates","title":"C\u00e0lculs en dates","text":"<p>Odoo gestiona les dates com a strings. Per una altra banda, python t\u00e9 el seu propi tipus de dades anomenat datetime, date i timedelta entre altres. Aix\u00f2 pot provocar dificultats per a fer c\u00e1lculs en dates. Odoo proporciona algunes ferramentes m\u00ednimes per facilitar aquesta tasca.</p> <p>Primer de tot, anem a importar datetime:</p> <pre><code>from ***Odoo*** import models, fields, api\nfrom datetime import datetime, timedelta\n</code></pre> <p>El primer que necessitem saber \u00e9s c\u00f3m transformar de date o datetime d'Odoo a python. En definitva, passar de string a datetime.</p> <p>Tenim un field datetime declarat de la seg\u00fcent manera:</p> <pre><code>start_date = fields.Datetime()\n</code></pre> <p>En la base de dades guardar\u00e0 un string amb el format: \\'%Y-%m-%d %H:%M:%S\\'. Per tant, si volem transformar aquesta data en string a un objecte datetime.datetime tenim que ejecutar el constructor de la classe amb aquests par\u00e0metres:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\ndata = datetime.strptime(self.start_date,fmt)\n</code></pre> <p>\u00c9s a dir, transforma un string en aquest format al tipus de dades datetime.datetime oficial de python.</p> <p>Per no tindre que especificar el format cada vegada, Odoo dona una ferramenta m\u00e9s facil. La classe fields.Datetime t\u00e9 un m\u00e8tode per generar un datetime.datetime de un string:</p> <pre><code>data = fields.Datetime.from_string(self.start_date)\n</code></pre> <p>De la mateixa manera passa al contrari:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\nself.start_date = data.strftime(fmt)\nvs\nself.start_date = fields.Datetime.to_string(data)\n</code></pre> <p>A continuaci\u00f3, anem a veure c\u00f3m incrementar una data en un temps:</p> <p>En el format d'Odoo (fields.Datetime) no es pot, cal passar a datetime.datetime per sumar el temps i despr\u00e9s tornar a passar a fields.Datetime. Per sumar o restar temps a un datetime.datetime cal utilitzar una classe anomenada datetime.timedelta. Aquesta classe representa una duraci\u00f3 o la difer\u00e8ncia entre dues dates. Per exemple, aquest constructor representa molt b\u00e9 les opcions que es poden ficar per crear un timedelta:</p> <pre><code>un_any = timedelta(weeks=40, days=84, hours=23, minutes=50, seconds=600) \n</code></pre> <p>Aquest exemple d'Odoo mostra c\u00f3m afegir 3 dies a un field:</p> <pre><code>data=fields.Datetime.from_string(self.start_date)\ndata=data+timedelta(hours=3)\nself.end_date=fields.Datetime.to_string(data)\n</code></pre> <p>O si es vol fer sols en m\u00e8todes python:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\ndata = datetime.strptime(self.start_date,fmt)\ndata=data+timedelta(hours=3)\nself.end_date=data.strftime(fmt)\n</code></pre> <p>Ara anem a veure c\u00f3m calcular el temps que ha passat entre dues dates:</p> <p>Soluci\u00f3 amb relativedelta:</p> <pre><code>from datetime import datetime, timedelta\nfrom dateutil.relativedelta import relativedelta\n\nstart=fields.Datetime.from_string(self.start_date)\nend=fields.Datetime.from_string(self.end_date)\n\nrelative=relativedelta(start,end)\nprint r.years\nprint r.months\nprint r.days\nprint r\n</code></pre> <p>El problema \u00e9s que dona la data per separat. No sol ser molt \u00fatil per a Odoo on necessitem la difer\u00e8ncia sols en dies, hores o minuts.</p> <p>Soluci\u00f3 sols amb Datetime:</p> <pre><code>from datetime import datetime\n\nstart=fields.Datetime.from_string(self.start_date)\nend=fields.Datetime.from_string(self.end_date)\n\nprint (end-start).days * 24 * 60\nprint (end-start).total_seconds()/60/60/24\n</code></pre> <p>Soluci\u00f3 amb Unix timestamp</p> <pre><code>d1_ts = time.mktime(d1.timetuple())\nd2_ts = time.mktime(d2.timetuple())\n\nprint int(d2_ts-d1_ts) / 60\n</code></pre> <p>La soluci\u00f3 \u00e9s la mateixa, sols \u00e9s per si necessiteu algun c\u00e0lcul intermedi que necessite la data en un Integer.</p> <p>El resultat de restar dos datetime \u00e9s un timedelta. Podem demanar els dies i segons com en el relative delta, per\u00f2 am\u00e9s t\u00e9 una funci\u00f3 per traure els segons totals i despr\u00e9s fer els c\u00e0lculs que necessitem.</p> <p>Consultar si una data \u00e9s anterior a una altra:</p> <p>Les dates en format Datetime o Date es poden comparar:</p> <pre><code>d3=fields.Datetime.from_string(self.d3)\nd4=datetime.now()\nif d3 &lt; d4:\n   print \"La data \u00e9s anterior\"\n</code></pre> <p>Tamb\u00e9 es pot calcular si \u00e9s del mateix dia, sols cal transformar de datetime a date:</p> <pre><code>d3=d3.date()\nd4=d4.date()\n\nif d3 == d4 :\n   \u2026.\n</code></pre> <p>Si volem saber si s\u00f3n del mateix m\u00e9s o any, es pot calcular la difer\u00e8ncia i veure si en dies \u00e9s major o menor de 30, per exemple. Per\u00f2 si volem major precisi\u00f3, en aquest cas es recomana utilitar relativedelta.</p>"},{"location":"3_1_ArquitecturaOdoo/#misc","title":"Misc.","text":"<ul> <li>Si volem fer un print en colors, podem ficar un caracter de escape:     \\033[93m i \\033[0m al final</li> <li>Traure la menor pot\u00e8ncia de 2 major o igual a un n\u00famero:     http://stackoverflow.com/a/14267557</li> </ul> <p>Distintes alertes:</p> <p>Odoo pot mostrar distintes alertes en funci\u00f3 del que necessitem. Totes estan en openerp.exceptions</p> <p>Si entrem en el mode shell del debug podem executar aquest comandament:</p> <pre><code>&gt;&gt;&gt; help(openerp.exceptions)\n</code></pre> <p>Una vegada dins podem detectar:</p> <p><code>AccessDenied</code>\\ <code>DeferredException</code>\\ <code>QWebException</code>\\ <code>RedirectWarning</code>\\ <code>except_orm</code>\\ <code>AccessError</code>\\ <code>MissingError</code>\\ <code>UserError</code>\\ <code>ValidationError</code></p> <p>Normalment s\u00f3n utilitzats pel Odoo sense necessitat de que els cridem nosaltres. Per\u00f2 en ocasion pot ser \u00fatil.</p> <p>Per exemple, si volem mostrar un Warning perqu\u00e8 \u00fasuari ha fet alguna cosa mal. (Normalment es fa un onchange que ja pot tornar el warning)</p> <pre><code>from openerp import _\nfrom openerp.exceptions import Warning\n[...]\nraise Warning(_('Alguna cosa ha fallat!'))\n</code></pre> <p>O si volem Donar opcions a l\\'usuari amb RedirectWarning:</p> <pre><code> action = self.env.ref('base.action_res_users')\n msg = _(\"You cannot create a new user from here.\\n To create new user please go to configuration panel.\")\n raise openerp.exceptions.RedirectWarning(msg, action.id, _('Go to the configuration panel'))\n</code></pre> <p>En aquest exemple, per al missatge, utilitza la barra baixa _() per a obtindre la traducci\u00f3 en cas de que existisca. self.env.ref() retorna l\\'objecte referit amb una id externa. En aquest cas, un action.</p> <p>En el cas de les Constrains tamb\u00e9 s\\'ha de llan\u00e7ar un Validation error.</p> <p>Funcions lambda:</p> <p>En moltes ocasions, cal cridar a alguna funci\u00f3 de l\\'ORM o similar passant com a par\u00e0metre una funci\u00f3 lambda. La ra\u00f3 \u00e9s que si passem una variable, esta queda establerta en temps de c\u00e0rrega i no es modifica. La funci\u00f3 sempre recalcula.</p> <p>La sintaxi de la funci\u00f3 lambda \u00e9s:</p> <pre><code>a = lambda x,y: x*y\na(2,3)\n6\n</code></pre> <p>On les primeres x,y s\u00f3n els arguments que rep la funci\u00f3, despr\u00e9s el que calcula.</p> <p>Cal recordar que les funcions lambda s\u00f3n de una sola l\u00ednia de codi. Si volem alguna cosa m\u00e9s sofisticada hem de cridar a una funci\u00f3 normal.</p> <p>Si volem que el nostre m\u00f2dul tinga configuraci\u00f3 podem afegir-la com a un field m\u00e9s del model res.control.settings. Aquest ja s\\'encarrega de centralitzar opcions de configuraci\u00f3. Per a que aparega en el men\u00fa de configuraci\u00f3 tamb\u00e9 podem afegir-lo heretant en la vista:</p> <pre><code>class config(models.TransientModel):\n    _inherit = 'res.config.settings'\n    players = fields.Char(string='players',\n                             config_parameter=\"expanse.players\")\n\n\n    def reset_universe(self):\n        print(\"reset\",self)\n</code></pre> <pre><code> &lt;record id=\"res_config_settings_view_form_inherit\" model=\"ir.ui.view\"&gt;\n            &lt;field name=\"name\"&gt;res.config.settings.view.form.&lt;/field&gt;\n            &lt;field name=\"model\"&gt;res.config.settings&lt;/field&gt;\n            &lt;field name=\"priority\" eval=\"25\" /&gt;\n            &lt;field name=\"inherit_id\" ref=\"base.res_config_settings_view_form\" /&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;xpath expr=\"//div[hasclass('settings')]\" position=\"inside\"&gt;\n                    &lt;div class=\"app_settings_block\" data-string=\"Expanse Settings\" string=\"Expanse Settings\" data-key=\"expanse\"&gt;\n                        &lt;div id=\"players\"&gt;\n                            &lt;h2&gt;Expanse&lt;/h2&gt;\n                            &lt;button type=\"object\" name=\"reset_universe\" string=\"Reset Universe\"  class=\"btn-primary\"/&gt;\n                        &lt;/div&gt;\n\n                    &lt;/div&gt;\n                &lt;/xpath&gt;\n\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre> <p>Si en data-key posem el nom del m\u00f2dul, afegir\u00e0 l\\'icona al men\u00fa de settings.</p>"},{"location":"3_2_PrimerModulo/","title":"3.2. Primer m\u00f3dulo en Odoo","text":"<p>Una vez instalado y comprendida la arquitectura de de Odoo, el siguiente objetivos ser\u00e1 desarrollar nuestro primer m\u00f3dulo, el t\u00edpico \"Hola Mundo\".</p> <p>En este caso, vamos a desarrollar hasta 3 versiones diferentes del m\u00f3dulo, de forma que iremos profundizando en los elementos b\u00e1sicos de un m\u00f3dulo en Odoo. </p>"},{"location":"3_2_PrimerModulo/#hola-mundo-version-1","title":"Hola Mundo. Versi\u00f3n 1.","text":"<p>Esta primera version, como tal, no tendr\u00e1 ninguna utilidad mas all\u00e1 de comprobar que somos capaces de crear e instalar un m\u00f3dulo (que no hace nada)</p> <p>El primer paso siempre va a ser la creaci\u00f3n de una carpeta en el directorio de <code>addons/</code>, a la que llamaremos igual que el nombre del m\u00f3dulo:</p> <pre><code>mkdir ./addons/HolaMundo_V1\n</code></pre> <p>Dentro de esta carpeta vamos a crear solo dos archivos <code>__init__.py</code> y <code>__manifest__.py</code> es una excelente forma de comenzar a entender la estructura de los m\u00f3dulos en Odoo. Aqu\u00ed te muestro c\u00f3mo hacerlo paso a paso:</p>"},{"location":"3_2_PrimerModulo/#estructura","title":"Estructura","text":"<p>Los ficheros necesarios para esta primera versi\u00f3n ser\u00e1n: <code>__init__.py</code> y <code>__manifest__.py</code> y la estructura (m\u00ednima) ser\u00eda:</p> <pre><code>addons/HolaMundo_V1/\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 __manifest__.py\n</code></pre> <p>Donde: </p>"},{"location":"3_2_PrimerModulo/#paso-1-__init__py","title":"Paso 1. <code>__init__.py</code>","text":"<p>B\u00e1sicamente le dice a Python que esa carpeta es un paquete, y adem\u00e1s tambi\u00e9n sirve para indicar a Odoo los modelos que tiene que cargar y que est\u00e1n ubicado en la carpeta <code>models</code></p> <p>En nuestro caso, como no vamos a incluir ning\u00fan modelo o controlador en la carpeta <code>models</code> este archivo va a estar vac\u00edo. Solo sirve para indicar que este directorio es un paquete de Python.</p> <pre><code># HolaMundo_V1/__init__.py\n</code></pre>"},{"location":"3_2_PrimerModulo/#paso-2-__manifest__py","title":"Paso 2. <code>__manifest__.py</code>","text":"<p>Este archivo contiene la descripci\u00f3n del m\u00f3dulo. Es como la ficha t\u00e9cnica del m\u00f3dulo. Ah\u00ed se le indica a Odoo c\u00f3mo se llama, qu\u00e9 hace, qu\u00e9 necesita para funcionar y qu\u00e9 archivos debe cargar Aqu\u00ed tienes un ejemplo b\u00e1sico:</p> <pre><code># HolaMundo_V1/__manifest__.py\n\n{\n    'name': 'Hola Mundo V1',\n    'version': '1.0',\n    'summary': 'M\u00f3dulo b\u00e1sico de ejemplo',\n    'description': 'Este es un m\u00f3dulo de ejemplo que no hace nada, solo sirve como plantilla.',\n    'author': 'Sergio Rey',\n    'category': 'Tools',\n    'depends': [],\n    'data': [],\n    'installable': True,\n    'application': False,\n    'auto_install': False,\n}\n</code></pre> <p>Como se puede observar, es un diccionario en formato Python que incluye varios campos clave. No es necesario poner todos, aunque para este ejemplo se han puesto lo m\u00e1s comunes:</p> <ul> <li><code>name</code>: el nombre del m\u00f3dulo tal como aparecer\u00e1 en la interfaz de Odoo.</li> <li><code>version</code>: la versi\u00f3n del m\u00f3dulo, \u00fatil para actualizaciones.</li> <li><code>summary</code>: una descripci\u00f3n corta que aparece en la lista de aplicaciones.</li> <li><code>description</code>: una descripci\u00f3n m\u00e1s larga y detallada del m\u00f3dulo.</li> <li><code>author</code>: qui\u00e9n lo ha creado.</li> <li><code>category</code>: en qu\u00e9 secci\u00f3n de Odoo se clasifica (por ejemplo, \"Tools\", \"Sales\", \"Inventory\").</li> <li><code>depends</code>: una lista de otros m\u00f3dulos que este necesita para funcionar. Por ejemplo, casi todos dependen de <code>base</code>.</li> <li><code>data</code>: archivos XML, CSV, etc., que deben cargarse al instalar el m\u00f3dulo (vistas, men\u00fas, reglas de acceso\u2026).</li> <li><code>demo</code>: archivos que se cargan solo en modo demo.</li> <li><code>installable</code>: si est\u00e1 en <code>True</code>, el m\u00f3dulo se puede instalar.</li> <li><code>application</code>: si es <code>True</code>, se muestra como una aplicaci\u00f3n en el panel principal.</li> <li><code>auto_install</code>: si es <code>True</code>, se instala autom\u00e1ticamente si sus dependencias est\u00e1n presentes.</li> </ul> <p>Hay m\u00e1s campos opcionales, pero con estos tienes lo b\u00e1sico para que el m\u00f3dulo funcione y se vea correctamente en Odoo.</p>"},{"location":"3_2_PrimerModulo/#paso-3-reinicio-del-servidor","title":"Paso 3. Reinicio del servidor","text":"<p>Para que el servidor reconozca el nuevo m\u00f3dulo, debemos reiniciar:</p> <pre><code>docker compose restart odoo\n</code></pre> <p>o pulsamos sobre el bot\u00f3n que hemos a\u00f1adido en en VSCode mediante **VS Code Action Buttons\" en la secci\u00f3n anterior.</p> <p>En estos momentos, tambi\u00e9n es aconsejable ver los logs que va generando Ddoo, por lo que en un terminal es aconsejable ejecutar:</p> <pre><code>docker logs odoo -f\n</code></pre>"},{"location":"3_2_PrimerModulo/#paso-4-odoo-en-modo-desarrollo","title":"Paso 4. Odoo en modo desarrollo","text":"<p>Debemos tener Odoo en modo desarrollo, para que el siguiente paso nos permita buscar el nuevo m\u00f3dulo.</p> <p>Hay diferentes formas de hacerlo:</p>"},{"location":"3_2_PrimerModulo/#activando-desde-menu-de-ajustes","title":"Activando desde men\u00fa de Ajustes","text":"<p>Desde el men\u00fa de ajustes, podemos activar el modo desarrollador directamente:</p> Activar modo desarrollador por ajustes"},{"location":"3_2_PrimerModulo/#usando-la-url-directamente","title":"Usando la URL directamente","text":"<p>Puedes a\u00f1adir <code>?debug=1</code> al final de la URL de Odoo para activar el modo desarrollador. Realmente, si observamos qu\u00e9 ha pasado en el m\u00e9todo anterior, precisamente es lo que hace, a\u00f1adir esto al final de la URL</p> <p>Ejemplo:</p> <pre><code>http://localhost:8069/odoo?debug=1\n</code></pre> Entrar en modo desarrollo desde la URL <p>Tambi\u00e9n se puede usar:</p> <ul> <li><code>?debug=assets</code> para ver los archivos fuente (\u00fatil para desarrolladores).</li> <li><code>?debug=tests</code> para pruebas automatizadas.</li> </ul>"},{"location":"3_2_PrimerModulo/#usando-extensiones-o-herramientas-del-navegador","title":"Usando extensiones o herramientas del navegador","text":"<p>Aunque no es necesario, puedes usar herramientas como <code>Odoo Debug</code> (extensi\u00f3n para Firefox o Chrome) que te permite activar el modo desarrollador con un clic.</p> Entrar en modo desarrollo con Add-on <p>Hay otras formas, pero de momento con esta tenemos suficiente para comenzar a trabajar.</p> <p>Una vez entras en modo desarrollo, ver\u00e1s que aparecen nuevas opciones, por ejemplo al entrar en Aplicaciones</p> Nuevas opciones al entrar en Desarrollo. <p>Como puedes ver en esta imagen, han aparecido nuevas opciones y tenemos un nuevo men\u00fa con la forma de una cucaracha que nos permite realizar funcionalidades de desarrollador.</p>"},{"location":"3_2_PrimerModulo/#paso-5-actualizar-buscar-e-instalar","title":"Paso 5. Actualizar, buscar e instalar.","text":"<p>Una vez llegado a este punto, entonces debemos:</p> <ol> <li>Actualizar e listado de m\u00f3dulos que nos aparece en pantalla pulsando el bot\u00f3n de Actualizar lista de aplicaciones que podemos ver en la figura anterior.</li> <li>Buscamos el m\u00f3dulo que queremos instalar, utilizando la herramientas de b\u00fasqueda. Si ponemos \"Hola\" no nos encontrar\u00e1 nada, a no ser que le quitemos el filtro para que haga b\u00fasquedas solo de aplicaciones.</li> <li>Instalamos Una vez, hemos encontrado el m\u00f3dulo, pulsamos el bot\u00f3n de instalar y aparecer\u00e1 como que se ha instalado. Si hay alg\u00fan problema no se instalar\u00e1 correctamente y debemos recurrir a los logs de Odoo para investigar qu\u00e9 es lo que ha pasado.</li> </ol> M\u00f3dulo buscado y encontrado. <p>Con estos pasos, si todo ha funcionado correctamente, ya tenemos el m\u00f3dulo instalado y listo para ser usado. En nuestro caso, como no lo hemos dotado de funcionalidad, no aparecer\u00e1 en ning\u00fan sitio, pero entrando en la Informaci\u00f3n del m\u00f3dulo podemos ver que esta instalado y que por tanto podemos Actualizar o Desinstalar el m\u00f3dulo.</p> Informaci\u00f3n del m\u00f3dulo."},{"location":"3_2_PrimerModulo/#resumen-de-todos-los-pasos","title":"Resumen de todos los pasos","text":"<p>Estos pasos los debemos tener muy claros, puesto que siempre van a ser los mismos a la hora de a\u00f1adir un nuevo m\u00f3dulo:</p> <p>Resumen pasos para instalaci\u00f3n</p> <ol> <li>Creamos o modificamos los ficheros necesarios de nuestro m\u00f3dulo</li> <li>Reinicia el servidor de Odoo.</li> <li>Activa el modo desarrollador (si no lo tienes activado).</li> <li>Ve a Aplicaciones, actualiza la lista y busca el nuevo m\u00f3dulo.</li> <li>Inst\u00e1lalo y comprueba en los logs que no ha habido errores.</li> </ol>"},{"location":"3_2_PrimerModulo/#hola-mundo-version-2","title":"Hola Mundo. Versi\u00f3n 2","text":"<p>La versi\u00f3n anterior ha sido demasiado b\u00e1sica, auqnue ha sido de gran utilidad porque hemos podido comprobar de forma muy simplificada c\u00f3mo se puede implementar un m\u00f3dulo en Odoo.</p> <p>Ahora vamos a realizar de nuevo los mismo pasos con una nueva versi\u00f3n de nuestro m\u00f3dulo, pero vamos a a\u00f1adir nuevos elementos de forma que podamos ver y utilizar esta nueva versi\u00f3n.</p> <p>O sea, vamos a crear una versi\u00f3n que tras instalarla, nos aparecer\u00e1 en el men\u00fa de aplicaciones y podremos entrar en el m\u00f3dulo, aunque de nuevo no tendr\u00e1 funcionalidad alguna, aparte de aprender los pasos a realizar y comprobar que todo funciona correctamente.</p> <p>Aqu\u00ed tienes una gu\u00eda paso a paso para crear un m\u00f3dulo b\u00e1sico de \"Hola Mundo\" en Odoo. Este m\u00f3dulo mostrar\u00e1 un mensaje simple en el backend, ideal para comenzar a familiarizarte con el desarrollo en Odoo.</p>"},{"location":"3_2_PrimerModulo/#estructura-del-modulo","title":"Estructura del m\u00f3dulo","text":"<p>Para esta nueva versi\u00f3n, la estructura m\u00ednima ser\u00e1:</p> <pre><code>HolaMundo_V2/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __manifest__.py\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 hola.py\n\u251c\u2500\u2500 views/\n\u2502   \u2514\u2500\u2500 hola_view.xml\n\u251c\u2500\u2500 security/\n\u2502   \u2514\u2500\u2500 ir.model.access.csv\n</code></pre> <p>Como podemos comprobar, por supuesto seguimos teniendo los fichero <code>__init__.py</code> y <code>__manifest__.py</code> y adem\u00e1s a\u00f1adimos nuevas carpetas y en ellas nuevos ficheros. </p> <p>Obviamente, en este punto, podemos deducir que vamos a incluir nuevos modelos, vistas para poder visualizar los datos del modelo y seguridad necesaria para otorgar permisos y poder utilizar las vistas y modelos definidos.</p> <p>Veamos c\u00f3mo quedar\u00edan cada uno de los ficheros</p>"},{"location":"3_2_PrimerModulo/#archivo-__init__py","title":"Archivo <code>__init__.py</code>","text":"<p>Este archivo le dice a Python (y a Odoo) que esta carpeta es un paquete. </p> <pre><code># HolaMundo_V2/__init__.py\n\nfrom . import models\n</code></pre> <p>A diferencia de la primera versi\u00f3n, ahora si vamos a utilizar alg\u00fan modelo, por lo que debemos importar desde el m\u00f3dulo base para ser utilizado posteriormente.</p>"},{"location":"3_2_PrimerModulo/#archivo-__manifest__py","title":"Archivo <code>__manifest__.py</code>","text":"<p>Este archivo es el coraz\u00f3n del m\u00f3dulo. Le dice a Odoo c\u00f3mo se llama el m\u00f3dulo, qu\u00e9 hace, qu\u00e9 necesita y qu\u00e9 archivos debe cargar.</p> <pre><code># HolaMundo_V2/__manifest__.py\n\n{\n  'name': 'Hola Mundo V2',\n  'version': '2.0',\n  'summary': 'M\u00f3dulo de ejemplo Hola Mundo V2',\n  'description': 'Este m\u00f3dulo muestra un mensaje b\u00e1sico en Odoo.',\n  'author': 'Sergio Rey',\n  'category': 'Tools',\n  'depends': ['base'],\n  'data': [\n    'security/ir.model.access.csv',\n    'views/hola_view.xml',\n  ],\n\n  'installable': True,\n  'application': True,\n}\n</code></pre> <p>Respecto a la primera versi\u00f3n, tenemos un cambio en la clave <code>data</code> donde ahora a\u00f1adimos los archivos que van a cargar al iniciar.</p>"},{"location":"3_2_PrimerModulo/#archivo-models__init__py","title":"Archivo <code>models/__init__.py</code>","text":"<p>El archivo <code>__init__.py</code> dentro de la carpeta <code>models</code> es necesario para que Python reconozca esa carpeta como un paquete. </p> <p>El contenido ser\u00e1 el siguiente:</p> <pre><code># HolaMundo_V2/models/__init__.py\n\nfrom . import hola\n</code></pre> <p>Esto permite que Odoo pueda importar correctamente los archivos que hay dentro, como <code>hola.py</code>. </p> <p>Se trata pues de un archivo obligatorio para que Odoo pueda encontrar y cargar correctamente los modelos definidos en esa carpeta</p> <p>Nota</p> <p>En concreto, cuando en el archivo principal <code>__init__.py</code> del m\u00f3dulo escribes:</p> <pre><code># HolaMundo_V2/__init__.py\n\nfrom . import models\n</code></pre> <p>Python busca un archivo <code>__init__.py</code> dentro de la carpeta <code>models</code>. Y dentro de ese archivo, normalmente se importa cada archivo de modelo, por ejemplo:</p> <pre><code># HolaMundo_V2/models/__init__.py\n\nfrom . import hola\n</code></pre> <p>Esto le dice a Odoo: \u201ccarga el modelo definido en <code>models/hola.py</code>\u201d.</p> <p>Si no estuviera ese <code>__init__.py</code>, Python no sabr\u00eda que debe tratar la carpeta <code>models</code> como un paquete, y no se cargar\u00edan los modelos al instalar el m\u00f3dulo.</p>"},{"location":"3_2_PrimerModulo/#archivo-modelsholapy","title":"Archivo <code>models/hola.py</code>","text":"<p>Aqu\u00ed se define el modelo de datos. Es como crear una tabla en la base de datos con un campo llamado name.</p> <pre><code># HolaMundo_V2/models/hola.py\n\nfrom odoo import models, fields\n\nclass HolaMundo(models.Model):\n    _name = 'hola.mundo.v2'\n    _description = 'Modelo Hola Mundo V2'\n\n    mensaje = fields.Char(string='Mensaje', default='\u00a1Hola Mundo V2 desde Odoo!')\n</code></pre> <p>Nos detendremos m\u00e1s adelante en la estructura de este fichero, pero tenemos campos privados obligatorios (<code>_name</code>) que indica el nombre del modelo y que sirve a Odoo para elegir el nombre de la tabla en la que se almacenan los datos definidos en este modelo.</p> <p>Despu\u00e9s tenemos un \u00fanico campo mensaje de tipo texto, que posteriormente se mostrar\u00e1 en la vista y al que se asigna un valor por defecto.</p>"},{"location":"3_2_PrimerModulo/#archivo-viewshola_viewxml","title":"Archivo <code>views/hola_view.xml</code>","text":"<p>Este archivo define la interfaz de usuario: c\u00f3mo se ven los datos, c\u00f3mo se accede a ellos y c\u00f3mo se navega.</p> <pre><code>&lt;!-- HolaMundo_V2/views/view.xml --&gt;\n\n&lt;odoo&gt;\n    &lt;record id=\"view_hola_mundo_v2_list\" model=\"ir.ui.view\"&gt;\n        &lt;field name=\"name\"&gt;hola.mundo.v2.list&lt;/field&gt;\n        &lt;field name=\"model\"&gt;hola.mundo.v2&lt;/field&gt;\n        &lt;field name=\"type\"&gt;list&lt;/field&gt;\n        &lt;field name=\"arch\" type=\"xml\"&gt;\n            &lt;list&gt;\n                &lt;field name=\"mensaje\"/&gt;\n            &lt;/list&gt;\n        &lt;/field&gt;\n    &lt;/record&gt;\n\n    &lt;record id=\"view_hola_mundo_v2_form\" model=\"ir.ui.view\"&gt;\n        &lt;field name=\"name\"&gt;hola.mundo.v2.form&lt;/field&gt;\n        &lt;field name=\"model\"&gt;hola.mundo.v2&lt;/field&gt;\n        &lt;field name=\"type\"&gt;form&lt;/field&gt;\n        &lt;field name=\"arch\" type=\"xml\"&gt;\n            &lt;form&gt;\n                &lt;sheet&gt;\n                    &lt;field name=\"mensaje\"/&gt;\n                &lt;/sheet&gt;\n            &lt;/form&gt;\n        &lt;/field&gt;\n    &lt;/record&gt;\n\n    &lt;record id=\"action_hola_mundo_v2\" model=\"ir.actions.act_window\"&gt;\n        &lt;field name=\"name\"&gt;Hola Mundo V2&lt;/field&gt;\n        &lt;field name=\"res_model\"&gt;hola.mundo.v2&lt;/field&gt;\n        &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n    &lt;/record&gt;\n\n    &lt;menuitem id=\"menu_hola_mundo_v2_root\" name=\"Hola Mundo V2\"/&gt;\n    &lt;menuitem id=\"menu_hola_mundo_v2\" name=\"Mensajes\" parent=\"menu_hola_mundo_v2_root\"/&gt;\n    &lt;menuitem id=\"menu_hola_mundo_v2_items\" name=\"Ver Mensajes\" parent=\"menu_hola_mundo_v2\" action=\"action_hola_mundo_v2\"/&gt;\n&lt;/odoo&gt;\n</code></pre> <p>Warning</p> <p>En Odoo 18.0, el tipo de vista que antes se llamaba <code>tree</code> ahora se llama <code>list</code> tanto en el campo <code>type</code> como en el nombre de la etiqueta XML</p> <p>Esto quiere decir que si se utiliza este c\u00f3digo en una versi\u00f3n anterior de Odoo, entonces se debe sustituir el tipo <code>list</code> por <code>tree</code></p> <p>Como se puede ver define las Vistas tipo <code>list</code> y <code>form</code> para el modelo <code>hola.mundo.v2</code>, as\u00ed como los men\u00fas y acciones para acceder al modelo desde el backend. Sin esto, el usuario no podr\u00eda ver ni editar los datos del modelo desde la interfaz de Odoo.</p>"},{"location":"3_2_PrimerModulo/#archivo-securityirmodelaccesscsv","title":"Archivo <code>security/ir.model.access.csv</code>","text":"<p>Este archivo define los permisos de acceso al modelo</p> <pre><code>id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_hola_mundo_v2,hola.mundo.v2,model_hola_mundo_v2,,1,1,1,1\n</code></pre> <p>El contenido son las reglas que indican qui\u00e9n puede leer, escribir, crear o borrar registros del modelo. Este archivo es fundamental ya que sin este archivo, los usuarios no ver\u00e1n el men\u00fa ni podr\u00e1n acceder al modelo, aunque est\u00e9 instalado simplemente porque carecen de permisos.</p>"},{"location":"3_2_PrimerModulo/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para la instalaci\u00f3n se siguen los mismos pasos que en la primera versi\u00f3n.</p> <ol> <li>Crea todos los fichero en las ubicaciones indicadas.</li> <li>Reinicia el servidor de Odoo.</li> <li>Activa el modo desarrollador si no lo esta.</li> <li>Ve a Aplicaciones, actualiza la lista y busca Hola Mundo V2.</li> <li>Inst\u00e1lalo y ver\u00e1s el men\u00fa en la barra superior.</li> </ol> <p>Tip</p> <p>Observa que al hacer la b\u00fasqueda del m\u00f3dulo, si no le quitas el filtro de Aplicaci\u00f3n solo ver\u00e1s el m\u00f3dulo V2, mientras que si quitas este filtro ver\u00e1s el V1 y el V2. Esto es debido a que el el <code>__manifest__.py</code> le hemos dicho que es una aplicaci\u00f3n y antes no.</p>"},{"location":"3_2_PrimerModulo/#hola-mundo-version-3-scaffold","title":"Hola Mundo. Version 3. <code>scaffold</code>","text":"<p>Un scaffold es una herramienta que te permite generar autom\u00e1ticamente la estructura b\u00e1sica de un m\u00f3dulo personalizado. Es como un \"esqueleto\" inicial que incluye todos los archivos y carpetas necesarios para empezar a desarrollar un m\u00f3dulo.</p> <p>En otras palabras, nos crea las carpetas y clases b\u00e1sicas de nuestro modelo, simplemente indicando el nombre.</p> <p>Para crear un m\u00f3udulo ejecutamos hacemos un scaffold que hemos comentado antes, damos un nombre al m\u00f3dulo (en este caso pruebas) y le decimos que los vamos a ubicar en la carpeta <code>extra-addons</code> del contenedor que se encuentra redireccionada a la carpeta <code>./addons</code> que tenemos en la uticaci\u00f3n del docker-compose</p> <pre><code>docker exec -ti odoo odoo scaffold HolaMundo_V3 /mnt/extra-addons\n</code></pre> <p>Podemos comprobar que efectivamente se ha creado todo la estructura del modelo:</p> Carpetas y fichero creados por comando scaffold <p>Posteriormente es aconsejable dar permisos para poder acceder a esta carpeta. Debemos tener en cuenta siempre los permisos para que tanto el proceso docker que se ejecuta como <code>root</code> como nosotros con nuestro usuario podemos acceder a la carpeta.</p> <pre><code>docker exec -ti odoo chmod 777 -R /mnt/extra-addons/HolaMundo\n</code></pre> <p>De hecho, con estos cambios tan simples, podemos volver a hacer todos los pasos que hemos hecho anteriormente e instalar nuestro nuevo m\u00f3dulo:</p> <ul> <li>Reinicia Servidor</li> <li>Actualiza lista de aplicaciones</li> <li>Haz la b\u00fasqueda</li> <li>Instala....</li> </ul> <p>Esta primera versi\u00f3n no tiene nada, por lo tanto es muy similar a la versi\u00f3n 1, simplemente se instala sin mas.</p> <p>Ahora es momento de ir revisando cada uno de los fichero que tenemos e ir descomentando todo el c\u00f3digo comentado, con esto, volvemos a rehacer todo el proceso, y ya tenemos una aplicaci\u00f3n con varias vistas.</p> <p>Los ficheros a revisar y descomentar ser\u00e1n:</p> <ul> <li><code>__manyfest__py</code>: en este lo que se debe hacer es actualizar la informaci\u00f3n. Observar que los datos no son los mismos que nosotros hemos a\u00f1adidos en nuestros anteriores versiones, de hecho es posible que sea interesante a\u00f1adir alguna l\u00ednea extra</li> <li><code>models/models.py</code></li> <li><code>views/views.xml</code></li> <li><code>controllers/controllers.py</code> : este es nuevo...</li> <li><code>demo/demo.xml</code>: estos son datos de demostraci\u00f3n que se pueden cargar inicialmente. Es opcional, incluso desaconsejable en este caso</li> </ul> <p>Observa que el fichero de seguridad no se hace nada, o m\u00e1s bien se indica en <code>__manifest__.py</code> que se debe cargar.</p> <p>Por \u00faltimo, realiza todo el proceso y actualiza el m\u00f3delo, podr\u00e1s ver las vistas que se han definido.</p> Hola Mundo V3 funcionando <p>Hasta aqu\u00ed la creaci\u00f3n de modelos sencillos, ahora que hemos visto como crearlo y somos capaces de identificar estructuras y procesos para crear y actualizar m\u00f3dulos, vamos a profundizar en las caracter\u00edsticas que los definen en las siguientes secciones.</p>"},{"location":"3_3_Modulos/","title":"3.3. Los m\u00f3dulos en Odoo","text":"<p>Hemos hecho una introducci\u00f3n creando unos m\u00f3dulos de prueba en Odoo. Ahora vamos a profundizar y explicar qu\u00e9 es cada uno de los elementos y c\u00f3mo se utilizar, al menos con una profundidad m\u00ednima para poder desarrollar m\u00f3dulos b\u00e1sicos.</p>"},{"location":"3_3_Modulos/#los-modulos","title":"Los m\u00f3dulos","text":"<p>Tanto el servidor como los clientes son m\u00f3dulos. Todos est\u00e1n guardados en una base de datos. Todo lo que se pueda hacer para modificar Odoo se hace en m\u00f3dulos.</p>"},{"location":"3_3_Modulos/#composicion-de-un-modulo","title":"Composici\u00f3n de un m\u00f3dulo","text":"<p>Los m\u00f3dulos de Odoo ampl\u00edan o modifican partes del Modelo-Vista-Controlador. De esta manera, un m\u00f3dulo puede tener:</p> <ul> <li>Objetos de negocio: Son la parte del modelo, definidos en clases de Python seg\u00fan una sintaxis propia del ORM de Odoo.</li> <li>Archivos de datos: Son archivos XML que pueden definir datos, vistas o configuraciones.</li> <li>Controladores web: Gestionan las peticiones de los navegadores web.</li> <li>Datos est\u00e1ticos: Im\u00e1genes, CSS o JavaScript utilizados por la interfaz web. Es necesario que los datos est\u00e1ticos se guarden en el directorio static. Por ejemplo, el icono del m\u00f3dulo va en <code>static/description/icon.png</code>.</li> </ul>"},{"location":"3_3_Modulos/#estructura-de-archivos-de-un-modulo","title":"Estructura de archivos de un m\u00f3dulo","text":"<p>Ya vimos en la secci\u00f3n anterior alguna de las caracter\u00edsticas de los m\u00f3dulos: </p> <ul> <li>Todos los m\u00f3dulos est\u00e1n en un directorio definido en la opci\u00f3n --addons-path o en el archivo de configuraci\u00f3n, normalmente <code>addons</code>. Cada m\u00f3dulo esta un un subdirectorio dentro de esta carpeta y por lo que puede haber m\u00e1s de un directorio.</li> <li>Un m\u00f3dulo de Python se declara en un archivo de manifest (<code>__manigest__.py</code>) que da informaci\u00f3n sobre el m\u00f3dulo, lo que hace, los m\u00f3dulos de los que depende y c\u00f3mo se debe instalar o actualizar. Manifest in Odoo</li> <li>Un m\u00f3dulo es un paquete de Python que necesita un archivo __init__.py para instanciar todos los archivos Python.</li> </ul>"},{"location":"3_3_Modulos/#creacion-de-modulos","title":"Creaci\u00f3n de m\u00f3dulos","text":"<p>Tambi\u00e9n hemos visto que podemos crear un m\u00f3dulo de forma manual a\u00f1adiendo cada una de las carpetas y ficheros de configuraci\u00f3n o vimos que para ayudar al programador, Odoo contiene le comando <code>scaffold</code> para crear m\u00f3dulos vac\u00edos. Este crea la estructura de archivos necesaria para empezar a trabajar:</p> <pre><code>$ odoo scaffold &lt;nombre_del_m\u00f3dulo&gt; &lt;d\u00f3nde_crearlo&gt;\n</code></pre> <p>Posteriormente veremos m\u00e1s sobre <code>scaffold</code>, pero si quieres m\u00e1s informaci\u00f3n puedes recurrir al Manual oficial Scaffolding</p> <p>El par\u00e1metro scaffold puede tener la opci\u00f3n -t para indicar el directorio de la plantilla. Esta est\u00e1 hecha utilizando jinja2, que es un motor de plantillas para Python.</p> <p>Las plantillas est\u00e1n en el directorio de instalaci\u00f3n de Odoo, en el directorio cli. En nuestro caso: cli/templates/ dentro del directorio de instalaci\u00f3n de Odoo.</p> Plantillas de m\u00f3dulos Odoo utilizadas por `scaffold`. <p>Como podemos observar, el ejemplo de la secci\u00f3n anterior *HolaMundo_V3\" tiene exactamente esta estructura.</p> <p>Podemos crear una nueva plantilla copiando el directorio <code>default</code> o <code>theme</code> y modificando los archivos. Esto puede ser \u00fatil si siempre hacemos m\u00f3dulos con la misma plantilla. Por ejemplo, para poner nuestro logo, copyright, etc.</p>"},{"location":"3_3_Modulos/#orm","title":"ORM","text":"<p>El ORM (\"Object-Relational Mapping\" o \"Mapeo Objeto-Relacional\") es una t\u00e9cnica de programaci\u00f3n que permite convertir datos entre sistemas incompatibles utilizando lenguajes de programaci\u00f3n orientados a objetos. En Odoo, el ORM permite a los desarrolladores trabajar con la base de datos de manera m\u00e1s intuitiva y eficiente, sin necesidad de escribir consultas SQL directamente.</p> <p>El ORM es como una capa de abstracci\u00f3n que mapea las tablas de la base de datos a clases de Python y las filas de esas tablas a instancias de esas clases. Esto significa que puedes manipular los datos de la base de datos utilizando objetos y m\u00e9todos de Python, lo que simplifica enormemente el desarrollo y mantenimiento del c\u00f3digo.</p> ORM dentro de la arquitectura de Odoo. <p>Con ORM en Odoo se puede  - Definici\u00f3n de modelos: Puedes definir modelos de datos utilizando clases de Python. Cada modelo corresponde a una tabla en la base de datos. - Operaciones CRUD: El ORM proporciona m\u00e9todos para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) de manera sencilla. Por ejemplo, puedes crear un nuevo registro utilizando el m\u00e9todo <code>create()</code>, leer registros con el m\u00e9todo <code>search()</code>, actualizar registros con el m\u00e9todo <code>write()</code>, y eliminar registros con el m\u00e9todo <code>unlink()</code>. - Relaciones entre modelos: Puedes definir relaciones entre modelos, como relaciones uno a muchos, muchos a uno, y muchos a muchos, utilizando campos espec\u00edficos como <code>One2many</code>, <code>Many2one</code>, y <code>Many2many</code>. - Validaciones y restricciones: Puedes definir validaciones y restricciones en los modelos para asegurar la integridad de los datos. Por ejemplo, puedes utilizar el decorador <code>@api.constrains</code> para definir restricciones personalizadas.</p> <p>A continuaci\u00f3n se muestra un ejemplo sencillo de c\u00f3mo definir un modelo en Odoo utilizando el ORM:</p> <pre><code>from odoo import models, fields, api\n\nclass ModeloEjemplo(models.Model):\n    _name = 'modelo.ejemplo'\n    _description = 'Descripci\u00f3n de modelo de ejemplo'\n\n    name = fields.Char(string='Nombre', required=True)\n    descripcion = fields.Text(string='Descripci\u00f3n')\n    fecha = fields.Date(string='Fecha')\n\n    @api.constrains('name')\n    def _check_nombre(self):\n       for record in self:\n          if len(record.name) &lt; 3:\n             raise ValidationError('El nombre debe tener al menos 3 caracteres.')\n</code></pre> <p>En este ejemplo:</p> <ul> <li>Definimos un modelo llamado <code>ModeloEjemplo</code> que corresponde a una tabla en la base de datos.</li> <li>El modelo tiene tres campos: <code>nombre</code>, <code>descripcion</code>, y <code>fecha</code>.</li> <li>Utilizamos el decorador <code>@api.constrains</code> para definir una restricci\u00f3n que asegura que el campo <code>nombre</code> tenga al menos 3 caracteres.</li> </ul> <p>Mediante ORM, Odoo mapea sus objetos en una base de datos, evitando al programador la mayor\u00eda de consultas SQL. De esta manera, el desarrollo de los m\u00f3dulos es muy r\u00e1pido y se evitan errores de programaci\u00f3n.</p> <p>Los modelos se crean como clases de Python que extienden la clase models.Model, que contiene los campos y m\u00e9todos \u00fatiles para trabajar con el ORM.</p> <p>Nota</p> <p>Los modelos, al heredar de models.Model, necesitan obligatoriamente asignar valores a algunas variables, como por ejemplo _name.</p> <p>Odoo considera que un modelo es la referencia a una o m\u00e1s tablas en la base de datos. Un modelo no es una fila en la tabla, es toda la tabla.</p> <p>En programaci\u00f3n, el Modelo es una forma de relacionar el programa con la base de datos. Es de m\u00e1s alto nivel que las consultas directas a la base de datos y que las clases y objetos respecto a la programaci\u00f3n orientada a objetos. El modelo une en un \u00fanico concepto las estructuras de datos, las restricciones de integridad y las opciones de manipulaci\u00f3n de los datos.</p> <p>Los modelos en Odoo pueden</p> <ul> <li>Heredar de models.Model y ser los normales, mapeados y permanentes en la base de datos. </li> <li>Pueden ser models.TransientModel, que son iguales pero no tienen persistencia definitiva en la base de datos. Estos son los recomendados para crear <code>wizards</code>. </li> <li>Tambi\u00e9n pueden ser models.AbstractModel para definir modelos abstractos que luego ser\u00e1n heredados.</li> </ul> <p>En Odoo, existen tres tipos principales de modelos que heredan de clases base diferentes seg\u00fan su prop\u00f3sito, se trata de <code>models.Model</code>, <code>models.TransientModel</code> y <code>models.AbstractModel</code>:</p> <ul> <li><code>models.Model</code> se trata de Modelos persistentes. Representa una tabla real en la base de datos. Los datos almacenados en este modelo son permanentes. Por ejemplo Clientes, productos, facturas, etc.</li> <li><code>models.TransientModel</code> son datos temporales (como asistentes o formularios r\u00e1pidos), por lo tanto es un modelo no persistente. Los registros se eliminan autom\u00e1ticamente despu\u00e9s de un tiempo (por defecto, 7 d\u00edas). Se utilizan para Wizards, asistentes de importaci\u00f3n/exportaci\u00f3n, formularios temporales.</li> <li><code>models.AbstractModel</code> que son modelos base reutilizables, o sea, se trata de modelos abstractos que no crea una tabla en la base de datos. Se utiliza para definir funcionalidades comunes que pueden ser heredadas por otros modelos.</li> </ul> <p>Comparativa r\u00e1pida</p> Caracter\u00edstica <code>models.Model</code> <code>models.TransientModel</code> <code>models.AbstractModel</code> Persistencia S\u00ed No (temporal) No Crea tabla en BD S\u00ed S\u00ed No Uso t\u00edpico Datos reales Formularios/Wizards Funcionalidad com\u00fan Eliminaci\u00f3n autom\u00e1tica No S\u00ed No"},{"location":"3_3_Modulos/#inspeccionar-los-modelos","title":"Inspeccionar los modelos","text":"<p>Para ver los modelos existentes, se puede acceder a la base de datos PostgreSQL o consultar en Configuraci\u00f3n &gt; Estructura de la base de datos &gt; Modelos dentro del modo desarrollador.</p> <p>Cabe destacar el campo modules, donde se indican los m\u00f3dulos instalados en los que se define o hereda el modelo observado.</p>"},{"location":"3_3_Modulos/#fields","title":"Fields","text":"<p>Las \"columnas\" del modelo son los fields (campos). Estos pueden ser de datos normales como Integer, Float, Boolean, Date, Char... o especiales como Many2one, One2many, Related...</p> <p>Hay algunos fields reservados:</p> <ul> <li>id (Id): identificador \u00fanico para un registro en su modelo.</li> <li>create_date (Datetime): fecha de creaci\u00f3n del registro.</li> <li>create_uid (Many2one): usuario que cre\u00f3 el registro.</li> <li>write_date (Datetime): fecha de la \u00faltima modificaci\u00f3n del registro.</li> <li>write_uid (Many2one): usuario que realiz\u00f3 la \u00faltima modificaci\u00f3n.</li> </ul> <p>Hay otros fields que podemos declarar y que tienen propiedades especiales. Estos son los m\u00e1s importantes:</p> <ul> <li>name: es el campo utilizado para el Identificador Externo o cuando se hace referencia en los many2one en la vista.</li> <li>active: indica si el registro est\u00e1 activo. Permite ocultar productos que ya no se necesitan, por ejemplo.</li> <li>sequence: permite definir el orden de los registros a mostrar en una lista.</li> </ul> <p>Los fields se declaran con un constructor:</p> <pre><code>from odoo import models, fields\n\nclass LessMinimalModel(models.Model):\n    _name = 'test.model2'\n\n    name = fields.Char()\n</code></pre> <p>Tienen unos atributos comunes:</p> <ul> <li>string (unicode, por defecto: el nombre del field): la etiqueta que ver\u00e1n los usuarios en la vista.</li> <li>required (bool, por defecto: False): si es True, el campo no puede quedar vac\u00edo.</li> <li>help (unicode, por defecto: ''): en los formularios proporciona ayuda al usuario para rellenar el campo.</li> <li>index (bool, por defecto: False): pide a Odoo que sea el \u00edndice de la base de datos. En otro caso, el ORM crea un campo id.</li> </ul> <p>Y algunos, sobre todo los especiales, tienen atributos particulares.</p> <p>Ejemplo completo:</p> <pre><code>class AModel(models.Model):\n\n    _name = 'a_name'\n\n    name = fields.Char(\n       string=\"Name\",                   # Etiqueta opcional del campo\n       compute=\"_compute_name_custom\",  # Convierte el campo en calculado\n       store=True,                      # Si es calculado, almacena el resultado\n       select=True,                     # Fuerza \u00edndice en el campo\n       readonly=True,                   # El campo ser\u00e1 solo lectura en las vistas\n       inverse=\"_write_name\",           # Al actualizar, dispara esta funci\u00f3n\n       required=True,                   # Campo obligatorio\n       translate=True,                  # Habilita traducci\u00f3n\n       help='blabla',                   # Texto de ayuda\n       company_dependent=True,          # Convierte columnas a ir.property\n       search='_search_function',       # B\u00fasqueda personalizada, usado sobre todo con compute\n       copy=True                        # Si se puede copiar con el m\u00e9todo copy()\n    )\n\n    # La clave string no es obligatoria\n    # Por defecto usar\u00e1 el nombre de la propiedad capitalizado\n\n    name = fields.Char()  # Definici\u00f3n v\u00e1lida\n</code></pre> <p>Si queremos valores por defecto, se pueden indicar como un atributo del field.</p> <p><pre><code>name = fields.Char(default='Alberto')\n</code></pre> o <pre><code>name = fields.Char(default=a_fun)\n...\ndef a_fun(self):\n    return self.do_something()\n</code></pre></p>"},{"location":"3_3_Modulos/#campos-normales","title":"Campos normales","text":"<p>Estos son los campos para datos normales que proporciona Odoo:</p> <ul> <li><code>Integer</code></li> <li><code>Char</code></li> <li><code>Text</code></li> <li><code>Date</code>: Muestra un calendario en la vista.</li> <li><code>Datetime</code></li> <li><code>Float</code></li> <li><code>Boolean</code></li> <li><code>Html</code>: Guarda un texto, pero se representa de manera especial en el cliente.</li> <li><code>Binary</code>: Para guardar, por ejemplo, im\u00e1genes. Utiliza codificaci\u00f3n base64 al enviar los archivos al cliente. En realidad los guarda en /var/lib/odoo/.local/share/Odoo/filestore y la ruta a los archivos la indica la tabla ir_attachment junto con el id, nombre del campo y el modelo.</li> <li><code>Image</code> (Odoo13): En el caso de im\u00e1genes, acepta los atributos max_width y max_height donde se puede indicar en p\u00edxeles que debe redimensionar la imagen a ese tama\u00f1o m\u00e1ximo.</li> <li>Sele`ction: Muestra un select con las opciones indicadas.</li> </ul> <pre><code>type = fields.Selection([('1','B\u00e1sico'),('2','Intermedio'),('3','Completado')])\naselection = fields.Selection(selection='a_function_name') # Se puede llamar a una funci\u00f3n que define las opciones.\n</code></pre>"},{"location":"3_3_Modulos/#campos-relacionales","title":"Campos relacionales","text":"<p>Las relaciones entre los modelos (en definitiva, entre las tablas de la base de datos) tambi\u00e9n las simplifica el ORM. As\u00ed, las relaciones 1 a muchos se hacen en lo que Odoo llama Many2one y las relaciones Muchos a Muchos se hacen con Many2many. Las relaciones muchos a muchos, en una base de datos relacional, implican una tercera tabla intermedia, pero en Odoo no tenemos que preocuparnos de estos detalles si no queremos, el mapeo de los objetos lo detectar\u00e1 y crear\u00e1 las tablas, claves y restricciones de integridad necesarias. Vamos a repasar uno a uno estos campos:</p>"},{"location":"3_3_Modulos/#reference","title":"Reference","text":"<p>Una referencia arbitraria a un modelo y un campo.</p> <pre><code>aref = fields.Reference([('model_name', 'String')])\naref = fields.Reference(selection=[('model_name', 'String')])\naref = fields.Reference(selection='a_function_name')\n\n# Fragmento de test_new_api:\nreference = fields.Reference(string='Documento relacionado', selection='_reference_models')\n@api.model\ndef _reference_models(self):\n    models = self.env['ir.model'].search([('state', '!=', 'manual')])\n    return [(model.model, model.name)\n            for model in models\n            if not model.model.startswith('ir.')]\n</code></pre> <p>Los campos reference no son muy utilizados, ya que normalmente las relaciones entre modelos son siempre las mismas.</p>"},{"location":"3_3_Modulos/#many2one","title":"Many2one","text":"<p>Relaci\u00f3n con otro modelo</p> <pre><code>arel_id = fields.Many2one('res.users')\narel_id = fields.Many2one(comodel_name='res.users')\nan_other_rel_id = fields.Many2one(comodel_name='res.partner', delegate=True)\n</code></pre> <p>En este caso:</p> <pre><code>----------              -----------\n| Pa\u00eds   |  uno         |  Ciudad | \n---------- -----        -----------\n| * id   |     |        | * id    |\n| * name |     | muchos | * name  |\n----------     ---------| * pa\u00eds  |\n                        -----------\n</code></pre> <p>El c\u00f3digo resultante ser\u00eda:</p> <pre><code>class ciudad(models.Model):\n    _name = 'mon.ciutat'\n    pais = fields.Many2one(\"mon.pais\", string='Pa\u00eds', ondelete='restrict')\n</code></pre> <p>delegate est\u00e1 en True para hacer que los campos del modelo apuntado sean accesibles desde el modelo actual.</p> <p>Tambi\u00e9n acepta context y domain como en la vista. As\u00ed queda disponible para todas las posibles vistas.</p> <p>Otro argumento adicional es ondelete que permite definir el comportamiento al borrar el elemento referenciado: set null, restrict o cascade.</p> <p><code>ondelete cascade</code> borra los hijos a nivel de PostgreSQL, pero no elimina en External Id, eso se hace en unlink(), pero no ejecuta unlink() de los hijos. Por tanto, si queremos que se eliminen por completo, hay que heredar el unlink del padre y a\u00f1adir la llamada al de los hijos.</p>"},{"location":"3_3_Modulos/#one2many","title":"One2many","text":"<p>Inversa del Many2one. Necesita la existencia de un Many2one en el otro modelo:</p> <pre><code>arel_ids = fields.One2many('res.users', 'arel_id')\narel_ids = fields.One2many(comodel_name='res.users', inverse_name='arel_id')\n</code></pre> <p>Un One2many funciona porque hay un many2one en el otro modelo. As\u00ed, siempre hay que especificar el nombre del modelo y el nombre del campo Many2one del modelo que hace referencia al actual, como se puede ver en el ejemplo.</p> <p>En el ejemplo anterior, quedar\u00eda as\u00ed:</p> <pre><code>class pais(models.Model):\n    _name = 'mon.pais'\n    ciudades = fields.One2many('mon.ciutat', 'pais', string='Ciudades')\n</code></pre> <p>Nota</p> <p>Es importante entender que el One2many no implica datos adicionales en la base de datos y siempre es calculado como un ''select'' en la base de datos donde el id del modelo actual coincida con el Many2one (clave for\u00e1nea) del otro modelo. Esto hace que no tenga sentido hacer One2many computed o poner un domain para restringir los que se pueden a\u00f1adir.</p> <p>Tip</p> <p>Los One2many pueden tener domain para no mostrar los que no cumplen una condici\u00f3n, esto no significa que no exista esa relaci\u00f3n.</p>"},{"location":"3_3_Modulos/#many2many","title":"Many2many","text":"<p>Relaci\u00f3n muchos a muchos.</p> <pre><code>arel_ids = fields.Many2many('res.users')\narel_ids = fields.Many2many(\n    comodel_name='res.users', # El modelo con el que se relaciona\n    relation='table_name', # (opcional) el nombre de la tabla intermedia\n    column1='col_name', # (opcional) el nombre en la tabla intermedia de la columna de este modelo\n    column2='other_col_name')  # (opcional) el nombre de la columna del otro modelo.\n</code></pre> <p>El primer ejemplo suele funcionar directamente, pero si queremos tener m\u00e1s de una relaci\u00f3n Many2many entre los dos mismos modelos, hay que usar la sintaxis completa donde especificamos el nombre de la relaci\u00f3n y el nombre de las columnas que identifican los dos modelos. Recuerda que una relaci\u00f3n Many2many implica una tabla intermedia y estamos especificando sus claves for\u00e1neas.</p> <p>Tip</p> <p>Tambi\u00e9n es necesario especificar la tabla intermedia si se hace una relaci\u00f3n Many2many al propio modelo.</p> <p>Un Many2many implica una tabla intermedia. Si queremos a\u00f1adir atributos a esta relaci\u00f3n, hay que crear expl\u00edcitamente el modelo intermedio.</p> <p>El many2many puede ser ''computed'' y en el c\u00e1lculo se puede ordenar o filtrar. Un Many2many computed no crea la tabla intermedia.</p>"},{"location":"3_3_Modulos/#related","title":"Related","text":"<p>Un campo de otro modelo, necesita una relaci\u00f3n Many2one. As\u00ed se pueden aprovechar las funcionalidades de guardado, como b\u00fasquedas o referencias en funciones. En t\u00e9rminos de bases de datos, un campo related rompe la tercera forma normal. Esto suele ser problem\u00e1tico, pero Odoo tiene mecanismos para que no pase nada. De todas formas, si nos preocupa esto, con store=False no guarda nada en la tabla.</p> <pre><code>participant_nick = fields.Char(\n    string='Nick name',\n    store=True,\n    related='partner_id.name'\n</code></pre> <p>Un campo related puede ser de cualquier tipo. Por ejemplo, many2one:</p> <pre><code>sala = fields.Many2one(\n    'cine.sala', \n    related='sessio.sala', \n    store=True, \n    readonly=True)\n</code></pre>"},{"location":"3_3_Modulos/#many2onereference","title":"Many2oneReference","text":"<p>Un Many2one donde tambi\u00e9n se guarda el modelo al que hace referencia con el atributo: model_field. M\u00e1s info</p>"},{"location":"3_3_Modulos/#one2one","title":"One2one","text":"<p>Los campos One2one no existen en Odoo. Pero si queremos esta funcionalidad podemos usar varias t\u00e9cnicas:</p> <ul> <li>Hacer dos campos Many2many y restringir con constrains que solo puede existir una relaci\u00f3n. Problemas:<ul> <li>En la vista no podemos poner un widget como en el Many2one y es complicado evitar relaciones cruzadas.</li> <li>Se puede poner un limit en la vista, pero seguir\u00e1 comport\u00e1ndose como un Many2many.</li> </ul> </li> <li>Hacer dos Many2one y restringir con constrains o sql constrains que solo puede existir una relaci\u00f3n mutua. (Hay que sobreescribir los m\u00e9todos create y write para que se cree la asociaci\u00f3n autom\u00e1ticamente). Problemas:<ul> <li>Si sobreescribimos el write de ambos, se puede producir una llamada recursiva sin fin y es complicado evitar referencias cruzadas.</li> </ul> </li> <li>Hacer un Many2one y en el otro modelo un Many2one computed que busque en los del primer modelo. Para poder editar en ambos hay que hacer una funci\u00f3n inversa para el campo computed. Esta es una de las opciones m\u00e1s elegantes. </li> </ul> <p>One2one</p> <pre><code>class orderline(models.Model):\n    _name = 'sale.order.line'\n    _inherit = 'sale.order.line'\n    booking = fields.Many2one('reserves.bookings')\n\n    _sql_constraints = [\n    ('booking_uniq', 'unique(booking)', 'Ya existe otra l\u00ednea de pedido para esta reserva'),\n    ]\n\nclass bookings(models.Model):\n    _name = 'reserves.bookings'\n\n    name = fields.Char()\n    order_line = fields.Many2one('sale.order.line', compute='_get_order_line', inverse='_set_order_line')\n\n    @api.multi\n    def _get_order_line(self):\n        for b in self:\n            b.order_line = self.env['sale.order.line'].search([('booking.id','=',b.id)]).id\n\n    @api.one\n    def _set_order_line(self):\n        o = self.order_line.id\n        self.env['sale.order.line'].search([('id','=',o)]).write({'booking':self.id})\n</code></pre> <ul> <li>Hacer un Many2one y un One2many y restringir el m\u00e1ximo del One2many (+info). Problemas:<ul> <li>Los mismos que en los dos many2many. Es m\u00e1s simple restringir las relaciones cruzadas.</li> </ul> </li> <li>Hacer una herencia m\u00faltiple (+info](http://blog.odoobiz.com/2014/10/openerp-one2one-relational-field-example.html)). Problemas:<ul> <li>Esta es, en teor\u00eda, la forma m\u00e1s oficial de hacerlo, pero obliga a crear siempre la relaci\u00f3n y los modelos en un orden determinado.</li> </ul> </li> </ul>"},{"location":"3_3_Modulos/#filtros-domains","title":"Filtros (Domains)","text":"<p>En ocasiones es necesario a\u00f1adir un filtro en el c\u00f3digo python para que un campo relacional no pueda tener ciertas referencias. El comportamiento del domain es diferente seg\u00fan el tipo de campo.</p> <ul> <li>Domain en Many2one: Filtra los elementos del modelo referenciado que pueden ser elegidos para el campo:</li> </ul> <pre><code>parent = fields.Many2one('game.resource', domain=\"[('template', '=', True)]\")\n</code></pre> <ul> <li>Domain en Many2many: La lista de elementos a elegir se filtra seg\u00fan el domain:</li> </ul> <pre><code>allowed_value_ids = fields.Many2many(\n    comodel_name=\"x\",\n    compute=\"_compute_allowed_value_ids\"\n)\n\ndef _compute_allowed_value_ids(self):\n    for record in self:\n        record.allowed_value_ids = self.env[\"x\"].search(...)\n\nvalue_id = fields.Many2many(\n    comodel_name=\"x\",\n    domain=\"[('id', 'in', allowed_value_ids)]\",\n)\n</code></pre> <ul> <li>Domain en One2many: Al ser una relaci\u00f3n que depende de otro Many2one, no se puede filtrar, si ponemos un domain, solo dejar\u00e1 de mostrar los que no cumplen el domain, pero no dejan de existir.</li> </ul>"},{"location":"3_3_Modulos/#fields-computed","title":"Fields Computed","text":"<p>Muchas veces queremos que el contenido de un campo sea calculado en el momento en que lo vamos a visualizar. Todos los tipos de campos pueden ser computed (calculados). Veamos algunos ejemplos:</p> <p>Ejemplo</p> <pre><code># Este campo no se guarda en la base de datos \n# y siempre se recalcula cuando ejecutamos una acci\u00f3n que lo muestra\ntaken_seats = fields.Float(string=\"Plazas ocupadas\", compute='_taken_seats')   \n\n# El decorador @api.depends() indica que se llamar\u00e1 a la funci\u00f3n \n# siempre que se modifiquen los campos seats y attendee_ids. \n# Si no lo ponemos, solo se recalcula al recargar la acci\u00f3n.\n@api.depends('seats', 'attendee_ids')  \ndef _taken_seats(self):          \n    # El for recorre self, que es un recordset con todos los elementos del modelo mostrados \n    # por la vista. Si es un tree, ser\u00e1n todos los visibles y si es un form, ser\u00e1 un singleton.\n    for r in self:  \n        # r es un singleton y se puede acceder a los campos como variables del objeto.      \n        if not r.seats: \n            r.taken_seats = 0.0 \n        else:\n            r.taken_seats = 100.0 * len(r.attendee_ids) / r.seats\n</code></pre> <p>En este ejemplo se ve c\u00f3mo el campo float <code>taken_seats</code> se calcula en una funci\u00f3n privada <code>_taken_seats</code>. Es interesante observar el for porque recorre todas las instancias a las que hace referencia el modelo. Esta funci\u00f3n solo se ejecutar\u00e1 una vez aunque tenga que calcular todos los elementos de una lista. Por eso, la propia funci\u00f3n es la que debe iterar los elementos de self. self es un <code>recordset</code>, es decir, es como una lista en la que cada elemento es un registro del modelo. Si el campo computed se llama al entrar en un formulario, el recordset tendr\u00e1 solo un elemento, pero si el campo computed se ve en una lista (tree), puede que sean varios registros. Es importante recordar hacer el for record in self: aunque pensemos que el campo computed solo lo utilizaremos en un formulario.</p> <p>:</p> <p>Ejemplo de campos computed de todos los tipos</p> <pre><code># -*- coding: utf-8 -*-\n\nfrom openerp import models, fields, api, tools\nfrom datetime import date, datetime\n\nclass pruebas_computed(models.Model):\n    _name = 'pruebas_computed.pruebas_computed'\n\n    name = fields.Char()\n    value = fields.Integer()\n    image = fields.Binary(string=\"Imagen original\")\n    computedfloat = fields.Float(compute=\"_value_pc\", store=True)\n    computedchar = fields.Char(compute=\"_value_pc\", store=False)\n    medium_image = fields.Binary(compute=\"_redimensionar\", store=True)\n    small_image = fields.Binary(compute=\"_redimensionar\", store=True)\n    computedm2o = fields.Many2one('res.partner', compute=\"_value_pc\", store=False)\n    computedm2m = fields.Many2many(comodel_name='product.template', compute=\"_value_pc\", store=False)\n    computeddate = fields.Date(compute=\"_value_pc\", store=False)\n    computeddatetime = fields.Datetime(compute=\"_value_pc\", store=False)\n\n    description = fields.Text()\n\n    @api.depends('value')\n    def _value_pc(self):\n        for r in self:\n            r.computedfloat = float(r.value) / 100 \n            r.computedchar = \"(\" + str(r.value) + \")\"\n            r.computedm2o = self.env['res.partner'].search([('id', '=', r.value)]).id # Many2one espera un id, que es un campo Integer. \n            print('\\033[93m' + str(self.env['product.product'].search([('id', '&gt;', r.value)]).ids) + '\\033[0m')\n            r.computedm2m = self.env['product.template'].search([('id', '&gt;', r.value)]).ids # Many2many espera un array de ids o un recordset. \n            # El c\u00f3digo comentado a continuaci\u00f3n hace lo mismo, por si queremos hacer otras cosas dentro del for.\n            # ids = []\n            # for t in self.env['product.template'].search([('id','&gt;',r.value)]):\n            #     ids.append(t.id)\n            # r.computedm2m = ids\n\n            # r.computeddate = date.today() # Esto depende de Python\n            r.computeddate = fields.date.today() # Recomendamos este, ya que es propio de la clase fields de Odoo\n            # r.computeddate = datetime.now()\n            r.computeddatetime = fields.datetime.now()\n\n\n    @api.depends('image')\n    def _redimensionar(self):\n        for r in self:\n            image_original = r.image\n            if image_original:\n                images = tools.image_get_resized_images(image_original)\n                r.medium_image = images['image_medium']                        \n                r.small_image = images['image_small']                \n            else:\n                r.medium_image = \"\"                        \n                r.small_image = \"\"\n</code></pre> <p>(C\u00f3digo completo)</p> <p>Note</p> <p>En el apartado del <code>controlador</code> se explican m\u00e1s detalles de las funciones en python-odoo.</p>"},{"location":"3_3_Modulos/#buscar-y-escribir-en-campos-computed","title":"Buscar y escribir en campos computed","text":"<p>Con api.depends podemos hacer que los campos calculados puedan ser buscados o referenciados desde otros modelos, ya que podemos indicar que s\u00ed se guarden en la base de datos. Si se guarda en la base de datos, no se recalcula hasta que no cambia el contenido del field del que depende. Pero si el campo calculado no depende de valores est\u00e1ticos de otros fields y/o necesitamos que siempre se calcule, no tenemos muchas opciones elegantes. Una de ellas puede ser hacer dos campos, uno calculado store=False y otro no, y hacer un write en la funci\u00f3n. Otra posibilidad es hacer una funci\u00f3n p\u00fablica que pueda ser llamada desde otro modelo. La m\u00e1s elegante, aunque no siempre funciona, es utilizar la opci\u00f3n search y asignarle una funci\u00f3n que debe retornar un dominio de b\u00fasqueda. El problema es que no acepta mucha complejidad, ya que supone una b\u00fasqueda por toda la base de datos y puede ser muy ineficiente.</p> <p>Por defecto no se puede escribir en un campo computed. No tiene mucho sentido en la mayor\u00eda de los casos, ya que es un campo que depende de otros. Pero puede ser que, a veces, queramos escribir el resultado y que modifique el campo origen. Imaginemos, por ejemplo, que sabemos el precio final y queremos que calcule el precio sin IVA. Para hacerlo, la mejor manera es crear una funci\u00f3n y hacer que est\u00e9 en la opci\u00f3n inverse.</p> <p>Ejemplo:</p> <pre><code>preu = fields.Float('Precio', compute=\"_get_price\", search='_search_price', inverse='_set_price')\n\n@api.depends('pelicula', 'descuento')\ndef _get_price(self):\n    for r in self:\n        price = r.pelicula.precio\n        price = price - (price * r.descuento / 100)\n        r.preu = price\n\ndef _search_price(self, operator, value): # De momento este search solo es para ==\n    precios = self.search([]).mapped(lambda e: [e.id, e.pelicula.precio - (e.pelicula.precio * e.descuento / 100)]) # Un buen ejemplo de mapped en lambda\n    print(precios)\n    p = [num[0] for num in precios if num[1] == value]  # condici\u00f3n if en una lista python sin hacer un for (list comprehension)\n    # tambi\u00e9n se puede probar en un filter() de python\n    print(p)\n    # p es una lista de las id que ya cumplen la condici\u00f3n, por tanto solo hay que hacer que la id est\u00e9 en la lista.\n    return [('id', 'in', p)]\n\ndef _set_price(self):\n    self.pelicula.precio = self.preu  # Esto es un ejemplo, pero est\u00e1 mal, ya que modificas el precio de la peli en todas las sesiones\n</code></pre> <p>Documentaci\u00f3n oficial: https://www.odoo.com/documentation/master/developer/reference/backend/orm.html</p>"},{"location":"3_3_Modulos/#valores-por-defecto","title":"Valores por defecto","text":"<p>En Odoo es muy f\u00e1cil definir valores por defecto, ya que es un argumento m\u00e1s en el constructor de los campos:</p> <pre><code>name = fields.Char(default=\"Desconocido\")\nuser_id = fields.Many2one('res.users', default=lambda self: self.env.user)\nstart_date = fields.Date(default=fields.Date.today())\nactive = fields.Boolean(default=True)\ndef compute_default_value(self):\n    return self.get_value()\na_field = fields.Char(default=compute_default_value)\n</code></pre> <p>Si queremos, por ejemplo, poner la fecha del momento de crear, no podemos hacer esto:</p> <pre><code>start_date = fields.Date(default=fields.Date.today())  # INCORRECTO\n</code></pre> <p>Porque calcula la fecha en el momento de actualizar el m\u00f3dulo, no al crear el elemento en el modelo. Hay que hacer:</p> <pre><code>start_date = fields.Date(default=lambda self: fields.Date.today())  # CORRECTO\n</code></pre> <p>o</p> <pre><code>start_date = fields.Datetime(default=lambda self: fields.Datetime.now()) # CORRECTO\n</code></pre> <p>El valor por defecto no puede depender de un campo que se est\u00e1 creando en ese momento. En ese caso se puede utilizar un on_change.</p> <p>En caso de tener muchos valores por defecto o que dependan del contexto, se puede utilizar la funci\u00f3n default_get que ya tienen los modelos.</p> <pre><code>@api.model\ndef default_get(self, default_fields):\n    result = super(SelectSalePrice, self).default_get(default_fields)\n    if self._context.get('default_picking_id') is not None:\n        result['picking_id'] = self._context.get('default_picking_id')\n    return result\n</code></pre> <p>Lo que hace esta funci\u00f3n es un poco avanzado de momento, ya que hace uso del <code>context</code> y la herencia para a\u00f1adir un valor por defecto al diccionario que retorna esta funci\u00f3n en la clase Model.</p>"},{"location":"3_3_Modulos/#restricciones-constrains","title":"Restricciones (constrains)","text":"<p>Los objetos pueden incorporar, de forma opcional, restricciones de integridad, adicionales a las de la base de datos. Odoo valida estas restricciones en las modificaciones de datos y, en caso de violaci\u00f3n, muestra una pantalla de error.</p> <pre><code>from odoo.exceptions import ValidationError\n\n@api.constrains('age')\ndef _check_something(self):\n    for record in self:\n        if record.age &gt; 20:\n            raise ValidationError(\"El registro es demasiado antiguo: %s\" % record.age)\n    # todos los registros pasaron la prueba, no retornar nada\n</code></pre> <p>En ocasiones, cuando tenemos claro c\u00f3mo har\u00edamos esta restricci\u00f3n en SQL, tal vez nos resulte m\u00e1s interesante hacer una restricci\u00f3n de base de datos con una sql constraint. Estas se definen con 3 strings (name, sql_definition, message). Por ejemplo:</p> <pre><code>_sql_constraints = [\n    ('name_uniq', 'unique(name)', 'Mensaje de advertencia personalizado'),\n    ('contact_uniq', 'unique(contact)', 'Mensaje de advertencia personalizado')\n]\n</code></pre> <p>En este caso, se trata de una restricci\u00f3n de unicidad, que es m\u00e1s sencilla de implementar que realizar una b\u00fasqueda en Python.</p>"},{"location":"3_3_Modulos/#archivos-de-datos","title":"Archivos de datos","text":"<p>Cuando desarrollamos un m\u00f3dulo en Odoo, podemos definir datos que se almacenar\u00e1n en la base de datos. Estos datos pueden ser necesarios para el funcionamiento del m\u00f3dulo, para demostraci\u00f3n o incluso formar parte de la vista.</p> <p>Tip</p> <p>Algunos m\u00f3dulos solo existen para insertar datos en Odoo.</p> <p>Todos los archivos de datos son en formato XML y tienen una estructura como la siguiente:</p> <pre><code>&lt;odoo&gt;\n    &lt;record model=\"{nombre_modelo}\" id=\"{identificador_registro}\"&gt;\n        &lt;field name=\"{nombre_campo}\"&gt;{valor}&lt;/field&gt;\n    &lt;/record&gt;\n&lt;/odoo&gt;\n</code></pre> <p>Dentro de las etiquetas odoo podemos encontrar una etiqueta record por cada fila de la tabla que queremos introducir. Es necesario especificar el modelo y el id. El id es un identificador externo, que no tiene por qu\u00e9 coincidir con la clave primaria que el ORM utilizar\u00e1 despu\u00e9s. Cada field tendr\u00e1 un nombre y un valor.</p>"},{"location":"3_3_Modulos/#identificadores-externos-external-ids","title":"Identificadores Externos (External Ids)","text":"<p>Todos los registros de la base de datos tienen un identificador \u00fanico en su tabla, el id, que es un n\u00famero autoincremental asignado por la base de datos. Sin embargo, si queremos referenciarlo en archivos de datos u otros lugares, no siempre conocemos ese id. La soluci\u00f3n de Odoo son los Identificadores Externos. Se trata de una tabla que relaciona cada id de cada tabla con un nombre. Es el modelo ir.model.data. Para encontrarlos, accede a:</p> <p><code>Ajustes &gt; T\u00e9cnico &gt; Secuencias e identificadores &gt; Identificadores externos</code></p> <p>Ah\u00ed encontrar\u00e1s la columna Complete ID.</p> <p>Para encontrar los id al crear archivos de demostraci\u00f3n o de datos, podemos ir al men\u00fa, pero esos ids cambian de una instalaci\u00f3n a otra. Por tanto, es recomendable utilizar los external id. Para obtenerlo, puedes activar el modo desarrollador y abrir el men\u00fa Ver metadatos.</p> <p>En los datos de demo, los external ids se utilizan para no depender de los ids, que pueden variar al ser autoincrementales. Para que funcione, hay que usar el atributo ref:</p> <pre><code>&lt;field name=\"product_id\" ref=\"product.product1\"/&gt;\n</code></pre> <p>Tip</p> <p>Se recomienda usar el atributo <code>id</code> en el record, aunque no sobrescribe el id real, sirve para declarar el External Id y es m\u00e1s f\u00e1cil referenciarlo despu\u00e9s.</p> <p>Ver tambi\u00e9n la funci\u00f3n ref() del ORM.</p>"},{"location":"3_3_Modulos/#expresiones","title":"Expresiones","text":"<p>A veces queremos que los campos se calculen cada vez que se actualiza el m\u00f3dulo. Esto se puede hacer con el atributo eval, que eval\u00faa una expresi\u00f3n de Python.</p> <pre><code>&lt;field name=\"date\" eval=\"(datetime.now()+timedelta(-1)).strftime('%Y-%m-%d')\"/&gt;\n&lt;field name=\"product_id\" eval=\"ref('product.product1')\"/&gt; &lt;!-- Equivalente al ejemplo anterior --&gt;\n&lt;field name=\"price\" eval=\"ref('product.product1').price\"/&gt;\n&lt;field name=\"avatar\" model=\"school.template\" eval=\"obj().env.ref('school.template_student1').image\" /&gt;\n</code></pre> <p>Para los campos x2many, se puede usar eval para asignar una lista de elementos:</p> <pre><code>&lt;field name=\"tag_ids\" eval=\"[(6,0,[ref('vehicle_tag_leasing'),ref('fleet.vehicle_tag_compact'),ref('fleet.vehicle_tag_senior')])]\" /&gt;\n</code></pre> <p>Observa que hemos pasado una tupla con un 6, un 0 y una lista de refs. Las tuplas pueden ser:</p> <ul> <li>(0, _, {'field': value}): Crea un nuevo registro y lo vincula.</li> <li>(1, id, {'field': value}): Actualiza los valores en un registro ya vinculado.</li> <li>(2, id, _): Desvincula y elimina el registro.</li> <li>(3, id, _): Desvincula pero no elimina el registro de la relaci\u00f3n.</li> <li>(4, id, _): Vincula un registro ya existente.</li> <li>(5, , ): Desvincula pero no elimina todos los registros vinculados.</li> <li>(6, _, [ids]): Reemplaza la lista de registros vinculados.</li> </ul>"},{"location":"3_3_Modulos/#datos-para-campos-binary-e-image","title":"Datos para campos Binary e Image","text":"<p>Algunos datos como im\u00e1genes o archivos pueden incluirse en los registros. Hay dos formas:</p> <ul> <li>Convertir el archivo a Base64 y pegar el resultado en el campo.</li> <li>A\u00f1adir el atributo <code>type=\"base64\"</code> y el atributo <code>file=\"modulo/demo/archivo\"</code>.</li> </ul> <pre><code>&lt;field name=\"image_1920\" type=\"base64\" file=\"ejemplo/demo/caritas/1000.jpg\"/&gt;\n</code></pre> <p>Observa que la ruta parte desde el directorio del m\u00f3dulo.</p>"},{"location":"3_3_Modulos/#eliminar-registros","title":"Eliminar registros","text":"<p>Con la etiqueta delete se pueden especificar los elementos a eliminar usando el external ID o mediante una b\u00fasqueda:</p> <pre><code>&lt;delete model=\"cine.sessio\" id=\"sessio_cine1_1\"&gt;&lt;/delete&gt;\n</code></pre> <p>Cuidado</p> <p>Si falla la actualizaci\u00f3n con datos de demo, es posible que Odoo desactive la posibilidad de volver a instalarlos. Esto es el campo demo de ir.module.module, que es de solo lectura, por lo que hay que modificarlo manualmente en la base de datos:</p> <p><code>update ir_module_module set demo = 't' where name='school';</code></p> <p>M\u00e1s informaci\u00f3n: https://www.odoo.com/documentation/master/developer/reference/backend/data.html</p> <p>Aqu\u00ed tienes el fragmento corregido, traducido al castellano y formateado correctamente en Markdown:</p>"},{"location":"3_3_Modulos/#acciones-y-menus","title":"Acciones y men\u00fas","text":"<p>Si quieres conocer en m\u00e1s detalle c\u00f3mo funcionan las acciones en Odoo, consulta el art\u00edculo Acciones y men\u00fas en Odoo.</p> <p>El cliente web de Odoo contiene men\u00fas en la parte superior y a la izquierda. Estos men\u00fas, al ser activados, muestran otros men\u00fas y las pantallas del programa. Cuando pulsamos en un men\u00fa, la pantalla cambia porque hemos ejecutado una acci\u00f3n.</p> <p>Una acci\u00f3n b\u00e1sicamente tiene:</p> <ul> <li>type: El tipo de acci\u00f3n y c\u00f3mo debe interpretarse. Cuando se define en XML, no es necesario especificar el tipo, ya que lo indica el modelo en el que se guarda.</li> <li>name: El nombre, que puede mostrarse o no en pantalla. Se recomienda que sea legible para humanos.</li> </ul> <p>Las acciones y los men\u00fas se declaran en archivos de datos XML o directamente si una funci\u00f3n devuelve un diccionario que las define. Las acciones pueden ser llamadas de tres maneras:</p> <ul> <li>Haciendo clic en un men\u00fa.</li> <li>Haciendo clic en botones de las vistas (deben estar conectados con acciones).</li> <li>Como acciones contextuales en los objetos.</li> </ul> <p>De esta forma, el cliente web puede saber qu\u00e9 acci\u00f3n debe ejecutar si recibe alguna de estas cosas:</p> <ul> <li>false: Indica que se debe cerrar el di\u00e1logo actual.</li> <li>Una cadena de texto: Con la etiqueta de la acci\u00f3n de cliente a ejecutar.</li> <li>Un n\u00famero: Con el ID o ID externo de la acci\u00f3n a buscar en la base de datos.</li> <li>Un diccionario: Con la definici\u00f3n de la acci\u00f3n, que no est\u00e1 ni en XML ni en la base de datos. Generalmente, se utiliza para llamar a una acci\u00f3n al finalizar una funci\u00f3n.</li> </ul>"},{"location":"3_3_Modulos/#acciones-tipo-window","title":"Acciones tipo window","text":"<p>Las acciones de tipo window son registros del modelo ir.actions.act_window. Sin embargo, los men\u00fas que las llaman pueden declararse de forma m\u00e1s r\u00e1pida mediante la etiqueta menuitem:</p> <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"action_list_ideas\"&gt;\n    &lt;field name=\"name\"&gt;Ideas&lt;/field&gt;\n    &lt;field name=\"res_model\"&gt;idea.idea&lt;/field&gt;\n    &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n&lt;/record&gt;\n\n&lt;menuitem id=\"menu_ideas\" parent=\"menu_root\" name=\"Ideas\" sequence=\"10\"\n          action=\"action_list_ideas\"/&gt;\n</code></pre> <p>Tip</p> <p>Las acciones deben declararse en el XML antes que los men\u00fas que las utilizan.</p> <p>Ejemplo</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;openerp&gt;\n    &lt;data&gt;\n        &lt;!-- window action --&gt;\n        &lt;!--\n            The following tag is an action definition for a \"window action\",\n            that is an action opening a view or a set of views\n        --&gt;\n        &lt;record model=\"ir.actions.act_window\" id=\"course_list_action\"&gt;\n            &lt;field name=\"name\"&gt;Courses&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;openacademy.course&lt;/field&gt;\n            &lt;field name=\"view_type\"&gt;form&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n            &lt;field name=\"help\" type=\"html\"&gt;\n                &lt;p class=\"oe_view_nocontent_create\"&gt;Create the first course\n                &lt;/p&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n\n        &lt;!-- top level menu: no parent --&gt;\n        &lt;menuitem id=\"main_openacademy_menu\" name=\"Open Academy\"/&gt;\n        &lt;!-- A first level in the left side menu is needed\n            before using action= attribute --&gt;\n        &lt;menuitem id=\"openacademy_menu\" name=\"Open Academy\"\n                parent=\"main_openacademy_menu\"/&gt;\n        &lt;!-- the following menuitem should appear *after*\n            its parent openacademy_menu and *after* its\n            action course_list_action --&gt;\n        &lt;menuitem id=\"courses_menu\" name=\"Courses\" parent=\"openacademy_menu\"\n                action=\"course_list_action\"/&gt;\n        &lt;!-- Full id location:\n            action=\"openacademy.course_list_action\"\n            It is not required when it is the same module --&gt;\n    &lt;/data&gt;\n&lt;/openerp&gt;\n</code></pre> <p>Solo el tercer nivel de men\u00fas puede tener asociada una acci\u00f3n. El primer nivel es el men\u00fa superior y el segundo no es \"clicable\".</p> <p>Tip</p> <p>Lo que hemos visto en esta secci\u00f3n es la definici\u00f3n de una acci\u00f3n en XML como parte de la vista, pero una acci\u00f3n no es m\u00e1s que una forma c\u00f3moda de escribir muchas cosas que har\u00e1 el cliente en JavaScript para pedir algo al servidor. Las acciones separan y simplifican el desarrollo de la interfaz de usuario del cliente web. Un men\u00fa o bot\u00f3n en HTML activa una funci\u00f3n JavaScript que, en principio, no sabe qu\u00e9 hacer. Esta solicita la definici\u00f3n de su acci\u00f3n. Una vez cargada, queda claro todo lo que debe solicitar (vistas, contexto, dominios, vistas de b\u00fasqueda, lugar donde cargarlo todo...). Entonces solicita las vistas y, con ayuda de estas y de los campos, solicita los registros que son los datos a mostrar. Por tanto, una acci\u00f3n es la definici\u00f3n \u2014sin programar JavaScript\u2014 de lo que debe hacer el cliente. Odoo permite declarar acciones como respuesta de funciones. Estas acciones no est\u00e1n en la base de datos, pero se env\u00edan igualmente al cliente, que las trata como si fueran acciones normales. Un ejemplo de esto son las acciones que devuelven los botones de los wizards. De hecho, podemos hacer que un bot\u00f3n devuelva una acci\u00f3n y, por tanto, abra una vista diferente.</p>"},{"location":"3_3_Modulos/#la-vista","title":"La vista","text":"<p>Per saber m\u00e9s sobre les vistes i c\u00f3mo millorar-les, consulta l\\'article de La vista en Odoo</p>"},{"location":"3_3_Modulos/#herencia","title":"Her\u00e8ncia","text":"<p>El framework d\\'Odoo facilita el mecanisme de l'her\u00e8ncia per tal que els programadors puguin adaptar m\u00f2duls existents i garantir a la vegada que les actualitzacions dels m\u00f2duls no destrossin les adequacions desenvolupades.</p> <p>L'her\u00e8ncia es pot aplicar en els tres components del patr\u00f3 MVC:</p> <ul> <li>En el model: possibilita ampliar les classes existents o dissenyar     noves classes a partir de les existents.</li> <li>En la vista: possibilita modificar el comportament de vistes     existents o dissenyar noves vistes.</li> <li>En el controlador: possibilita sobreescriure els m\u00e8todes existents o     dissenyar-ne de nous.</li> </ul> <p>OpenObject proporciona tres mecanismes d'her\u00e8ncia: l'her\u00e8ncia de classe, l'her\u00e8ncia per prototip i l'her\u00e8ncia per delegaci\u00f3.</p> Mecanisme Caracter\u00edstiques Com es defineix De classe - Her\u00e8ncia simple. - La classe original queda substitu\u00efda o ampliada.  - Afegeix noves funcionalitats (atributs i/o m\u00e8todes) a la classe original.  - Les vistes definides sobre la classe original continuen funcionant.  - Permet sobreescriure m\u00e8todes de la classe original.  - En PostgreSQL, continua mapada en la mateixa taula que la classe original, ampliada amb els nous atributs que pugui incorporar. - S'utilitza l'atribut <code>_inherit</code> en la definici\u00f3 de la nova classe Python: <code>_inherit = 'obj'</code>.  - El nom de la nova classe ha de continuar sent el mateix que el de la classe original: <code>_name = 'obj'</code>. Per prototip - Her\u00e8ncia simple.  - Aprofita la definici\u00f3 de la classe original (com si fos un \u00abprototipus\u00bb).  - La classe original continua existint.  - Afegeix noves funcionalitats (atributs i/o m\u00e8todes) a les aportades per la classe original.  - Les vistes definides sobre la classe original no existeixen (cal dissenyar-les de nou).  - Permet sobreescriure m\u00e8todes de la classe original.  - En PostgreSQL, queda mapada en una nova taula. - S'utilitza l'atribut <code>_inherit</code> en la definici\u00f3 de la nova classe Python: <code>_inherit = 'obj'</code>.  - Cal indicar el nom de la nova classe: <code>_name = 'nou_nom'</code>. Per delegaci\u00f3 - Her\u00e8ncia simple o m\u00faltiple.  - La nova classe \u00abdelega\u00bb certs funcionaments a altres classes que incorpora a l'interior.  - Els recursos de la nova classe contenen un recurs de cada classe de la que deriven.  - Les classes base continuen existint.  - Afegeix les funcionalitats pr\u00f2pies (atributs i/o m\u00e8todes) que correspongui.  - Les vistes definides sobre les classes bases no existeixen a la nova classe.  - En PostgreSQL, queda mapada en diferents taules: una taula per als atributs propis, mentre que els recursos de les classes derivades resideixen en les taules corresponents a les dites classes. - S'utilitza l'atribut <code>_inherits</code> en la definici\u00f3 de la nova classe Python: <code>_inherits = {'obj': 'field_id'}</code>.  - Cal indicar el nom de la nova classe: <code>_name = 'nou_nom'</code>. <pre><code>```{figure} imgs/Inheritance_methods.png\n:scale: 100 %\n:alt: Her\u00e8ncia\n\nDiferents modes d'her\u00e8ncia\n```\n</code></pre>"},{"location":"3_3_Modulos/#herencia-en-el-model","title":"Her\u00e8ncia en el Model","text":"<p>El disseny d'un model d'Odoo heretat \u00e9s paregut al disseny d'un no heretat; \u00fanicament hi ha dues difer\u00e8ncies:</p> <ul> <li>Apareix l'atribut _inherit o _inherits per indicar     l'objecte (her\u00e8ncia simple) o els objectes (her\u00e8ncia m\u00faltiple) dels     quals deriva el nou objecte. La sintaxi a seguir \u00e9s:</li> </ul> <p><code>_inherit\u00a0=\u00a0'nom.objecte.del.que.es.deriva'</code>\\ <code>_inherits\u00a0=\u00a0{'nom.objecte1':'nom_camp_FK1',\u00a0...}</code></p> <ul> <li>En cas d'her\u00e8ncia simple, el nom (atribut _name) de l'objecte     derivat pot coincidir o no amb el nom de l'objecte pare. Tamb\u00e9 \u00e9s     possible no indicar l'atribut _name, fet que indica que el nou     objecte mant\u00e9 el nom de l'objecte pare.</li> </ul> <p>L'her\u00e8ncia simple (_inherit) amb atribut _name id\u00e8ntic al de l'objecte pare, s'anomena her\u00e8ncia de classe i en ella el nou objecte substitueix l'objecte pare, tot i que les vistes sobre l'objecte pare continuen funcionant. Aquest tipus d'her\u00e8ncia, la m\u00e9s habitual, s'utilitza quan es vol afegir fields i/o modificar propietats de dades existents i/o modificar el funcionament d'alguns m\u00e8todes. En cas d'afegir dades, aquestes s'afegeixen a la taula de la base de dades en la qual estava mapat l'objecte pare.</p> <p>Exemple d\\'her\u00e8ncia de classe L'her\u00e8ncia de classe la trobem en molts m\u00f2duls que afegeixen dades i m\u00e8todes a objectes ja existents, com per exemple, el m\u00f2dul comptabilitat (account) que afegix dades i m\u00e8todes a l'objecte res.partner. Fixem-nos en el contingut del m\u00f2dul account:</p> <pre><code>    class res_partner(Model.model):\n    _inherit = 'res.partner'\n    debit_limit = fields.float('Payable limit')\n    ...\n</code></pre> <p>Podeu comprovar que la taula res_partner d'una empresa sense el m\u00f2dul account instal\u00b7lat no cont\u00e9 el camp debit_limit, que en canvi s\u00ed que hi apareix una vegada instal\u00b7lat el m\u00f2dul.</p> <p>Odoo t\u00e9 molts m\u00f2duls que deriven de l'objecte res.partner per afegir-hi caracter\u00edstiques i funcionalitats.</p> <p>L'her\u00e8ncia simple (_inherit) amb atribut _name diferent al de l'objecte pare, s'anomena her\u00e8ncia per prototip i en ella es crea un nou objecte que aglutina les dades i m\u00e8todes que tenia l'objecte del qual deriva, juntament amb les noves dades i m\u00e8todes que pugua incorporar el nou objecte. En aquest cas, sempre es crea una nova taula a la base de dades per mapar el nou objecte.</p> <p>Exemple d\\'her\u00e8ncia per prototip L'her\u00e8ncia per prototip \u00e9s dif\u00edcil de trobar en els m\u00f2duls que incorpora Odoo. Un exemple el tenim en el m\u00f2dul base_calendar en el qual podem observar el m\u00f2dul comptabilitat (account) que afegix dades i m\u00e8todes a l'objecte res.partner. Fixem-nos en el contingut del m\u00f2dul account:</p> <pre><code>    class res_alarm(Model.model):\n    _name = 'res.alarm'\n    ...\n    class calendar_alarm(Model.model):\n    _name = 'calendar.alarm'\n    _inherit = 'res.alarm'\n    ...\n</code></pre> <p>En una empresa que tingui el m\u00f2dul base_calendar instal\u00b7lat podeu comprovar l'exist\u00e8ncia de la taula res_alarm amb els camps definits a l'apartat _atributs de la classe res_alarm i la taula calendar_alarm amb camps id\u00e8ntics als de la taula res_alarm m\u00e9s els camps definits a l'apartat _atributs de la classe calendar_alarm.</p> <p><pre><code>L'her\u00e8ncia per prototip \u00e9s la tradicional en els llenguatges orientats a objectes, ja que crea una nova classe vinculada\n</code></pre> L'her\u00e8ncia m\u00faltiple (_inherits) s'anomena her\u00e8ncia per delegaci\u00f3 i sempre provoca la creaci\u00f3 d'una nova taula a la base de dades. L'objecte derivat ha d'incloure, per cada derivaci\u00f3, un camp many2one apuntant l'objecte del qual deriva, amb la propietat ondelete=\\'cascade\\'. L'her\u00e8ncia per delegaci\u00f3 obliga que cada recurs de l'objecte derivat apunte a un recurs de cadascun dels objectes dels quals deriva i es pot donar el cas que hi hagi diversos recursos de l'objecte derivat que apunten a un mateix recurs per algun dels objectes dels quals deriva.</p> <pre><code>    class res_alarm(Model.model):\n    _name = 'res.alarm'\n    ...\n    class calendar_alarm(Model.model):\n    _name = 'calendar.alarm'\n    _inherits = {'res.alarm':'alarm_id'}\n    ...\n</code></pre>"},{"location":"3_3_Modulos/#herencia-en-la-vista","title":"Her\u00e8ncia en la vista","text":"<p>L'her\u00e8ncia de classe possibilita continuar utilitzant les vistes definides sobre l'objecte pare, per\u00f2 en moltes ocasions interessa disposar d'una versi\u00f3 retocada. En aquest cas, \u00e9s molt millor heretar de les vistes existents (per afegir, modificar o eliminar camps) que reempla\u00e7ar-les completament.</p> <pre><code> &lt;field name=\"inherit_id\" ref=\"id_xml_vista_pare\"/&gt;\n</code></pre> <p>En cas que la vista id_xml_vista_pare estiga en un m\u00f2dul diferent del que estem dissenyant, cal afegir el nom del m\u00f2dul al davant:</p> <pre><code> &lt;field name=\"inherit_id\" ref=\"modul.id_xml_vista_pare\"/&gt;\n</code></pre> <p>El motor d'her\u00e8ncia d'OpenObject, en trobar una vista heretada, processa el contingut de l'element arch. Per cada fill d'aquest element que tingui algun atribut, OpenObject cerca a la vista pare una etiqueta amb atributs coincidents (excepte el de la posici\u00f3) i, a continuaci\u00f3, combina els camps de la vista pare amb els de la vista heretada i estableix la posici\u00f3 de les noves etiquetes a partir dels seg\u00fcents valors:</p> <ul> <li>inside (per defecte): els valors s'afegeixen \"dins\" de l'etiqueta.</li> <li>after: afegeix el contingut despr\u00e9s de l'etiqueta.</li> <li>before: afegeix el contingut abans de l'etiqueta.</li> <li>replace: reempla\u00e7a el contingut de l'etiqueta.</li> <li>attributes: Modifica els     atributs.</li> </ul> <p>Reempla\u00e7ar</p> <pre><code> &lt;field name=\"arch\" type=\"xml\"&gt;\n   &lt;field name=\"camp\" position=\"replace\"&gt;\n     &lt;field name=\"nou_camp\" ... /&gt;\n   &lt;/field&gt;\n &lt;/field&gt;\n</code></pre> <p>Esborrar</p> <pre><code> &lt;field name=\"arch\" type=\"xml\"&gt;\n   &lt;field name=\"camp\" position=\"replace\"/&gt;\n &lt;/field&gt;\n</code></pre> <p>Inserir nous camps</p> <pre><code> &lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;field name=\"camp\" position=\"before\"&gt;\n       &lt;field name=\"nou_camp\" .../&gt;\n    &lt;/field&gt;\n &lt;/field&gt;\n\n &lt;field name=\"arch\" type=\"xml\" style=\"font-family:monospace\"&gt;\n    &lt;field name=\"camp\" position=\"after\"&gt;\n       &lt;field name=\"nou_camp\" .../&gt;\n    &lt;/field&gt;\n &lt;/field&gt;\n</code></pre> <p>Fer combinacions</p> <pre><code> &lt;field name=\"arch\"type=\"xml\"&gt;\n   &lt;data&gt;\n     &lt;field name=\"camp1\" position=\"after\"&gt;\n       &lt;field name=\"nou_camp1\"/&gt;\n     &lt;/field&gt;\n     &lt;field name=\"camp2\" position=\"replace\"/&gt;\n     &lt;field name=\"camp3\" position=\"before\"&gt;\n        &lt;field name=\"nou_camp3\"/&gt;\n     &lt;/field&gt;\n   &lt;/data&gt;\n &lt;/field&gt;\n</code></pre> <p>Per definir la posici\u00f3 dels elements que afegim, podem utilitzar una expresi\u00f3 xpath:</p> <pre><code> &lt;xpath expr=\"//field[@name='order_line']/tree/field[@name='price_unit']\" position=\"before\"&gt;\n &lt;xpath expr=\"//form/*\" position=\"before\"&gt;\n  &lt;header&gt;\n    &lt;field name=\"status\" widget=\"statusbar\"/&gt;\n  &lt;/header&gt;\n &lt;/xpath&gt;\n</code></pre> <p>\u00c9s posssible que necessitem una vista totalment nova de l\\'objecte heredat. Si fem un action normal en l\\'XML es veuran els que m\u00e9s prioritat tenen. Si volem especificar quina vista volem en concret hem d\\'utilitzar view_ids, observem aquest exemple:</p> <pre><code>        &lt;record model=\"ir.actions.act_window\" id=\"terraform.player_action_window\"&gt;\n            &lt;field name=\"name\"&gt;Players&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form,kanban&lt;/field&gt;\n            &lt;field name=\"view_ids\" eval=\"[(5, 0, 0),\n            (0, 0, {'view_mode': 'tree', 'view_id': ref('terraform.player_tree')}),\n            (0, 0, {'view_mode': 'form', 'view_id': ref('terraform.player_form')}),]\" /&gt;\n        &lt;/record&gt;\n</code></pre> <p>En (0,0,{registre_a_crear}) li diguem que a eixe Many2many hi ha que afegir un nou registre amb eixes dades en concret. El que necessita \u00e9s el view_mode i el view_id, com en els records anteriors.</p> <p>Si es vol especificar una vista search es pot inclourer la etiqueta search_view_id:</p> <pre><code> &lt;field name=\"search_view_id\" ref=\"cine.pos_order_line_search_view\"/&gt;  \n</code></pre> <p>Domains</p> <p>Si volem que el action heredat sols mostre els elements que volem, s\\'ha de ficar un domain en el action:</p> <pre><code>&lt;field name=\"domain\"&gt; [('isplayer','=',True)]&lt;/field&gt; \n</code></pre> <p>Am\u00e9s, es pot dir que, per defecte, quan es crea un nou registre a trav\u00e9s d\\'aquest action, tinga el field a True:</p> <pre><code>&lt;field name=\"context\"&gt;{'default_is_player': True}&lt;/field&gt;\n</code></pre> <p>Filtre per defecte</p> <p>El problema en la soluci\u00f3 anterior \u00e9s que lleva la possibilitat de veure el que no tenen aquest field a True i cal anar per un altre action a modificar-los. Si volem poder veure tots, podem crear un filtre en la vista search i en l\\'action dir que volem aquest filtre per defecte:</p> <pre><code>&lt;!--   En la vista search --&gt;\n...\n    &lt;search&gt;\n        &lt;filter name=\"player_partner\" string=\"Is Player\" domain=\"[('is_player','=',True)]\" /&gt;\n    &lt;/search&gt;\n...\n&lt;!-- En l'action --&gt;\n            &lt;!--  &lt;field name=\"domain\"&gt; [('is_player','=',True)]&lt;/field&gt; --&gt;\n            &lt;field name=\"domain\"&gt;&lt;/field&gt;\n            &lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n</code></pre> <p>Per tant, un action complet per a vistes personalitzades i amb filtres quedar\u00e0 com aquest:</p> <pre><code>        &lt;record model=\"ir.actions.act_window\" id=\"terraform.player_action_window\"&gt;\n            &lt;field name=\"name\"&gt;Players&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form,kanban&lt;/field&gt;\n            &lt;field name=\"domain\"&gt;&lt;/field&gt;\n            &lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n            &lt;field name=\"view_ids\" eval=\"[(5, 0, 0),\n            (0, 0, {'view_mode': 'tree', 'view_id': ref('terraform.player_tree')}),\n            (0, 0, {'view_mode': 'form', 'view_id': ref('terraform.player_form')}),]\" /&gt;\n        &lt;/record&gt;\n</code></pre>"},{"location":"3_3_Modulos/#herencia-en-el-controlador","title":"Her\u00e8ncia en el controlador","text":"<p>L'her\u00e8ncia en el controlador \u00e9s un mecanisme conegut, ja que l'apliquem de forma inconscient quan ens veiem obligats a sobreescriure els m\u00e8todes de la capa ORM d'OpenObject en el disseny de molts m\u00f2duls.</p> <p><pre><code>Funci\u00f3 super()\n\nEl llenguatge Python recomana utilitzar la funci\u00f3 super() per invocar el m\u00e8tode de la classe base quan s\u2019est\u00e0 sobreescrivint en una classe derivada, en lloc d\u2019utilitzar la sintaxi nomClasseBase.metode(self\u2026).\n</code></pre> L'efecte de l'her\u00e8ncia en el controlador es manifesta \u00fanicament quan cal sobreescriure algun dels m\u00e8todes de l'objecte del qual es deriva i per a fer-ho adequadament cal tenir en compte que el m\u00e8tode sobreescrit en l'objecte derivat:</p> <ul> <li>De vegades vol substituir el m\u00e8tode de l'objecte base sense     aprofitar-ne cap funcionalitat: el m\u00e8tode de l'objecte derivat no     invoca el m\u00e8tode sobreescrit.</li> <li>De vegades vol aprofitar la funcionalitat del m\u00e8tode de l'objecte     base: el m\u00e8tode de l'objecte derivat invoca el m\u00e8tode sobreescrit.</li> </ul> <p>Exemples:</p> <p>Sobreescriure el m\u00e8tode create:</p> <pre><code>class res_partner(models.Model):\n    _inherit = 'res.partner'\n    passed_override_write_function = fields.Boolean(string='Has passed our super method')\n\n    @api.model\n    def create(self, values):\n        # Override the original create function for the res.partner model\n        record = super(res_partner, self).create(values)\n\n        # Change the values of a variable in this super function\n        record['passed_override_write_function'] = True\n        print 'Passed this function. passed_override_write_function value: ' + str(record['passed_override_write_function'])\n\n        # Return the record so that the changes are applied and everything is stored.\n    return record\n</code></pre>"},{"location":"3_3_Modulos/#el-controlador","title":"El controlador","text":"<p>Part del controlador l\\'hem mencionat al parlar dels camps computed. No obstant, cal comentar les facilitats que proporciona Odoo per a no tindre que accedir dir\u00e8ctament a la base de dades.</p> <p>La capa ORM d'Odoo facilita uns m\u00e8todes que s'encarreguen del mapatge entre els objectes Python i les taules de PostgreSQL. Aix\u00ed, disposem de m\u00e8todes per crear, modificar, eliminar i cercar registres a la base de dades.</p> <p>En ocasions, pot ser necessari alterar l'acci\u00f3 autom\u00e0tica de cerca -- creaci\u00f3 -- modificaci\u00f3 -- eliminaci\u00f3 facilitada per Odoo i haurem de sobreescriure els corresponents m\u00e8todes en les nostres classes.</p> <p>Els programadors en el framework d\\'Odoo hem de con\u00e8ixer els m\u00e8todes subministrats per la capa ORM i hem de dominar el disseny de m\u00e8todes per:</p> <ul> <li>Poder definir camps funcionals en el disseny del model.</li> <li>Poder definir l'acci\u00f3 que cal executar en modificar el contingut     d'un field d'una vista form (@api.onchange)</li> <li>Poder alterar les accions autom\u00e0tiques de cerca, creaci\u00f3,     modificaci\u00f3 i eliminaci\u00f3 de recursos.</li> </ul> <p>Una darrera consideraci\u00f3 a tenir en compte en l'escriptura de m\u00e8todes i funcions en Odoo \u00e9s que els textos de missatges inclosos en m\u00e8todes i funcions, per poder ser tradu\u00efbles, han de ser introdu\u00efts amb la sintaxi _(\\'text\\') i el fitxer .py ha de contenir from tools.translate import _ a la cap\u00e7alera.</p>"},{"location":"3_3_Modulos/#api-de-lorm","title":"API de l\\'ORM","text":"<pre><code>**Interactuar en la terminal**\n    $ ***Odoo*** shell -d castillo -u containers\n\nObserva c\u00f3m hem ficat el par\u00e0metre '''shell'''. Les coses que se fan en la terminal no s\u00f3n persistents en la base de dades fins que no s'executa '''self.env.cr.commit()'''. Dins de la terminal podem obtindre ajuda dels m\u00e8todes d'Odoo amb help(), per exemple: help(tools.image)\nAmb el seg\u00fcent exemple, podem arrancar ***Odoo*** sense molestar a l'inst\u00e0ncia que est\u00e0 en marxa redefinint els ports:\n\n    $ ***Odoo*** shell -c /path/to/odoo.conf --xmlrpc-port 8888 --longpolling-port 8899\n\nhttps://asciinema.org/a/123126 (Asciinema amb alguns exemples)\n</code></pre> <p>Un m\u00e8tode creat dins d\\'un model actua sobre tots els elements del model que estiguen actius en el moment de cridar al m\u00e8tode. Si \u00e9s un tree, seran molts i si \u00e9s un form sols un. Per\u00f2 en qualsevol cas \u00e9s una \\'llista\\' d\\'elements i es diu recordset.</p> <p>B\u00e0sicament la interacci\u00f3 amb els models en el controlador es fa amb els anomenats recordsets que s\u00f3n col\u00b7leccions d\\'objectes sobre un model. Si iterem dins dels recordset , obtenim els singletons, que s\u00f3n objectes individuals de cada l\u00ednia en la base de dades.</p> <pre><code>def do_operation(self):\n    print self # =&gt; a.model(1, 2, 3, 4, 5)\n    for record in self:\n        print record # =&gt; a.model(1), then a.model(2), then a.model(3), ...\n</code></pre> <p>Podem accedir a tots els fields d\\'un model sempre que estem en un singleton, no en un recordset:</p> <pre><code>&gt;&gt;&gt; record.name\nExample Name\n&gt;&gt;&gt; record.company_id.name\nCompany Name\n&gt;&gt;&gt; record.name = \"Bob\"\n</code></pre> <p>Intentar llegir o escriure un field en un recordset donar\u00e0 un error. Accedir a un many2one, one2many o many2many donar\u00e0 un recordset.</p>"},{"location":"3_3_Modulos/#set-operations","title":"Set operations","text":"<p>Els recordsets es poden combinar amb operacions espec\u00edfiques que s\u00f3n les t\u00edpiques dels conjunts:</p> <ul> <li>record in set retorna si el record est\u00e0 en el set</li> <li>set1 | set2 Uni\u00f3 de sets</li> <li>set1 &amp; set2 Intersecci\u00f3 de sets</li> <li>set1 - set2 Difer\u00e8ncia de sets</li> </ul> <p>Am\u00e9s, un recordset no t\u00e9 elements repetits i permet accedir a recordsets dins d\\'ell. Per exemple:</p> <pre><code>&gt;&gt;&gt; record.students.classrooms\n</code></pre> <p>Dona la llista de totes les classes de tots els estudiants i sense repetir cap.</p>"},{"location":"3_3_Modulos/#programacio-funcional-en-lorm","title":"Programaci\u00f3 funcional en l\\'ORM","text":"<p>Python t\u00e9 una serie de funcions que permeten iterar una llista i aplicar una funci\u00f3 als elements. Les m\u00e9s utilitzades s\u00f3n map(), filter(), reduce(), sort(), zip()... Odoo treballa en recordsets, no llistes, i t\u00e9 les seues funcions pr\u00f2pies per a imitar aquestes:</p> <ul> <li>filtered() Filtra el recordset de manera que sols tinga els     records que complixen una condici\u00f3.</li> </ul> <pre><code>records.filtered(lambda r: r.company_id == user.company_id)\nrecords.filtered(\"partner_id.is_company\")\n</code></pre> <ul> <li>sorted() Ordena segons uns funci\u00f3, se defineix una funci\u00f3 lambda     (key) que indica que s\\'ordena per el camp name:</li> </ul> <pre><code># sort records by name\nrecords.sorted(key=lambda r: r.name)\nrecords.sorted(key=lambda r: r.name, reverse=True)\n</code></pre> <ul> <li>mapped() Li aplica una funci\u00f3 a cada recordset i retorna un     recordset amb els canvis demanats:</li> </ul> <pre><code># returns a list of summing two fields for each record in the set\nrecords.mapped(lambda r: r.field1 + r.field2)\n# returns a list of names\nrecords.mapped('name')\n# returns a recordset of partners\nrecord.mapped('partner_id')\n# returns the union of all partner banks, with duplicates removed\nrecord.mapped('partner_id.bank_ids')\n</code></pre> <p>Aquestes funcions s\u00f3n \u00fatils per a fer t\u00e8cniques de programaci\u00f3 funcional</p>"},{"location":"3_3_Modulos/#enviroment","title":"Enviroment","text":"<p>L\\'anomenat enviroment o env guarda algunes dades contextuals interessants per a treballar amb l\\'ORM, com ara el cursor a la base de dades, l\\'usuari actual o el context (que guarda algunes metadades).</p> <p>Tots els recordsets tenen un enviroment accesible amb env. Quant volem crear un recordset dins d\\'un altre, podem usar env:</p> <pre><code>&gt;&gt;&gt; self.env['res.partner']\nres.partner\n&gt;&gt;&gt; self.env['res.partner'].search([['is_company', '=', True], ['customer', '=', True]])\nres.partner(7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74)\n</code></pre> <p>El primer cas crea un recordset buit per\u00f2 que fa refer\u00e8ncia a res.partner i es poden fer les funcions de l\\'ORM que necessitem.</p>"},{"location":"3_3_Modulos/#context","title":"Context","text":"<p>El context \u00e9s un diccionari de python que cont\u00e9 dades \u00fatils per a totes les vistes i els m\u00e8todes. Les funcions d\\'Odoo reben el context i el consulten si cal. Context pot tindre de tot, per\u00f2 quasi sempre t\u00e9 al menys el user ID, l\\'idioma o la zona temporal. Quant Odoo va a renderitzar una vista XML, consulta el context per veure si ha d\\'aplicar algun par\u00e0metre.</p> <pre><code>print(self.env.context)\n</code></pre> <p>Al llarg de tot aquest manual utilitzem sovint par\u00e0metres del context. Aquests s\u00f3n els par\u00e0metres que hem utilitzat en algun moment:</p> <ul> <li>active_id : self._context.get(\\'active_id\\') es tracta de l\\'id de     l\\'element del model que est\u00e0 en pantalla.</li> <li>active_ids : Llista de les id seleccionats en un tree.</li> <li>active_model : El model actual.</li> <li>default_<code>&lt;field&gt;</code> : En un action o en un one2many es pot     assignar un valor per defecte a un field.</li> <li>search_default_<code>&lt;filter&gt;</code> : Per aplicar un filtre per     defecte a la vista en un action.</li> <li>group_by : Dins d\\'un camp filter per a crear agrupacions en les     vistes search.</li> <li>graph_mode : En les vistes graph, aquest par\u00e0metre canvia el     type</li> <li>context.get : En les vistes es pot treure algunes dades del context     per a mostrar condicionalment o per als domains</li> </ul> <p>El context va passant d\\'un m\u00e8tode a un altre o a les vistes i, de vegades volem modificar-lo.</p> <p>Imaginem que volem fer un bot\u00f3 que obriga un wizard, per\u00f2 volem passar-li par\u00e0metres al wizard. En els botons i fields relacionals es pot especificar un context:</p> <pre><code>&lt;button name=\"%(reserves.act_w_clients_bookings)d\" type=\"action\" string=\"Select bookings\" context=\"{'b_fs':bookings_fs}\"/&gt;\n</code></pre> <p>Eixe action obre un wizard, que \u00e9s un model transitori en el que podem definir un field amb els continguts del context:</p> <pre><code>def _default_bookings(self):\n         return self._context.get('b_fs')\nbookings_fs = fields.Many2many('reserves.bookings',readonly=True, default=_default_bookings)\n</code></pre> <p>Aquest many2many tindr\u00e0 els mateixos elements que el form que l\\'ha cridat. (Aix\u00f2 \u00e9s com el default_ en els One2many, per\u00f2 fet a m\u00e0)</p> <p>Tamb\u00e9 es pot utilitzar aquesta manera d\\'enviar un recordset per un context per al domain d\\'un field Many2one o Many2many:</p> <pre><code>def _domain_bookings(self):\n         return [('id','=',self._context.get('b_fs').ids)]\nbookings_fs = fields.Many2many('reserves.bookings',readonly=True, domain=_default_bookings)\n</code></pre> <p>En ocasions necessitem especificar valors per defecte i filtres per defecte en un action. Per exemple, quan implementem l\\'her\u00e8ncia, volem que els nous registres que es facen en el nostre action tinguem un valor per defecte. En el seg\u00fcent exemple, en la primera l\u00ednia \u00e9s el que es sol fer en la Her\u00e8ncia i en la segona estem especificant un External ID amb ref() dins d\\'un eval.</p> <pre><code>        &lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n        &lt;field name=\"context\" eval=\"{'default_partner_id':ref('base.main_partner'), 'company_hide':False, 'default_company_id':ref('base.main_company'), 'search_default_my_bank':1}\"/&gt;\n</code></pre> <p>El context \u00e9s un diccionari inmutable (frozendict) que no pot ser alterat en funcions. no obstant, si volem modificar el context actual per enviar-lo a un action o cridar a una funci\u00f3 d\\'un model amb un altre context, es pot fer amb with_context:</p> <pre><code># current context is {'key1': True}\nr2 = records.with_context({}, key2=True)\n# -&gt; r2._context is {'key2': True}\nr2 = records.with_context(key2=True)\n# -&gt; r2._context is {'key1': True, 'key2': True}\n</code></pre> <p>Si \u00e9s prec\u00eds modificar el context es pot fer:</p> <p><pre><code> self.env.context = dict(self.env.context)\n self.env.context.update({'key': 'val'})\n</code></pre> o</p> <pre><code> self = self.with_context(get_sizes=True)\n print self.env.context\n</code></pre> <p>Per\u00f2 no funciona m\u00e9s enll\u00e0 del recordset actual. \u00c9s a dir, no modifica el context en el que s\\'ha cridat.</p> <p>Si el que volem \u00e9s passar el valor d\\'un field per context a un bot\u00f3 dins d\\'una \\'subvista\\', podem utilitzar el par\u00e0metre parent, que funciona tant en en domain, attr, com en context. Ac\u00ed tenim un exemple de tree dins d\\'un field amb botons que env\u00eden per context coses del pare:</p> <pre><code> &lt;field name=\"movies\" &gt;\n    &lt;tree&gt;\n        &lt;field name=\"photo_small\"/&gt;\n        &lt;field name=\"name\"/&gt;\n        &lt;field name=\"score\" widget='priority'/&gt;\n        &lt;button name=\"book_it\" string=\"Book it\" type=\"object\" context=\"{'b_client':parent.client,'b_day':parent.day}\"/&gt;\n     &lt;/tree&gt;\n</code></pre> <p>Podem passar el context per un action i el podem utilitzar en la vista, ja que tenim l\\'objecte context disponible en QWeb. Si, per exemple, volem retornar un action que cride a una vista i un field tinga un domain passat per context:</p> <pre><code>     return {\n            'name': 'Travel wizard action',\n            'type': 'ir.actions.act_window',\n            'res_model': self._name,\n            'res_id': self.id,\n            'view_mode': 'form',\n            'target': 'new',\n            'context': dict(self._context, cities_available_context= (self.cities_available.city).ids),\n        }\n</code></pre> <pre><code>           &lt;field name=\"destiny\"\n                  domain = \"[('id','in',context.get('cities_available_context',[]))]\"\n                  /&gt;\n</code></pre>"},{"location":"3_3_Modulos/#metodes-de-lorm","title":"M\u00e8todes de l\\'ORM","text":""},{"location":"3_3_Modulos/#search","title":"search()","text":"<p>A partir d\\'un domain de Odoo, proporciona un recordset amb tots els elements que coincideixen:</p> <pre><code>&gt;&gt;&gt; # searches the current model\n&gt;&gt;&gt; self.search([('is_company', '=', True), ('customer', '=', True)])\nres.partner(7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74)\n&gt;&gt;&gt; self.search([('is_company', '=', True)], limit=1).name\n'Agrolait'\n</code></pre> <p><pre><code> Es pot obtindre la quantitat d'elements amb el m\u00e8tode '''search_count()'''\n</code></pre> <pre><code>Parameters\n    args -- A search domain. Use an empty list to match all records.\n    offset (int) -- number of results to ignore (default: none)\n    limit (int) -- maximum number of records to return (default: all)\n    order (str) -- sort string\n    count (bool) -- if True, only counts and returns the number of matching records (default: False)\n</code></pre></p>"},{"location":"3_3_Modulos/#create","title":"create()","text":"<p>Te dona un recordset a partir d\\'una definici\u00f3 de varis fields:</p> <pre><code>&gt;&gt;&gt; self.create({'name': \"New Name\"})\nres.partner(78)\n</code></pre> <p>El m\u00e8tode create s\\'utilitza sovint per a ser sobreescrit en her\u00e8ncia per fer coses en el moment de la creaci\u00f3. Ac\u00ed tenim un exemple en el que modifiquem el create d\\'un model per crear una inst\u00e0ncia associada amb una imatge predefinida:</p> <pre><code>     @api.model\n     def create(self, values):\n        new_id = super(player, self).create(values)\n        print values\n        name_player = new_id.name\n        img = self.env['mmog.fortress'].search([('name','=','f1')])[0].icon\n        self.env['mmog.fortress'].create({'name':name_player+\"-fortress\",'level':1,'soldiers':100,'population':10,'food':1000,'integrity':100,'id_player':new_id.id,'icon':img})\n        return new_id\n</code></pre>"},{"location":"3_3_Modulos/#write","title":"write()","text":"<p>Escriu uns fields dins de tots els elements del recordset, no retorna res:</p> <pre><code>self.write({'name': \"Newer Name\"})\n</code></pre> <p>Escriure en un many2many:</p> <p>La manera m\u00e9s senzilla \u00e9s passar una llista d\\'ids. Per\u00f2 si ja existeixen elements abans, necessitem uns codis especials (vegeu Odoo#Expressions):</p> <p>Per exemple:</p> <pre><code> self.sessions = [(4,s.id)] \n self.write({'sessions':[(4,s.id)]})\n self.write({'sessions':[(6,0,[ref('vehicle_tag_leasing'),ref('fleet.vehicle_tag_compact'),ref('fleet.vehicle_tag_senior')] )]})\n</code></pre>"},{"location":"3_3_Modulos/#browse","title":"browse()","text":"<p>A partir d\\'una llista de ids, retorna un recordset.</p> <pre><code>&gt;&gt;&gt; self.browse([7, 18, 12])\nres.partner(7, 18, 12)\n</code></pre>"},{"location":"3_3_Modulos/#exists","title":"exists()","text":"<p>Retorna si un record en concret encara est\u00e0 en la base de dades.</p> <pre><code>if not record.exists():\n    raise Exception(\"The record has been deleted\")\no:\nrecords.may_remove_some()\n# only keep records which were not deleted\nrecords = records.exists()\n</code></pre> <p>En el segon exemple, refresca un recordset amb aquells que encara existixen.</p>"},{"location":"3_3_Modulos/#ref","title":"ref()","text":"<p>Retorna un singleton a partir d\\'un External ID</p> <pre><code>&gt;&gt;&gt; env.ref('base.group_public')\nres.groups(2)\n</code></pre>"},{"location":"3_3_Modulos/#ensure_one","title":"ensure_one()","text":"<p>S\\'asegura de que el record en concret siga un singleton.</p> <pre><code>records.ensure_one()\n# is equivalent to but clearer than:\nassert len(records) == 1, \"Expected singleton\"\n</code></pre>"},{"location":"3_3_Modulos/#unlink","title":"unlink()","text":"<p>Esborra de la base de dades els elements del recordset actual.</p> <p>Exemple de c\u00f3m sobreescriure el m\u00e8tode unlink per a esborrar en cascada:</p> <pre><code>    def unlink(self):\n        for x in self:\n            x.catid.unlink()\n        return super(product_uom_class, self).unlink()\n</code></pre> <p>read() Es tracta d\\'un m\u00e8tode de baix nivell per llegir un field en concret dels records. \u00c9s preferible emprar browse()</p> <p>\\'name_search(name=, args=None, operator=\\'ilike\\', limit=100)\\'\\'\\' \u2192 records Search for records that have a display name matching the given name pattern when compared with the given operator, while also matching the optional search domain (args).</p> <p>This is used for example to provide suggestions based on a partial value for a relational field. Sometimes be seen as the inverse function of name_get(), but it is not guaranteed to be.</p> <p>This method is equivalent to calling search() with a search domain based on display_name and then name_get() on the result of the search.</p> <p>ids Llista dels ids del recordset actual.</p> <p>sorted(key=None, reverse=False) Retorna el recordset ordenat per un criteri.</p> <p>display_name. Aquest atribut, per defecte, mostra el field name si est\u00e0. Es pot sobreescriure <code>_compute_display_name</code> per mostrar un altre camp o mescla d\\'ells. Tamb\u00e9 es pot canviar <code>_rec_name</code> per indicar un field distint de <code>name</code>.</p> <p>copy() Crea una c\u00f2pia del singleton i permet aportar nous valors per als fields de la copia.</p> <p>En els fields One2many no es pot copiar per defecte, per\u00f2 es pot dir copy=True.</p>"},{"location":"3_3_Modulos/#onchange","title":"onchange","text":"<p>Si volem que un valor siga modificat en temps real quant modifiquem el valor d\\'un altre field sense encara haver guardat, podem usar els m\u00e8todes on_change.</p> <pre><code> Els camps '''computed''' ja tenen el seu propi onchange, per tant, no cal fer-lo\n</code></pre> <pre><code> Ha quedat \"deprecated\" retornar un domain https://github.com/odoo/odoo/pull/41918#issuecomment-824946980\n</code></pre> <p>En onchange es modifica el valor d\\'un o m\u00e9s camps dir\u00e8ctament i, si cal un filtre o un missatge, es fa en el return:</p> <pre><code>return {\n    'warning': {'title': \"Warning\", 'message': \"What is this?\", 'type': 'notification'},\n}\n</code></pre> <p>Si el type \u00e9s notification es mostrar\u00e0 en una notificaci\u00f3, en un altre cas, en un dialog. (Odoo 13)</p> <p>Exemples:</p> <pre><code># onchange handler\n@api.onchange('amount', 'unit_price')\ndef _onchange_price(self):\n    # set auto-changing field\n    self.price = self.amount * self.unit_price\n    # Can optionally return a warning and domains\n    return {\n        'warning': {\n            'title': \"Something bad happened\",\n            'message': \"It was very bad indeed\",\n        }\n    }\n\n@api.onchange('seats', 'attendee_ids')\ndef _verify_valid_seats(self):\n     if self.seats &lt; 0:\n         return {\n             'warning': {\n                 'title': \"Incorrect 'seats' value\",\n                 'message': \"The number of available seats may not be negative\",\n             },          }\n     if self.seats &lt; len(self.attendee_ids):\n          return {\n             'warning': {\n                 'title': \"Too many attendees\",\n                 'message': \"Increase seats or remove excess attendees\",\n             },\n         }\n</code></pre> <pre><code>Si l'usuari s'equivoca introduint algunes dades, ***Odoo*** proporciona varies maneres d'evitar-lo: \n* Constraints\n* onchange amb missatge d'error i restablint els valors originals\n* Sobreescriptura del m\u00e8tode write o create per comprovar coses abans de guardar \n</code></pre>"},{"location":"3_3_Modulos/#cron-jobs","title":"Cron Jobs","text":"<p>Cal crear un record en el model ir.cron, per exemple:</p> <pre><code>        &lt;record model=\"ir.cron\" forcecreate=\"True\" id=\"game.cron_update\"&gt;\n            &lt;field name=\"name\"&gt;Game: Cron Update&lt;/field&gt;\n            &lt;field name=\"model_id\" ref=\"model_game_player\"/&gt;\n            &lt;field name=\"state\"&gt;code&lt;/field&gt;\n            &lt;field name=\"code\"&gt;model.update_resources()&lt;/field&gt;\n            &lt;field name=\"user_id\" ref=\"base.user_root\"/&gt;\n            &lt;field name=\"interval_number\"&gt;1&lt;/field&gt;\n            &lt;field name=\"interval_type\"&gt;minutes&lt;/field&gt;\n            &lt;field name=\"numbercall\"&gt;-1&lt;/field&gt;\n            &lt;field name=\"activity_user_type\"&gt;specific&lt;/field&gt;\n            &lt;field name=\"doall\" eval=\"False\" /&gt;\n        &lt;/record&gt;\n</code></pre> <p>I un m\u00e8tode amb el \\@api.model i aquests arguments:</p> <pre><code>    @api.model\n    def update_resources(self):\n        ...\n</code></pre> <p>ir.cron t\u00e9 un many2one amb ir.actions.server i, al ser creat, crea l\\'acci\u00f3 de servidor corresponent. \u00c9s important ficar en el manifest que dep\u00e9n de mail, ja que \u00e9s un m\u00f2dul preinstal\u00b7lat que hereta i afegeix camps a ir.actions.server.</p> <p>https://poncesoft.blogspot.com/2018/05/creacion-metodos-automatizados-en-odoo.html https://webkul.com/blog/creating-cron-server-action-odoo-11/ https://odoo-development.readthedocs.io/en/latest/odoo/models/ir.cron.html</p>"},{"location":"3_3_Modulos/#els-decoradors","title":"Els Decoradors","text":"<p>Com es veu, abans de moltes funcions es fica \\@api.depends, \\@api.multi...</p> <p>Els decoradors modifiquen la forma en la que \u00e9s cridada la funci\u00f3. Entre altres coses, modifiquen el contingut de self, les vegades que se crida i quant se crida.</p> <ul> <li>\\@api.depends() Aquest decorador crida a la funci\u00f3 sempre que el     camp del que dep\u00e9n siga modificat. Encara que el camp diga     store=True. Per defecte, self \u00e9s un recordset, per tant, cal     fer un for.</li> <li>\\@api.model S\\'utilitza per a funcions que afecten al model i no     als recordsets.</li> <li>\\@api.constrains() S\\'utilitza per a comprovar les constrains.     Self \u00e9s un recordset. Com que quasi sempre es crida en un form,     funciona si utilitzem self directament. Per\u00f2 cal fer for, ja que pot     ser cridat en un recordset quant modifiquem camps en grup.</li> <li>\\@api.onchange() S\\'executa cada vegada que modifiquem el field     indicat en la vista. En aquest, com que es crida quant es modifica     un form, sempre self ser\u00e0 un singleton. Per\u00f2 si fiquem un for no     passa res.</li> </ul>"},{"location":"3_3_Modulos/#calculs-en-dates","title":"C\u00e0lculs en dates","text":"<p>Odoo gestiona les dates com a strings. Per una altra banda, python t\u00e9 el seu propi tipus de dades anomenat datetime, date i timedelta entre altres. Aix\u00f2 pot provocar dificultats per a fer c\u00e1lculs en dates. Odoo proporciona algunes ferramentes m\u00ednimes per facilitar aquesta tasca.</p> <p>Primer de tot, anem a importar datetime:</p> <pre><code>from ***Odoo*** import models, fields, api\nfrom datetime import datetime, timedelta\n</code></pre> <p>El primer que necessitem saber \u00e9s c\u00f3m transformar de date o datetime d'Odoo a python. En definitva, passar de string a datetime.</p> <p>Tenim un field datetime declarat de la seg\u00fcent manera:</p> <pre><code>start_date = fields.Datetime()\n</code></pre> <p>En la base de dades guardar\u00e0 un string amb el format: \\'%Y-%m-%d %H:%M:%S\\'. Per tant, si volem transformar aquesta data en string a un objecte datetime.datetime tenim que ejecutar el constructor de la classe amb aquests par\u00e0metres:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\ndata = datetime.strptime(self.start_date,fmt)\n</code></pre> <p>\u00c9s a dir, transforma un string en aquest format al tipus de dades datetime.datetime oficial de python.</p> <p>Per no tindre que especificar el format cada vegada, Odoo dona una ferramenta m\u00e9s facil. La classe fields.Datetime t\u00e9 un m\u00e8tode per generar un datetime.datetime de un string:</p> <pre><code>data = fields.Datetime.from_string(self.start_date)\n</code></pre> <p>De la mateixa manera passa al contrari:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\nself.start_date = data.strftime(fmt)\nvs\nself.start_date = fields.Datetime.to_string(data)\n</code></pre> <p>A continuaci\u00f3, anem a veure c\u00f3m incrementar una data en un temps:</p> <p>En el format d'Odoo (fields.Datetime) no es pot, cal passar a datetime.datetime per sumar el temps i despr\u00e9s tornar a passar a fields.Datetime. Per sumar o restar temps a un datetime.datetime cal utilitzar una classe anomenada datetime.timedelta. Aquesta classe representa una duraci\u00f3 o la difer\u00e8ncia entre dues dates. Per exemple, aquest constructor representa molt b\u00e9 les opcions que es poden ficar per crear un timedelta:</p> <pre><code>un_any = timedelta(weeks=40, days=84, hours=23, minutes=50, seconds=600) \n</code></pre> <p>Aquest exemple d'Odoo mostra c\u00f3m afegir 3 dies a un field:</p> <pre><code>data=fields.Datetime.from_string(self.start_date)\ndata=data+timedelta(hours=3)\nself.end_date=fields.Datetime.to_string(data)\n</code></pre> <p>O si es vol fer sols en m\u00e8todes python:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\ndata = datetime.strptime(self.start_date,fmt)\ndata=data+timedelta(hours=3)\nself.end_date=data.strftime(fmt)\n</code></pre> <p>Ara anem a veure c\u00f3m calcular el temps que ha passat entre dues dates:</p> <p>Soluci\u00f3 amb relativedelta:</p> <pre><code>from datetime import datetime, timedelta\nfrom dateutil.relativedelta import relativedelta\n\nstart=fields.Datetime.from_string(self.start_date)\nend=fields.Datetime.from_string(self.end_date)\n\nrelative=relativedelta(start,end)\nprint r.years\nprint r.months\nprint r.days\nprint r\n</code></pre> <p>El problema \u00e9s que dona la data per separat. No sol ser molt \u00fatil per a Odoo on necessitem la difer\u00e8ncia sols en dies, hores o minuts.</p> <p>Soluci\u00f3 sols amb Datetime:</p> <pre><code>from datetime import datetime\n\nstart=fields.Datetime.from_string(self.start_date)\nend=fields.Datetime.from_string(self.end_date)\n\nprint (end-start).days * 24 * 60\nprint (end-start).total_seconds()/60/60/24\n</code></pre> <p>Soluci\u00f3 amb Unix timestamp</p> <pre><code>d1_ts = time.mktime(d1.timetuple())\nd2_ts = time.mktime(d2.timetuple())\n\nprint int(d2_ts-d1_ts) / 60\n</code></pre> <p>La soluci\u00f3 \u00e9s la mateixa, sols \u00e9s per si necessiteu algun c\u00e0lcul intermedi que necessite la data en un Integer.</p> <p>El resultat de restar dos datetime \u00e9s un timedelta. Podem demanar els dies i segons com en el relative delta, per\u00f2 am\u00e9s t\u00e9 una funci\u00f3 per traure els segons totals i despr\u00e9s fer els c\u00e0lculs que necessitem.</p> <p>Consultar si una data \u00e9s anterior a una altra:</p> <p>Les dates en format Datetime o Date es poden comparar:</p> <pre><code>d3=fields.Datetime.from_string(self.d3)\nd4=datetime.now()\nif d3 &lt; d4:\n   print \"La data \u00e9s anterior\"\n</code></pre> <p>Tamb\u00e9 es pot calcular si \u00e9s del mateix dia, sols cal transformar de datetime a date:</p> <pre><code>d3=d3.date()\nd4=d4.date()\n\nif d3 == d4 :\n   \u2026.\n</code></pre> <p>Si volem saber si s\u00f3n del mateix m\u00e9s o any, es pot calcular la difer\u00e8ncia i veure si en dies \u00e9s major o menor de 30, per exemple. Per\u00f2 si volem major precisi\u00f3, en aquest cas es recomana utilitar relativedelta.</p>"},{"location":"3_3_Modulos/#misc","title":"Misc.","text":"<ul> <li>Si volem fer un print en colors, podem ficar un caracter de escape:     \\033[93m i \\033[0m al final</li> <li>Traure la menor pot\u00e8ncia de 2 major o igual a un n\u00famero:     http://stackoverflow.com/a/14267557</li> </ul> <p>Distintes alertes:</p> <p>Odoo pot mostrar distintes alertes en funci\u00f3 del que necessitem. Totes estan en openerp.exceptions</p> <p>Si entrem en el mode shell del debug podem executar aquest comandament:</p> <pre><code>&gt;&gt;&gt; help(openerp.exceptions)\n</code></pre> <p>Una vegada dins podem detectar:</p> <p><code>AccessDenied</code>\\ <code>DeferredException</code>\\ <code>QWebException</code>\\ <code>RedirectWarning</code>\\ <code>except_orm</code>\\ <code>AccessError</code>\\ <code>MissingError</code>\\ <code>UserError</code>\\ <code>ValidationError</code></p> <p>Normalment s\u00f3n utilitzats pel Odoo sense necessitat de que els cridem nosaltres. Per\u00f2 en ocasion pot ser \u00fatil.</p> <p>Per exemple, si volem mostrar un Warning perqu\u00e8 \u00fasuari ha fet alguna cosa mal. (Normalment es fa un onchange que ja pot tornar el warning)</p> <pre><code>from openerp import _\nfrom openerp.exceptions import Warning\n[...]\nraise Warning(_('Alguna cosa ha fallat!'))\n</code></pre> <p>O si volem Donar opcions a l\\'usuari amb RedirectWarning:</p> <pre><code> action = self.env.ref('base.action_res_users')\n msg = _(\"You cannot create a new user from here.\\n To create new user please go to configuration panel.\")\n raise openerp.exceptions.RedirectWarning(msg, action.id, _('Go to the configuration panel'))\n</code></pre> <p>En aquest exemple, per al missatge, utilitza la barra baixa _() per a obtindre la traducci\u00f3 en cas de que existisca. self.env.ref() retorna l\\'objecte referit amb una id externa. En aquest cas, un action.</p> <p>En el cas de les Constrains tamb\u00e9 s\\'ha de llan\u00e7ar un Validation error.</p> <p>Funcions lambda:</p> <p>En moltes ocasions, cal cridar a alguna funci\u00f3 de l\\'ORM o similar passant com a par\u00e0metre una funci\u00f3 lambda. La ra\u00f3 \u00e9s que si passem una variable, esta queda establerta en temps de c\u00e0rrega i no es modifica. La funci\u00f3 sempre recalcula.</p> <p>La sintaxi de la funci\u00f3 lambda \u00e9s:</p> <pre><code>a = lambda x,y: x*y\na(2,3)\n6\n</code></pre> <p>On les primeres x,y s\u00f3n els arguments que rep la funci\u00f3, despr\u00e9s el que calcula.</p> <p>Cal recordar que les funcions lambda s\u00f3n de una sola l\u00ednia de codi. Si volem alguna cosa m\u00e9s sofisticada hem de cridar a una funci\u00f3 normal.</p> <p>Si volem que el nostre m\u00f2dul tinga configuraci\u00f3 podem afegir-la com a un field m\u00e9s del model res.control.settings. Aquest ja s\\'encarrega de centralitzar opcions de configuraci\u00f3. Per a que aparega en el men\u00fa de configuraci\u00f3 tamb\u00e9 podem afegir-lo heretant en la vista:</p> <pre><code>class config(models.TransientModel):\n    _inherit = 'res.config.settings'\n    players = fields.Char(string='players',\n                             config_parameter=\"expanse.players\")\n\n\n    def reset_universe(self):\n        print(\"reset\",self)\n</code></pre> <pre><code> &lt;record id=\"res_config_settings_view_form_inherit\" model=\"ir.ui.view\"&gt;\n            &lt;field name=\"name\"&gt;res.config.settings.view.form.&lt;/field&gt;\n            &lt;field name=\"model\"&gt;res.config.settings&lt;/field&gt;\n            &lt;field name=\"priority\" eval=\"25\" /&gt;\n            &lt;field name=\"inherit_id\" ref=\"base.res_config_settings_view_form\" /&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;xpath expr=\"//div[hasclass('settings')]\" position=\"inside\"&gt;\n                    &lt;div class=\"app_settings_block\" data-string=\"Expanse Settings\" string=\"Expanse Settings\" data-key=\"expanse\"&gt;\n                        &lt;div id=\"players\"&gt;\n                            &lt;h2&gt;Expanse&lt;/h2&gt;\n                            &lt;button type=\"object\" name=\"reset_universe\" string=\"Reset Universe\"  class=\"btn-primary\"/&gt;\n                        &lt;/div&gt;\n\n                    &lt;/div&gt;\n                &lt;/xpath&gt;\n\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre> <p>Si en data-key posem el nom del m\u00f2dul, afegir\u00e0 l\\'icona al men\u00fa de settings.</p>"},{"location":"3_4_vistas/","title":"La vista","text":"<p>En aquest cap\u00edtol, explorarem com funcionen les vistes en Odoo, quins tipus de vistes podem utilitzar i com es poden personalitzar mitjan\u00e7ant XML i accions de servidor. Aprendrem a estructurar correctament una interf\u00edcie d'usuari, a definir formularis, llistats, kanbans i gr\u00e0fics, i a gestionar la navegaci\u00f3 entre ells.</p> <p>Les vistes s\u00f3n la manera en la que es representen els models. En cas de que no declarem les vistes, es poden referenciar per el seu tipus i Odoo generar\u00e0 una vista de llista o formulari estandar per poder vorer els registres de cada model. No obstant, quasi sempre volem personalitzar les vistes i en aquest cas, es poden referenciar per un identificador.</p> <p>Les vistes tenen una prioritat i, si no s\\'especifica el identificador de la que volem mostrar, es mostrar\u00e0 la que m\u00e9s prioritat tinga.</p> <pre><code>&lt;record model=\"ir.ui.view\" id=\"view_id\"&gt;\n    &lt;field name=\"name\"&gt;view.name&lt;/field&gt;\n    &lt;field name=\"model\"&gt;object_name&lt;/field&gt;\n    &lt;field name=\"priority\" eval=\"16\"/&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;!-- view content: &lt;form&gt;, &lt;list&gt;, &lt;graph&gt;, ... --&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p><pre><code>Les vistes es guarden en el model `ir.ui.view`. Tots els elements de interficie tenen en el seu nom ir.ui (Information Repository, User Interface). Els men\u00fas a ir.ui.menu o les accions a `ir.actions.window`\n</code></pre> Exemple de vista form:</p> <pre><code>  &lt;record model=\"ir.ui.view\" id=\"course_form_view\"&gt;\n            &lt;field name=\"name\"&gt;course.form&lt;/field&gt;\n            &lt;field name=\"model\"&gt;openacademy.course&lt;/field&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;form string=\"Course Form\"&gt;\n                    &lt;sheet&gt;\n                        &lt;group&gt;\n                            &lt;field name=\"name\"/&gt;\n                            &lt;field name=\"description\"/&gt;\n                        &lt;/group&gt;\n                    &lt;/sheet&gt;\n                &lt;/form&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre> <p>Encara que Odoo ja proporciona un list i un form per defecte, la vista cal millorar-la quasi sempre. Totes les vistes tenen fields que poden tindre widgets diferents. En les vistes form, podem adaptar molt l\\'aspecte amb grups de fields, pestanyes, camps ocults condicionalment...</p>"},{"location":"3_4_vistas/#les-vistes-list","title":"Les vistes list","text":"<p>A partir d'Odoo 18 ja no hi ha vistes <code>tree</code> i s\u00f3n totes <code>list</code>, els exemples antics funcionaran canviant aquesta paraula. </p> <p>Les vistes list (o vistes de llista) s\u00f3n un dels tipus de vistes m\u00e9s utilitzats en Odoo. Permeten mostrar registres en format de taula, facilitant la visualitzaci\u00f3 i la gesti\u00f3 de grans quantitats de dades.  </p> <p>Aquestes vistes s\u00f3n especialment \u00fatils per a representar informaci\u00f3 resumida d'un conjunt de registres, amb columnes que mostren els camps m\u00e9s rellevants. A m\u00e9s, poden incloure funcionalitats com l\u2019ordenaci\u00f3, els filtres i les accions r\u00e0pides.  </p> <p>Un exemple b\u00e0sic d\u2019una vista list per al model de clients (res.partner) seria el seg\u00fcent:  </p> <pre><code>&lt;record id=\"view_partner_list\" model=\"ir.ui.view\"&gt;\n    &lt;field name=\"name\"&gt;res.partner.list&lt;/field&gt;\n    &lt;field name=\"model\"&gt;res.partner&lt;/field&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;list&gt;\n            &lt;field name=\"name\"/&gt;\n            &lt;field name=\"phone\"/&gt;\n            &lt;field name=\"email\"/&gt;\n            &lt;field name=\"company_id\"/&gt;\n        &lt;/list&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <ul> <li><code>&lt;record&gt;</code>: Defineix un nou registre en el model <code>ir.ui.view</code>, que representa la vista.  </li> <li><code>&lt;field name=\"name\"&gt;</code>: Assigna un nom \u00fanic a la vista.  </li> <li><code>&lt;field name=\"model\"&gt;</code>: Indica el model al qual pertany la vista (<code>res.partner</code> en aquest cas).  </li> <li><code>&lt;field name=\"arch\" type=\"xml\"&gt;</code>: Cont\u00e9 l'estructura XML de la vista.  </li> <li><code>&lt;list&gt;</code>: Defineix una vista de tipus list.  </li> <li><code>&lt;field name=\"name\"/&gt;</code>, <code>&lt;field name=\"phone\"/&gt;</code>, etc.: Representen les columnes que es mostraran en la llista.  </li> </ul>"},{"location":"3_4_vistas/#colors","title":"Colors","text":"<p>En les vistes list es pot modificar el color en funci\u00f3 del contingut d\\'un field amb l\\'etiqueta decoration, que utilitza colors contextuals de Bootstrap:</p> <p><code>decoration-bf\u00a0-\u00a0Lineas\u00a0en\u00a0BOLD</code>\\ <code>decoration-it\u00a0-\u00a0Lineas\u00a0en\u00a0ITALICS</code>\\ <code>decoration-danger\u00a0-\u00a0Color\u00a0LIGHT\u00a0RED</code>\\ <code>decoration-info\u00a0-\u00a0Color\u00a0LIGHT\u00a0BLUE</code>\\ <code>decoration-muted\u00a0-\u00a0Color\u00a0LIGHT\u00a0GRAY</code>\\ <code>decoration-primary\u00a0-\u00a0Color\u00a0LIGHT\u00a0PURPLE</code>\\ <code>decoration-success\u00a0-\u00a0Color\u00a0LIGHT\u00a0GREEN</code>\\ <code>decoration-warning\u00a0-\u00a0Color\u00a0LIGHT\u00a0BROWN</code></p> <pre><code>&lt;list  decoration-info=\"state=='draft'\" decoration-danger=\"state=='trashed'\"&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"state\"/&gt;\n&lt;/list&gt;\n</code></pre> <p>En el cas de que es vulga comparar un field Date o Datetime es pot fer amb la variable global de QWeb current_date. Per exemple:</p> <pre><code>&lt;list  decoration-info=\"start_date==current_date\"&gt;\n...\n</code></pre> <p>Tamb\u00e9 es pot fer decoration en els fields individualment.</p>"},{"location":"3_4_vistas/#editable","title":"Editable","text":"<p>Tamb\u00e9 es pot fer editable per no tindre que obrir un form: editable=\\\"[top | bottom]\\\". Top o Bottom indica on es crearan els nous registres. Els lists editables poden tindre un atribut m\u00e9s on_write que indica un m\u00e8tode a executar quan s\\'edita o crea un element.</p>"},{"location":"3_4_vistas/#camps-invisibles","title":"Camps invisibles","text":"<p>De vegades, un camp pot servir per a alguna cosa, per\u00f2 no cal que l\\'usuari el veja. El que cal fer \u00e9s ficar el field , per\u00f2 dir que es invisible=\\\"1\\\"</p> <pre><code>&lt;list  decoration-info=\"duration==0\"&gt;\n                    &lt;field name=\"name\"/&gt;\n                    &lt;field name=\"course_id\"/&gt;\n                    &lt;field name=\"duration\" invisible=\"1\"/&gt;\n                    &lt;field name=\"taken_seats\" widget=\"progressbar\"/&gt;\n                &lt;/list&gt;\n</code></pre>"},{"location":"3_4_vistas/#botons","title":"Botons","text":"<p>Els lists poden tindre buttons amb els mateixos atributs que els buttons dels forms.</p> <pre><code>Cal tindre cura en els lists dins de forms (X2many), ja que el bot\u00f3 s'executa en el model del list i no del formulari que el cont\u00e9. Si volem accedir al pare, cal utilitzar l'atribut parent.\n</code></pre>"},{"location":"3_4_vistas/#totals","title":"Totals","text":"<p>En els lists es pot calcular totals amb aquesta etiqueta:</p> <pre><code>&lt;field name=\"amount\" sum=\"Total Amount\"/&gt;\n</code></pre>"},{"location":"3_4_vistas/#ordenar-per-un-field","title":"Ordenar per un field","text":"<p>Un list es pot ordenar per defecte per un field que no siga computat. Aix\u00f2 es fa en default_order. Mirem un exemple per ordenar descendentment:</p> <pre><code>&lt;list default_order=\"sequence,name desc\"&gt;\n</code></pre> <p>Si volem que sempre s\\'ordene per eixe criteri, sense importar la vista, cal afegir al model l\\'atribut _order.</p>"},{"location":"3_4_vistas/#agrupar-per-un-field","title":"Agrupar per un field","text":"<p>Amb default_group_by. Com l'atribut per ordenar, sols funciona amb camps guardats a la base de dades. </p> <pre><code>&lt;list default_group_by=\"born_year\"&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"born_year\"/&gt;\n    &lt;field name=\"age\"/&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"3_4_vistas/#banner_route","title":"banner_route","text":"<p>A partir de la versi\u00f3 12 d\\'Odoo, permet afegir als lists, forms, etc una cap\u00e7alera obtinguda per una url. https://www.odoo.com/documentation/12.0/reference/views.html#common-structure</p> <p>Aquesta cap\u00e7alera ser\u00e0 un codi HTML que pot aprofitar les classes CSS d\\'Odoo, per\u00f2 no aprofita la generaci\u00f3 de codi HTML que realitza el client web d\\'Odoo en la definici\u00f3 de les vistes. En cas d\\'utilitzar imatges, aquestes estaran en el directori static del m\u00f2dul.</p> <p>Fer un banner route pas a pas:</p> <p>El primer \u00e9s ficar en el list la refer\u00e8ncia al banner_route:</p> <pre><code>   &lt;list banner_route=\"/negocity/city_banner\" &gt;\n</code></pre> <p>Ara cal crear el web controller que implementa aquesta ruta (es recomana en controllers.py):</p> <pre><code>from odoo import http\n\n\nclass banner_city_controller(http.Controller):\n    @http.route('/negocity/city_banner', auth='user', type='json')\n    def banner(self):\n        return {\n            'html': \"\"\"\n                &lt;div  class=\"negocity_banner\" \n                style=\"height: 200px; background-size:100%; background-image: url(/negocity/static/src/img/negocity_city.jpg)\"&gt;\n                &lt;div class=\"negocity_button\" style=\"position: static; color:#fff;\"&gt;&lt;a&gt;Generate Cities&lt;/a&gt;&lt;/div&gt;\n                &lt;/div&gt; \"\"\"\n        }\n</code></pre> <p>En aquest cas, el CSS es podria fer un estil en CSS segons les instruccions de El client Web Odoo.</p> <p>El resultat \u00e9s un banner amb un <code>&lt;a&gt;</code> que, de moment, no fa res. Anem a donar-li funcionalitat a l\\'enlla\u00e7. El primer \u00e9s assignar-li un action:</p> <pre><code>                 &lt;a class=\"banner_button\" type=\"action\" data-reload-on-close=\"true\" \n                role=\"button\" data-method=\"action_generate_cities\" data-model=\"negocity.city\"&gt;Generate Cities&lt;/a&gt;\n</code></pre> <p>Segons les instruccions de addons/web/static/src/js/views/abstract_controller.js, si fem un <code>&lt;a&gt;</code> amb un type=\\\"action\\\", el JS d\\'Odoo interpretar\u00e0 que ha de cridar al backend a una funci\u00f3 d\\'un model en concret. La resta de dades es fan com l\\'exemple. La funci\u00f3 que diu data-method \u00e9s una funci\u00f3 que ha d\\'estar en el model que diu data-model.</p>"},{"location":"3_4_vistas/#les-vistes-form","title":"Les vistes form","text":"<p>Per a que un form quede b\u00e9, es pot inclure la etiqueta <code>&lt;sheet&gt;</code>, que fa que no ocupe tota la pantalla encara que siga panor\u00e0mica.</p> <p>Tot sheet ha de tindre <code>&lt;group&gt;</code> i dins els fields. Es poden fer els group que vullgam i poden tindre string per mostrar un t\u00edtol.</p> <p>Si no utilitzem l\\'etiquet group, els fields no tindran label, no obstant, coses com el class=\\\"oe_edit_only\\\" no funcionen en el group, per tant, cal utilitzar l\\'etiqueta <code>&lt;label for=\"name\"&gt;</code></p> <p>Per facilitar la gesti\u00f3, un form pot tindre pestanyes tem\u00e0tiques. Es fa en <code>&lt;notebook&gt;</code> <code>&lt;page string=\"titol\"&gt;</code></p> <p>Es pot separar els grups amb <code>&lt;separator string=\"Description for Quotations\"/&gt;</code></p> <p>Alguns One2Many donen una vista list que no es adequada, per aix\u00f2 es pot modificar el list per defecte:</p> <pre><code>&lt;field name=\"subscriptions\" colspan=\"4\"&gt;\n   &lt;list&gt;...&lt;/list&gt;\n&lt;/field&gt;\n</code></pre> <p>O especificar la vista que volem: ``xml      <pre><code>En un One2many es pot especificar tamb\u00e9 el **form** que ens donar\u00e0 quan\nanem a crear un nou element.\n\nUna altra opci\u00f3 \u00e9s especificar la vista que insertar\u00e0 en el field:\n\n```xml\n    &lt;field name=\"m2o_id\" context=\"{'form_view_ref': 'module_name.form_id'}\"/&gt;\n</code></pre></p> <p>Les vistes tree embegudes tenen limitacions respecte a les cridades amb un action. Per exemple, no poden ser agrupades. </p> <p>Valors per defecte en un one2many</p> <p>Quant creem un One2many en el mode form (o list editable) ens permet crear elements d\\'aquesta relaci\u00f3. Per a aconseguir que, al crear-los, el camp many2one corresponga al pare des del que es crida, es pot fer amb el context: Dins del field one2many que estem fent fiquem aquest codi:</p> <pre><code>context=\"{'default_&lt;camp many2one&gt;':active_id}\"\n</code></pre> <p>O este exemple per a dins d\\'un action:</p> <pre><code>&lt;field name=\"context\"&gt;{\"default_doctor\": True}&lt;/field&gt;\n</code></pre> <p><pre><code>Aquesta sintaxi funciona per a passar per context valors per defecte a un form cridat amb un action. Pot ser en One2many, botons o men\u00fas\n</code></pre> <pre><code>`active_id` \u00e9s una variable que apunta al id del element que est\u00e0 en aquest moment actiu. Com que estem en un formulari, \u00e9s el que se est\u00e0 creant o modificant amb en formulari. En el cas de la creaci\u00f3, active_id no est\u00e0 encara apuntant a un element de la base de dades, per\u00f2 funciona internament, encara que en el field no diga res o diga False.\n</code></pre> <pre><code>En Odoo 14 ja no cal fer-ho, per\u00f2 el manual \u00e9s v\u00e0lid per a altres many2ones o altres valors per defecte\n</code></pre></p> <p>Domains en Many2ones</p> <p>Els camps Many2one es poden filtrar, per exemple:</p> <pre><code>&lt;field name=\"hotel\" domain=\"[('ishotel', '=', True)]\"/&gt;\n</code></pre> <p>Funciona tant per a Many2one com per a Many2many.</p>"},{"location":"3_4_vistas/#widgets","title":"Widgets","text":"<p>Alguns camps, com ara les imatges, es poden mostrar utilitzant un widget distint que el per defecte:</p> <pre><code>&lt;field name=\"image\" widget=\"image\" class=\"oe_left oe_avatar\"/&gt;\n&lt;field name=\"taken_seats\" widget=\"progressbar\"/&gt;\n&lt;field name=\"country_id\" widget=\"selection\"/&gt;\n&lt;field name=\"state\" widget=\"statusbar\"/&gt;\n</code></pre> <p>Les vistes form, tree o kanban de Odoo mostren els fields en els anomenats widgets. Aquests permeten, per exemple, que les dates tinguen un calendari o que es mostre una llista en un many2many.</p> <p>Cada field te un widget per defecte, per\u00f2 es poden canviar si volem representar la informaci\u00f3 de manera distinta. Aquests s\u00f3n els widgets disponibles per a cada tipus de field, sobretot per al form, encara que alguns funcionen en el tree:</p>"},{"location":"3_4_vistas/#integer-i-float","title":"Integer i Float","text":"<p>Els camps integer poden ser representats per molts widgets, es a dir, no donen error. Encara que no tots tenen sentit, com per exemple el text.</p> <ul> <li>widget=\\\"integer\\\": Tan sols mostra el n\u00famero sense comes. En     cas de no tindre valor, mostra 0.</li> <li>widget=\\\"char\\\": Tamb\u00e9 mostra el n\u00famero, si no te valor deixa un     buit i el camp \u00e9s m\u00e9s ample.</li> <li>widget=\\\"id\\\": Mostra el n\u00famero per\u00f2 no es pot editar.</li> <li>widget=\\\"float\\\": Mostra el n\u00famero en decimals.</li> <li>widget=\\\"percentpie\\\": Mostra un gr\u00e0fic circular amb el     percentatge (no funciona en la vista tree ni en kanban).</li> <li>widget=\\\"float_time\\\": Mostra els float com si representaren el     temps.</li> <li>widget=\\\"progressbar\\\": Mostra una barra de progr\u00e9s (funciona en     la vista tree i form, per\u00f2 no en kanban):</li> <li>widget=\\\"monetary\\\": Mostra el n\u00famero amb 2 decimals.</li> <li> <p>widget=\\\"gauge\\\": Mostra un curi\u00f3s gr\u00e0fic de semi-circul. Sols     funciona en kanban.</p> <p>Observem un \u00fas real del <code>Gauge</code> per veure com els widgets poden tenir opcions:</p> </li> </ul> <pre><code>&lt;field name=\"current\" widget=\"gauge\" options=\"{'max_field': 'target_goal', 'label_field': 'definition_suffix', 'style': 'width:160px; height: 120px;'}\" /&gt;\n</code></pre>"},{"location":"3_4_vistas/#char_i_text","title":"Char i Text","text":"<ul> <li>widget=\\\"char\\\": Mostra un editor d\\'un l\u00ednia.</li> <li>widget=\\\"text\\\": Mostra un camp m\u00e9s alt per fer m\u00e9s d\\'una     l\u00ednia.</li> <li>widget=\\\"email\\\": Crea el enlla\u00e7 per enviar-li un correu.</li> <li>widget=\\\"url\\\": Crea el enlla\u00e7 amb http.</li> <li>widget=\\\"date\\\": Permet guardar dates com cadenes de text.</li> <li>widget=\\\"html\\\": Permet guardar textos per\u00f2 amb format. Apareix     un wysiwyg</li> <li>dashboard_graph:</li> </ul> <p>Mostra un gr\u00e0fic menut indicant alguna progressi\u00f3. Necessita tindre guardat (o generat) en el char un json determinat, per exemple:</p> <p><code>[{\"values\":</code>\\ <code>[{\"label\":\"2019-01-31\",\"value\":\u00a0\"7\"},</code>\\ <code>{\"label\":\"2019-02-01\",\"value\":\u00a0\"20\"},</code>\\ <code>{\"label\":\"2019-02-02\",\"value\":\u00a0\"45\"},</code>\\ <code>{\"label\":\"2019-02-03\",\"value\":\u00a0\"34\"},</code>\\ <code>{\"label\":\"2019-02-04\",\"value\":\u00a0\"40\"},</code>\\ <code>{\"label\":\"2019-02-05\",\"value\":\u00a0\"67\"},</code>\\ <code>{\"label\":\"2019-02-06\",\"value\":\u00a0\"80\"}],</code>\\ <code>\"area\":true,\u00a0\"title\":\u00a0\"Next\u00a0Week\",\u00a0\"key\":\u00a0\"Ocupation\",\u00a0\"color\":\u00a0\"#7c7bad\"}]</code></p> <p>I aquest seria un exemple del XML per a que funcione:</p> <pre><code>&lt;field name=\"week_ocupation\" widget=\"dashboard_graph\"  graph_type=\"bar\"/&gt;\n</code></pre> <p>En els exemples que es poden veure en Odoo, aquests valors s\u00f3n sempre computed, generant un json i invocant la funci\u00f3 de python json.dumps() (2):</p> <pre><code>           values = []\n           for i in record.sales:\n               reserves = i.quantity\n               values.append({'label':str(i.name),'value':str(reserves)})\n           graph = [{'values': values, 'area': True, 'title': 'Sales', 'key': 'Sales', 'color': '#7c7bad'}]\n           h.graph_data = json.dumps(graph)\n</code></pre> <p>Am\u00e9s, accepta algunes opcions:</p> <ul> <li>type: Pot ser bar o line. En el cas de ser line, en     compte de \\'label\\' i \\'value\\' cal posar \\'x\\' i \\'y\\'.</li> </ul>"},{"location":"3_4_vistas/#boolean","title":"Boolean","text":"<ul> <li>Ribbon: (Odoo 13) Mostra com una cinta al costat del formulari     per mostrar un boolean important.</li> </ul> <pre><code>&lt;widget name=\"web_ribbon\" text=\"Archived\" bg_color=\"bg-danger\" /&gt;\n&lt;widget name=\"web_ribbon\" text=\"Paid\"/&gt;\n</code></pre> <ul> <li>boolean_toggle per als trees, permet activar un boolean en un     tree.</li> </ul>"},{"location":"3_4_vistas/#date","title":"Date","text":"<ul> <li>Daterange: Mostra un rang de dates</li> </ul> <pre><code>date_begin = fields.Datetime( string='Start Date')\n&lt;field name=\"date_begin\" widget=\"daterange\"/&gt;\n</code></pre>"},{"location":"3_4_vistas/#many2one","title":"Many2one","text":"<ul> <li>widget=\\\"many2one\\\": Per defecte, crea un selection amb opci\u00f3 de     crear nous. Accepta arguments per evitar les opcions de crear:</li> </ul> <pre><code> &lt;field name=\"field_name\" options=\"{'no_create': True, 'no_open': True}\"/&gt;\n</code></pre> <ul> <li>widget=\\\"many2onebutton\\\": Crea un simple bot\u00f3 que indica si     est\u00e0 assignat. Si polses s\\'obri el formulari.</li> </ul>"},{"location":"3_4_vistas/#many2many","title":"Many2Many","text":"<ul> <li>widget=\\\"many2many\\\": Per defecte, crea una llista amb opci\u00f3 de     esborrar o afegir nous.</li> <li>widget=\\\"many2many_tags\\\": Llista amb etiquetes com en els     filtres</li> <li>widget=\\\"many2many_checkboxes\\\": Llista de checkboxes.</li> <li>widget=\\\"many2many_kanban\\\": Mostra un kanban dels que t\u00e9     associats, necessita que la vista kanban estiga definida.</li> <li>widget=\\\"x2many_counter\\\": Mostra sols la quantitat.</li> <li>many2many_tags_avatar:</li> </ul> <pre><code>partner_ids = fields.Many2many('res.partner', 'calendar_event_res_partner_rel', string='Attendees')\n&lt;field name=\"partner_ids\" widget=\"many2many_tags_avatar\" write_model=\"calendar.contacts\" write_field=\"partner_id\" avatar_field=\"image_128\"/&gt;\n</code></pre>"},{"location":"3_4_vistas/#one2many","title":"One2many","text":"<ul> <li>widget=\\\"one2many\\\": Per defecte.</li> <li>widget=\\\"one2many_list\\\": Aparentment igual, es mant\u00e9 per     retrocompatibilitat</li> </ul>"},{"location":"3_4_vistas/#modificar-el-tree-del-one2many","title":"Modificar el tree del One2many","text":"<p>El one2many, al igual que el many2one es poden vorer en format tree. Per defecte agafa el tree definit del model, per\u00f2 es pot especificar el tree que volem veure:</p> <pre><code>  &lt;field name=\"fortress\"&gt;\n   &lt;tree&gt;\n     &lt;field name=\"name\"/&gt;&lt;field name=\"level\"/&gt;\n   &lt;/tree&gt;\n  &lt;/field&gt;\n</code></pre> <p>Incl\u00fas es pot for\u00e7ar a mostrar un kanban:</p> <pre><code>&lt;field name=\"gallery\" mode=\"kanban,tree\" context=\"{'default_hotel_id':active_id}\"&gt;\n                 &lt;kanban&gt;\n                 &lt;!--list of field to be loaded --&gt;\n                 &lt;field name=\"name\" /&gt;\n                 &lt;field name=\"image\" /&gt;\n\n                 &lt;templates&gt;\n                 &lt;t t-name=\"kanban-box\"&gt;\n                     &lt;div class=\"oe_product_vignette\"&gt;\n                     &lt;a type=\"open\"&gt;\n                        &lt;img class=\"oe_kanban_image\" style=\"width:300px; height:auto;\"\n                        t-att-src=\"kanban_image('marsans.hotel.galley', 'image', record.id.value)\" /&gt;\n                    &lt;/a&gt;\n                    &lt;div class=\"oe_product_desc\"&gt;\n                        &lt;h4&gt;\n                        &lt;a type=\"edit\"&gt;\n                            &lt;field name=\"name\"&gt;&lt;/field&gt;\n                        &lt;/a&gt;\n                        &lt;/h4&gt;\n\n                    &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;/t&gt;\n                    &lt;/templates&gt;\n                &lt;/kanban&gt;\n                &lt;/field&gt;\n</code></pre> <p>De vegades, el kanban este no funciona perqu\u00e8 no for\u00e7a a carregar les imatges.</p>"},{"location":"3_4_vistas/#binary-o-image","title":"Binary o Image","text":"<ul> <li>signature: Permet signar dir\u00e8nctament en la pantalla</li> <li>image: A banda del que es pot ficar en el field de max_width o     max_height, al widget es pot afegir opcions com:</li> </ul> <pre><code>    options=\"{&amp;quot;zoom&amp;quot;: true, &amp;quot;preview_image&amp;quot;: &amp;quot;image_128&amp;quot;}\n</code></pre>"},{"location":"3_4_vistas/#selection","title":"Selection","text":"<pre><code>           &lt;field name=\"state\" decoration-success=\"state == 'sale' or state == 'done'\" decoration-info=\"state == 'draft' or state == 'sent'\" widget=\"badge\" optional=\"show\"/&gt;\n</code></pre>"},{"location":"3_4_vistas/#fields-dels-trees","title":"Fields dels trees","text":"<ul> <li>handle: Per a ordenar a ma. Cal que aquest camp siga el criteri     d\\'ordenaci\u00f3.</li> </ul> <p>Reescalar les imatges</p> <p>Molt a sovint, tenim la necessitat de reescalar les imatges que l\\'usuari penja. A partir d\\'Odoo 13 tenim el field Image que permet tindre diferents resolucions amb varis related</p>"},{"location":"3_4_vistas/#buttons","title":"buttons","text":"<p>Podem introduir un bot\u00f3 en el form:</p> <pre><code> &lt;button name=\"update_progress\" type=\"object\" string=\"update\" class=\"oe_highlight\" /&gt; &lt;!-- El name ha de ser igual que la funci\u00f3 a la que crida. --&gt;   \n</code></pre> <p>La funci\u00f3 pot ser una del model en el que est\u00e0 o un action. En el type cal indicar el tipus amb: object, action, url, client En l\\'exemple anterior, el button \u00e9s de tipus object. Aix\u00f3 vol dir que crida a una funci\u00f3 del model al que represente el formulari que el cont\u00e9.</p> <pre><code>\u00c9s important que el record sobre el que es pulsa un bot\u00f3 de tipus object estiga ja guardat, ja que si no existeix en la base de dades, el servidor no t\u00e9 la seua '''id''' i pot fer res. Per aix\u00f2, un bot\u00f3 polsat en fase de creaci\u00f3 crida primer a la funci\u00f3 create().\n</code></pre> <p>Per a fer un but\u00f3 que cride a un altre formulari, s\\'ha de fer en un tipus action. Am\u00e9s, per ficar la id del action al que es vol cridar, cal ficar el prefixe i sufixe %(...)d, com en l\\'exemple:</p> <pre><code> &lt;button name=\"%(launch_mmog_fortress_wizard)d\" type=\"action\" string=\"Launch attack\" class=\"oe_highlight\" /&gt;\n</code></pre> <p>D\\'aquesta manera, un formulari, t\u00e9 un bot\u00f3 que, al ser polsat, envia el ID de l\\'action a executar als servidor, aquest li retorna un action per a que el client l\\'execute. L\\'action pot obrir una altra finestra o un pop-up. En qualsevol cas, aquest action executat en el client, demana la vista i les dades que vol mostrar i les mostra. Aquesta \u00e9s la ra\u00f3 de la sintaxis %(...)d.  Ja que es tracta d\\'un External Id a una action guardada en la base de dades.</p> <p>Els buttons poden tindre una icona. Odoo proporciona algunes que es poden trobar a aquesta web: 1</p> <pre><code>&lt;button name=\"test\" icon=\"fa-star-o\" confirm=\"Are you sure?\"/&gt;\nEsborrar: &lt;button type=\"object\" icon=\"fa-trash-o\"  name=\"unlink\"/&gt;\n</code></pre> <p>En l\\'exemple anterior, tamb\u00e9 hem ficat l\\'atribut confirm per mostrar una pregunta a l\\'usuari. Els buttons es poden posar per el form, encara que es recomana en el header:</p> <pre><code>&lt;header&gt;\n &lt;field name=\"state\" widget=\"statusbar\"/&gt;\n &lt;button name=\"accept\" type=\"object\" string=\"Accept\" class=\"oe_highlight\"/&gt;\n &lt;button special=\"cancel\" string=\"Cancel\"/&gt;\n&lt;/header&gt;\n</code></pre> <p>Els botons sempre executen una funci\u00f3 de Javascript en la part del client web que demana alguna cosa al servidor. En el cas dels button action, demana el action, per despr\u00e9s executar aquesta. En el cas dels buttons object demana que s\\'execute una funci\u00f3 del model i recordset actual en el servidor. El client web es queda a l\\'espera d\\'una resposta del servidor, que si \u00e9s un diccionari buit, provoca un refresc de la p\u00e0gina, per\u00f2 pot retornar moltes coses: warnings, domains, actions... i el client ha d\\'actuar en conseq\u00fc\u00e8ncia. Els buttons poden tindre tamb\u00e9 context per enviar alguna cosa extra al servidor.</p> <p>Smart Buttons 2</p> <p>En el formulari dels client, podem veure aquests botons.</p> <p>Es tracta de botons que, am\u00e9s d\\'executar-se, mostren una informaci\u00f3 resumida i una icona. El text i la forma del bot\u00f3 es modifica din\u00e0micament en funci\u00f3 d\\'alguns criteris i aix\u00f2 li dona m\u00e9s comoditat a l\\'usuari. Per exemple, si sols vol saber quantes factures t\u00e9 eixe client, el bot\u00f3 li ho diu. Si polsa el bot\u00f3 ja va a les factures en detall.</p> <p>Per fer-los, el primer \u00e9s modificar la seua forma, de bot\u00f3 autom\u00e0ticament creat per el navegador a un rectangle. Aix\u00f2 odoo ho pot fer per CSS amb la classe class=\\\"oe_stat_button\\\". A continuaci\u00f3, se li posa una icona icon=\\\"fa-star\\\". 3. A partir d\\'ah\u00ed, l\\'etiqueta <code>&lt;button&gt;</code> pot contindre el contingut que desitgem. Per exemple, camps computed que mostren el resum del formulari que va a obrir.</p> <pre><code>       &lt;div class=\"oe_button_box\"&gt;\n             &lt;button type=\"object\" class=\"oe_stat_button\" icon=\"fa-pencil-square-o\" name=\"regenerate_password\"&gt;\n                        &lt;div class=\"o_form_field o_stat_info\"&gt;\n                            &lt;span class=\"o_stat_value\"&gt;\n                                &lt;field name=\"password\" string=\"Password\"/&gt;\n                            &lt;/span&gt;\n                            &lt;span class=\"o_stat_text\"&gt;Password&lt;/span&gt;\n                        &lt;/div&gt;\n                    &lt;/button&gt;\n            &lt;/div&gt;\n</code></pre>"},{"location":"3_4_vistas/#formularis-dinamics","title":"Formularis din\u00e0mics","text":"<p>Els fields dels formularis permet modificar el seu comportament en funci\u00f3 de condicions. Per exemple, ocultar amb invisible, permetre ser editat o no amb readonly o required.</p> <p>Ocultar condicionalment un field</p> <p>Es pot ocultar un field si algunes condicions no es cumpleixen. Per exemple:</p> <pre><code>&lt;field name=\"boyfriend_name\" invisible = \"married != False\"/&gt;\n</code></pre> <p>Tamb\u00e9s es pot ocultar i mostrar sols en el mode edici\u00f3 o lectura:</p> <pre><code>&lt;field name=\"partit\" class=\"oe_edit_only\"/&gt;\n&lt;field name=\"equip\" class=\"oe_read_only\"/&gt;\n</code></pre> <p>O mostrar si un camp anomenat state t\u00e9 un determinat valor:</p> <pre><code> &lt;group invisible = \"state in ['player', 'stats']\" &gt;&lt;field name=\"dia\"/&gt;&lt;/group&gt;\n</code></pre> <p>En el seg\u00fcent exemple, introdueix dos conceptes nous: el column_invisible per ocultar una columna d\\'un list i el parent per fer refer\u00e8ncia al valor d\\'un field de la vista pare:</p> <pre><code>&lt;field name=\"lot_id\" \nattrs=\"{'column_invisible': [('parent.state', 'not in', ['sale', 'done'])] }\"\n/&gt;\n</code></pre> <p>Editar condicionalment un field</p> <p>Es pot afegir readonly</p> <pre><code>&lt;field name=\"name2\"\nreadonly = \"condition == False\"\n/&gt;\n</code></pre> <p>Aquests exemples combinen tots:</p> <pre><code>&lt;field name=\"name\" \ninvisible = \"condition1 == False\" \nrequired = \"condition2 == True\"\nreadonly = \"condition3 == True\"\n /&gt;\n\n&lt;field name=\"suma\" \nreadonly = \"valor == 'calculat\"\ninvisible = \"servici in ['Reparacions','Manteniment'] or client == 'Pepe'\"\n/&gt;\n</code></pre> <p>readonly</p> <p>En ocasions volem que un field siga readonly, al no poder editar, no pot ser required. En cas de ser modificar per un Onchage i es vulga guardar, cal afegir:</p> <pre><code>&lt;field name=\"salary\" readonly=\"1\" force_save=\"1\"/&gt; \n</code></pre>"},{"location":"3_4_vistas/#vistes-kanban","title":"Vistes Kanban","text":"<p>Les vistes kanban s\u00f3n per a mostrar el model en forma de \\'cartes\\'. Les vistes kanban se declaren amb una mescla de xml, html i plantilles Qweb.</p> <p>Un Kanban \u00e9s una mescla entre list i form. En Odoo, les vistes tenen una estructura jer\u00e0rquica. En el cas del Kanban, est\u00e0 la vista Kanban, que cont\u00e9 molts Kanban Box, un per a cada record mostrat. Cada kanban box t\u00e9 dins un div de class vignette o card i, dins, els Widgets per a cada field.</p> <pre><code>             Window\n+---------------------------+\n|     Kanban View           |\n| +----------+ +----------+ |\n| |Kanban Box| |Kanban Box| |\n| +----------+ +----------+ |\n| || Widget || || Widget || |\n| |----------| |----------| |\n| |----------| |----------| |\n| || Widget || || Widget || |\n| |----------| |----------| |\n| +----------+ +----------+ |\n|                           |\n+---------------------------+\n</code></pre> <p>Per mostrar un Kanban, la vista de Odoo, obri un action Window, dins clava una caixa que ocupa tota la finestra i va recorreguent els records que es tenen que mostrant i dibuixant els widgets de cada record.</p> <p><pre><code>A difer\u00e8ncia en els lists o forms, els kanbans poden ser molt variats i han de deixar llibertat per ser dissenyats. \u00c9s per aix\u00f2, que els desenvolupadors d'Odoo no han proporcionat unes etiquetes i atributs XML d'alt nivell com passa en els forms o lists, en els que no hem de preocupar-nos de la manera en que ser\u00e0 renderitzar, el CSS o c\u00f3m obt\u00e9 els fields de la base de dades. Al fer un Kanban, entrem al nivel de QWeb, per el que controlem plantilles, CSS i indicacions i funcions per al Javascript. Tot aix\u00f2 est\u00e0 ocult en la resta de vistes, per\u00f2 en Kanban \u00e9s impossible ocultar-ho.\nEs poden utilitzar certs widgets en els fields com `image` o `progress_bar`, per\u00f2 s\u00f3n molts menys widgets que en els forms o lists.\n</code></pre> Exemple b\u00e0sic:</p> <pre><code>&lt;record model=\"ir.ui.view\" id=\"socio_kanban_view\"&gt;\n            &lt;field name=\"name\"&gt;cooperativa.socio&lt;/field&gt;\n            &lt;field name=\"model\"&gt;cooperativa.socio&lt;/field&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;kanban&gt;\n                    &lt;!--list of field to be loaded --&gt;\n                    &lt;field name=\"name\" /&gt;\n                    &lt;field name=\"id\" /&gt; &lt;!-- \u00c9s important afegir el id per al record.id.value --&gt;\n                    &lt;field name=\"foto\" /&gt;\n                    &lt;field name=\"arrobas\"/&gt;\n\n                    &lt;templates&gt;\n                    &lt;t t-name=\"kanban-box\"&gt;\n                            &lt;div class=\"oe_product_vignette\"&gt;\n                                &lt;a type=\"open\"&gt;\n                                    &lt;img class=\"oe_kanban_image\"\n                                        t-att-alt=\"record.name.value\"\n                                        t-att-src=\"kanban_image('cooperativa.socio', 'foto', record.id.value)\" /&gt;\n                                &lt;/a&gt;\n                                &lt;div class=\"oe_product_desc\"&gt;\n                                    &lt;h4&gt;\n                                        &lt;a type=\"edit\"&gt;\n                                            &lt;field name=\"name\"&gt;&lt;/field&gt;\n                                        &lt;/a&gt;\n                                    &lt;/h4&gt;\n                                    &lt;ul&gt;\n\n                                       &lt;li&gt;Arrobas: &lt;field name=\"arrobas\"&gt;&lt;/field&gt;&lt;/li&gt;\n                                    &lt;/ul&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/t&gt;\n                    &lt;/templates&gt;\n                &lt;/kanban&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre> <p>En l\\'anterior vista kanban cal comentar les l\u00ednies.</p> <p>Al principi es declaren els fields que han de ser mostrats. Si no es necessiten per a la l\u00f2gica del kanban i sols han de ser mostrats no cal que estiguen declarats al principi. No obstant, per que l\\'exemple estiga complet els hem deixat. Aquesta declaraci\u00f3, fa demanar els fields en la primera petici\u00f3 as\u00edncrona de dades. Els no especificats ac\u00ed, s\u00f3n demanats despr\u00e9s, per\u00f2 no estan disponibles per a que el Javascript puga utilitzar-los.</p> <p>A continuaci\u00f3 ve un template Qweb en el que cal definir una etiqueta <code>&lt;t t-name=\"kanban-box\"&gt;</code> que ser\u00e0 renderitzada una vegada per cada element del model.</p> <p>Dins del template, es declaren divs o el que necessitem per donar-li el aspecte definitiu. Odoo ja t\u00e9 en el seu CSS unes classes per al productes o partners que podem aprofitar. El primer div defineix la forma i aspecte de cada caixa. Hi ha m\u00faltiples classes CSS que es poden utilitzar. Les que tenen vignette en principi no mostren vores ni colors de fons. Les que tenen card tenen el border prou marcat i un color de fons. Les b\u00e0siques s\u00f3n oe_kanban_vignette i oe_kanban_card.</p> <p>Hi ha molts altres CSS que podem estudiar i utilitzar. Per exemple, els oe_kanban_image per a fer la imatge d\\'una mida adequada o el oe_product_desc que ajuda a colocar el text al costat de la foto. En l\\'exemple, usem uns <code>&lt;a&gt;</code> amb dos tipus: open i edit. Segons el que posem, al fer click ens obri el form en mode vista o edici\u00f3. Aquests botons o enlla\u00e7os poden tindre aquestes funcions:</p> <ul> <li>action, object: Com en els botons dels forms, criden a     accions o a m\u00e8todes.</li> <li>open, edit, delete: Efectua aquestes accions al record     que representa el kanban box.</li> </ul> <p>Si ja volem fer un kanban m\u00e9s avan\u00e7at, tenim aquestes opcions:</p> <ul> <li>En la etiqueta <code>&lt;kanban&gt;</code>:<ul> <li>default_group_by per agrupar segons algun criteri al agrupar     apareixen opcions per crear nous elements sense necessitat     d\\'entrar al formulari.</li> <li>default_order per ordenar segons algun criteri si no s\\'ha     ordenat en el list.</li> <li>quick_create a true o false segons vulguem que es puga crear     elements sobre la marxa sense el form. Per defecte \u00e9s false si     no est\u00e0 agrupat i true si est\u00e0 agrupat.</li> </ul> </li> <li>En cada field:<ul> <li>sum, avg, min, max, count com a funcions d\\'agregaci\u00f3 en els     kanbans agrupats.</li> </ul> </li> <li>Dins del template:<ul> <li>Cada field pot tindre un type que pot ser open, edit,     action, delete.</li> </ul> </li> <li>Una serie de funcions javascript:<ul> <li>kanban_image() que accepta com a argument: model, field, id,     cache i retorna una url a una imatge. La ra\u00f3 \u00e9s perqu\u00e8 la imatge     est\u00e0 en base64 i dins de la base de dades i cal convertir-la per     mostrar-la.</li> <li>kanban_text_ellipsis(string[, size=160]) per acurtar     textos llargs, ja que el kanban sols \u00e9s una previsualitzaci\u00f3.</li> <li>kanban_getcolor(raw_value) per a obtindre un color dels 0-9     que odoo te predefinits en el CSS a partir de qualsevol field     b\u00e0sic.</li> <li>kanban_color(raw_value) Si tenim un field color que pot     definir de forma espec\u00edfica el color que necessitem. Aquest     field tindr\u00e0 un valor de 0-9.</li> </ul> </li> </ul> <p>Forms dins de kanbans:</p> <p>A partir de la versi\u00f3 12 es pot introduir un form dins d\\'un kanban, encara que es recomana que siga simple. Aquest funciona si tenim activat el quick_create i preferiblement quan el kanban est\u00e0 agrupat per Many2one o altres. Observem, per exemple el kanban de la secci\u00f3 de tasques del m\u00f2dul de proyecte:</p> <pre><code>&lt;kanban default_group_by=\"stage_id\" class=\"o_kanban_small_column o_kanban_project_tasks\" on_create=\"quick_create\"\n quick_create_view=\"project.quick_create_task_form\" examples=\"project\"&gt;\n....\n&lt;/kanban&gt;\n</code></pre> <p>Com podem observar, t\u00e9 activat el quick_create i una refer\u00e8ncia al identificador extern d\\'una vista form en quick_create_view. Aquest \u00e9s el contingut del form:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;form&gt;\n  &lt;group&gt;\n     &lt;field name=\"name\" string=\"Task Title\"/&gt;\n     &lt;field name=\"user_id\" options=\"{'no_open': True,'no_create': True}\"/&gt;\n  &lt;/group&gt;\n &lt;/form&gt;\n</code></pre>"},{"location":"3_4_vistas/#imatges-en-els-kanbans","title":"Imatges en els Kanbans","text":"<p>En molts llocs trobarem la funci\u00f3 <code>kanban_image</code>. \u00c9s la manera correcta de fer-ho en Qweb. Necessita posar el camp <code>id</code> el principi. per\u00f2 tamb\u00e9 es pot utilitzar dir\u00e8ctament el <code>widget=\"image\"</code> com en els forms. </p>"},{"location":"3_4_vistas/#vistes-search","title":"Vistes search","text":"<p>Les vistes search tenen 3 tipus:</p> <ul> <li>field que permeten buscar en un determinat camp.</li> <li>filter amb domain per filtrar per un valor predeterminat.</li> <li>filter amb group per agrupar per algun criteri.</li> </ul> <p>Pel que fa a les search field, sols cal indicar quins fields seran buscats.</p> <pre><code>&lt;search&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"inventor_id\"/&gt;\n&lt;/search&gt;\n</code></pre> <p><pre><code>Els fields han de ser guardats en la base de dades, encara que siguen de tipus '''computed'''\n</code></pre> Les field poden tindre un domain per especificar quin tipus de b\u00fasqueda volem. Per exemple:</p> <pre><code>&lt;field name=\"description\" string=\"Name and description\"\n    filter_domain=\"['|', ('name', 'ilike', self), ('description', 'ilike', self)]\"/&gt;\n</code></pre> <p>Busca per 'name' i 'description' amb un domini que busca que es parega en \"case-insensitive\" (ilike) el que escriu l'usuari (self) amb el name o amb la descripci\u00f3.</p> <p>o:</p> <pre><code>&lt;field name=\"cajones\" string=\"Boxes or @\" filter_domain=\"['|',('cajones','=',self),('arrobas','=',self)]\"/&gt; \n</code></pre> <p>Busca per cajones o arrobas sempre que l\\'usuari pose el mateix n\u00famero.</p> <p>Les filter amb domain s\u00f3n per a predefinir filtres o b\u00fasquedes. Per exemple:</p> <pre><code>&lt;filter name=\"my_ideas\" string=\"My Ideas\" domain=\"[('inventor_id', '=', uid)]\"/&gt;\n&lt;filter name=\"more_100\" string=\"More than 100 boxes\" domain=\"[('cajones','&gt;',100)]\"/&gt; \n&lt;filter name=\"Today\" string=\"Today\" domain=\"[('date', '&amp;gt;=', datetime.datetime.now().strftime('%Y-%m-%d 00:00:00')),\n                                             ('date', '&amp;lt;=',datetime.datetime.now().strftime('%Y-%m-%d 23:23:59'))]\"/&gt;\n</code></pre> <pre><code>Els filtres sols poden comparar un field amb un valor espec\u00edfic. Aix\u00ed que si volem comparar dos fields cal fer una funci\u00f3.\n</code></pre>"},{"location":"3_4_vistas/#operadors-per-als-domains","title":"Operadors per als domains:","text":"<p>\\'like\\': [(\\'input\\', \\'like\\', \\'open\\')] - Returns case sensitive (wildcards - \\'%open%\\') search.</p> <p>O/p: open, opensource, openerp, Odooopenerp</p> <p>\\'not like\\': [(\\'input\\', \\'not like\\', \\'open\\')] - Returns results not matched with case sensitive (wildcards - \\'%open%\\') search.</p> <p>O/p: Openerp, Opensource, Open, Odoo, odoo, OdooOpenerp</p> <p>\\'=like\\': [(\\'name\\', \\'=like\\', \\'open\\')] - Returns exact (= \\'open\\') case sensitive search.</p> <p>O/p: open</p> <p>\\'ilike\\': [(\\'name\\', \\'ilike\\', \\'open\\')] - Returns exact case insensitive (wildcards - \\'%open%\\') search.</p> <p>O/p: Openerp, openerp, Opensource, opensource, Open, open, Odooopenerp, OdooOpenerp</p> <p>\\'not ilike\\': [(\\'name\\', \\'not ilike\\', \\'open\\')] - Returns results not matched with exact case insensitive (wildcards - \\'%open%\\') search.</p> <p>O/p: Odoo, odoo</p> <p>\\'=ilike\\': [(\\'name\\', \\'=ilike\\', \\'open\\')] - Returns exact (= \\'open\\' or \\'Open\\') case insensitive search.</p> <p>O/p: Open, open</p> <p>\\'=?\\':</p> <p>name = \\'odoo\\' parent_id = False [(\\'name\\', \\'like\\', name), (\\'parent_id\\', \\'=?\\', parent_id)] - Returns name domain result &amp; True</p> <p>name = \\'odoo\\' parent_id = \\'openerp\\' [(\\'name\\', \\'like\\', name), (\\'parent_id\\', \\'=?\\', parent_id)] - Returns name domain result &amp; parent_id domain result</p> <p>\\'=?\\' is a short-circuit that makes the term TRUE if right is None or False, \\'=?\\' behaves like \\'=\\' in other cases</p> <p>\\'in\\': [(\\'value1\\', \\'in\\', [\\'value1\\', \\'value2\\'])] - in operator will check the value1 is present or not in list of right term</p> <p>\\'not in\\': [(\\'value1\\', \\'not in\\', [\\'value2\\'])] - not in operator will check the value1 is not present in list of right term While these \\'in\\' and \\'not in\\' works with list/tuple of values, the latter \\'=\\' and \\'!=\\' works with string</p> <p>\\'=\\': value = 10 [(\\'value\\',\\'=\\',value)] - term left side has 10 in db and term right our value 10 will match</p> <p>\\'!=\\': value = 15 [(\\'value\\',\\'!=\\',value)] - term left side has 10 in db and term right our value 10 will not match</p> <p>\\'child_of\\': parent_id = \\'1\\' #Agrolait \\'child_of\\': [(\\'partner_id\\', \\'child_of\\', parent_id)] - return left and right list of partner_id for given parent_id</p> <p>\\'\\&lt;=\\', \\'\\&lt;\\', \\'&gt;\\', \\'&gt;=\\': These operators are largely used in openerp for comparing dates - [(\\'date\\', \\'&gt;=\\', date_begin), (\\'date\\', \\'\\&lt;=\\', date_end)]. You can use these operators to compare int or float also.</p> <p>Els filter amb group agrupen per algun field:</p> <pre><code>&lt;group string=\"Group By\"&gt;\n        &lt;filter name=\"group_by_inventor\" string=\"Inventor\" context=\"{'group_by': 'inventor_id'}\"/&gt;\n&lt;/group&gt;\no:\n</code></pre> <pre><code>  &lt;filter name=\"group_by_matricula\" string=\"Matricula\" context=\"{'group_by': 'matricula'}\"/&gt;\n</code></pre> <p>Si agrupem per data, el grup \u00e9s per defecte per cada mes, si volem agrupar per dia:</p> <pre><code>&lt;filter name=\"group_by_exit_day\" string=\"Exit\" context=\"{'group_by': 'exit_day:day'}\"/&gt;  \n</code></pre> <p>Si volem que un filtre estiga predefinit s\\'ha de posar en el context de l\\'action:</p> <pre><code>&lt;field name=\"context\"&gt;{'search_default_clients':1,\"default_is_client\": True}&lt;/field&gt;\n</code></pre> <p>En aquest exemple, filtra amb en search_default_XXXX que activa el filtre XXXX i, am\u00e9s, fa que en els formularis tiguen un camp boolean a true.</p>"},{"location":"3_4_vistas/#vistes-calendar","title":"Vistes Calendar","text":"<p>Si el recurs t\u00e9 un camp date o datetime. Permet editar els recursos ordenats per temps. L'exemple s\u00f3n els esdeveniments del m\u00f2dul de ventes.</p> <ul> <li>string, per al t\u00edtol de la vista</li> <li>date_start, que ha de contenir el nom d'un camp datetime o date     del model.</li> <li>date_delay, que ha de contenir la llargada en hores de     l'interval.</li> <li>date_stop, Aquest atribut \u00e9s ignorat si existeix l'atribut     date_delay.</li> <li>day_length, per indicar la durada en hores d'un dia. OpenObject     utilitza aquest valor per calcular la data final a partir del valor     de date_delay. Per defecte, el seu valor \u00e9s 8 hores.</li> <li>color, per indicar el camp del model utilitzat per distingir,     amb colors, els recursos mostrats a la vista.</li> <li>mode, per mostrar l'enfoc (dia/setmana/mes) amb el qu\u00e8 s'obre la     vista. Valors possibles: day, week, month. Per defecte, month.</li> </ul> <pre><code> &lt;record model=\"ir.ui.view\" id=\"session_calendar_view\"&gt;\n            &lt;field name=\"name\"&gt;session.calendar&lt;/field&gt;\n            &lt;field name=\"model\"&gt;openacademy.session&lt;/field&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;calendar string=\"Session Calendar\" date_start=\"start_date\"\n                          date_stop=\"end_date\"\n                          color=\"instructor_id\"&gt;\n                    &lt;field name=\"name\"/&gt;\n                &lt;/calendar&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre>"},{"location":"3_4_vistas/#vistes-graph","title":"Vistes Graph","text":"<p>En general s\\'utilitza per a veure agregacions sobre les dades a mostrar. Accepta els seg\u00fcents atributs:</p> <ul> <li>string, per al t\u00edtol de la vista</li> <li>type, per al tipus de gr\u00e0fic. (bar, pie, line)</li> <li>stacked sols per a bar per mostrar les dades amuntonades en una     \u00fanica barra.</li> </ul> <p>La definici\u00f3 dels elements fills de l'element arrel graph determina el contingut del gr\u00e0fic:</p> <ul> <li>Primer camp: eix X (horitzontal). Obligatori.</li> <li>Segon camp: eix Y (vertical). Obligatori.</li> </ul> <p>A cadascun dels camps que determinen els eixos, se'ls pot aplicar els atributs seg\u00fcents:</p> <ul> <li>name: El nom del field</li> <li>title: El nom que tindr\u00e0 en el gr\u00e0fic</li> <li>invisible: No apareixer\u00e0</li> <li>type: En aquest cas cal dir si \u00e9s row per agrupar per aquest     field, col per fer distintes l\u00ednies o measure per a les     dades en s\u00ed que es van a agregar.</li> </ul> <pre><code> &lt;record model=\"ir.ui.view\" id=\"terraform.planet_changes_graph\"&gt;\n      &lt;field name=\"name\"&gt;Planet Changes graph&lt;/field&gt;\n      &lt;field name=\"model\"&gt;terraform.planetary_changes&lt;/field&gt;\n      &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;graph string=\"Changes History\" type=\"line\"&gt;\n          &lt;field name=\"time\"  type=\"row\"/&gt;\n          &lt;field name=\"planet\"  type=\"col\"/&gt;\n          &lt;field name=\"greenhouse\" type=\"measure\"/&gt;\n        &lt;/graph&gt;\n      &lt;/field&gt;\n    &lt;/record&gt;\n</code></pre> <pre><code>Les vistes graph en Odoo s\u00f3n molt limitades, sols accepten un element en les X i necessiten que els camps estiguen guardats en la base de dades\n</code></pre>"},{"location":"4_1_EjemploCreacionModeloBasico/","title":"4.1. Creaci\u00f3n de un modelo b\u00e1sico, vistas, men\u00fas y actions.","text":""},{"location":"4_1_EjemploCreacionModeloBasico/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta secci\u00f3n vamos a realizar de forma guiada un ejemplo de desarrollo de un m\u00f3dulo que nos permitir\u00e1 gestionar la realizaci\u00f3n de proyectos de desarrollo inform\u00e1tico. </p> <p>B\u00e1sicamente, los elementos que vamos a tener en cuenta para nuestro m\u00f3dulo b\u00e1sicamente son los siguientes:</p> <ul> <li>Proyectos: Cada desarrollo de una aplicaci\u00f3n diferente, ser\u00e1 un proyecto</li> <li>Tareas: El desarrollo se basa en la realizaci\u00f3n de tareas</li> <li>Sprints: Dividimos la fase de desarrollo en sprints temporales que agrupan una serie de tareas a realizar</li> <li>Desarrolladores: son las personas que realizan cada una de las tareas del proyecto </li> </ul>"},{"location":"4_1_EjemploCreacionModeloBasico/#creacion-de-la-aplicacion","title":"Creaci\u00f3n de la aplicaci\u00f3n","text":"<p>Para comenzar, puesto que ya tenemos el sistema configurado, procedemos a la creaci\u00f3n de la estructura de la aplicaci\u00f3n mediante scaffold.</p> <p>Debemos tener claro el nombre de nuestra aplicaci\u00f3n que ser\u00e1 Gestion_Tareas_Sergio en mi caso.</p> <pre><code>docker exec -ti odoo odoo scaffold GestionTareasSergio /mnt/extra-addons\n</code></pre> <p>Comprobamos que se ha generado toda la estructura</p> Creaci\u00f3n de la estructura del m\u00f3dulo <p>Tip</p> <p>En caso de tener problemas de permisos, recordad a\u00f1adir permisos a todos los elementos</p> <pre><code>sudo chmod -R 777 ./gestion_tareas_sergio/\n</code></pre> <p>y ahora configuramos el manifest.py para dar descripci\u00f3n de nuestra aplicaci\u00f3n lo vamos a instalar para comprobar que todo funciona correctamente.</p> Comprobamos que la aplicaci\u00f3n esta instalada correctamente <p>Estar\u00eda bonito, crear un logotipo para nuestra aplicaci\u00f3n y as\u00ed identificarla r\u00e1pidamente.</p> <p>\u00bfReiniciar o reinstalar?</p> <p>Debes reiniciar el servidor de Odoo cuando:</p> <ul> <li>Modificas modelos Python (<code>models/*.py</code>), ya que el c\u00f3digo se carga al iniciar el servidor.</li> <li>Cambias el archivo <code>__manifest__.py</code>, porque Odoo lo lee al cargar los m\u00f3dulos.</li> </ul> <p>Puedes actualizar el m\u00f3dulo sin reiniciar el servidor si:</p> <ul> <li>Solo modificas vistas XML (como formularios, listas, etc.).</li> <li>Cambias archivos de datos est\u00e1ticos (como <code>views/*.xml</code>, <code>security/*.xml</code>, etc.).</li> <li>Ajustas controladores web (<code>controllers/*.py</code>), aunque en este caso, si el c\u00f3digo ya est\u00e1 cargado en memoria, puede requerir reinicio dependiendo del entorno (por ejemplo, en producci\u00f3n).</li> </ul> <p>En ocasiones si los cambios realizados en los m\u00f3dulos es muy grande, la aplicaci\u00f3n puede fallar y es mejor desinstalar y volver a instalar la aplicaci\u00f3n, aunque esto conlleve a la perdida de datos.</p>"},{"location":"4_1_EjemploCreacionModeloBasico/#creacion-de-modulo-basico-de-tareas","title":"Creaci\u00f3n de m\u00f3dulo b\u00e1sico de Tareas","text":"<p>Comenzaremos creando un m\u00f3dulo b\u00e1sico que contendr\u00e1 informaci\u00f3n de las tareas en las que se dividir\u00e1 nuestro desarrollo completa.</p>"},{"location":"4_1_EjemploCreacionModeloBasico/#anadir-el-modelo","title":"A\u00f1adir el modelo","text":"<p>Lo primer de todo ser\u00e1 ir al fichero <code>models/models.py</code> y comenzar a modificar el fichero existente para crear el modelo seg\u00fan nuestras necesidades. </p> <p>Recordad que tenemos por una parte <code>__init__.py</code> donde se importan los modelos que hay en <code>./models</code>, y que aqu\u00ed tenemos otro <code>models/__init__.py</code> que nos indica los ficheros modelos concretos a importar, en este caso <code>models/models.py</code>.</p> Comprobamos que la aplicaci\u00f3n esta instalada correctamente <p>En principio, los campos que vamos a necesitar van a ser los siguientes:</p> <ul> <li>nombre de tareas, de tipo texto corto (<code>fields.Char()</code>)</li> <li>descripci\u00f3n, de tipo texto largo (<code>fields.Text()</code>)</li> </ul> <p>As\u00ed pues, comencemos modificando el modelo, para lo cual damos un nombre a la clase de la tarea y le asignamos un nombre y una descripci\u00f3n.</p> <p>El nombre que le vamos a dar a la clase es <code>tareas_sergio</code> en mi caso, que me llamo as\u00ed, y despu\u00e9s en el nombre debemos especificar de nuevo este nombre precedido de forma correcta por el nombre de la aplicaci\u00f3n.</p> models.py <pre><code>from odoo import models, fields, api\n\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    _description = 'gestion_tareas_sergio.tareas_sergio'\n\n    nombre = fields.Char()\n    descripcion = fields.Text()\n</code></pre> <p>Intenta hacer esta parte sin mirar la soluci\u00f3n....</p> <p>Vamos a comenzar poco a poco, de forma que tras cada modificaci\u00f3n vamos a reinstalar la aplicaci\u00f3n para comprobar que todo funciona correctamente. Si hacemos muchos cambios a la vez sin reinstalar ni verificar nos encontraremos con problemas errores arrastrados que ser\u00e1n muy dif\u00edciles de solucionar. </p>"},{"location":"4_1_EjemploCreacionModeloBasico/#revision-de-la-base-de-datos","title":"Revisi\u00f3n de la base de datos","text":"<p>En Odoo, la estructura de las tablas creadas depende del modelo (model) definido en el sistema. Odoo utiliza el ORM (Object-Relational Mapping) de Python para mapear clases a tablas en la base de datos PostgreSQL.</p> <p>As\u00ed pues, Una vez instalada, si no hemos tenido ning\u00fan problema, podemos comprobar c\u00f3mo ha trabajado este ORM y c\u00f3mo debe haberse creado el modelo y por tanto deben haber cambios en la base de datos. </p> <p>Vamos a revisar estos cambios y comprobar que todo cambio en el modelo repercute en un cambio en las tablas.</p> <p>Para comprobar los cambios realizados en la base de datos, tenemos tres opciones: </p> <ul> <li>desde el propio interfaz de odoo en modo desarrollo</li> <li>desde la l\u00ednea de comandos usando el interfaz de PostgreSQL</li> <li>o desde una herramienta de administraci\u00f3n de base de datos con interfaz gr\u00e1fico como puede ser dbeaver</li> </ul>"},{"location":"4_1_EjemploCreacionModeloBasico/#desde-el-interfaz-de-odoo","title":"Desde el interfaz de odoo","text":"<p>Para revisar los modelos desde el interfaz de Odoo, una vez en modo desarrollo, accedemos a Ajustes -&gt; T\u00e9cnico y ah\u00ed tenemos una secci\u00f3n dedicada a la Estructura de la base de datos:</p> Revisi\u00f3n de base de datos desde odoo <p>Aqu\u00ed podemos ver un listado de todas las tablas tanto del propio sistema Odoo como de todas las aplicaciones que tenemos instaladas. </p> <p>En Odoo, el nombre de la tabla que se crea en la base de datos se determina principalmente por el atributo <code>_name</code> del modelo:</p> <ul> <li>Si defines <code>_name = 'mi.modelo'</code>, la tabla se llamar\u00e1 <code>mi_modelo</code>.</li> <li>Odoo reemplaza los puntos (.) por guiones bajos (_) para formar el nombre de la tabla.</li> </ul> <p>Si buscamos el modelo que hemos creado, en mi caso tareas_sergio, clicamos sobre el y podemos ver sus caracter\u00edsticas as\u00ed como los campos que tiene: </p> Revisi\u00f3n de base de datos desde odoo. Campos modelo <p>Como se puede ver en la anterior figura, adem\u00e1s de los dos campos que hemos creado para el modelo, Odoo crea una serie de campos para llevar control de versiones y a\u00f1adir sus propios \u00edndices.</p>"},{"location":"4_1_EjemploCreacionModeloBasico/#desde-la-linea-de-comandos","title":"Desde la l\u00ednea de comandos.","text":"<p>Como somos unos apasionados de los sistemas, nos gusta comprobar que todo funciona sin entorno gr\u00e1fico, por lo que podemos por una parte entrar en la interfaz de PostgreSQL y desde ah\u00ed, revisar tanto la existencia de la tabla asociada al modelo, como de sus campos.</p> <p>Para ello, entramos en el terminal del contenedor:</p> <pre><code>docker exec -it postgresql bash\n</code></pre> <p>Accedemos al interfaz de comando de PostgreSQL</p> <pre><code>psql -U odoo\n</code></pre> <p>Una vez en el interfaz, comprobamos las bases de datos existentes y cambiamos a la correspondiente</p> <pre><code>\\l\n\\c odoo\n</code></pre> <p>buscamos la tabla con una de las siguientes opciones</p> <p><pre><code>\\dt *sergio*\n\nSELECT * FROM pg_tables WHERE tablename LIKE '%sergio%';\n</code></pre> En el primer caso, el * (asterisco) sirve como comod\u00edn. </p> <p>y finalmente, listamos los campos de la tabla:</p> <pre><code>\\d \\d gestion_tareas_sergio_tareas_sergio\n\nSELECT column_name, data_type \nFROM information_schema.columns \nWHERE table_name = 'gestion_tareas_sergio_tareas_sergio';\n</code></pre> <p>y para salir del interfaz de PosgreSQL:</p> <pre><code>\\q\n</code></pre> Revisi\u00f3n de base de datos desde odoo. Campos modelo desde interfaz PosgreSQL"},{"location":"4_1_EjemploCreacionModeloBasico/#desde-dbeaver","title":"Desde dbeaver","text":"<p>Tamb\u00ed\u00e9n podemos utilizar esta aplicaci\u00f3n de gesti\u00f3n de base de datos para acceder y comprobar las tablas y campos de nuestro modelo:</p> <p>Para ello, tras instalar la aplicaci\u00f3n, creamos una nueva conexi\u00f3n a la base de datos; como hemos abierto el puerto del contenedor en la definici\u00f3n del <code>docker-compose.yml</code>, podemos acceder como si se tratara de una base de datos en local.</p> <p>Creamos y configuramos una conexi\u00f3n: </p> Configuraci\u00f3n conexi\u00f3n en dbeaver <p>Si todo funciona bien podemos ver tambi\u00e9n la tabla y su estructura.</p> Tabla y su estructura"},{"location":"4_1_EjemploCreacionModeloBasico/#vistas-menu-y-action","title":"Vistas, men\u00fa y action","text":"<p>Ahora que ya tenemos el modelo definido, lo hemos revisado en la base de datos, es momento de continuar trabajando con nuestra m\u00f3dulo y hacer que sea visible desde el men\u00fa de Odoo.</p> <p>Para ello, tal y como hemos visto en el ejemplo de \"Hola Mundo 3\" tenemos que definir las vistas que queremos publicar, tenemos que mostrar una opci\u00f3n en el men\u00fa para poder ver estas vistas y activar las acciones para dar funcionalidad al men\u00fa.</p>"},{"location":"4_1_EjemploCreacionModeloBasico/#configurando-vistas","title":"Configurando vistas","text":"<p>De momento, este modelo no es accesible desde ning\u00fan sitio: no tenemos ninguna vista. Por defecto, Odoo crea unas vistas b\u00e1sicas si no haces nada, pero vamos a ver d\u00f3nde est\u00e1n y c\u00f3mo personalizarlas.</p> <p>Las vistas est\u00e1n en el directorio <code>views</code>, en un documento XML. </p> <p>En este fichero comentado tenemos algunos bloques que van a ser: </p> <ul> <li>uno de vista, </li> <li>uno de action (que veremos m\u00e1s adelante), </li> <li>uno de server action y </li> <li>uno de men\u00fas. </li> </ul> <p>Vamos a ir vi\u00e9ndolos poco a poco, porque se trata de ir definiendo cada uno de esos bloques</p> <p>Realmente, un bloque <code>&lt;record&gt;</code> implica que va a ser un registro en la base de datos. Este registro necesita saber d\u00f3nde se va a guardar, en el primer caso en el modelo <code>ir.ui.view</code> (las vistas tambi\u00e9n son modelos en Odoo).</p> <p>As\u00ed pues comenzamos descomentando el primer bloque y ponemos un <code>id</code> \u00fanico, en mi caso, por ejemplo <code>gestion_tareas_sergio.list</code>, que ser\u00e1 la vista en modo lista (anteriormente Tree) de las tareas.</p> <p>Establecemos un nombre (no es lo m\u00e1s importante, pero hay que establecerlo), por ejemplo <code>Gestion Tareas Sergio list</code>. El modelo sobre el que va a actuar esta vista ser\u00e1 el de tareas. </p> <p>Despu\u00e9s establecemos el modelo que debe coincidir con el nombre del modelo que hemos establecido al definir el modelo, en mi caso \"gestion_tareas_sergio.tareas_sergio\". Esto si es fundamental</p> <p>A continuaci\u00f3n, a\u00f1adimos el listado de campos que mostrar\u00e1 la vista. En este caso, solo tenemos dos campos creado, <code>nombre</code> y <code>descripcion</code>. De nuevo son los mismos que hemos establecido en el modelo.</p> Definiendo la vista de un modelo <p>Este XML indica que es una vista de tipo List y que mostrar\u00e1 el campo <code>name</code> del modelo. Este campo debe existir en el fichero Python, como hemos visto antes.</p> <p>Revisando la vista definida</p> <p>Una vez definida la vista, ahora deber\u00edamos poder encontrar la vista si consultamos desde la aplicaci\u00f3n el listado de vistas. Recordamos que nuestra vista se llama <code>manage_task_list</code>. Si actualizamos el m\u00f3dulo, la podremos encontrar. En este caso, no hemos tenido que reiniciar el servicio. </p> <p> Listado de vistas </p>"},{"location":"4_1_EjemploCreacionModeloBasico/#actions","title":"Actions","text":"<p>La vista a\u00fan es inaccesible porque no hay ning\u00fan men\u00fa que permita acceder a ella. Para relacionarlo y ver una lista de tareas, vamos a activar el action correspondiente.</p> <p>Un action permite abrir, cuando se relacione con una opci\u00f3n de men\u00fa, la vista correspondiente. Ser\u00e1 un registro del modelo de acciones de ventana (<code>ir.actions.act_window</code>).</p> <p>Continuamos pues descomentando el siguiente bloque de c\u00f3digo y asignado un <code>id</code> \u00fanico por ejemplo <code>GestionTareasSergio window</code>. Le ponemos un nombre, importante el modelo sobre el que act\u00faa y el orden en el que queremos que se muestren las vistas (primero la list que acabamos de crear y despu\u00e9s la form, que Odoo generar\u00e1 autom\u00e1ticamente si no la hemos definido).</p> ir.actions.act_window <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_window\"&gt;\n  &lt;field name=\"name\"&gt;GestionTareasSergio window&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;gestion_tareas_sergio.tareas_sergio&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Una acci\u00f3n relaciona un men\u00fa o bot\u00f3n con una acci\u00f3n que se desencadena en el cliente y se convierte en una petici\u00f3n al servidor. En este caso, el action se transforma en una petici\u00f3n que demanda al servidor las vistas list y torm del modelo de tareas, y el servidor devolver\u00e1 la vista list creada y una vista form generada autom\u00e1ticamente.</p>"},{"location":"4_1_EjemploCreacionModeloBasico/#menus","title":"Men\u00fas","text":"<p>Para que este action funcione, el cliente debe tener un men\u00fa. </p> <p>As\u00ed que seguimos descomentando el bloque de c\u00f3digo de men\u00fa y vamos a crear una opci\u00f3n de men\u00fa principal, por ejemplo <code>Tareas Sergio</code>, y de ah\u00ed colgar\u00e1 un submen\u00fa llamado <code>Gesti\u00f3n</code>, y finalmente otro llamado <code>Tareas</code>. El action del men\u00fa <code>Tareas</code> ser\u00e1 el que hemos definido antes, para que al pulsar se cargue la vista de tareas, o sea la <code>action</code> de este men\u00fa, ser\u00e1 el <code>id</code> del <code>ir.action.act_window</code> que hemos definido antes</p> <p>Por una parte tenemos el c\u00f3digo </p> Bloques de men\u00fa <pre><code>&lt;!-- Top menu item --&gt;\n&lt;menuitem name=\"Gesti\u00f3n Tareas Sergio\" id=\"gestion_tareas_sergio.menu_root\"/&gt;\n\n&lt;!-- menu categories --&gt;\n&lt;menuitem name=\"Gesti\u00f3n\" id=\"gestion_tareas_sergio.gestion\" parent=\"gestion_tareas_sergio.menu_root\"/&gt;\n\n&lt;!-- actions --&gt;\n&lt;menuitem name=\"Tareas\" id=\"gestion_tareas_sergio.gestion_tareas\" parent=\"gestion_tareas_sergio.gestion\"\n          action=\"gestion_tareas_sergio.action_window\"/&gt;\n</code></pre> <p>y por otra tenemos el esquema de c\u00f3mo debe estar todo conectado:</p> Estructura de la configuraci\u00f3n del men\u00fa <p>Ahora ya tenemos definido el men\u00fa y antes de seguir ser\u00eda aconsejable volver a reinstalar el m\u00f3dulo para asegurarnos que no tenemos ning\u00fan error y comprobar si sale o no el men\u00fa.</p> <p>Si revisamos, sigue sin salir nuestra aplicaci\u00f3n en el men\u00fa tras haberlo definido. Esto es debido a un tema de permisos que abordamos en el siguiente punto.</p>"},{"location":"4_1_EjemploCreacionModeloBasico/#permisos","title":"Permisos","text":"<p>En Odoo, para que un usuario pueda ver un men\u00fa y acceder a listas o formularios de un modelo, se deben cumplir ciertos requisitos de permisos y configuraciones. </p> <p>Se debe definir un archivo XML o CSV con los permisos para el modelo. Esto se hace en un archivo como <code>ir.model.access.csv</code>.</p> <p>Cada l\u00ednea define:</p> <ul> <li>Modelo, </li> <li>Grupo</li> <li>Permisos: leer (<code>read</code>), escribir (<code>write</code>), crear (<code>create</code>), borrar (<code>unlink</code>)</li> </ul> <p>Ejemplo:</p> <pre><code>id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_gestion_tareas_sergio_tareas_sergio,acceso_tareas_sergio,model_gestion_tareas_sergio_tareas_sergio,base.group_user,1,1,1,1\n</code></pre> <p>donde cada l\u00ednea representa un conjunto de permisos para un grupo sobre un modelo. Los campos son:</p> <ul> <li>id: Identificador \u00fanico del registro (puede ser cualquier nombre \u00fanico).</li> <li>name: Nombre legible del permiso, puede ser cualquiera</li> <li>model_id:id:  hace referencia al modelo al que se aplican los permisos. La forma est\u00e1ndar de referenciarlo es <code>model_&lt;nombre_del_modelo&gt;</code>, donde <code>&lt;nombre_del_modelo&gt;</code> es el valor de <code>_name</code> del modelo, sustituyendo los puntos (<code>.</code>) por guiones bajos (<code>_</code>). Puede parecer poco intuitivo, pero es el formato que exige Odoo.</li> <li>group_id:id: Grupo de usuarios al que se le asignan los permisos (puede ser base.group_user, base.group_system, etc.). Si se deja vac\u00edo, aplica a todos los usuarios.</li> <li>perm_read: 1 si puede leer, 0 si no.</li> <li>perm_write: 1 si puede modificar, 0 si no.</li> <li>perm_create: 1 si puede crear, 0 si no.</li> <li>perm_unlink: 1 si puede borrar, 0 si no.</li> </ul> <p>De esta forma, para que un men\u00fa sea visible:</p> <ul> <li>El usuario debe tener acceso al grupo asignado al men\u00fa. Para simplificar de momento van a ser todos los usuarios: <code>base.group_user</code></li> <li>El men\u00fa debe estar vinculado a una acci\u00f3n, aspecto que en nuestro caso ya hemos hecho</li> <li>Se debe tener al menos una vista de tipo <code>list</code> o <code>form</code> para que la acci\u00f3n funcione correctamente.</li> </ul>"},{"location":"4_1_EjemploCreacionModeloBasico/#manifest","title":"Manifest","text":"<p>En el fichero <code>__manifest__.py</code> hay que habilitar estos permisos para que se carguen. Esta l\u00ednea suele venir comentada por defecto y hay que descomentarla.</p> <pre><code>'security/ir.model.access.csv',\n</code></pre> <p>Ahora ya deber\u00edamos verlo todo: reiniciamos Docker o el servicio, actualizamos el m\u00f3dulo y ya aparece la opci\u00f3n de men\u00fa principal <code>Manage</code>. Si la cargamos, tenemos <code>Gesti\u00f3n</code> y <code>Tareas</code>. Al pulsar en <code>Tareas</code> aparece la vista con el campo <code>name</code>. Si pulsamos en \"Nuevo\", podemos crear tareas (esto es una vista formulario generada por defecto).</p>"},{"location":"4_1_EjemploCreacionModeloBasico/#verificacion-rapida","title":"Verificaci\u00f3n r\u00e1pida","text":"<p>Para comprobar si todo est\u00e1 bien configurado:</p> <ol> <li>Activa el modo desarrollador.</li> <li>Ve a Ajustes &gt; T\u00e9cnico &gt; Seguridad &gt; Reglas de acceso y Reglas de registro.</li> <li>Aseg\u00farate de que el usuario pertenece al grupo correcto.</li> <li>Verifica que el men\u00fa tiene una acci\u00f3n v\u00e1lida y que el modelo tiene permisos definidos.</li> </ol> <p>o directamente, podemos ver que ya aparece en el men\u00fa de aplicacion todos los elementos que hemos definido</p> Vsita de men\u00fa y aplicaci\u00f3n <p>En esta imagen estamos viendo la vista tipo listado con los dos campos, y adem\u00e1s se ha accedido al men\u00fa y se puede ver los 3 niveles de men\u00fa que hemos definido: Gesti\u00f3n Tareas Sergio -&gt; Gesti\u00f3n -&gt; Tareas</p> <p>De esta manera, hemos visto c\u00f3mo crear un m\u00f3dulo b\u00e1sico con funcionalidad b\u00e1sica: un modelo, vistas, permisos, opciones de men\u00fa y c\u00f3mo relacionarlo todo.</p>"},{"location":"4_2_EjemploCamposBasicos/","title":"4.2. Campos b\u00e1sicos y relacionales","text":"<p>Seguimos con el ejemplo creado en la secci\u00f3n anterior y en este apartado veremos c\u00f3mo a\u00f1adir distintos campos b\u00e1sicos y relaciones a nuestros modelos en Odoo:. No nos centraremos en vistas avanzadas, sino en ver la relaci\u00f3n entre modelos y c\u00f3mo Odoo toma vistas por defecto, adem\u00e1s de c\u00f3mo podemos modificarlas un poquito.</p> <p>Tenemos un modelo <code>tareas_sergio</code> con dos campos propios y dos campos de tipo car\u00e1cter llamado <code>name</code> y <code>descripcion</code>. </p> <p>Documentaci\u00f3n de desarrollo ORM</p> <p>Puedes consultar la documentaci\u00f3n de desarrollo de Odoo para m\u00e1s informaci\u00f3n sobre el ORM y los campos disponibles.</p>"},{"location":"4_2_EjemploCamposBasicos/#campos-basicos-y-parametros","title":"Campos b\u00e1sicos y par\u00e1metros","text":"<p>Al crear un campo de tipo car\u00e1cter, puedes a\u00f1adir par\u00e1metros como:</p> <ul> <li>label: Si no se indica, la etiqueta ser\u00e1 el nombre del campo.</li> <li>readonly: Para hacerlo de solo lectura.</li> <li>required: Para hacerlo obligatorio.</li> <li>help: Mensaje de ayuda, por ejemplo: \"Introduzca el nombre\".</li> </ul> <p>Cuando modificas el modelo, debes reiniciar Docker y actualizar el m\u00f3dulo para aplicar los cambios.</p>"},{"location":"4_2_EjemploCamposBasicos/#ejemplo-de-campos-basicos","title":"Ejemplo de campos b\u00e1sicos","text":"<p>Supongamos que a\u00f1adimos los siguientes campos al modelo <code>tareas_sergio</code>, pero a\u00f1adiendo etiquetas, ayuda y haciendo que alg\u00fan campo sea requerido:</p> <ul> <li><code>creation_date</code>: tipo <code>Date</code></li> <li><code>start_date</code>: tipo <code>Datetime</code></li> <li><code>end_date</code>: tipo <code>Datetime</code></li> <li><code>is_done</code>: tipo <code>Boolean</code></li> </ul> <p>Vamos a a\u00f1adir estos campos, si es necesario revisando la documentaci\u00f3n de Odoo sobre los tipos de campos. A\u00f1adimos tambi\u00e9n caracter\u00edsticas indicadas y modificamos los campos ya existente con estos par\u00e1metros</p> models.py <pre><code>from odoo import models, fields, api\n\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    _description = 'gestion_tareas_sergio.tareas_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre\")\n    descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n de la tarea\")\n    fecha_creacion = fields.Date(string=\"Fecha Creaci\u00f3n Tarea\", readonly=False, required=True, help=\"Fecha en la que se di\u00f3 de alta la tarea\")\n    fecha_ini = fields.Datetime(string=\"Fecha Inicio\", readonly=False, required=True, help=\"Fecha en la que se inicia la tarea\")\n    fecha_fin = fields.Datetime(string=\"Fecha Final\", readonly=False, required=False, help=\"Fecha en la que se finaliza la tarea\")\n    finalizado = fields.Boolean(string=\"Finalizado\", readonly=False, required=False, help=\"Indica si la tarea ha sido finalizada o no\")\n</code></pre> <p>Una vez a\u00f1adidos, comprobamos que todo funciona bien reinstalando el m\u00f3dulo. Recuerda reiniciar el servicio y actualizar el m\u00f3dulo tras modificar los modelos.</p> <p>Actualizamos y comprobamos que tenemos los nuevos campos. Comprobamos que sale la ayuda y que los campos requeridos funcionan como tal.</p>"},{"location":"4_2_EjemploCamposBasicos/#actualizando-la-vista-en-odoo","title":"Actualizando la vista en Odoo","text":"<p>Por defecto, Odoo crea una vista de tipo formulario con todos los campos. </p> <p>Si entramos en esta vista, veremos que es muy pobre y que normalmente no esta ajustada de forma coherente. Para personalizar la vista, vamos a editar el archivo de vistas XML y a\u00f1ade los campos dentro de una etiqueta <code>&lt;group&gt;</code>.</p> <p>As\u00ed pues, para crear la vista, vamos a copiar y pegar la vista que ya tenemos en formato <code>list</code> y la vamos a renombrar como tipo <code>form</code> y donde tenemos las etiquetas <code>&lt;list&gt;</code> vamos a tener <code>&lt;form&gt;</code>, <code>&lt;sheet&gt;</code> y <code>&lt;group&gt;</code> </p> <p>Observa el siguiente c\u00f3digo y ver\u00e1s que no todos los campos aparecen en las definiciones. Si todo esta correcto, este ejemplo en el formato listado, aparecer\u00e1n 3 campos y en el formato formulario aparecer\u00e1n 5 campos.</p> <p>Como siempre el nombre del modelo puede ser el que quieras, pero se recomienda seguir una misma nomenclatura durante todo el proyecto y el modelo, debemos indicar correctamente el nombre del modelo definido. Si nos equivocamos en el nombre del modelo, mostrar\u00e1 los formularios por defecto</p> <pre><code>&lt;!-- explicit list view definition --&gt;\n  &lt;record model=\"ir.ui.view\" id=\"tareas_list\"&gt;\n  &lt;field name=\"name\"&gt;gestion_tareas_sergio.tareas_sergio.list&lt;/field&gt;\n  &lt;field name=\"model\"&gt;gestion_tareas_sergio.tareas_sergio&lt;/field&gt;\n  &lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;list&gt;\n      &lt;field name=\"name\"/&gt;\n      &lt;field name=\"descripcion\"/&gt;\n      &lt;field name=\"finalizado\"/&gt;\n    &lt;/list&gt;\n  &lt;/field&gt;\n&lt;/record&gt;\n\n&lt;!-- explicit FORM view definition --&gt;\n&lt;record model=\"ir.ui.view\" id=\"tareas_form\"&gt;\n  &lt;field name=\"name\"&gt;gestion_tareas_sergio.tareas_sergio.form&lt;/field&gt;\n  &lt;field name=\"model\"&gt;gestion_tareas_sergio.tareas_sergio&lt;/field&gt;\n  &lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;form&gt;\n      &lt;sheet&gt;\n        &lt;group&gt;\n          &lt;field name=\"name\"/&gt;\n          &lt;field name=\"descripcion\"/&gt;\n          &lt;field name=\"fecha_creacion\"/&gt;\n          &lt;field name=\"fecha_ini\"/&gt;\n          &lt;!-- &lt;field name=\"fecha_fin\"/&gt; --&gt;\n          &lt;field name=\"finalizado\"/&gt;\n        &lt;/group&gt;\n      &lt;/sheet&gt;\n    &lt;/form&gt;\n  &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Comprueba que todo funciona correctamente y que puedes introducir valores en todos los campos.</p>"},{"location":"4_2_EjemploCamposBasicos/#relaciones","title":"Relaciones","text":"<p>Las relaciones entre los modelos (en definitiva, entre las tablas de la base de datos) tambi\u00e9n se simplifican gracias al ORM. De esta manera, las relaciones uno a muchos se implementan en Odoo mediante el campo <code>Many2one</code> y las relaciones muchos a muchos mediante <code>Many2many</code>. Las relaciones muchos a muchos, en una base de datos relacional, implican una tercera tabla intermedia, pero en Odoo no tenemos que preocuparnos por estos detalles si no queremos, ya que el mapeo de objetos lo detectar\u00e1 y crear\u00e1 las tablas, claves y restricciones de integridad necesarias. </p>"},{"location":"4_2_EjemploCamposBasicos/#campos-relacionales-many2one","title":"Campos relacionales: Many2one","text":"<p>Vamos a comprobar c\u00f3mo podemos establecer una relaci\u00f3n <code>Many2one</code>, para ello vamos a crear un nuevo modelo llamado sprint que despu\u00e9s relacionaremos con las tareas.</p> <p>Sprints y tareas</p> <p>Un sprint es un ciclo de trabajo corto y repetitivo, t\u00edpicamente de 1 a 4 semanas, en el que:</p> <ul> <li>Se planifican tareas espec\u00edficas (historias de usuario, bugs, mejoras).</li> <li>Se ejecutan esas tareas con un objetivo claro.</li> <li>Se revisa el trabajo realizado al final del sprint.</li> <li>Se reflexiona sobre c\u00f3mo mejorar en el siguiente sprint (retrospectiva).</li> </ul> <p>Un sprint contiene varias tareas (tambi\u00e9n llamadas issues, tickets o historias de usuario) que son las  unidades de trabajo que deben completarse dentro del sprint.</p> <p>As\u00ed pues, vamos a crear un nuevo modelo <code>sprint</code> con los siguientes campos:</p> <ul> <li>nombre</li> <li>descripci\u00f3n</li> <li>fecha_inicio</li> <li>fecha_fin</li> </ul> <p>Intenta generar el c\u00f3digo, es muy sencillo, puesto que la mayor\u00eda de los campos los tenemos en el modelo de tareas, y antes de introducir la relaci\u00f3n, asegura que todo es correcto reiniciando y reinstalando.</p> modelo sprint en models.py <pre><code>class spints_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.sprints_sergio'\n    _description = 'gestion_tareas_sergio.sprints_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre\")\n    descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n de la tarea\")\n    fecha_ini = fields.Datetime(string=\"Fecha Inicio\", readonly=False, required=True, help=\"Fecha en la que se inicia la tarea\")\n    fecha_fin = fields.Datetime(string=\"Fecha Final\", readonly=False, required=False, help=\"Fecha en la que se finaliza la tarea\")\n</code></pre> <p>Una vez tenemos el nuevo modelo, para relacionar tareas con sprints, a\u00f1adimos un campo <code>sprint_id</code> en el modelo <code>tareas_sergio</code> de tipo <code>Many2one</code> de la siguiente forma:</p> <pre><code>sprint = fields.Many2one('gestion_tareas_sergio.sprints_sergio', string='Sprint relacionado', ondelete='set null', help='Sprint relacionado')\n</code></pre> <p>Este nuevo campo significa:</p> <ul> <li><code>sprint</code>: es el nombre del campo en el modelo actual (<code>tareas_sergio</code>).</li> <li><code>fields.Many2one(...)</code>: define una relaci\u00f3n de muchos a uno con otro modelo.</li> <li><code>'gestion_tareas_sergio.sprints_sergio'</code>: indica el modelo destino de la relaci\u00f3n (en este caso, el modelo de sprints).</li> <li><code>string='Sprint relacionado'</code>: etiqueta que se mostrar\u00e1 en la interfaz de usuario para este campo.</li> <li><code>ondelete='set null'</code>: si se elimina el sprint relacionado, este campo se establecer\u00e1 a <code>null</code> (la tarea no se elimina, solo pierde la relaci\u00f3n). Otros valores podr\u00edan ser: <code>cascade</code>, <code>restrict</code> (Impide eliminar el registro relacionado si hay registros que lo usan), <code>set default</code> y <code>no action</code>  (No hace nada autom\u00e1ticamente. Puede causar errores si hay restricciones SQL). </li> <li><code>help='Sprint relacionado'</code>: texto de ayuda que aparece al pasar el cursor sobre el campo.</li> </ul> <p>De esta manera, con esta simple l\u00edneas por medio de ORM le estamos informado a Odoo de la relaci\u00f3n entre ambos modelos.</p> <p>Es el momento de probar que todo funciona bien aunque para ello como m\u00ednimo debemos:</p> <ul> <li>A\u00f1adir el nuevo campo en la vista formulario, por ejemplo</li> <li>A\u00f1adir nnuevos permisos correspondientes en el archivo de seguridad para poder acceder al nuevo modelo sprints</li> </ul> ir.model.access.csv <pre><code>id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_gestion_tareas_sergio_tareas_sergio,acceso_tareas_sergio,model_gestion_tareas_sergio_tareas_sergio,base.group_user,1,1,1,1\naccess_gestion_tareas_sergio_sprints_sergio,acceso_sprints_sergio,model_gestion_tareas_sergio_sprints_sergio,base.group_user,1,1,1,1\n</code></pre> <p>Probamos y observamos que ya tenemos el nuevo campo, ya podemos seleccionar e incluso crear nuevos sprints desde aqui aunque no tenemos vistas del modelo.</p> <p>Vamos a configurar para que aparezca en el men\u00fa el nuevo modelo al igual que lo hace el modelo de tareas observaremos que si no definimos vistas entonces Odoo mostrar\u00e1 las vistas por defecto, y si quieremos cambiar algo en estas vistas, simplemetne las definimos..</p>"},{"location":"4_2_EjemploCamposBasicos/#campos-relacionales-one2many","title":"Campos relacionales: One2many","text":"<p>La relaci\u00f3n One2many (uno a muchos) es un concepto fundamental en bases de datos y frameworks como Odoo. Este tipo de relaci\u00f3n indica que un registro de un modelo puede estar vinculado a m\u00faltiples registros de otro modelo. Por ejemplo, una factura (modelo padre) puede tener varias l\u00edneas de factura (modelo hijo). En la pr\u00e1ctica, esto nos permite a partir de un registro detalle, obtener todos los registros que apunta a este., o sea, que se crea un un campo especial que permite asociar una lista de registros hijos al registro padre.</p> <p>En Odoo, el campo <code>One2many</code> se define especificando el modelo relacionado y el campo inverso que conecta ambos modelos. Esto facilita la navegaci\u00f3n y gesti\u00f3n de datos relacionados, permitiendo mostrar, agregar o eliminar registros hijos directamente desde el formulario del registro padre. Esta relaci\u00f3n es clave para estructurar datos complejos y mantener la integridad referencial dentro de la aplicaci\u00f3n.</p> <p>Vamos a crear la relaci\u00f3n inversa a la creada anteriormente, mediante la creaci\u00f3n de un nuevo campo en el modelo <code>sprint</code> que se llame por ejemplo <code>tareas</code> que ser\u00e1 de tipo  <code>One2many</code> como sigue:</p> <pre><code>tareas = fields.One2many('gestion_tareas_sergio.tareas_sergio', 'sprins', string='Tareas')\n</code></pre> <p>La l\u00ednea anterior define un campo llamado <code>tareas</code>  de tipo <code>One2many</code>, lo que significa que permite asociar m\u00faltiples registros del modelo <code>'gestion_tareas_sergio.tareas_sergio'</code>, utilizando el campo inverso <code>'sprins'</code> en el modelo de tareas para establecer la relaci\u00f3n. El campo inverso es necesario e imprescidible y es el campo que ha creado la relaci\u00f3n <code>Many2one</code> en el modelo indicado.</p> <p>El par\u00e1metro <code>string='Tareas'</code> especifica la etiqueta que se mostrar\u00e1 en la interfaz de usuario para este campo. </p> <p>Gracias a esta definici\u00f3n, desde el formulario del modelo principal (por ejemplo, un sprint), se pueden visualizar y gestionar todas las tareas relacionadas, facilitando la administraci\u00f3n de la informaci\u00f3n y la navegaci\u00f3n entre registros vinculados.</p> <p>Veamos a continuaci\u00f3n un ejemplo de uso de esta relaci\u00f3n: </p> Ejemplo de relaci\u00f3n One2many"},{"location":"4_2_EjemploCamposBasicos/#campos-relacionales-many2many","title":"Campos relacionales: Many2many","text":"<p>Los campos relacionales Many2many permiten establecer una relaci\u00f3n de muchos a muchos entre dos modelos en una base de datos o framework como Odoo. Esto significa que un registro de un modelo puede estar vinculado a varios registros de otro modelo, y viceversa. Por ejemplo, un estudiante puede estar inscrito en varios cursos, y cada curso puede tener varios estudiantes asociados.</p> <p>En Odoo, el campo <code>Many2many</code> se utiliza para crear este tipo de relaci\u00f3n, facilitando la gesti\u00f3n y visualizaci\u00f3n de datos complejos donde la asociaci\u00f3n entre registros es m\u00faltiple en ambos sentidos. Este campo suele representarse en la interfaz de usuario mediante listas o tablas donde se pueden seleccionar y gestionar f\u00e1cilmente los registros relacionados.</p> <p>Para nuestro utilizar este tipo de relaciones en nuestro ejemplo, supongamos que definimos un modelo que sea Tecnolog\u00edas de forma que podamos establecer un listado de las diferentes tecnolog\u00edas que pueden aplicarse a un proyecto, por ejemplo python, java, javascript, etc... De esta forma un proyecto puede implementarse usando muchas tecnolog\u00edas y cada tecnolog\u00eda puede ser usada en muchos proyectos.</p> <p>Vamos pues a crar un modelo \"Tecnolog\u00eda\" que tenga los siguientes campos:</p> <ul> <li>nombre</li> <li>descripci\u00f3n</li> <li>logo: donde incluiremos el logotipo de la tecnolog\u00eda, y as\u00ed comprobamos como funciona un tampo de tipo imagen. Busca informaci\u00f3n y crea un campo imagen de 200x200 pixel m\u00e1ximo.</li> </ul> nuevo modelo tecnolog\u00eda en models.py <pre><code>class tecnologias_sergio(models.Model):\n  _name = 'gestion_tareas_sergio.tecnologias_sergio'\n  _description = 'gestion_tareas_sergio.tecnologias_sergio'\n\n  name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre de la tecnolog\u00eda\")\n  descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n de la tecnolog\u00eda\")\n  logo = fields.image(string=\"Logo\", help=\"Logo de la tecnolog\u00eda\", max_width=256, max_height=256)\n</code></pre> <p>y ahora creamos campos en tareas y tecnolog\u00edas para generar la relaci\u00f3n muchos a muchos.</p> <p>Para asociar tareas y tecnolog\u00edas, a\u00f1adiimos en <code>tareas</code>:</p> <pre><code>    rel_tecnologias = fields.Many2many( \n        comodel_name='gestion_tareas_sergio.tecnologias_sergio',\n        relation='relacion_tareas_tecnologias',\n        column1='rel_tareas',\n        column2='rel_tecnologias',\n        string='Tecnolog\u00edas')\n</code></pre> <p>donde se define un campo llamado <code>rel_tecnologias</code> utilizando el tipo de campo <code>Many2many</code> siendo los parametros utilizados los siguientes:</p> <ul> <li>comodel_name: indica el modelo con el que se realiza la relaci\u00f3n muchos a muchos, en nuestro caso <code>'gestion_tareas_sergio.tecnologias_sergio'</code> .</li> <li>relation, <code>'relacion_tareas_tecnologias'</code>, indica el nombre de la tabla intermedia que se utilizar\u00e1 en la base de datos para gestionar la relaci\u00f3n entre tareas y tecnolog\u00edas. </li> <li>column1 y column1: <code>'rel_tareas'</code> y <code>'rel_tecnologias'</code>, especifican los nombres de las columnas en la tabla intermedia que referencian a cada uno de los modelos relacionados.</li> <li>El par\u00e1metro <code>string='Tecnolog\u00edas'</code> define la etiqueta que se mostrar\u00e1 en la interfaz de usuario para este campo. </li> </ul> <p>Para comprobar que funciona, realizamos los pasos de siempre:</p> <ul> <li>Incluimos el nuevo modelo en el fichero de seguridad</li> <li>A\u00f1adimos el nuevo campo en la vista</li> <li>A\u00f1adimos un men\u00fa y un action para poder acceder directamente. </li> <li>Reiniciamos y actualizamos.</li> </ul> <p>widgets</p> <p>Al a\u00f1adir el campo en la vista, podemos hacerlo de forma habitual</p> <pre><code>&lt;field name=\"rel_tecnologias\"/&gt;\n</code></pre> <p>o podemos indicar que queremos un widget especifico de visualizaci\u00f3n, en este uno que nos permite ver cada tecnolog\u00eda como un tag</p> <pre><code>&lt;field name=\"rel_tecnologias\" widget=\"many2many_tags\"/&gt;\n</code></pre> <p>Comprueba la diferencia entre ambos</p> <p>PONER ENLACE DE WIDGETS A LOS APUNTES DE CASTILLO QUE EXPLICAN MUY BIEN LOS WIDGETS</p> <p>Y en <code>tecnolog\u00edas</code> hacemos exactamente lo mismo, pero apuntanto a tareas:</p> <pre><code>    rel_tareas = fields.Many2many( \n        comodel_name='gestion_tareas_sergio.tareas_sergio',\n        relation_name='relacion_tareas_tecnologias',\n        column1='rel_tecnologias',\n        column2='rel_tareas',\n        string='Tareas')\n</code></pre> <p>Gracias a esta configuraci\u00f3n, es posible seleccionar y gestionar f\u00e1cilmente las tecnolog\u00edas asociadas a una tarea desde el formulario correspondiente, permitiendo una administraci\u00f3n flexible y eficiente de las relaciones entre tareas y tecnolog\u00edas.</p>"},{"location":"4_3_EjemploCamposComputados/","title":"4.3. Campos b\u00e1sicos computados.","text":"<p>En esta secci\u00f3n se abordar\u00e1 la creaci\u00f3n de campos computados en Odoo, es decir, aquellos campos cuyo valor no es introducido manualmente por el usuario, sino que se determina autom\u00e1ticamente en funci\u00f3n de otros atributos del modelo. Este tipo de campos resulta fundamental para mantener la integridad y coherencia de los datos, as\u00ed como para automatizar procesos dentro del sistema.</p>"},{"location":"4_3_EjemploCamposComputados/#creacion-de-un-campo-computado-sin-almacenamiento-en-la-base-de-datos","title":"Creaci\u00f3n de un campo computado sin almacenamiento en la base de datos","text":"<p>Como primer ejemplo, se proceder\u00e1 a la definici\u00f3n de un campo computado denominado <code>codigo</code>, de tipo <code>char</code>. Por defecto, un campo de este tipo ser\u00eda editable por el usuario, pero en este caso se configurar\u00e1 para que su valor sea calculado mediante una funci\u00f3n espec\u00edfica, por ejemplo, <code>get_codigo</code>.</p> <p>La funci\u00f3n encargada del c\u00e1lculo debe implementarse dentro del mismo modelo. Por convenci\u00f3n, esta funci\u00f3n recibe una colecci\u00f3n de registros (instancias del modelo), lo que permite operar sobre m\u00faltiples elementos de manera eficiente.</p> <p>A continuaci\u00f3n se muestra un ejemplo de implementaci\u00f3n:</p> <pre><code># nuevo campo con el c\u00f3digo de tarea (computado)\ncodigo = fields.Char(compute=\"_get_codigo\") \n\n# Funci\u00f3n del calculo de c\u00f3digo de la tarea\ndef _get_codigo(self):\n    for tarea in self:\n        # Si la tarea no tiene un sprint asignado le asignamos como nombre TSK_ mas nombre tarea\n        if len(tarea.sprint) == 0:\n            tarea.code = \"TSK_\"+str(tarea.id)\n        else:\n            # si no, le generamos un nombre tarea a partir del nombre del sprint\n            tarea.code = str(tarea.sprint.name).upper()+\"_\"+str(tarea.id)\n</code></pre> <p>En este fragmento de c\u00f3digo, se genera un valor \u00fanico para el campo <code>codigo</code> utilizando la clave primaria (<code>id</code>) del registro. Si la tarea no tiene un sprint asociado, el c\u00f3digo generado ser\u00e1 de la forma <code>TSK_&lt;id&gt;</code>. En caso contrario, se utilizar\u00e1 el nombre del sprint en may\u00fasculas seguido del identificador.</p> <p>Nota</p> <p>El campo <code>id</code> es la clave primaria generada autom\u00e1ticamente en todos los modelos de Odoo tal y como se puede ver si revisamos la tablas creadas en PostgreSQL de cada modelo</p> <p>Este campo computado no se almacena en la base de datos; su valor se recalcula din\u00e1micamente cada vez que se visualiza el registro y para visualizar el campo en el formulario, debe a\u00f1adirse expl\u00edcitamente en la vista.</p> <p>Un buen ejercicio ser\u00eda revisar la tabla asociada al modelo en la base de datos para comprobar estos datos.</p> <p>De esta forma, una vez funcione, al crear una nueva tarea sin sprint, el sistema generar\u00e1 autom\u00e1ticamente el c\u00f3digo. Si posteriormente se asigna un sprint y se guarda el registro, el c\u00f3digo se actualizar\u00e1 en funci\u00f3n del nuevo valor.</p>"},{"location":"4_3_EjemploCamposComputados/#campo-calculado-con-almacenamiento-y-dependencias","title":"Campo calculado con almacenamiento y dependencias","text":"<p>En situaciones m\u00e1s complejas, puede ser necesario definir campos computados cuyo valor se almacene en la base de datos y que dependan de otros atributos. Este enfoque es \u00fatil cuando el c\u00e1lculo es costoso o cuando se requiere que el valor est\u00e9 disponible para b\u00fasquedas o filtrados.</p> <p>Supongamos que en el modelo <code>Sprint</code> lo definimos de forma diferente y que tenemos los campos <code>fecha_ini</code> y <code>duracion</code> pero no el <code>fecha_fin</code>. Podr\u00edamos a\u00f1adir como un campo adicional <code>fecha_fin</code>, de tipo <code>Datetime</code>, cuyo valor se calcular\u00e1 autom\u00e1ticamente en funci\u00f3n de la fecha de inicio y la duraci\u00f3n del sprint. Adem\u00e1s, este valor se almacenar\u00e1 en la base de datos y solo se recalcular\u00e1 cuando cambien los campos de los que depende.</p> <p>La implementaci\u00f3n ser\u00eda la siguiente:</p> <pre><code>from datetime import timedelta\n\nclass spints_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.sprints_sergio'\n\n    name = fields.Char()\n    fecha_ini = fields.Datetime()\n    duracion = fields.Integer(string=\"Duracion\", help=\"Cantidad de d\u00edas que tiene asignado el sprint\")\n    fecha_fin = fields.Datetime(compute='_compute_fecha_fin', store=True)\n\n    @api.depends('fecha_fin', 'duracion')\n    def _compute_fecha_fin(self):\n        for sprint in self:\n            if sprint.fecha_ini and sprint.duracion &gt; 0:\n                sprint.fecha_fin = sprint.fecha_ini + timedelta(days=sprint.duracion)\n            else:\n                sprint.fecha_fin = sprint.fecha_ini\n</code></pre> <p>Aspectos clave de la implementaci\u00f3n: </p> <ul> <li>El decorador <code>@api.depends('fecha_ini', 'duracion')</code> indica que el campo <code>fecha_fin</code> se recalcular\u00e1 \u00fanicamente cuando se modifiquen los campos <code>fecha_ini</code> o <code>duracion</code>.</li> <li>El par\u00e1metro <code>store=True</code> en la definici\u00f3n del campo permite que el valor calculado se almacene en la base de datos, facilitando su uso en b\u00fasquedas y vistas.</li> <li>Si alguno de los campos requeridos no est\u00e1 definido, el campo <code>fecha_fin</code> tomar\u00e1 el valor de <code>fecha_ini</code> como valor por defecto.</li> <li>En el c\u00f3digo anterior se han omitido l\u00edneas por simplicidad</li> <li>Puesto que se utiliza la funi\u00f3n <code>timedelta</code> de python se ha importado el m\u00f3dulo que la contiene.</li> </ul> <p>Tras actualizar el m\u00f3dulo y la vista correspondiente, al crear un sprint y asignar una duraci\u00f3n y una fecha de inicio, la fecha de fin se calcular\u00e1 autom\u00e1ticamente y quedar\u00e1 almacenada en la base de datos.</p> <p>Cuidado si se obtienen errores extra\u00f1os</p> <p>Hay ocasiones en que los cambios en los modelos afectan a la base de datos y al reiniciar el servicio, el ORM no se refresca bien debido a inconsistencias en la base de datos, por lo que la \u00fanica soluci\u00f3n es eliminar toda la base de datos, con lo que perdemos los datos. </p> <p>Para eliminar la base de datos, lo hacemos eliminando datos desde docker</p> <pre><code>docker compose down -v\n</code></pre> Ejemplo funcionamiento de campo calculado <p>Importante</p> <p>El uso de campos computados almacenados es recomendable cuando el c\u00e1lculo es costoso o cuando se requiere que el valor est\u00e9 disponible para operaciones de filtrado o agrupamiento en las vistas de Odoo.</p>"},{"location":"4_4_EjemploExcepcionesMensajes/","title":"4.4. Lanzar excepciones y a\u00f1adir mensajes de log.","text":"<p>En este apartado se aborda el manejo de excepciones y la gesti\u00f3n de mensajes de log en Odoo, aspectos fundamentales para garantizar la robustez y mantenibilidad del c\u00f3digo. Se explicar\u00e1 c\u00f3mo lanzar excepciones de manera controlada y c\u00f3mo registrar informaci\u00f3n relevante en el log, utilizando los distintos niveles de severidad que ofrece el framework.</p>"},{"location":"4_4_EjemploExcepcionesMensajes/#manejo-de-excepciones-en-odoo","title":"Manejo de excepciones en Odoo","text":"<p>Odoo proporciona un conjunto de excepciones espec\u00edficas que permiten gestionar errores de forma estructurada. Para profundizar en este tema, se recomienda consultar la documentaci\u00f3n oficial de Odoo sobre gesti\u00f3n de errores.</p> <p>Siguiendo con nuestro ejemplo, supongamos que sobre el campo calculado <code>codigo</code> que genera un identificador \u00fanico para cada tarea, dependiendo del valor del atributo <code>sprint</code>. Es posible que durante la generaci\u00f3n de este c\u00f3digo se produzca un error, por lo que resulta conveniente capturar la excepci\u00f3n y notificar al usuario de manera adecuada.</p> <p>Primero, es necesario importar la excepci\u00f3n correspondiente en el fichero de modelos <code>models.py</code>:</p> <pre><code>from odoo.exceptions import ValidationError\n</code></pre> <p>A continuaci\u00f3n, se recomienda envolver la l\u00f3gica de generaci\u00f3n del c\u00f3digo en un bloque <code>try-except</code>, lanzando una excepci\u00f3n de validaci\u00f3n en caso de error:</p> <pre><code># L\u00f3gica para generar el campo code con excepciones\ntry:\n    # Si no tiene sprint asignado, directamente generamos un error\n    if not self.sprint:\n        raise ValueError(\"El campo 'sprint' es obligatorio para generar el c\u00f3digo.\")\n    # si no, le generamos un nombre tarea a partir del nombre del sprint\n    tarea.codigo = str(tarea.sprint.name).upper()+\"_\"+str(tarea.id)\n\nexcept Exception as e:\n    raise ValidationError(f\"Error al generar el c\u00f3digo: {str(e)}\")\n</code></pre> <p>Nota</p> <p>El uso de excepciones espec\u00edficas, como <code>ValidationError</code>, permite mostrar mensajes claros al usuario y facilita la depuraci\u00f3n del c\u00f3digo.</p> Mensaje de excepci\u00f3n por validaci\u00f3n <p>Si se desea forzar una excepci\u00f3n para fines de prueba, puede intentarse acceder a un campo inexistente o provocar un error deliberado. Al crear una tarea, se mostrar\u00e1 el mensaje de validaci\u00f3n definido.</p> <p>Por ejemplo si cambiamos la l\u00ednea </p> <pre><code>    tarea.codigo = str(tarea.sprint.name).upper()+\"_\"+str(tarea.id)\n</code></pre> <p>por </p> <pre><code>    tarea.codigo = str(tarea.sprint.name).upper()+\"_\"+str(tarea.id_)\n</code></pre> <p>introduciendo el campo <code>id_</code> que efectivamente no existe, entonces tambi\u00e9n generamos un error. </p> Mensaje de excepci\u00f3n por un error <p>Seguro que durante el desarrollo de este m\u00f3dulo, no hemos encontrado con errores que podr\u00edamos haber capturado de forma adecuada.</p>"},{"location":"4_4_EjemploExcepcionesMensajes/#gestion-de-mensajes-de-log","title":"Gesti\u00f3n de mensajes de log","text":"<p>El registro de mensajes en el log es esencial para el seguimiento y diagn\u00f3stico de la aplicaci\u00f3n. Odoo utiliza el m\u00f3dulo est\u00e1ndar de Python <code>logging</code>, que permite definir distintos niveles de severidad: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code> y <code>ERROR</code>.</p> <p>Para utilizar el sistema de log, es necesario importar el m\u00f3dulo y crear un logger asociado al m\u00f3dulo actual:</p> <pre><code>import logging\n</code></pre> <p>Crearemos una variable para recoger acceder y recoger los logs</p> <pre><code>_logger = logging.getLogger(__name__)\n</code></pre> <p>Con esto se crea una instancia de un logger utilizando el m\u00f3dulo est\u00e1ndar <code>logging</code> de Python. La funci\u00f3n <code>getLogger(__name__)</code> obtiene un logger con el nombre del m\u00f3dulo actual, lo que permite identificar f\u00e1cilmente de d\u00f3nde provienen los mensajes de registro (logs) en aplicaciones grandes.</p> <p>Al asignar este logger a la variable <code>_logger</code>, se puede utilizar en el resto del c\u00f3digo para registrar mensajes de diferentes niveles (informaci\u00f3n, advertencia, error, etc.), facilitando la depuraci\u00f3n y el seguimiento del comportamiento de la aplicaci\u00f3n. Esta es una pr\u00e1ctica com\u00fan para mantener un registro estructurado y claro de los eventos que ocurren durante la ejecuci\u00f3n del programa.</p> <p>A continuaci\u00f3n, se pueden registrar mensajes en el log seg\u00fan el nivel deseado:</p> <pre><code>_logger.debug(\"Mensaje de depuraci\u00f3n\")\n_logger.info(\"Mensaje informativo\")\n_logger.warning(\"Mensaje de advertencia\")\n_logger.error(\"Mensaje de error\")\n</code></pre> <p>Nota</p> <p>Los mensajes de nivel <code>DEBUG</code> solo ser\u00e1n visibles si el nivel de log est\u00e1 configurado adecuadamente en el archivo de configuraci\u00f3n de Odoo.</p> <p>Por ejemplo, para habilitar el nivel de depuraci\u00f3n, a\u00f1ada la siguiente l\u00ednea en el archivo de configuraci\u00f3n (<code>odoo.conf</code>):</p> <pre><code>log_level = debug\n</code></pre> <p>Tras modificar la configuraci\u00f3n, reinicie el servicio de Odoo para aplicar los cambios.</p> <p>En entornos de desarrollo, el archivo de log suele estar mapeado a un directorio local mediante Docker Compose, lo que facilita su consulta y an\u00e1lisis.</p>"},{"location":"4_4_EjemploExcepcionesMensajes/#conclusiones","title":"Conclusiones","text":"<p>El manejo adecuado de excepciones y la correcta gesti\u00f3n de mensajes de log son pr\u00e1cticas recomendadas en el desarrollo de m\u00f3dulos para Odoo. Permiten detectar y resolver errores de manera eficiente, as\u00ed como mantener un registro detallado del comportamiento de la aplicaci\u00f3n, contribuyendo as\u00ed a la calidad y mantenibilidad del software.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/","title":"4.5. Campos computados relacionales","text":"<p>En este apartado se abordar\u00e1 el desarrollo de campos computados relacionales en Odoo, utilizando como ejemplo un m\u00f3dulo de gesti\u00f3n de proyectos de software que estamos desarrollando. </p> <p>El objetivo es mostrar, de manera estructurada y formal, c\u00f3mo modelar entidades y relaciones, as\u00ed como implementar campos computados tanto de tipo <code>Many2one</code> como <code>Many2many</code>.</p> <p>Los campos computados relacionales resultan fundamentales en Odoo cuando se requiere que ciertos datos se mantengan actualizados de forma autom\u00e1tica en funci\u00f3n de la informaci\u00f3n relacionada en otros modelos. Por ejemplo, permiten que un campo refleje siempre el estado m\u00e1s reciente de una relaci\u00f3n, sin necesidad de intervenci\u00f3n manual.</p> <p>En el contexto de la gesti\u00f3n de proyectos, estos campos facilitan la automatizaci\u00f3n de procesos como la asignaci\u00f3n de sprints a tareas o la recopilaci\u00f3n de tecnolog\u00edas utilizadas en una historia de usuario. As\u00ed, se reduce el riesgo de errores y se mejora la coherencia de los datos, ya que la informaci\u00f3n se actualiza din\u00e1micamente conforme cambian las relaciones entre los distintos modelos.</p> <p>Adem\u00e1s, los campos computados relacionales contribuyen a simplificar la l\u00f3gica de negocio y la experiencia de usuario, ya que presentan informaci\u00f3n relevante de manera centralizada y siempre actualizada, sin requerir acciones adicionales por parte de los usuarios.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#diseno-y-situacion-actual-modelos-y-relaciones","title":"Dise\u00f1o y situaci\u00f3n actual: Modelos y relaciones","text":"<p>Hasta este punto, el m\u00f3dulo cuenta con los siguientes modelos principales:</p> <ul> <li>Tarea</li> <li>Sprint</li> <li>Tecnolog\u00eda</li> </ul> <p>Las relaciones existentes son:</p> <ul> <li>Una tarea est\u00e1 relacionada con un sprint mediante una relaci\u00f3n <code>Many2one</code>.</li> <li>Una tarea puede estar asociada a varias tecnolog\u00edas mediante una relaci\u00f3n <code>Many2many</code>.</li> <li>Un sprint puede contener varias tareas (<code>One2many</code>).</li> <li>Una tecnolog\u00eda puede estar asociada a varias tareas (<code>Many2many</code>).</li> </ul> <p>Adem\u00e1s tambi\u00e9n tenemos campos computados como: </p> <ul> <li>El campo <code>codigo</code> en tareas en generado autom\u00e1ticamente mediante la funci\u00f3n <code>_get_codigo</code>.</li> <li>El campo <code>fecha_fin</code> en sprints, calculado a partir de la funci\u00f3n <code>_compute_fecha_fin</code>.</li> </ul>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#nuevos-modelos-y-relaciones-permisos-y-vistas","title":"Nuevos modelos y relaciones, permisos y vistas","text":"<p>Vamos a avanzar en la creaci\u00f3n de un m\u00f3dulo para gestionar el desarrollo de software mediante una metodolog\u00eda Scrum</p> <p>Metodolog\u00eda \u00e1gil scrum</p> <p>En la metodolog\u00eda Scrum, un proyecto se organiza en ciclos cortos llamados sprints, durante los cuales se desarrollan incrementos funcionales del producto. El trabajo a realizar se descompone en historias de usuario, que representan funcionalidades o requisitos desde la perspectiva del usuario final. Cada historia de usuario puede dividirse en tareas m\u00e1s peque\u00f1as y manejables, que son asignadas al equipo durante el sprint. </p> <p>De este modo, Scrum facilita la planificaci\u00f3n iterativa, la adaptaci\u00f3n continua y la entrega incremental de valor, asegurando que el equipo mantenga el enfoque en los objetivos del proyecto y pueda responder r\u00e1pidamente a los cambios en los requisitos.</p> <p>M\u00e1s info: Flowlu: Gu\u00eda Paso a Paso para Proyectos y Sprints \u00c1giles</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#nuevos-modelos-y-sus-relaciones","title":"Nuevos modelos y sus relaciones","text":"<p>Para enriquecer el modelo de datos y adaptarlo a una gesti\u00f3n de proyectos basada en metodolog\u00edas \u00e1giles (por ejemplo, Scrum), se a\u00f1aden los siguientes modelos:</p> <ul> <li> <p>Proyecto (<code>Proyextos</code>): Representa un proyecto de software. Incluye campos como nombre y descripci\u00f3n, y est\u00e1 asociado a un conjunto de historias de usuario.</p> <ul> <li>Nombre (<code>name</code>)</li> <li><code>Descripci\u00f3n</code></li> <li><code>Historias</code>: (Se define a continuaci\u00f3n qu\u00e9 es una historia). Cada historia tiene un proyecto, pero un proyecto tiene muchas historias. (<code>One2many</code>)</li> </ul> </li> </ul> <p>Relaci\u00f3n Proyecto - Historias (One2Many)</p> <pre><code>              +-------------------+      (One2many)      +-----------------------+\n              |     Proyecto      |---------------------&gt;|   Historia Usuario    |\n              +-------------------+                      +-----------------------+\n</code></pre> <p>Si tenemos una relaci\u00f3n One2many del modelo que estamos definiendo con otro modelo, a la hora de impementar la relaci\u00f3n, ponemos lo mismo: One2many</p> <pre><code>historias = fields.One2many(\n    'gestion_tareas_sergio.proyectos_sergio',   # Modelo con el que nos relacionamos\n    'proyectos')                                # Campo del modelo que tendr\u00e1 el Many2one\n</code></pre> <ul> <li> <p>Historia de Usuario (<code>Historias</code>): Cada historia de usuario pertenece a un proyecto y puede estar asociada a varias tareas.</p> <ul> <li>Nombre (<code>name</code>)</li> <li><code>descripci\u00f3n</code></li> <li><code>proyecto</code>: Relaci\u00f3n con proyectos. Un proyecto tiene muchas historias y cada historia tiene un proyecto (<code>Many2one</code>)</li> <li><code>tareas</code>: Relaci\u00f3n con tareas. Una historia tiene muchos tareas y cada tarea tiene un proyecto (<code>One2many</code>)</li> </ul> </li> <li> <p>Tareas: A\u00f1adimos la relaci\u00f3n inversa con Historias:</p> <ul> <li><code>historia</code>: Una tarea pertenece a una historia de usuario y una historia tiene muchas tareas (<code>Many2one</code>).</li> </ul> </li> </ul> <p>Vamos a crear estas tablas y establecer las relaciones.</p> models.py <pre><code># *******************************************************\n# PROYECTOS\nclass proyectos_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.proyectos_sergio'\n    _description = 'gestion_tareas_sergio.proyectos_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre del proyecto\")\n    descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n del proyecto\")\n    historias_om = fields.One2many( 'gestion_tareas_sergio.historias_sergio', 'proyecto_mo', string='Historias de Usuario')\n\n\n\n# *******************************************************\n# HISTORIAS DE USUARIO\nclass historias_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.historias_sergio'\n    _description = 'gestion_tareas_sergio.historias_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre de la historia de usuario\")\n    descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n de la hisoria de usuario\")\n    proyecto_mo = fields.Many2one( 'gestion_tareas_sergio.proyectos_sergio', string='Poryecto')\n    tareas_om = fields.One2many( 'gestion_tareas_sergio.tareas_sergio', 'historia_mo', string='Tareas')\n\n# *******************************************************\n# TAREAS\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    _description = 'gestion_tareas_sergio.tareas_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre\")\n\n    historia_mo = fields.Many2one( 'gestion_tareas_sergio.historias_sergio', string='Historias de usuario')\n</code></pre> <p>Nota</p> <p>Ya que estamos modificando modelos, vamos a eliminar el campo <code>fecha_creacion</code> de los modelos, ya que Odoo crea autom\u00e1ticamente un campo de fecha de creaci\u00f3n para cada registro.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#seguridad-vistas-acciones-y-menu","title":"Seguridad, vistas, acciones y men\u00fa","text":"<p>Una vez realizadas todas las modificaciones y comprobado que todo funciona correctamente, se deben actualizar los permisos para los nuevos modelos y modificar y/o crear vistas de formulario si procede facilitar la gesti\u00f3n de proyectos e historias de usuario. Adem\u00e1s, se a\u00f1aden acciones de ventana y opciones de men\u00fa para acceder a estos modelos desde la interfaz de Odoo.</p> <p>Intenta completar todos los cambios sin ver la soluci\u00f3n que se va publicando.... </p> ir.model.access.csv <pre><code>id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\n. . . \naccess_gestion_tareas_sergio_proyectos_sergio,acceso_proyectos_sergio,model_gestion_tareas_sergio_proyectos_sergio,base.group_user,1,1,1,1\naccess_gestion_tareas_sergio_historias_sergio,acceso_historias_sergio,model_gestion_tareas_sergio_historias_sergio,base.group_user,1,1,1,1\n</code></pre> views.xml <pre><code>&lt;!-- explicit FORM view definition --&gt;\n&lt;record model=\"ir.ui.view\" id=\"tareas_form\"&gt;\n  &lt;field name=\"name\"&gt;gestion_tareas_sergio.tareas_sergio.form&lt;/field&gt;\n  &lt;field name=\"model\"&gt;gestion_tareas_sergio.tareas_sergio&lt;/field&gt;\n  &lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;form&gt;\n      &lt;sheet&gt;\n        &lt;group&gt;\n          &lt;field name=\"codigo\"/&gt;\n          &lt;field name=\"name\"/&gt;\n          &lt;field name=\"descripcion\"/&gt;\n          &lt;field name=\"fecha_ini\"/&gt;\n          &lt;field name=\"fecha_fin\"/&gt;\n          &lt;field name=\"finalizado\"/&gt;\n          &lt;field name=\"sprint\"/&gt;\n          &lt;field name=\"rel_tecnologias\" widget=\"many2many_tags\"/&gt;\n          &lt;field name=\"historia_mo\"/&gt;\n        &lt;/group&gt;\n      &lt;/sheet&gt;\n    &lt;/form&gt;\n  &lt;/field&gt;\n&lt;/record&gt;\n\n&lt;!-- actions opening views on models --&gt;\n&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_proyectos\"&gt;\n  &lt;field name=\"name\"&gt;Gestion Tareas Sergio Proyectos&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;gestion_tareas_sergio.proyectos_sergio&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n&lt;/record&gt;\n\n&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_historias\"&gt;\n  &lt;field name=\"name\"&gt;Gestion Tareas Sergio Historias de Usuarios&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;gestion_tareas_sergio.historias_sergio&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n&lt;/record&gt;\n\n&lt;!-- actions --&gt;\n&lt;menuitem name=\"Proyectos\" id=\"gestion_tareas_sergio.gestion_proyectos\" \n  parent=\"gestion_tareas_sergio.gestion\" \n  action=\"gestion_tareas_sergio.action_proyectos\"/&gt;\n\n&lt;menuitem name=\"Historias de Usuarios\" id=\"gestion_tareas_sergio.gestion_historias\" \n  parent=\"gestion_tareas_sergio.gestion\" \n  action=\"gestion_tareas_sergio.action_historias\"/&gt;\n</code></pre> <p>Ten en cuenta que en este c\u00f3digo se omite la parte que no se ha modificado</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#campos-computados-relacionales","title":"Campos computados relacionales","text":"<p>Una vez ya tenemos ampliado nuestro m\u00f3dulo con nuevos modelos, ahora vamos a platear una realaciones mas avanzadas entre estos modelos.</p> <p>En concreto vamos a crear vamos a crear dos:</p> <ul> <li>Teniendo en cuenta que los sprints son intervalos de tiempo en los que dividimos nuestro proyecto, y que adem\u00e1s vamos a tener la precauci\u00f3n de que que en cada momento solo tenemos activo un sprint, una tarea puede pertenecer a un sprint en un momento determinado y un tiempo m\u00e1s tarde, si la tarea no se ha finalizado puede pertenecer a otro sprint, esto se puede conseguir calculando en cada momento el sprint que tenemos abierto en un proyecto determinado y las tareas que tenemos asociado a ese proyecto mediante las diferentes historias de usuario.</li> <li>Por otra parte, podemos asociar las diferentes tecnolog\u00edas que se usan en cada Historia de Usuario teniendo en cuenta que las tecnolog\u00edas estan asociadas a las tareas, y a su vez, las tareas a las historias. De esta forma, podemos calcular qu\u00e9 tecnolog\u00edas se utilizan en las diferentes tareas asociadas a cada Historia de Usuario de forma autom\u00e1tica.</li> </ul> <p>Veamos c\u00f3mo implementamos todo esto a continuaci\u00f3n.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#campo-computado-relacional-many2one-para-sprint","title":"Campo computado relacional <code>Many2one</code> para Sprint","text":"<p>Se implementa un campo computado que asocia autom\u00e1ticamente una tarea al sprint abierto correspondiente, en funci\u00f3n de la fecha actual y el proyecto al que pertenece la historia de usuario.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#ejemplo-de-implementacion","title":"Ejemplo de implementaci\u00f3n","text":"<pre><code>class tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    . . .\n    sprint_moc = fields.Many2one('gestion_tareas_sergio.sprints_sergio', string='Sprint', compute='_compute_sprint', store=True)\n\n    # @api.depends('codigo')\n    @api.depends('fecha_ini', 'fecha_fin', 'historia_mo')\n    def _compute_sprint(self):\n        for tarea in self:\n            tarea.sprint_moc = False\n            if tarea.historia_mo and tarea.historia_mo.proyecto_mo:\n                sprints = self.env['gestion_tareas_sergio.sprints_sergio'].search([('proyecto_om.id', '=', tarea.historia_mo.proyecto_mo.id)])\n                if sprints: \n                    for sprint in sprints:\n                        if isinstance(sprint.fecha_fin, datetime) and sprint.fecha_fin &gt; datetime.now():\n                            tarea.sprint_moc = sprint.id\n</code></pre> <p>El campo <code>sprint_moc</code> es un campo relacional de tipo <code>Many2one</code> que enlaza cada tarea con un sprint del modelo <code>gestion_tareas_sergio.sprints_sergio</code>. Este campo es computado, lo que significa que su valor se calcula autom\u00e1ticamente mediante el m\u00e9todo <code>_compute_sprint</code> y se almacena en la base de datos (<code>store=True</code>).</p> <p>El decorador <code>@api.depends('fecha_ini', 'fecha_fin', 'historia_mo')</code> indica que el c\u00e1lculo de <code>sprint_moc</code> depende de los campos <code>fecha_ini</code>, <code>fecha_fin</code> y <code>historia_mo</code>. Cuando alguno de estos campos cambia, se ejecuta el m\u00e9todo <code>_compute_sprint</code>. Tambi\u00e9n podemos decidir que el c\u00e1lculo dependa del c\u00f3digo, con lo cual si cambiamos las fechas de la tarea, no cambiar\u00e1 el sprint. </p> <p>Dentro del m\u00e9todo, para cada tarea, primero se inicializa <code>sprint_moc</code> en <code>False</code>. Luego, si la tarea tiene asociada una historia de usuario (<code>historia_mo</code>) y esta historia est\u00e1 vinculada a un proyecto (<code>proyecto_mo</code>), se buscan todos los sprints relacionados con ese proyecto.</p> <p>Para cada sprint encontrado, se verifica si la fecha de finalizaci\u00f3n (<code>fecha_fin</code>) es un objeto <code>datetime</code> y si es posterior al momento actual. Si se cumple esta condici\u00f3n, se asigna el identificador del sprint a <code>sprint_moc</code>. De este modo, la tarea queda asociada autom\u00e1ticamente al sprint activo m\u00e1s pr\u00f3ximo, facilitando la organizaci\u00f3n y planificaci\u00f3n de las tareas dentro de los sprints del proyecto.</p> <p>Este enfoque automatiza la asignaci\u00f3n del sprint adecuado a cada tarea, facilitando la gesti\u00f3n y organizaci\u00f3n del trabajo en funci\u00f3n de la planificaci\u00f3n temporal de los sprints.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#campo-computado-relacional-many2many-para-tecnologias-usadas","title":"Campo computado relacional <code>Many2many</code> para tecnolog\u00edas usadas","text":"<p>Se crea un campo computado en el modelo de historia de usuario que recopila todas las tecnolog\u00edas utilizadas en las tareas asociadas a dicha historia.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#ejemplo-de-implementacion_1","title":"Ejemplo de implementaci\u00f3n","text":"<pre><code>class historias_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.historias_sergio'\n    . . .\n    tecnologias_mmc = fields.Many2many( \"gestion_tareas_sergio.tecnologias_sergio\", compute=\"_compute_tecnologias\", string=\"Tecnolog\u00edas\")\n\n    def _compute_tecnologias(self):\n        for historias in self:\n            tecnologias = None\n            for tareas in historias.tareas_om:\n                if not tecnologias:\n                    tecnologias = tareas.tecnologias_mm\n                else:\n                    tecnologias = tecnologias + tareas.tecnologias_mm\n            historias.tecnologias_mmc = tecnologias\n</code></pre> <p>El campo <code>tecnologias_mmc</code> es un campo relacional de tipo <code>Many2many</code> que enlaza cada historia con m\u00faltiples tecnolog\u00edas del modelo <code>gestion_tareas_sergio.tecnologias_sergio</code>. Este campo es computado, es decir, su valor se calcula autom\u00e1ticamente mediante el m\u00e9todo <code>_compute_tecnologias</code>.</p> <p>El m\u00e9todo <code>_compute_tecnologias</code> recorre cada registro de historia y, para cada uno, inicializa la variable <code>tecnologias</code> en <code>None</code>. Luego, itera sobre todas las tareas asociadas a la historia (<code>tareas_om</code>). Para cada tarea, si <code>tecnologias</code> a\u00fan no tiene valor, se le asignan las tecnolog\u00edas de la primera tarea; en caso contrario, se suman (concatenan) las tecnolog\u00edas de la tarea actual a las ya acumuladas. Finalmente, el campo <code>tecnologias_mmc</code> de la historia se actualiza con el conjunto total de tecnolog\u00edas recopiladas de todas sus tareas.</p> <p>Este enfoque permite que el campo de tecnolog\u00edas de la historia de usuario refleje autom\u00e1ticamente todas las tecnolog\u00edas utilizadas en sus tareas asociadas, facilitando la consulta y gesti\u00f3n de la informaci\u00f3n relacionada.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#related-campos-relacionales-no-almacenados-en-base-de-datos","title":"Related. Campos relacionales no almacenados en base de datos","text":"<p>Hasta ahora, los campos relacionales que hemos tratado han sido de tipo <code>Many2one</code>, <code>One2many</code> o <code>Many2many</code>, y en ocasiones, campos relacionales computados, es decir, calculados autom\u00e1ticamente mediante c\u00f3digo Python.</p> <p>Sin embargo, existe una situaci\u00f3n particular en la que podemos necesitar un campo relacional que no requiera almacenamiento en la base de datos y que tampoco sea calculado mediante c\u00f3digo Python. Esto ocurre cuando, en un modelo, queremos a\u00f1adir un campo relacional que ya existe en otro modelo y simplemente queremos mostrarlo, sin duplicar la informaci\u00f3n ni crear una nueva relaci\u00f3n en la base de datos.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#ejemplo-de-implementacion_2","title":"Ejemplo de implementaci\u00f3n","text":"<p>Supongamos que tenemos el siguiente escenario:</p> <ul> <li>El modelo Proyecto est\u00e1 relacionado con las Historias de Usuario.</li> <li>Cada Historia de Usuario pertenece a un Proyecto y est\u00e1 asociada a un conjunto de Tareas.</li> <li>Las Tareas est\u00e1n relacionadas con un Sprint, con las Tecnolog\u00edas utilizadas y con la Historia de Usuario a la que pertenecen.</li> </ul> <p>Ahora, imaginemos que queremos que, en el formulario de Tarea, adem\u00e1s de la historia de usuario, se muestre tambi\u00e9n el Proyecto al que pertenece la tarea. Podr\u00edamos crear un campo <code>Many2one</code> directamente en el modelo de tareas, pero esto generar\u00eda una columna adicional en la base de datos, lo cual no es necesario, ya que la relaci\u00f3n ya existe a trav\u00e9s de la historia de usuario.</p> <p>Para resolver esto, Odoo permite definir un campo relacional utilizando el atributo <code>related</code>. De este modo, el campo en el modelo de tareas simplemente referencia el campo <code>proyecto</code> del modelo de historia de usuario, sin necesidad de almacenamiento adicional ni l\u00f3gica de c\u00e1lculo.</p> <p>Por ejemplo:</p> <pre><code>class tareas_sergio(models.Model):\n  _name = 'gestion_tareas_sergio.tareas_sergio'\n  # ...\n  historia_mo = fields.Many2one( 'gestion_tareas_sergio.historias_sergio', string='Historias de usuario')\n  # Nuevo campo que relaciona directamente con el proyecto a partir de la historia de usuario\n  proyecto_no = fields.Many2one(\n      'gestion_tareas_sergio.proyectos_sergio',\n      string='Proyecto',\n      related='historia_mo.proyecto_mo',\n      readonly=True)\n</code></pre> <p>En este caso, el campo <code>proyecto_no</code> en el modelo de tareas obtiene autom\u00e1ticamente el proyecto asociado a la historia de usuario seleccionada. Adem\u00e1s, al establecer <code>readonly=True</code>, evitamos que el usuario pueda modificar este valor manualmente.</p> <p>Para que este campo sea visible en el formulario de tareas, basta con a\u00f1adirlo a la vista correspondiente:</p> <pre><code>&lt;field name=\"proyecto_no\"/&gt;\n</code></pre> <p>De este modo, cuando se seleccione una historia de usuario en una tarea, el campo de proyecto se actualizar\u00e1 autom\u00e1ticamente mostrando el valor correspondiente, sin que el usuario pueda modificarlo.</p> Asignaci\u00f3n autom\u00e1tica de proyecto <p>Este tipo de campos relacionales son \u00fatiles cuando queremos mostrar informaci\u00f3n relacionada sin duplicar datos ni realizar c\u00e1lculos adicionales. Utilizando el atributo <code>related</code>, podemos mantener la integridad y simplicidad del modelo de datos, facilitando la navegaci\u00f3n y consulta de informaci\u00f3n en la interfaz de Odoo.</p>"},{"location":"4_5_EjemploCamposComputadosRelacionales/#conclusiones","title":"Conclusiones","text":"<p>En este apartado se ha mostrado c\u00f3mo crear campos computados relacionales en Odoo, tanto para relaciones <code>Many2one</code> como <code>Many2many</code>. Adem\u00e1s, se ha ampliado la estructura del m\u00f3dulo para incluir proyectos e historias de usuario, permitiendo una gesti\u00f3n m\u00e1s completa y alineada con metodolog\u00edas \u00e1giles como Scrum.</p> <p>La estructura resultante permite:</p> <ul> <li>Gestionar m\u00faltiples proyectos, cada uno con sus historias de usuario.</li> <li>Desglosar historias de usuario en tareas, que a su vez se asocian a sprints y tecnolog\u00edas.</li> <li>Automatizar la asignaci\u00f3n de sprints y la recopilaci\u00f3n de tecnolog\u00edas mediante campos computados relacionales.</li> </ul> <p>Este enfoque facilita la escalabilidad y el mantenimiento del m\u00f3dulo, y sienta las bases para futuras ampliaciones, como la gesti\u00f3n de usuarios y permisos avanzados.</p>"},{"location":"4_6_EjemploCamposValoresDefecto/","title":"4.6. Campos con valores por defecto","text":"<p>En este apartado se abordar\u00e1 la creaci\u00f3n de campos con valores por defecto en Odoo, diferenci\u00e1ndolos de los campos computados y mostrando diversas formas de establecer estos valores. </p>"},{"location":"4_6_EjemploCamposValoresDefecto/#campos-con-valores-por-defecto","title":"Campos con valores por defecto","text":"<p>Los campos con valores por defecto permiten asignar un valor inicial a un campo cuando se crea un nuevo registro. A diferencia de los campos computados, el usuario puede modificar este valor tras la creaci\u00f3n del registro. Existen varias formas de definir valores por defecto en Odoo:</p>"},{"location":"4_6_EjemploCamposValoresDefecto/#1-asignacion-directa-de-valores-por-defecto","title":"1. Asignaci\u00f3n directa de valores por defecto","text":"<p>Supongamos que en el modelo <code>Sprint</code> existe un campo <code>duracion</code> de tipo entero. Se puede establecer un valor por defecto por ejemplo de 2 semanas o 14 d\u00edas de la siguiente manera:</p> <pre><code>duracion = fields.Integer(\n  string=\"Duraci\u00f3n (d\u00edas)\",\n  default=14\n)\n</code></pre> <p>Nota</p> <p>El valor asignado a <code>default</code> debe coincidir con el tipo de dato del campo. Por ejemplo, para campos de tipo <code>Char</code> o <code>Text</code>, el valor debe ir entre comillas.</p> <p>Al reiniciar el servicio y actualizar el m\u00f3dulo, los nuevos registros de <code>Sprint</code> tendr\u00e1n por defecto una duraci\u00f3n de 15 d\u00edas, aunque el usuario podr\u00e1 modificar este valor al crear o editar el registro.</p>"},{"location":"4_6_EjemploCamposValoresDefecto/#2-valores-por-defecto-calculados-mediante-funcion","title":"2. Valores por defecto calculados mediante funci\u00f3n","text":"<p>Tambi\u00e9n es posible calcular el valor por defecto utilizando una funci\u00f3n. Por ejemplo, en el modelo <code>Tarea</code>, supongamos que queremos definir un campo <code>fecha_definicion</code> que guarde la fecha de creaci\u00f3n de la tarea. Esto lo podemos realizar de la siguiente forma:</p> <pre><code>from datetime import datetime\n\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    # ...\n\n    # primero definici\u00f3n de la funci\u00f3n\n    def get_fecha_definicion(self):\n      return datetime.now()\n\n    # despu\u00e9s definimos cl campo que la usa\n    fecha_definicion = fields.Datetime(\n      string=\"Fecha de definici\u00f3n\",\n      default=get_fecha_definicion\n\n)\n</code></pre> <p>Puede parecer que esto es un campo computado, pero hay unas diferencias con los campos computados: </p> <ul> <li>En los campos computados, se utiliza el par\u00e1metro <code>compute</code> y el nombre de la funci\u00f3n entre comillas (<code>compute='_compute_field'</code>).</li> <li>En los campos con valor por defecto, la funci\u00f3n se pasa sin comillas y se ejecuta una sola vez al crear el registro.</li> <li>Para los valores por defecto, primero debemos definir las funciones puesto que deben existir antes de ser usadas. Para los campos computados a usar comillas, cuando la va a utilizar el sistema la busca, por lo que puede ser definida con posterioridad</li> <li>El usuario puede modificar el valor por defecto, mientras que en los campos computados el valor es gestionado autom\u00e1ticamente por Odoo y no es editable por el usuario.</li> </ul>"},{"location":"4_6_EjemploCamposValoresDefecto/#3-uso-de-funciones-lambda-para-valores-por-defecto","title":"3. Uso de funciones lambda para valores por defecto","text":"<p>Cuando la l\u00f3gica para calcular el valor por defecto es sencilla, se puede utilizar una funci\u00f3n lambda. </p> <p>Por ejemplo:</p> <pre><code>from datetime import datetime\n\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    # ...\n    fecha_definicion = fields.Datetime(\n      string=\"Fecha de definici\u00f3n\",\n      default=lambda self: datetime.now()\n)\n</code></pre> <p>Esto simplifica el c\u00f3digo y permite mantener la definici\u00f3n del campo m\u00e1s concisa, puesto que no necesitamos definir la funci\u00f3n a parte antes de la definici\u00f3n del campo.</p>"},{"location":"4_6_EjemploCamposValoresDefecto/#visualizacion-en-la-vista","title":"Visualizaci\u00f3n en la vista","text":"<p>Para que el usuario pueda ver y modificar el valor por defecto, es necesario incluir el campo en la vista correspondiente. Por ejemplo, en la siguiente vista de formulario de <code>Tareas</code> se han a\u00f1adidos dos campos:</p> <p><pre><code>&lt;field name=\"fecha_definicion\"/&gt;\n&lt;field name=\"fecha_definicion_lambda\"/&gt;\n</code></pre> En el siguiente ejemplo, se pueden ver los dos campos con dos fechas diferentes, puesto que cada fecha se a asignado en el momento en que se ha reiniciado el servidor y se ha encontrado por primera vez el valor por defecto definido.</p> Valores por defecto"},{"location":"4_7_EjemploHerencias/","title":"4.7. Herencias","text":"<p>Odoo ofrece diferentes mecanismos de herencia, que permiten extender o modificar la funcionalidad de los modelos existentes de manera flexible y eficiente.</p> <p>La herencia en Odoo permite reutilizar, ampliar o personalizar la funcionalidad de modelos ya existentes sin necesidad de reescribir todo el c\u00f3digo. Gracias a estos mecanismos, los desarrolladores pueden adaptar los m\u00f3dulos est\u00e1ndar a las necesidades espec\u00edficas de cada proyecto, a\u00f1adiendo nuevos campos, m\u00e9todos o modificando el comportamiento de los modelos de forma estructurada y mantenible. Esto facilita la evoluci\u00f3n y el mantenimiento de las aplicaciones desarrolladas sobre la plataforma Odoo.</p> <p>En este apartado se abordar\u00e1n los principales tipos de herencia que pueden implementarse en Odoo, centr\u00e1ndonos especialmente en la herencia de clase mediante un ejemplo pr\u00e1ctico. </p>"},{"location":"4_7_EjemploHerencias/#tipos-de-herencia-en-odoo","title":"Tipos de herencia en Odoo","text":"<p>Seg\u00fan la documentaci\u00f3n oficial de Odoo, existen varios tipos de herencia:</p> <ul> <li>Herencia de clase (cl\u00e1sica): Permite extender un modelo existente a\u00f1adiendo nuevos campos o m\u00e9todos, o sobrescribiendo los ya existentes. Los datos se almacenan en la misma tabla que el modelo original, y las vistas existentes pueden mostrar los nuevos campos a\u00f1adidos.</li> <li>Herencia por prototipo: Se crea un nuevo modelo que hereda los atributos del modelo original, pero los datos se almacenan en tablas diferentes. Este tipo de herencia es \u00fatil cuando se requiere crear variantes de un modelo base, manteniendo la independencia de los datos.</li> <li>Herencia por delegaci\u00f3n: Se crea un nuevo modelo que contiene una relaci\u00f3n con el modelo original. Cada vez que se crea un registro en el modelo hijo, se crea tambi\u00e9n un registro asociado en el modelo padre, sincronizando los datos entre ambos. Este enfoque permite implementar herencia m\u00faltiple y mantener la separaci\u00f3n de datos en tablas distintas.</li> </ul> Tipos de herencia <p>En Odoo, la herencia de clase es la m\u00e1s utilizada, ya que permite ampliar o adaptar modelos existentes a nuevas necesidades sin duplicar informaci\u00f3n ni perder compatibilidad con las vistas y funcionalidades ya implementadas.</p>"},{"location":"4_7_EjemploHerencias/#situacion-actual-en-los-modelos-del-proyecto","title":"Situaci\u00f3n actual en los modelos del proyecto","text":"<p>Actualmente, el m\u00f3dulo de gesti\u00f3n de proyectos cuenta con los siguientes modelos:</p> <ul> <li>Proyecto: Representa un proyecto y est\u00e1 relacionado con varias historias.</li> <li>Historia: Cada historia puede contener varias tareas.</li> <li>Tarea: Las tareas est\u00e1n asociadas a las tecnolog\u00edas necesarias para su desarrollo, pertenecen a una historia y se desarrollan en un sprint.</li> <li>Sprint: Relacionado con las tareas que se desarrollan durante el mismo.</li> <li>Tecnolog\u00eda: Representa las tecnolog\u00edas empleadas en las distintas tareas.</li> </ul> <p>Hasta el momento, no se ha implementado ning\u00fan modelo para representar a las personas involucradas en el desarrollo (desarrolladores) ni a los clientes relacionados con los proyectos, es momento de abordar este aspecto, pero ayud\u00e1ndonos de la herencia.</p>"},{"location":"4_7_EjemploHerencias/#herencia-de-clase-en-odoo","title":"Herencia de clase en Odoo","text":"<p>Odoo dispone de un modelo nativo denominado <code>res.partner</code>, que almacena todos los contactos del sistema (empleados, compa\u00f1\u00edas, clientes, etc.). Crear un modelo nuevo para desarrolladores no tendr\u00eda sentido, ya que un desarrollador es, en esencia, un tipo de contacto. Por tanto, se opta por extender el modelo <code>res.partner</code> mediante herencia de clase.</p>"},{"location":"4_7_EjemploHerencias/#implementacion","title":"Implementaci\u00f3n","text":"<p>Para crear un modelo que represente a los desarrolladores y permita asociarles tecnolog\u00edas, se define una clase que hereda de <code>res.partner</code> utilizando el atributo <code>inherit</code>. De este modo, cualquier campo a\u00f1adido en la nueva clase se incorporar\u00e1 directamente a la tabla de <code>res.partner</code>.</p> <p>Por ejemplo, para asociar tecnolog\u00edas a los desarrolladores, se a\u00f1ade un campo <code>Many2many</code> relacionado con el modelo de tecnolog\u00edas:</p> <pre><code># *******************************************************\n# DESARROLADORES\nclass desarrollador(models.Model):\n  _name = 'res.partner'\n  _inherit = 'res.partner'\n\n  tecnologias = fields.Many2many( 'gestion_tareas_sergio.tecnologias_sergio',\n                                  relation='relacion_desarrollador_technologies',\n                                  column1='rel_desarrollador',\n                                  column2='rel_tecnologias',\n                                  string='Technolog\u00edas'\n  )\n</code></pre> <p>Donde </p> <ul> <li><code>-name</code> no es imprescindible identificarlo. Lo podemos poner por habito o costubre, pero al ser heredado, lo importante es de qu\u00e9 modelo hereda</li> <li><code>inherit</code> este si es b\u00e1sico e indica el modelo del que hereda. Con esta implementaci\u00f3n, no se crea una nueva tabla para desarrolladores, sino que se ampl\u00eda la existente de contactos. Si se a\u00f1ade un campo que ya existe en <code>res.partner</code>, este ser\u00e1 sobrescrito.</li> <li><code>tecnologias</code> de momento solo definimos un nuevo campo que ser\u00e1 una relaci\u00f3n muchos a muchos con tecnolog\u00edas</li> </ul>"},{"location":"4_7_EjemploHerencias/#verificacion","title":"Verificaci\u00f3n","text":"<p>Tras actualizar el m\u00f3dulo, se puede comprobar que el modelo <code>desarrollador</code> no existe como tal, sino que los nuevos campos aparecen en el modelo <code>res.partner</code>.</p> <p>Hagamos una verificaci\u00f3n de qu\u00e9 ha pasado en la base de datos usando cualquiera de los m\u00e9todos descritos en el apartado Revisi\u00f3n de la base de datos del primer punto del ejemplo. </p> <p>Por ejemplo, desde el propio entorno de Odoo en desarrollo, vamos a Ajustes -&gt; T\u00e9cnico y ah\u00ed buscamos el modelo <code>res.partner</code> ( si buscas <code>desarrollador</code> como hemos comentado, no lo encontrar\u00e1s). Entrando en este modelo, accedemos al listado de campos y si buscamos nuestro nuevo campo debe estar ah\u00ed.</p> Herencia de modelo. Nuevo campo definido. <p>Como podemos ver, se trata de un modelo que guarda los contactos pero realmente contiene todos los campos extra que son necesarios para reutilizar este modelo el cualquier aplicaci\u00f3n instalada.</p> <p>Para hacer visible el nuevo campo en la interfaz, es necesario modificar las vistas correspondientes, lo cual se abordar\u00e1 en el siguiente apartado.</p>"},{"location":"4_7_EjemploHerencias/#acceso-desde-el-menu","title":"Acceso desde el men\u00fa","text":"<p>Para facilitar el acceso a los desarrolladores desde el men\u00fa, se puede crear una nueva acci\u00f3n y una opci\u00f3n de men\u00fa que apunten al modelo <code>res.partner</code>, aprovechando las vistas ya existentes. </p> views.xml <pre><code>&lt;-- Nueva acci\u00f3n --&gt;\n&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_desarrolladores\"&gt;\n  &lt;field name=\"name\"&gt;Gestion Tareas Sergio Desarrolladores&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n&lt;/record&gt;\n\n\n&lt;-- Nuevo men\u00fa --&gt;\n&lt;menuitem name=\"Desarrolladores\" id=\"gestion_tareas_sergio.gestion_desarrolladores\" \n  parent=\"gestion_tareas_sergio.gestion\" \n  action=\"gestion_tareas_sergio.action_desarrolladores\"/&gt;\n</code></pre> <p>Sin embargo, es importante tener en cuenta que, por defecto, se mostrar\u00e1n todos los contactos, no solo los desarrolladores. Necesitamos personalizar vistas y filtros para poder a\u00f1adir el nuevo campo que hemos establecido y filtrar solo los contactos que nos interesen.</p>"},{"location":"4_7_EjemploHerencias/#herencia-y-modificacion-de-vistas-en-odoo","title":"Herencia y modificaci\u00f3n de vistas en Odoo","text":"<p>Para la correcta visualizaci\u00f3n de los desarrolladores, debemos reutilizar las vistas que ya existen en el sistema de Contactos y sobre ella realizar modificaciones.</p> <p>Los pasos a seguir ser\u00edan los siguientes</p>"},{"location":"4_7_EjemploHerencias/#herencia-del-formulario-de-contactos","title":"Herencia del formulario de contactos","text":"<p>Para heredar y modificar una vista en Odoo, se debe crear una nueva vista XML que extienda la vista base, n este caso, se hereda el formulario de <code>res.partner</code> y lo que haremos es a\u00f1adir una nueva pesta\u00f1a para mostrar el campo de tecnolog\u00edas. </p> <p>Al importante utilizar el atributo <code>mode=\"primary\"</code> para que la nueva vista no sobrescriba la original, sino que se trate como una vista alternativa.</p> <p>La localizaci\u00f3n de los elementos dentro de la vista se realiza mediante expresiones XPath, que permiten ubicar el punto exacto donde insertar nuevos campos o modificar los existentes. Por ejemplo, para a\u00f1adir una nueva pesta\u00f1a despu\u00e9s de la \u00faltima existente, se puede localizar la p\u00e1gina con nombre <code>internal_notes</code> y a\u00f1adir una nueva p\u00e1gina a continuaci\u00f3n.</p> <p>Veamos el c\u00f3digo necesario y despu\u00e9s comentamos punto por punto:</p> <pre><code>    &lt;record model=\"ir.ui.view\" id=\"desarrolladores_form\"&gt;\n      &lt;field name=\"name\"&gt;gestion_tareas_sergio.Desarrolladores&lt;/field&gt;\n      &lt;field name=\"model\"&gt;res.partner&lt;/field&gt;\n      &lt;field name=\"inherit_id\" ref=\"base.view_partner_form\"&gt;&lt;/field&gt;\n      &lt;field name=\"mode\"&gt;primary&lt;/field&gt;\n      &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;xpath expr=\"//sheet/notebook/page[@name='internal_notes']\" position=\"after\"&gt;\n          &lt;page name=\"desarrolladores\" string=\"Desarrolladores\" &gt;\n            &lt;group&gt;\n              &lt;group&gt;\n                &lt;field name=\"tecnologias\"&gt;&lt;/field&gt;\n              &lt;/group&gt;\n            &lt;/group&gt;\n          &lt;/page&gt;\n        &lt;/xpath&gt;\n      &lt;/field&gt;\n    &lt;/record&gt;\n</code></pre> <p>Con este c\u00f3digo redefinimos el formulario para la visualizaci\u00f3n de contactos a\u00f1adiendo una nueva pesta\u00f1a que contendr\u00e1 las tecnolog\u00edas que domina el desarrollador. </p> <ul> <li>Se modifica el formulario del modelo <code>res.partner</code> (contactos) mediante herencia de vistas. Se utiliza el atributo <code>inherit_id</code> para indicar que se extiende la vista base <code>base.view_partner_form</code>.</li> </ul> <p>Aqu\u00ed hay mucho m\u00e1s que explicar, por una parte, debemos saber c\u00f3mo se llama la vista base a heredar. Esto lo podemos conseguir si estamos en modo desarrollador y vamos al formulario est\u00e1ndar de contactos y desde ah\u00ed accedemos a la informaci\u00f3n de la vista</p> Acceso a la informaci\u00f3n de modelos y vistas <p>Una vez en la informaci\u00f3n de la vista, ya tenemos todos los datos de la misma, y en concreto el que nos interesa, su <code>id externo</code> que es el que vamos a utilizar para heredar</p> Obtenci\u00f3n del nombre de la vista a heredar <ul> <li>Dentro del campo <code>arch</code>, se emplea una expresi\u00f3n <code>xpath</code> para insertar una nueva pesta\u00f1a llamada \"Desarrolladores\" justo despu\u00e9s de la pesta\u00f1a de notas internas (<code>internal_notes</code>). En esta nueva pesta\u00f1a se a\u00f1ade un grupo que contiene el campo <code>tecnologias</code>. De este modo, al editar un contacto, los usuarios ver\u00e1n una pesta\u00f1a adicional donde podr\u00e1n gestionar las tecnolog\u00edas asociadas al desarrollador, sin modificar la estructura original de la vista, aprovechando as\u00ed el mecanismo de herencia de vistas de Odoo.</li> </ul> <p>Con todo esto finalmente, obtenemos una vista heredada, en la que hemos introducido una nueva pesta\u00f1a.</p> Nueva pesta\u00f1a en contactos"},{"location":"4_7_EjemploHerencias/#acceso-al-nuevo-formulario","title":"Acceso al nuevo formulario","text":"<p>Para acceder al nuevo formulario, deber\u00edamos modificar tambi\u00e9n las acciones, de forma que vamos a especificar una acci\u00f3n para mostrar el listado y otra para el formulario.</p> <p>El c\u00f3digo necesario ser\u00eda el siguiente: </p> <pre><code>    &lt;!-- Action desarrolladores --&gt;\n    &lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_desarrolladores\"&gt;\n      &lt;field name=\"name\"&gt;Gestion Tareas Sergio Desarrolladores&lt;/field&gt;\n      &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n      &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n    &lt;/record&gt;\n    &lt;!-- Mostrando los desarrolladores heredados de res.partner, pero especificamente listado --&gt;\n    &lt;record model=\"ir.actions.act_window.view\" id=\"gestion_tareas_sergio.action_desarrolladores_list\"&gt;\n      &lt;field name=\"sequence\" eval=\"1\"&gt;&lt;/field&gt;\n      &lt;field name=\"view_mode\"&gt;list&lt;/field&gt;\n      &lt;field name=\"view_id\" ref=\"base.view_partner_tree\"&gt;&lt;/field&gt;\n      &lt;field name=\"act_window_id\" ref=\"gestion_tareas_sergio.action_desarrolladores\"&gt;&lt;/field&gt;\n    &lt;/record&gt;\n\n    &lt;!-- Mostrando los desarrolladores heredados de res.partner, pero especificamente formulario --&gt;\n    &lt;record model=\"ir.actions.act_window.view\" id=\"gestion_tareas_sergio.action_desarrolladores_form\"&gt;\n      &lt;field name=\"sequence\" eval=\"2\"&gt;&lt;/field&gt;\n      &lt;field name=\"view_mode\"&gt;form&lt;/field&gt;\n      &lt;field name=\"view_id\" ref=\"desarrolladores_form\"&gt;&lt;/field&gt;\n      &lt;field name=\"act_window_id\" ref=\"gestion_tareas_sergio.action_desarrolladores\"&gt;&lt;/field&gt;\n    &lt;/record&gt; \n</code></pre> <p>El primer bloque ya lo ten\u00edamos en la versi\u00f3n anterior, es la acci\u00f3n t\u00edpica que hemos utilizado para acceso a los diferentes men\u00fas, en este caso los asociados a los desarrolladores.</p> <p>El segundo y tercer bloques tienen como objetivo redefinir los accesos espec\u00edficos al listado y formulario. </p> <p>En concreto el segundo <code>record</code> tiene como  prop\u00f3sito asociar una vista de tipo lista. De esta forma </p> <ul> <li><code>sequence</code> con valor <code>1</code> determina el orden en que se aplican las vistas si hay varias asociadas a la misma acci\u00f3n. </li> <li><code>view_mode</code> igual a <code>list</code> que especifica que es una lista</li> <li><code>view_id</code> referencia la vista de \u00e1rbol est\u00e1ndar de contactos (<code>base.view_partner_tree</code>), lo que indica que se reutiliza esa vista para mostrar los registros. El nombre de esta vista lo podemos saber seg\u00fan lo indicado anteriormente desde entorno de desarrollador.</li> <li><code>act_window_id</code> enlaza este registro con la acci\u00f3n de ventana <code>gestion_tareas_sergio.action_desarrolladores</code> especificada en el primer bloque, asegurando que al ejecutar dicha acci\u00f3n se muestre la vista de lista especificada. Este mecanismo permite personalizar c\u00f3mo se presentan los datos al usuario en las distintas acciones del sistema.</li> </ul> <p>Referente al tercer y \u00faltimo de los bloques, es similar al anterior con alguna diferencia que pasamos a explicar:</p> <ul> <li><code>view_mode</code> igual a <code>form</code> que especifica que es un formulario</li> <li><code>view_id</code> referencia la vista definida anteriormente <code>desarrolladores_form</code>. En esta propia vista ya se defin\u00eda la herencia tal y como e vi\u00f3 en el anterior subapartado.</li> </ul> <p>Con todo esto, ahora si tenemos redefinidas las acciones para mostrar el formulario especifico (y heredado) que hemos desarrollado.</p>"},{"location":"4_7_EjemploHerencias/#filtrado-de-registros-solo-desarrolladores","title":"Filtrado de registros: solo desarrolladores","text":"<p>Con lo realizado, no tenemos suficiente, puesto que cada vez que accedemos a desarrolladores vemos el listado de todos los contactos, sean o no desarrolladores. Realmente no hemos especificado una forma de identificar si un contacto es o no desarrollador, por lo tanto debemos solucionar este problema.</p>"},{"location":"4_7_EjemploHerencias/#contactos-que-son-desarrolladores","title":"Contactos que son desarrolladores","text":"<p>Para distinguir los desarrolladores del resto de contactos, se a\u00f1ade un campo booleano <code>es_desarrollador</code> al modelo <code>res.partner</code>. Este campo act\u00faa como bandera para identificar si un contacto es desarrollador. Al crear un nuevo desarrollador desde el men\u00fa correspondiente, este campo se establece autom\u00e1ticamente a <code>True</code>.</p> <p>A\u00f1adamos pues este nuevo campo a nuestro modelo <code>desarrollador</code>.</p> models.py - desarrollador <pre><code># *******************************************************\n# DESARROLADORES\nclass desarrollador(models.Model):\n  _name = 'res.partner'\n  _inherit = 'res.partner'\n\n  es_desarrollador = fields.Boolean()  \n  tecnologias = fields.Many2many( 'gestion_tareas_sergio.tecnologias_sergio',\n                                  relation='relacion_desarrollador_technologies',\n                                  column1='rel_desarrollador',\n                                  column2='rel_tecnologias',\n                                  string='Technolog\u00edas'\n  )\n</code></pre> <p>Ahora debemos modificar la vista para poder mostar el campo desarrollador, a\u00f1adamos pues en la vista encima de tecnolog\u00edas el nuevo campo para poder indicar si es o no desarrollador.</p> views.xml <pre><code>    &lt;record model=\"ir.ui.view\" id=\"desarrolladores_form\"&gt;\n    . . . \n            &lt;group&gt;\n              &lt;field name=\"es_desarrollador\" &gt;&lt;/field&gt;\n              &lt;field name=\"tecnologias\"&gt;&lt;/field&gt;\n            &lt;/group&gt;\n    . . .\n    &lt;/record&gt;\n</code></pre> <p>Ahora que ya hemos indicado que un contacto res un desarrollador, deber\u00edamos tener alg\u00fan filtro para que si estamos dentro de nuestra aplicaci\u00f3n y mostramos los contactos con nuestro men\u00fa, solo aparezcan usuarios desarrolladores.</p>"},{"location":"4_7_EjemploHerencias/#filtrado-de-la-accion","title":"Filtrado de la acci\u00f3n","text":"<p>Para poder filtrar, en la acci\u00f3n de men\u00fa que muestra los desarrolladores vamos a cambiar la acci\u00f3n generica de acceso a desarrolladores, o sea, primero definimos una gen\u00e9rica y despues especificas para listado y formulario, pues escogemos la primera y la modificamos.</p> <p>As\u00ed pues, se utiliza el atributo <code>domain</code> para filtrar los registros y mostrar \u00fanicamente aquellos con <code>es_desarrollador=True</code>. Simplemente con esta l\u00ednea, hacemos un filtrado de los elementos del listado (por lo tanto los accesobles) son \u00fanicamente lo que tienen este nuevo campo a <code>True</code></p> <p>Adem\u00e1s, vamos a utilizar el atributo <code>context</code> para establecer el valor por defecto de este campo al crear nuevos registros desde esta acci\u00f3n. <code>context</code> es como un diccionario de elementos que se le pasan al servidor, y en este caso se utiliza este elemento para expecificar al servidor que en el caso de que se cree un elemento nuevo, entonces establezca el valor de <code>es_desarrollador</code> a <code>True</code>.</p> <p>Veamos en c\u00f3digo c\u00f3mo se aplican estos cambios: </p> <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_desarrolladores\"&gt;\n  &lt;field name=\"name\"&gt;Gestion Tareas Sergio Desarrolladores&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n  &lt;field name=\"domain\"&gt;[('es_desarrollador', '=', True)]&lt;/field&gt;\n  &lt;field name=\"context\"&gt;{'default_es_desarrollador': True}&lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Es importante observar la sintaxis que se utiliza en el ejemplo, por una parte en <code>domain</code> generamos un filtro que realmente se lo pasamos a python  para que lo evalue (por eso esta todo enrre corchetes <code>[]</code>), por eso tiene esa sint\u00e1xis tan especifica y por otra parte tambi\u00e9n podemos ver que en <code>context</code> indicamos anteponiendo <code>default_</code> el nombre del campo al cual vamos a asignar un valor por defecto. y adem\u00e1s en este caso de nuevo la sintaxis es diferente, porque los especificamos mediante un diccionario que se parar\u00e1 al cliente web.</p> <p>Ahora al acceder al listado nos aparecer\u00e1n solo los desarrolladores, y si cremos un desarrollador nuevo veremos que esta activo por defecto el indicador de que es desarrollador.</p>"},{"location":"4_7_EjemploHerencias/#visibilidad-condicional-de-la-pestana-de-desarrollador","title":"Visibilidad condicional de la pesta\u00f1a de desarrollador","text":"<p>Para asegurar que la pesta\u00f1a de desarrollador solo sea visible para los contactos que realmente sean desarrolladores, se utiliza el atributo <code>modifiers</code> en la definici\u00f3n de la p\u00e1gina tal y como se muestra a continuaci\u00f3n:</p> <pre><code>```xml\n    &lt;record model=\"ir.ui.view\" id=\"desarrolladores_form\"&gt;\n    . . .\n          &lt;page name=\"desarrolladores\" string=\"Desarrolladores\" modifiers=\"{'invisible':[('es_desarrollador', '=', False)]}\"&gt;\n            &lt;group&gt;\n              &lt;group&gt;\n                &lt;field name=\"es_desarrollador\" &gt;&lt;/field&gt;\n                &lt;field name=\"tecnologias\"&gt;&lt;/field&gt;\n              &lt;/group&gt;\n            &lt;/group&gt;\n          &lt;/page&gt;\n    . . . \n    &lt;/record&gt;\n</code></pre> <p>Vemos que la sintasis es imilar a la vista anteriormente. Mediante <code>modifiers</code>  indicamos una serie de condiciones que deben cumplir los atributos, en este caso, el campo <code>es_desarrollador</code> debe ser <code>True</code> para mostrar la pesta\u00f1a, por lo que mediante una condicion (<code>('es_desarrollador', '=', False)</code>) que le pasamos a python, comprobamos o no si mostramos el elemento</p> <p><code>modifiers</code> y <code>attrs</code></p> <p>Odoo ha cambiado en la version 18 la forma en la que identifica los atributos de una vista, ha pasado de llamarlos atributos (identificados por <code>attrs</code>) a modificadores (identificados por <code>modifiers</code>), por lo que si encuentras c\u00f3digo con <code>attrs</code> debes cambiarlo por <code>modifiers</code></p> <p>Este \u00faltimo paso puede ser prescindible, pero nos asegura que esta pesta\u00f1a se muestra \u00fanicamente para desarrollares, y con ella hemos teminado lo que ser\u00eda puramente la herencia de una vista como la de Contactos para gestionar \u00fanicamente los Desarolladores</p>"},{"location":"4_7_EjemploHerencias/#relacion-entre-tareas-y-desarrolladores","title":"Relaci\u00f3n entre tareas y desarrolladores","text":"<p>Llegados a este punto, vamos a mejorar nuestra aplicaci\u00f3n generando una relac\u00f3n obvia entre desarrolladores y tareas, de forma que cada tarea tendr\u00e1 un desarrollador asociado, y cada desarrolador podr\u00e1 realizar diferntes tareas durante el transcurso del proyecto. </p> <p>As\u00ed pues, se a\u00f1ade un campo de relaci\u00f3n en el modelo de tareas para asociar cada tarea a un desarrollador. Dado que los desarrolladores son contactos (<code>res.partner</code>), la relaci\u00f3n se establece directamente con este modelo. </p> <pre><code>class tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    #...\n    desarrollador_mo = fields.Many2one('res.partner', string='Desarrollador')\n</code></pre> <p>Ahora, deber\u00edamos modificar nuestra vista de tareas para mostrar el nuevo campo en cada tareas. </p> views.xml <pre><code>&lt;record model=\"ir.ui.view\" id=\"tareas_form\"&gt;\n. . . \n           &lt;field name=\"desarrollador_mo\" /&gt;\n. . . \n&lt;/record&gt;\n</code></pre> <p>Si lo hacemos observaremos que funciona correctamente mostrando la relaci\u00f3n establecida por lo que tenemo un desplegable para seleccionar el desarrollador, pero aqu\u00ed observaremos que hay algo que no funciona correctamente y es que se muestran de nuevo todos los contactos, por lo tanto, lo adecuado ser\u00eda que en la vista de tareas, se filtrara el campo para que solo muestren los contactos que sean desarrolladores y adem\u00e1s, puesto que desde este desplegable podemos acceder al formulario de contactos, tambi\u00e9n se especifica la vista de formulario personalizada al acceder desde este campo.</p> <pre><code>    &lt;record model=\"ir.ui.view\" id=\"tareas_form\"&gt;\n    . . . \n              &lt;field \n                name=\"desarrollador_mo\" \n                domain=\"[('es_desarrollador', '=', True)]\"\n                context=\"{'form_view_ref': 'desarrolladores_form'}\"/&gt;\n    . . . \n    &lt;/record&gt;\n</code></pre>"},{"location":"4_7_EjemploHerencias/#ocultamos-campo-de-es_desarrollador-en-formulario","title":"Ocultamos campo de <code>es_desarrollador</code> en formulario","text":"<p>Otra mejora que podr\u00edamos plantear es ocultar un campo dentro del formualrio de desarrolladores. Si vamos es ese formulario, creamo un nuevo desarrollador y pulsamos cobre el check del valor boleano, el efecto que nos encontramos es que al indicar a <code>es_desarrollador</code> a <code>False</code> autom\u00e1ticamente desaparece del formulario la pesta\u00f1a que hemos a\u00f1adido, puesto que ese contacto ha dejado de ser un programador. </p> <p>Una soluci\u00f3n posible es hacer el campo inivisble, de forma que no se pueda modificar. Tambi\u00e9n servir\u00eda directamente no mostrar el campo, pero por motivos did\u00e1cicos veamos el c\u00f3digo que realizar\u00eda la accion de ocultar:</p> <pre><code>   &lt;record model=\"ir.ui.view\" id=\"desarrolladores_form\"&gt;\n      &lt;field name=\"name\"&gt;gestion_tareas_sergio.Desarrolladores&lt;/field&gt;\n      &lt;field name=\"model\"&gt;res.partner&lt;/field&gt;\n      &lt;field name=\"inherit_id\" ref=\"base.view_partner_form\"&gt;&lt;/field&gt;\n      &lt;field name=\"mode\"&gt;primary&lt;/field&gt;\n      &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;xpath expr=\"//sheet/notebook/page[@name='internal_notes']\" position=\"after\"&gt;\n          &lt;page name=\"desarrolladores\" string=\"Desarrolladores\" modifiers=\"{'invisible':[('es_desarrollador', '=', False)]}\"&gt;\n            &lt;group&gt;\n              &lt;group&gt;\n                &lt;!-- &lt;field name=\"es_desarrollador\" readonly=\"1\"&gt;&lt;/field&gt; --&gt;\n                &lt;field name=\"es_desarrollador\" invisible=\"1\"&gt;&lt;/field&gt;\n                &lt;field name=\"tecnologias\"&gt;&lt;/field&gt;\n              &lt;/group&gt;\n            &lt;/group&gt;\n          &lt;/page&gt;\n        &lt;/xpath&gt;\n      &lt;/field&gt;\n    &lt;/record&gt;\n</code></pre> <p>Como se puede ver en este caso, el campo se ha modificado para que sea invisible aunque tambi\u00e9n se ha dejado comentado el c\u00f3digo para hacerlo de solo lectura. Comprueba que esto te funciona.</p>"},{"location":"4_7_EjemploHerencias/#asignacion-automatica-de-la-categoria-desarrolladores","title":"Asignaci\u00f3n autom\u00e1tica de la categor\u00eda \"Desarrolladores\"","text":"<p>Realizaremos un \u00faltimo cambio en nuestro modelo para ver una nueva posibilidad dentro de la herencia de modelo y vista que estamos realizado.</p> <p>Cualquier contacto tiene un campo llamado <code>etiquetas</code> o <code>tags</code> que permiten asignar caractar\u00edsticas a los contactos como pueden ser \"consultor\", \"VIP\", \"Temporal\", etc..., a partir de aqu\u00ed, nuestro comentido ser\u00e1 asignar de forma autom\u00e1tica la etiqueta \"Desarrollador\" al crear un nuevo desarrollador. </p> <p>Esto se realiza mediante un m\u00e9todo decorado con <code>@api.onchange</code>, que comprueba si la categor\u00eda existe y la asigna al campo <code>category_id</code> del contacto. Si la categor\u00eda no existe, se crea autom\u00e1ticamente.</p> <p>Veamos el c\u00f3digo resultante c\u00f3mo ser\u00eda:</p> <pre><code>class desarrollador(models.Model):\n    _name = 'res.partner'\n    # ...\n    es_desarrollador = fields.Boolean( string='Desarrollador') \n    # ...\n\n    # Asignar una etiqueta como desarrollador al marcar como desarrollador a un usuario\n    @api.onchange('es_desarrollador')\n    def _onchange_es_desarrollador(self):\n        categorias = self.env['res.partner.category'].search([('name','=','Desarrollador')])\n        if len(categorias) &gt; 0:\n            category = categorias[0]\n        else:\n            category = self.env['res.partner.category'].create({'name':'Desarrollador'})\n        self.category_id = [(4, category.id)]    \n</code></pre> <p>Y con esto conseguimos que al asignar la varible <code>es_desarrollador</code> se a\u00f1ada directamente la categor\u00eda de <code>Desarrollador</code>.</p> <p>Cabe resalta, que el decorador <code>@api.onchange('es_desarrollador')</code> indica a Odoo que debe llamar al m\u00e9todo <code>_onchange_es_desarrollador</code> cada vez que el usuario modifique ese campo en la interfaz. Es algo que ya hemos visto anteiormente.</p>"},{"location":"4_8_EjemploMejorandoVistas/","title":"4.8. Mejorando vistas","text":"<p>POR REVISAR</p> <p>En este apartado vamos a aprender c\u00f3mo crear y personalizar una vista tipo tree en Odoo, aprovechando todas las posibilidades que nos brinda el framework. </p>"},{"location":"4_8_EjemploMejorandoVistas/#que-es-una-vista-list","title":"\u00bfQu\u00e9 es una vista List?","text":"<p>La vista tree (o lista) es la m\u00e1s sencilla y tambi\u00e9n la m\u00e1s f\u00e1cil de personalizar en Odoo. Por defecto, si no definimos una vista tree para un modelo, Odoo genera una autom\u00e1ticamente mostrando el campo <code>name</code> y otros campos b\u00e1sicos. Por ejemplo, en el m\u00f3dulo que estamos desarrollando, llamado <code>manage</code>, aparecen varias vistas tree generadas por defecto para los modelos que hemos creado, como <code>sprint</code>, <code>task</code> y <code>project</code>.</p> <p>Si revisamos el c\u00f3digo de nuestra aplicaci\u00f3n, veremos que la mayor\u00eda de las vistas personalizadas que hemos creado hasta ahora son de tipo formulario (form), y apenas hemos definido vistas tree. Cuando no a\u00f1adimos una vista tree personalizada, Odoo muestra la predeterminada, que suele ser muy b\u00e1sica.</p> <p>Por ejemplo, en el modelo <code>devs</code>, que hereda de <code>res.partner</code> (contactos), la vista tree por defecto muestra varios campos heredados de contactos. Si queremos personalizarla, debemos definir nuestra propia vista tree en el archivo XML correspondiente.</p>"},{"location":"4_8_EjemploMejorandoVistas/#codificacion-de-una-vista-tree","title":"Codificaci\u00f3n de una vista Tree","text":"<p>Para crear una vista tree personalizada, debemos definir un registro en la tabla <code>ir.ui.view</code> con un identificador \u00fanico (<code>id</code>), un nombre descriptivo, el modelo al que aplica y la definici\u00f3n XML de la vista. Por ejemplo, para el modelo <code>task</code> ya tenemos una vista tree personalizada, aunque sea muy similar a la predeterminada.</p> <p>Supongamos que queremos crear una vista tree personalizada para el modelo <code>sprint</code>. Copiamos la estructura de la vista tree de <code>task</code> y la adaptamos:</p> <ul> <li>Cambiamos el <code>id</code> por uno \u00fanico, como <code>sprint_list</code>.</li> <li>El nombre tambi\u00e9n debe ser descriptivo, por ejemplo, <code>Sprint list</code>.</li> <li>El modelo ser\u00e1 <code>sprint</code>.</li> <li>A\u00f1adimos los campos que queremos mostrar: <code>name</code>, <code>description</code>, <code>duration</code>, <code>start_date</code>, <code>end_date</code>, etc.</li> </ul> <p>Una vez definida la vista y actualizado el m\u00f3dulo, veremos que la lista de sprints muestra los campos seleccionados. Si creamos un nuevo sprint, veremos c\u00f3mo se actualizan los valores autom\u00e1ticamente, por ejemplo, la fecha de fin calculada a partir de la duraci\u00f3n y la fecha de inicio.</p>"},{"location":"4_8_EjemploMejorandoVistas/#decoraciones-condicionales-en-vistas-tree","title":"Decoraciones condicionales en vistas Tree","text":"<p>Odoo permite resaltar filas en la vista tree seg\u00fan condiciones usando el atributo <code>decoration</code>. Por ejemplo, si queremos que los sprints con una duraci\u00f3n exacta de 15 d\u00edas aparezcan en amarillo, podemos usar <code>decoration-warning</code> con la condici\u00f3n correspondiente.</p> <pre><code>&lt;tree decoration-warning=\"duration == 15\"&gt;\n  ...\n&lt;/tree&gt;\n</code></pre> <p>En la documentaci\u00f3n oficial de Odoo puedes consultar todas las opciones de decoraci\u00f3n disponibles.</p> <p>Si queremos resaltar los sprints que est\u00e1n actualmente en curso (es decir, que ya han comenzado pero a\u00fan no han terminado), podemos crear un campo computado booleano llamado <code>active</code> en el modelo <code>sprint</code>. Este campo se calcular\u00e1 autom\u00e1ticamente comprobando si la fecha de inicio es anterior o igual a la fecha actual y la fecha de fin es posterior o igual a hoy.</p> <p>El m\u00e9todo computado podr\u00eda verse as\u00ed (en Python):</p> <pre><code>from odoo import models, fields, api\nfrom datetime import date\n\nclass Sprint(models.Model):\n  _name = 'sprint'\n\n  start_date = fields.Date()\n  end_date = fields.Date()\n  duration = fields.Integer()\n  active = fields.Boolean(compute='_compute_active')\n\n  @api.depends('start_date', 'duration')\n  def _compute_active(self):\n    today = date.today()\n    for sprint in self:\n      if sprint.start_date and sprint.end_date:\n        sprint.active = sprint.start_date &lt;= today &lt;= sprint.end_date\n      else:\n        sprint.active = False\n</code></pre> <p>Para poder usar este campo en la vista tree (aunque no lo mostremos), debemos incluirlo en la definici\u00f3n de la vista. As\u00ed, podemos aplicar una decoraci\u00f3n, por ejemplo, en azul (<code>decoration-info</code>) cuando <code>active</code> sea <code>True</code>:</p> <pre><code>&lt;tree decoration-info=\"active\" ...&gt;\n  ...\n  &lt;field name=\"active\" invisible=\"1\"/&gt;\n&lt;/tree&gt;\n</code></pre> <p>El orden de las decoraciones es importante: si un registro cumple varias condiciones, se aplicar\u00e1 la \u00faltima que coincida.</p>"},{"location":"4_8_EjemploMejorandoVistas/#uso-de-operadores-en-condiciones","title":"Uso de operadores en condiciones","text":"<p>Si queremos resaltar los sprints cuya duraci\u00f3n sea menor que 15 d\u00edas, debemos usar el operador <code>&lt;</code>. Sin embargo, en XML debemos escribirlo como <code>&amp;lt;</code> para evitar conflictos con las etiquetas:</p> <pre><code>&lt;tree decoration-warning=\"duration &amp;lt; 15\"&gt;\n  ...\n&lt;/tree&gt;\n</code></pre>"},{"location":"4_8_EjemploMejorandoVistas/#vistas-tree-editables","title":"Vistas Tree editables","text":"<p>Odoo permite hacer las vistas tree editables a\u00f1adiendo el atributo <code>editable=\"top\"</code> (o <code>bottom</code>). Esto permite modificar los registros directamente desde la lista, pero limita los campos editables a los que se muestran en la vista. Por lo general, no se recomienda usar esta opci\u00f3n salvo casos muy concretos, ya que se pierde la funcionalidad del formulario completo.</p>"},{"location":"4_8_EjemploMejorandoVistas/#sumatorios-en-vistas-tree","title":"Sumatorios en vistas Tree","text":"<p>Otra funcionalidad interesante es la posibilidad de mostrar sumatorios en la vista tree. Por ejemplo, podemos sumar la duraci\u00f3n total de todos los sprints programados, lo cual es \u00fatil en contextos como presupuestos o informes de ventas. Para ello, basta con a\u00f1adir el atributo <code>sum=\"Total\"</code> en el campo correspondiente:</p> <pre><code>&lt;field name=\"duration\" sum=\"Total\"/&gt;\n</code></pre> <p>Esto mostrar\u00e1 el total de la columna al final de la lista.</p>"},{"location":"4_8_EjemploMejorandoVistas/#recursos-y-documentacion","title":"Recursos y documentaci\u00f3n","text":"<p>En la documentaci\u00f3n oficial de Odoo encontrar\u00e1s informaci\u00f3n detallada sobre todas las opciones de personalizaci\u00f3n de vistas. Adem\u00e1s, en el repositorio de GitHub del proyecto tienes disponibles todos los fuentes y los distintos commits con el progreso realizado.</p>"},{"location":"4_9_EjemploDatosDemo/","title":"4.9. Datos de demostraci\u00f3n","text":"<p>POR REVISAR</p> <p>En este apartado vamos a ver c\u00f3mo a\u00f1adir datos de demo a nuestra aplicaci\u00f3n en Odoo. Nuestra aplicaci\u00f3n, que no ten\u00eda datos, acaba de introducir un ejemplo para un desarrollador, un proyecto y un sprint. Lo que queremos es que, cuando se instale nuestro m\u00f3dulo, se generen una serie de datos de demo autom\u00e1ticamente.</p>"},{"location":"4_9_EjemploDatosDemo/#casilla-datos-de-demo-en-la-bdd","title":"Casilla \"Datos de demo\" en la BDD","text":"<p>Recordad que, para que esto funcione, cuando creamos la base de datos debemos marcar la casilla de datos de demo. Por ejemplo, si estamos en <code>localhost</code> en la URL web database selector, al crear una base de datos, si marcamos la casilla de datos de demo, cualquier m\u00f3dulo que instalemos se instalar\u00e1 con datos de demo. Si no la marcamos, la aplicaci\u00f3n, independientemente de que tenga desarrollados esos datos demo, no los instalar\u00e1.</p>"},{"location":"4_9_EjemploDatosDemo/#como-generar-nuestros-datos-de-demo","title":"C\u00f3mo generar nuestros datos de demo","text":""},{"location":"4_9_EjemploDatosDemo/#1-archivo-__manifest__py","title":"1. Archivo <code>__manifest__.py</code>","text":"<p>Hay un fichero, el manifiesto (<code>__manifest__.py</code>), que en la \u00faltima secci\u00f3n tiene la parte de datos de demo, que solo ser\u00e1n cargados si estamos en el modo demo. Por defecto, se cargan ficheros XML. Normalmente generamos uno por cada uno de los modelos. En este caso, el fichero <code>demo.xml</code> est\u00e1 en la carpeta <code>demo</code> y dentro tenemos el registro b\u00e1sico en XML.</p>"},{"location":"4_9_EjemploDatosDemo/#ejemplo-de-registro-basico-en-xml","title":"Ejemplo de registro b\u00e1sico en XML","text":"<pre><code>&lt;record id=\"dev_1\" model=\"res.partner\"&gt;\n  &lt;field name=\"name\"&gt;Nombre Desarrollador&lt;/field&gt;\n  &lt;field name=\"access_code\"&gt;12345678A&lt;/field&gt;\n  &lt;field name=\"is_dev\"&gt;True&lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>El ID debe ser \u00fanico. No podemos tener un contacto u objeto de <code>res.partner</code> con ese mismo ID. Adem\u00e1s, el campo <code>access_code</code> tiene restricciones: debe cumplir un patr\u00f3n (ocho d\u00edgitos y una letra) y ser \u00fanico (restricci\u00f3n SQL de unicidad).</p>"},{"location":"4_9_EjemploDatosDemo/#generacion-automatica-de-datos-de-demo","title":"Generaci\u00f3n autom\u00e1tica de datos de demo","text":"<p>Si solo tenemos que generar un par de registros, podemos hacerlo manualmente. Pero para generar muchos, normalmente se hace autom\u00e1ticamente.</p>"},{"location":"4_9_EjemploDatosDemo/#2-datos-aleatorios-con-mockaroo","title":"2. Datos aleatorios con Mockaroo","text":"<p>Mockaroo permite generar datos aleatorios configurando los campos que queremos. Por ejemplo, para 10 desarrolladores:</p> <ul> <li>ID: generado aleatoriamente</li> <li>name: tipo <code>Full Name</code></li> <li>is_dev: siempre <code>True</code></li> <li>access_code: patr\u00f3n de 8 d\u00edgitos y una letra may\u00fascula (<code>########^</code>)</li> </ul> <p>Configuramos Mockaroo para generar 10 filas en formato CSV (sin cabecera) y descargamos el archivo.</p>"},{"location":"4_9_EjemploDatosDemo/#3-script-en-python-para-generar-datos-de-demo","title":"3. Script en Python para generar datos de demo","text":"<p>Queremos convertir el CSV en un fichero <code>demo.xml</code> v\u00e1lido. Creamos un script en Python, por ejemplo <code>data_gen.py</code>, que:</p> <ul> <li>Lee el fichero CSV</li> <li>Escribe en el directorio <code>demo</code> un XML con la estructura correcta para los datos de demo de <code>res.partner</code></li> </ul>"},{"location":"4_9_EjemploDatosDemo/#ejemplo-de-funcion-en-python","title":"Ejemplo de funci\u00f3n en Python","text":"<pre><code>import os\n\ndef write_text(text, file):\n  with open(file, \"a\") as f:\n    f.write(text)\n\ndef write_dev(line, file):\n  xml = f'''\n  &lt;record id=\"dev_{line[0]}\" model=\"res.partner\"&gt;\n    &lt;field name=\"name\"&gt;{line[1]}&lt;/field&gt;\n    &lt;field name=\"access_code\"&gt;{line[2]}&lt;/field&gt;\n    &lt;field name=\"is_dev\"&gt;True&lt;/field&gt;\n  &lt;/record&gt;\n  '''\n  write_text(xml, file)\n\ndef devs(source, demo_file):\n  if os.path.exists(demo_file):\n    os.remove(demo_file)\n  write_text('&lt;odoo&gt;&lt;data&gt;\\n', demo_file)\n  with open(source) as file:\n    for line in file:\n      fields = line.strip().split(',')\n      write_dev(fields, demo_file)\n  write_text('&lt;/data&gt;&lt;/odoo&gt;\\n', demo_file)\n\n# Uso:\n# devs('devels.csv', 'demo/devs.xml')\n</code></pre> <p>Este script:</p> <ul> <li>Borra el fichero destino si ya existe</li> <li>A\u00f1ade las etiquetas <code>&lt;odoo&gt;&lt;data&gt;</code> al principio y <code>&lt;/data&gt;&lt;/odoo&gt;</code> al final</li> <li>Genera un registro por cada l\u00ednea del CSV</li> </ul>"},{"location":"4_9_EjemploDatosDemo/#prueba-y-anadir-al-manifest","title":"Prueba y a\u00f1adir al manifest","text":"<p>Probamos el script y comprobamos que genera el fichero <code>devs.xml</code> con los registros correctamente estructurados.</p> <p>Para que Odoo cargue estos datos de demo, debemos a\u00f1adir el nuevo fichero generado en la secci\u00f3n <code>demo</code> del <code>__manifest__.py</code>:</p> <pre><code>'demo': [\n  'demo/demo.xml',\n  'demo/devs.xml',\n],\n</code></pre> <p>Nota: Para que Odoo cargue los datos de demo correctamente, hay que reiniciar Docker (o el servidor Odoo) y actualizar el m\u00f3dulo.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/","title":"3. Desarrollar para Odoo","text":"<p>En esta secci\u00f3n vamos a comenzar a realizar desarrollos propios dentro de Odoo por lo que vamos a ver qu\u00e9 arquitectura tiene Odoo y c\u00f3mo poder utilizar el framework que nos facilitar para poder implementar nuestros propios m\u00f3dulos</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#arquitectura","title":"Arquitectura","text":"<p>Odoo es un ERP con una arquitectura de Tenencia M\u00faltiple. Es decir, tiene una base de datos y un servidor com\u00fan para todos los clientes. Lo contrario ser\u00eda tener un servidor o base de datos por cliente o virtualizar.</p> <p>El framework de Odoo facilita diversos componentes que permiten construir la aplicaci\u00f3n:</p> <ul> <li>La capa ORM (Object Relational Mapping) entre los objetos Python y la base de datos PostgreSQL. El dise\u00f1ador-programador no realiza el dise\u00f1o de la base de datos; \u00fanicamente dise\u00f1a clases, y la capa ORM de Odoo se encarga de mapearlas sobre el SGBD PostgreSQL. Mas info en An overview of ORM Methods in Odoo</li> </ul> Diagrama ***Odoo*** ORM (Object Relational Mapping) <ul> <li>Una arquitectura MVC (modelo-vista-controlador), en la que el modelo reside en los datos de las clases dise\u00f1adas con Python, la vista reside en los formularios, listas, calendarios, gr\u00e1ficos... definidos en archivos XML, y el controlador reside en los m\u00e9todos definidos en las clases que proporcionan la l\u00f3gica de negocio.</li> </ul> Diagrama Modelo - Vista - Controlador. <ul> <li>Dise\u00f1adores de informes.</li> <li>Facilidades para la traducci\u00f3n de la aplicaci\u00f3n a varios idiomas.</li> </ul> <p>El servidor Odoo proporciona acceso a la base de datos mediante ORM. El servidor necesita tener instalados m\u00f3dulos, ya que comienza vac\u00edo.</p> <p>Por otro lado, el cliente se comunica con el servidor mediante XML-RPC, y los clientes web por JSON-RPC. El cliente solo tiene que mostrar lo que proporciona el servidor o solicitar correctamente los datos. Por tanto, un cliente puede ser muy simple y desarrollarse en cualquier lenguaje de programaci\u00f3n. Odoo proporciona un cliente web, aunque se puede crear un cliente en cualquier plataforma.</p> <p>Los datos est\u00e1n almacenados en una base de datos relacional como es PostgreSQL y gracias al ORM, no es necesario realizar consultas SQL directamente. El ORM proporciona una serie de m\u00e9todos para trabajar de manera m\u00e1s r\u00e1pida y segura. En lugar de hablar de tablas, se habla de modelos. Estos son \"mapeados\" por el ORM en tablas. Sin embargo, un modelo es m\u00e1s que datos en una tabla. Un modelo se comporta como un objeto al tener campos funcionales, restricciones y campos relacionales que dejan la normalizaci\u00f3n de la base de datos en manos de Odoo.</p> <p>El acceso del cliente a los datos se realiza mediante un servicio. Este puede ser WSGI. WSGI es una soluci\u00f3n est\u00e1ndar para crear servidores y clientes HTTP en Python. En el caso de Odoo, este utiliza <code>Werkzeug</code>, que interpreta las peticiones y las transforma en funciones que Odoo puede entender.</p> <p>Otro concepto dentro de Odoo son los Business Objects. Se implementan con <code>models</code> y contienen tanto datos como l\u00f3gica de negocio.</p> <p>Odoo tambi\u00e9n proporciona los llamados Wizards, que funcionan como asistentes para introducir datos de una manera m\u00e1s sencilla para el usuario.</p> <p>El cliente web es f\u00e1cil de desarrollar gracias a los Widgets o Window GaDGETS. Estos proporcionan un comportamiento y visualizaci\u00f3n adecuados para cada tipo de dato. Por ejemplo, si el campo es para definir una fecha, mostrar\u00e1 un calendario. Algunos tienen diferentes visualizaciones seg\u00fan el tipo de vista y se pueden definir Widgets personalizados. Los Widgets y dem\u00e1s interfaz web funcionan gracias a <code>OWL</code>, un framework de cliente web desarrollado en el proyecto <code>Odoo</code> y similar a <code>React</code>.</p> <p>Resumiendo todos estos conceptos: </p> Componente Descripci\u00f3n Base de Datos (PostgreSQL) Donde se almacenan los datos de forma relacional. ORM Traduce modelos Python a tablas SQL, gestionando relaciones y l\u00f3gica. Business Objects Modelos que contienen datos y l\u00f3gica de negocio. WSGI/Werkzeug Intermediario que convierte peticiones HTTP en funciones de Odoo. Wizards Asistentes que facilitan la introducci\u00f3n de datos. Cliente Web (OWL + Widgets) Interfaz interactiva que adapta la visualizaci\u00f3n seg\u00fan el tipo de dato."},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#la-base-de-datos-de-odoo","title":"La base de datos de Odoo","text":"<p>En Odoo no existe un dise\u00f1o expl\u00edcito de la base de datos, si no que la base de datos de una empresa en Odoo es el resultado del mapeo del dise\u00f1o de clases del ERP hacia el SGBD PostgreSQL, que es el que proporciona la persistencia necesaria para los objetos. Esto es el ORM.</p> <p>En consecuencia, Odoo no facilita ning\u00fan dise\u00f1o entidad-relaci\u00f3n sobre la base de datos de una empresa ni tampoco ning\u00fan diagrama del modelo relacional.</p> <p>Odoo permite, mediante el cliente web, recuperar el nombre de la clase Python que define la informaci\u00f3n que se introduce a trav\u00e9s de un formulario y el nombre del dato miembro de la clase correspondiente a cada campo del formulario. Esta informaci\u00f3n permite llegar a la tabla y columna afectadas, teniendo en cuenta dos cuestiones:</p> <ul> <li> <p>El nombre de las clases Python de Odoo siempre est\u00e1 en min\u00fasculas (se utiliza el guion bajo para hacer legibles las palabras compuestas) y sigue la nomenclatura <code>nombre_del_modulo.nom1.nom2.nom3...</code> en la cual se utiliza el punto para indicar un cierto nivel de jerarqu\u00eda. Cada clase Python de Odoo se mapea en una tabla de PostgreSQL con muchas posibilidades de que su nombre coincida con el de la clase, sustituyendo los puntos por guiones bajos.</p> </li> <li> <p>Los nombres de los atributos de una clase Python tambi\u00e9n est\u00e1n siempre en min\u00fasculas (se utiliza el guion bajo para hacer legibles las palabras compuestas). Cada dato miembro de una clase Python de Odoo que sea persistente (una clase puede tener datos miembros calculados no persistentes) se mapea como un atributo en la correspondiente tabla de PostgreSQL con el mismo nombre.</p> </li> </ul> <p>Ejemplo</p> <p>La clase Python <code>sale.order</code> de Odoo est\u00e1 pensada para describir la cabecera de los pedidos de venta y la correspondiente tabla en PostgreSQL es <code>sale_order</code>.</p> <p>De esta manera, conociendo el nombre de la clase y el nombre del dato miembro, es muy posible conocer el nombre de la tabla y de la columna correspondientes. Se puede configurar el cliente web para que informe del nombre de la clase y del dato miembro al situar el rat\u00f3n sobre las etiquetas de los campos de los formularios.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#los-modulos","title":"Los m\u00f3dulos","text":"<p>Tanto el servidor como los clientes son m\u00f3dulos. Todos est\u00e1n guardados en una base de datos. Todo lo que se pueda hacer para modificar Odoo se hace en m\u00f3dulos.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#composicion-de-un-modulo","title":"Composici\u00f3n de un m\u00f3dulo","text":"<p>Los m\u00f3dulos de Odoo ampl\u00edan o modifican partes del Modelo-Vista-Controlador. De esta manera, un m\u00f3dulo puede tener:</p> <ul> <li>Objetos de negocio: Son la parte del modelo, definidos en clases de Python seg\u00fan una sintaxis propia del ORM de Odoo.</li> <li>Archivos de datos: Son archivos XML que pueden definir datos, vistas o configuraciones.</li> <li>Controladores web: Gestionan las peticiones de los navegadores web.</li> <li>Datos est\u00e1ticos: Im\u00e1genes, CSS o JavaScript utilizados por la interfaz web. Es necesario que los datos est\u00e1ticos se guarden en el directorio static. Por ejemplo, el icono del m\u00f3dulo va en <code>static/description/icon.png</code>.</li> </ul>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#estructura-de-archivos-de-un-modulo","title":"Estructura de archivos de un m\u00f3dulo","text":"<ul> <li>Todos los m\u00f3dulos est\u00e1n en un directorio definido en la opci\u00f3n --addons-path o en el archivo de configuraci\u00f3n, normalmente <code>addons</code>. Cada m\u00f3dulo esta un un subdirectorio dentro de esta carpeta y por lo que puede haber m\u00e1s de un directorio.</li> <li>Un m\u00f3dulo de Python se declara en un archivo de manifest que da informaci\u00f3n sobre el m\u00f3dulo, lo que hace, los m\u00f3dulos de los que depende y c\u00f3mo se debe instalar o actualizar. Manifest in Odoo</li> <li>Un m\u00f3dulo es un paquete de Python que necesita un archivo __init__.py para instanciar todos los archivos Python.</li> </ul>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#creacion-de-modulos","title":"Creaci\u00f3n de m\u00f3dulos","text":"<p>Para ayudar al programador, Odoo contiene un comando para crear m\u00f3dulos vac\u00edos. Este crea la estructura de archivos necesaria para empezar a trabajar:</p> <pre><code> $ odoo scaffold &lt;nombre_del_m\u00f3dulo&gt; &lt;d\u00f3nde_crearlo&gt;\n</code></pre> <p>Posteriormente veremos m\u00e1s sobre <code>scaffold</code>, pero si quieres m\u00e1s informaci\u00f3n puedes recurrir al Manual oficial Scaffolding</p> <p>El par\u00e1metro scaffold puede tener la opci\u00f3n -t para indicar el directorio de la plantilla. Esta est\u00e1 hecha utilizando jinja2, que es un motor de plantillas para Python.</p> <p>Las plantillas est\u00e1n en el directorio de instalaci\u00f3n de Odoo, en el directorio cli. En nuestro caso: cli/templates/ dentro del directorio de instalaci\u00f3n de Odoo.</p> <p>Podemos crear una plantilla copiando el directorio default o theme y modificando los archivos. Esto puede ser \u00fatil si siempre hacemos m\u00f3dulos con la misma plantilla. Por ejemplo, para poner nuestro logo, copyright, etc.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#orm","title":"ORM","text":"<p>Odoo mapea sus objetos en una base de datos mediante ORM, evitando al programador la mayor\u00eda de consultas SQL. De esta manera, el desarrollo de los m\u00f3dulos es muy r\u00e1pido y se evitan errores de programaci\u00f3n.</p> <p>Los modelos se crean como clases de Python que extienden la clase models.Model, que contiene los campos y m\u00e9todos \u00fatiles para trabajar con el ORM.</p> <p>Nota</p> <p>Los modelos, al heredar de models.Model, necesitan obligatoriamente asignar valores a algunas variables, como por ejemplo _name.</p> <p>Odoo considera que un modelo es la referencia a una o m\u00e1s tablas en la base de datos. Un modelo no es una fila en la tabla, es toda la tabla.</p> <p>En programaci\u00f3n, el Modelo es una forma de relacionar el programa con la base de datos. Es de m\u00e1s alto nivel que las consultas directas a la base de datos y que las clases y objetos respecto a la programaci\u00f3n orientada a objetos. El modelo une en un \u00fanico concepto las estructuras de datos, las restricciones de integridad y las opciones de manipulaci\u00f3n de los datos.</p> <p>Los modelos en Odoo pueden</p> <ul> <li>Heredar de models.Model y ser los normales, mapeados y permanentes en la base de datos. </li> <li>Pueden ser models.TransientModel, que son iguales pero no tienen persistencia definitiva en la base de datos. Estos son los recomendados para crear <code>wizards</code>. </li> <li>Tambi\u00e9n pueden ser models.AbstractModel para definir modelos abstractos que luego ser\u00e1n heredados.</li> </ul> <p>En Odoo, existen tres tipos principales de modelos que heredan de clases base diferentes seg\u00fan su prop\u00f3sito, se trata de <code>models.Model</code>, <code>models.TransientModel</code> y <code>models.AbstractModel</code>:</p> <ul> <li><code>models.Model</code> se trata de Modelos persistentes. Representa una tabla real en la base de datos. Los datos almacenados en este modelo son permanentes. Por ejemplo Clientes, productos, facturas, etc.</li> <li><code>models.TransientModel</code> son datos temporales (como asistentes o formularios r\u00e1pidos), por lo tanto es un modelo no persistente. Los registros se eliminan autom\u00e1ticamente despu\u00e9s de un tiempo (por defecto, 7 d\u00edas). Se utilizan para Wizards, asistentes de importaci\u00f3n/exportaci\u00f3n, formularios temporales.</li> <li><code>models.AbstractModel</code> que son modelos base reutilizables, o sea, se trata de modelos abstractos que no crea una tabla en la base de datos. Se utiliza para definir funcionalidades comunes que pueden ser heredadas por otros modelos.</li> </ul> <p>Comparativa r\u00e1pida</p> Caracter\u00edstica <code>models.Model</code> <code>models.TransientModel</code> <code>models.AbstractModel</code> Persistencia S\u00ed No (temporal) No Crea tabla en BD S\u00ed S\u00ed No Uso t\u00edpico Datos reales Formularios/Wizards Funcionalidad com\u00fan Eliminaci\u00f3n autom\u00e1tica No S\u00ed No"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#inspeccionar-los-modelos","title":"Inspeccionar los modelos","text":"<p>Para ver los modelos existentes, se puede acceder a la base de datos PostgreSQL o consultar en Configuraci\u00f3n &gt; Estructura de la base de datos &gt; Modelos dentro del modo desarrollador.</p> <p>Cabe destacar el campo modules, donde se indican los m\u00f3dulos instalados en los que se define o hereda el modelo observado.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#fields","title":"Fields","text":"<p>Las \"columnas\" del modelo son los fields (campos). Estos pueden ser de datos normales como Integer, Float, Boolean, Date, Char... o especiales como Many2one, One2many, Related...</p> <p>Hay algunos fields reservados:</p> <ul> <li>id (Id): identificador \u00fanico para un registro en su modelo.</li> <li>create_date (Datetime): fecha de creaci\u00f3n del registro.</li> <li>create_uid (Many2one): usuario que cre\u00f3 el registro.</li> <li>write_date (Datetime): fecha de la \u00faltima modificaci\u00f3n del registro.</li> <li>write_uid (Many2one): usuario que realiz\u00f3 la \u00faltima modificaci\u00f3n.</li> </ul> <p>Hay otros fields que podemos declarar y que tienen propiedades especiales. Estos son los m\u00e1s importantes:</p> <ul> <li>name: es el campo utilizado para el Identificador Externo o cuando se hace referencia en los many2one en la vista.</li> <li>active: indica si el registro est\u00e1 activo. Permite ocultar productos que ya no se necesitan, por ejemplo.</li> <li>sequence: permite definir el orden de los registros a mostrar en una lista.</li> </ul> <p>Los fields se declaran con un constructor:</p> <pre><code>from openerp import models, fields\n\nclass LessMinimalModel(models.Model):\n    _name = 'test.model2'\n\n    name = fields.Char()\n</code></pre> <p>Tienen unos atributos comunes:</p> <ul> <li>string (unicode, por defecto: el nombre del field): la etiqueta que ver\u00e1n los usuarios en la vista.</li> <li>required (bool, por defecto: False): si es True, el campo no puede quedar vac\u00edo.</li> <li>help (unicode, por defecto: ''): en los formularios proporciona ayuda al usuario para rellenar el campo.</li> <li>index (bool, por defecto: False): pide a Odoo que sea el \u00edndice de la base de datos. En otro caso, el ORM crea un campo id.</li> </ul> <p>Y algunos, sobre todo los especiales, tienen atributos particulares.</p> <p>Ejemplo completo:</p> <pre><code>class AModel(models.Model):\n\n    _name = 'a_name'\n\n    name = fields.Char(\n        string=\"Name\",                   # Etiqueta opcional del campo\n        compute=\"_compute_name_custom\",  # Convierte el campo en calculado\n        store=True,                      # Si es calculado, almacena el resultado\n        select=True,                     # Fuerza \u00edndice en el campo\n        readonly=True,                   # El campo ser\u00e1 solo lectura en las vistas\n        inverse=\"_write_name\",           # Al actualizar, dispara esta funci\u00f3n\n        required=True,                   # Campo obligatorio\n        translate=True,                  # Habilita traducci\u00f3n\n        help='blabla',                   # Texto de ayuda\n        company_dependent=True,          # Convierte columnas a ir.property\n        search='_search_function',       # B\u00fasqueda personalizada, usado sobre todo con compute\n        copy=True                        # Si se puede copiar con el m\u00e9todo copy()\n    )\n\n    # La clave string no es obligatoria\n    # Por defecto usar\u00e1 el nombre de la propiedad capitalizado\n\n    name = fields.Char()  # Definici\u00f3n v\u00e1lida\n</code></pre> <p>Si queremos valores por defecto, se pueden indicar como un atributo del field.</p> <p><pre><code>name = fields.Char(default='Alberto')\n</code></pre> o <pre><code>name = fields.Char(default=a_fun)\n...\ndef a_fun(self):\n    return self.do_something()\n</code></pre></p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#fields-normals","title":"Fields normals","text":"<p>Aquests s\u00f3n els fields per a dades normals que proporciona Odoo:</p> <ul> <li>Integer</li> <li>Char</li> <li>Text</li> <li>Date : Mostra un calendari en la vista.</li> <li>Datetime</li> <li>Float</li> <li>Boolean</li> <li>Html : Guarda un text, per\u00f2 es representa de manera especial en el     client.</li> <li>Binary : Per guardar, per exemple, imatges. Utilitza codificaci\u00f3     base64 al enviar els fitxers al client. En realitat les guarda en     /var/lib/odoo/.local/share/Odoo/filestore i la ruta als fitxers     la diu la taula ir_attachment junt amb el id, nom del field i el     model.</li> <li>Image (Odoo13) : En el cas d\\'imatges, accepta els atributs     max_width i max_height on es pot dir en p\u00edxel que ha de     redimensionar la imatge a eixa mida m\u00e0xima.</li> <li>Selection : Mostra un select amb les opcions indicades.</li> </ul> <pre><code>     type = fields.Selection([('1','Basic'),('2','Intermediate'),('3','Completed')])\n     aselection = fields.Selection(selection='a_function_name') # Es pot cridar a una funci\u00f3 que defineix les opcions.\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#fields-relacionals","title":"Fields Relacionals","text":"<p>Les relacions entre els models (en definitiva, entre les taules de la base de dades) tamb\u00e9 les simplifica l\\'ORM. D\\'aquesta maneram les relacions 1 a molts es fan en el Odoo anomena Many2one i les relacions Mols a Molts es fan el el Many2Many. Les relacions molts a molts, en una base de dades relacional, impliquen una tercera taula en mitg, per\u00f2 en Odoo no tenim que preocupar-nos d\\'aquestes coses si no volem, el mapat dels objectes el detectar\u00e0 i far\u00e0 les taules, claus i restriccions d\\'integritat necessaries. Anem a repasar un a un aquests camps:</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#reference","title":"Reference","text":"<p>Una refer\u00e8ncia arbitr\u00e0ria a un model i un camp. 2</p> <pre><code> aref = fields.Reference([('model_name', 'String')])\n aref = fields.Reference(selection=[('model_name', 'String')])\n aref = fields.Reference(selection='a_function_name')\n\n# Fragment de test_new_api:\n    reference = fields.Reference(string='Related Document', selection='_reference_models')\n    @api.model\n    def _reference_models(self):\n        models = self.env['ir.model'].search([('state', '!=', 'manual')])\n        return [(model.model, model.name)\n                for model in models\n                if not model.model.startswith('ir.')]\n</code></pre> <p>Els fields reference no s\u00f3n molt utilitzats, ja que normalment les relacions entre models s\u00f3n sempre les mateixes.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#many2one","title":"Many2one","text":"<p>Relaci\u00f3 amb un altre model</p> <pre><code> arel_id = fields.Many2one('res.users')\n arel_id = fields.Many2one(comodel_name='res.users')\n an_other_rel_id = fields.Many2one(comodel_name='res.partner', delegate=True)\n</code></pre> <p>En aquest cas:</p> <pre><code>----------            -----------\n| Pais   |  one       |  Ciutat | \n---------- -----      -----------\n| * id   |     |      | * id    |\n| * name |     |  many| * name  |\n----------     |------| * pais  |\n                      -----------\n</code></pre> <p>El codi resultant ser\u00eda:</p> <pre><code>class ciutat(models.Model):\n    _name = 'mon.ciutat'\n    pais = fields.Many2one(\"mon.pais\", string='Pais', ondelete='restrict')\n</code></pre> <p>delegate est\u00e0 en True per a fer que els fields del model apuntat siguen accessibles des del model actual.</p> <p>Accepta tamb\u00e9 context i domain com en la vista. D\\'aquesta manera queda disponible per a totes les possibles vistes.</p> <p>Un altre argument addicional \u00e9s ondelete que permet definir el comportament al esborrar l\\'element referenciat a set null, restrict o cascade.</p> <p>ondelete cascade esborra els fills a nivel de PostgreSQL, per\u00f2 no elimina en External Id, aix\u00f2 es fa en unlink(), per\u00f2 no executa unlink() dels fills. Per tant, si volem que s'eliminen per complet, cal heretar el unlink del pare i afegir la cridada al dels fills.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#one2many","title":"One2many","text":"<p>Inversa del Many2one. Necessita de la exist\u00e8ncia d\\'un Many2one en l\\'altre:</p> <pre><code> arel_ids = fields.One2many('res.users', 'arel_id')\n arel_ids = fields.One2many(comodel_name='res.users', inverse_name='arel_id')\n</code></pre> <p>Un One2many funciona perqu\u00e8 hi ha un many2one en l\\'altre model. D\\'aquesta manera, sempre has de especificar el nom del model i el nom del camp Many2one del model que fa referencia a l\\'actual, com es pot veure en l\\'exemple.</p> <p>En l\\'exemple anterior, quedaria com:</p> <pre><code>class pais(models.Model):\n    _name = 'mon.pais'\n    ciutats = fields.One2many('mon.ciutat', 'pais', string='Ciutats')\n</code></pre> <p>```{admonition} Important :class: danger \u00c9s important entendre que el One2many no implica dades addicionals en la base de dades i sempre \u00e9s calculat com un ''select'' en la base de dades on el id del model actual coincidisca amb el Many2one (clau aliena) de l'altre model. Aix\u00f2 fa que no tinga sentit fer One2many computed o ficar un domain per restringit els que es poden afegir. <pre><code>```{admonition} Domains\n:class: tip\nEls One2many poden tindre domain per no mostrar els que no compleixen una condici\u00f3, aix\u00f2 no significa que no existeixi aquesta relaci\u00f3.\n</code></pre></p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#many2many","title":"Many2many","text":"<p>Relaci\u00f3 molts a molts.</p> <pre><code> arel_ids = fields.Many2many('res.users')\n arel_ids = fields.Many2many(comodel_name='res.users', # El model en el que es relaciona\n                            relation='table_name', # (opcional) el nom del la taula en mig\n                            column1='col_name', # (opcional) el nom en la taula en mig de la columna d'aquest model\n                            column2='other_col_name')  # (opcional) el nom de la columna de l'altre model.\n</code></pre> <p>El primer exemple sol funcionar directament, per\u00f2 si volem tindre m\u00e9s d\\'una relaci\u00f3 Many2many entre els dos mateixos models, cal utilitzar la sintaxi completa on especifiquem el nom de la relaci\u00f3 i el nom de les columnes que identifiquem els dos models. Pensem que una relaci\u00f3 Many2many implica una taula en mig i estem especificant les seues claus alienes.</p> <p><pre><code>Tamb\u00e9 \u00e9s prec\u00eds especificar la taula en mig si es fa una relaci\u00f3 Many2many al propi model.\n</code></pre> <pre><code>Un Many2many implica una taula en mig. Si volem afegir atributs a aquesta relaci\u00f3, cal crear expl\u00edcitament el model del mig. \n\nEl many2many pot ser ''computed'' i en el c\u00f2mput es pot ordenar o filtrar. Un Many2many computed no crea la taula en mig.\n</code></pre></p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#related","title":"Related","text":"<p>Un camp d\\'un altre model, necessita una relaci\u00f3 Many2one. D\\'aquesta manera es poden aprofitar les funcionalitats de guardar, com ara les b\u00fasquedes o refer\u00e8ncies en funcions. En termes de bases de dades, un camp related trenca la tercera forma normal. Aix\u00f2 sol ser problem\u00e0tic, per\u00f2 Odoo t\u00e9 mecanismes per a que no passe res. De totes maneres, si ens preocupa aix\u00f2, amb store=False no guarda res en la taula.</p> <pre><code>participant_nick = fields.Char(string='Nick name',\n                               store=True,\n                               related='partner_id.name'\n</code></pre> <p>Un camp related pot ser de qualsevol tipus. Per exemple, many2one:</p> <pre><code>sala = fields.Many2one('cine.sala',related='sessio.sala',store=True,readonly=True)\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#many2onereference","title":"Many2oneReference","text":"<p>Un Many2one on es guardar tamb\u00e9 el model al qual fa refer\u00e8ncia amb l'atribut: model_field.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#one2one","title":"One2one","text":"<p>Els camps One2one no existeixen en Odoo. Per\u00f2 si volem aquesta funcionalitat podem utilitzar varies t\u00e8cniques:</p> <ul> <li>Fer dos camps Many2many i restringir amb constrains que sols pot     existir una relaci\u00f3. Problemes:<ul> <li>En la vista no podem ficar un widget com en el Many2one i \u00e9s     complicat evitar relacions creuades.</li> <li>Es pot fer un limit en la vista, per\u00f2 es continuar\u00e0     comportant com un Many2many.</li> </ul> </li> <li>Fer dos Many2one i restringit amb contrains o sql constrains que     sols pot existir una relaci\u00f3 m\u00fatua. (Cal sobreescriure els m\u00e8todes     create i write per a que es cree l\\'associaci\u00f3 autom\u00e0ticament).     Problemes:<ul> <li>Si sobreescribim el write de els dos, es pot produir una cridada     recursiva sense fi i \u00e9s molt complicat aconseguir que no tingam     refer\u00e8ncies creuades.</li> </ul> </li> <li>Fer un Many2one i en l\\'altre model un Many2one computed que busque     en els del primer model. Per poder editar en els dos cal fer una     funci\u00f3 inversa per al camp computed. Aquesta \u00e9s una de les opcions     m\u00e9s elegants. Exemple:</li> </ul> <p><pre><code>class orderline(models.Model):\n    _name = 'sale.order.line'\n    _inherit = 'sale.order.line'\n    booking = fields.Many2one('reserves.bookings')\n\n    _sql_constraints = [\n    ('booking_uniq', 'unique(booking)', 'There is another order line for this booking'),\n    ]\n\nclass bookings(models.Model):\n    _name = 'reserves.bookings'\n\n    name = fields.Char()\n    order_line = fields.Many2one('sale.order.line',compute='_get_order_line',inverse='_set_order_line')\n\n    @api.multi\n    def _get_order_line(self):\n        for b in self:\n            b.order_line=self.env['sale.order.line'].search([('booking.id','=',b.id)]).id\n\n    @api.one\n    def _set_order_line(self):\n        o = self.order_line.id\n        self.env['sale.order.line'].search([('id','=',o)]).write({'booking':self.id})\n</code></pre> -   Fer un Many2one i un One2many i restringir el m\u00e0xim del One2many (     3     ). Problemes:     -   Els mateixos que en els dos many2manys. \u00c9s m\u00e9s simple restringir         les relacions creuades. -   Fer una her\u00e8ncia m\u00faltiple.     4.     Problemes:     -   Esta \u00e9s, en teor\u00eda, la forma m\u00e9s oficial de fer-ho, per\u00f2 obliga         a crear sempre la relaci\u00f3 i els models en un ordre determinat.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#filtres-domains","title":"Filtres (Domains)","text":"<p>En ocasions \u00e9s necessari afegir un filtre en el codi python per fer que un camp relacional no puga tindre certes refer\u00e8ncies. El comportament del domain \u00e9s diferent depen del tipus de field.</p> <ul> <li>Domain en Many2one: Filtra els elements del model referenciat     que poden ser elegits per al field:</li> </ul> <pre><code>parent = fields.Many2one('game.resource', domain=\"[('template', '=', True)]\")\n</code></pre> <ul> <li>Domain en Many2many: La llista d\\'elements a triar es filtra     segons el domain:</li> </ul> <pre><code>allowed_value_ids = fields.Many2many(\n    comodel_name=\"x\",\n    compute=\"_compute_allowed_value_ids\"\n)\n\ndef _compute_allowed_value_ids(self):\n    for record in self:\n        record.allowed_value_ids = self.env[\"x\"].search(...)\n\nvalue_id = fields.Many2many(\n    comodel_name=\"x\",\n    domain=\"[('id', 'in', allowed_value_ids)]\",\n)\n</code></pre> <ul> <li>Domain en One2many: Al ser una relaci\u00f3 que depen d\\'altre     Many2one, no es pot filtrar, si fiquem un domain, sols deixar\u00e0 de     mostrar els que no compleixen el domain, per\u00f2 no deien d\\'existir:</li> </ul>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#fields-computed","title":"Fields Computed","text":"<p>Moltes vegades volem que el contingut d\\'un camp siga calculat en el moment en que anem a veure-lo. Tots els tipus de fields poden ser computed. Anem a veure alguns exemples:</p> <pre><code>   taken_seats = fields.Float(string=\"Taken seats\", compute='_taken_seats')   # Aquest camp no es guarda a la base de dades \n                                                                #i sempre es recalcula quan executem un action que el mostra\n\n   @api.depends('seats', 'attendee_ids')  # El decorador @api.depends() indica que es cridar\u00e0 a la funci\u00f3 \n                                          # sempre que es modifiquen els camps seats i attendee_ids. \n                                          #Si no el posem, es recalcula sols al recarregar el action.\n   def _taken_seats(self):          \n      for r in self:  # El for recorre self, que \u00e9s un recordset amb tots els elements del model mostrats \n                      # per la vista, si \u00e9s un tree, seran tots els visibles i si \u00e9s un form, ser\u00e0 un singleton.\n          if not r.seats: # r \u00e9s un singleton i es pot accedir als fields com a variables de l'objecte.      \n              r.taken_seats = 0.0 \n          else:\n              r.taken_seats = 100.0 * len(r.attendee_ids) / r.seats\n</code></pre> <p>En aquest exemple es veu c\u00f3m el camp float taken seats es calcula en una funci\u00f3 privada _taken_seats. \u00c9s interessant observar el for perqu\u00e8 recorre totes les instancies a les que fa refer\u00e8ncia el model. Aquesta funci\u00f3 sols s\\'executar\u00e0 una vegada encara que tinga que calcular tots els elements d\\'una llista. Per aix\u00f2, la propia funci\u00f3 \u00e9s la que t\u00e9 que iterar els elements de self. self \u00e9s un <code>recordset</code>, per tant, \u00e9s com una llista en la que cada element \u00e9s un registre del model. Si el computed \u00e9s cridat al entrar a un formulari, el recordset tindr\u00e0 sols un element, per\u00f2 si el camp computed es veu en una llista (tree), pot ser que siguen m\u00e9s d\\'un registre. \u00c9s important recordar fer el for record in self: encara que pensem que el camp computed sols l\\'utilitzarem en un formulari.</p> <p>Exemples de computed de tots els tipus de fields:</p> <pre><code># -*- coding: utf-8 -*-\n\nfrom openerp import models, fields, api, tools\nfrom datetime import date, datetime\n\nclass proves_computed(models.Model):\n     _name = 'proves_computed.proves_computed'\n\n     name = fields.Char()\n     value = fields.Integer()\n     image = fields.Binary(String=\"Image original\")\n     computedfloat = fields.Float(compute=\"_value_pc\", store=True)\n     computedchar = fields.Char(compute=\"_value_pc\", store=False)\n     medium_image = fields.Binary(compute=\"_redimensionar\", store=True)\n     small_image = fields.Binary(compute=\"_redimensionar\", store=True)\n     computedm2o = fields.Many2one('res.partner',compute=\"_value_pc\", store=False)\n     computedm2m = fields.Many2many(comodel_name='product.template',compute=\"_value_pc\", store=False)\n     computeddate = fields.Date(compute=\"_value_pc\", store=False)\n     computeddatetime = fields.Datetime(compute=\"_value_pc\", store=False)\n\n     description = fields.Text()\n\n     @api.depends('value')\n     def _value_pc(self):\n      for r in self:\n        r.computedfloat = float(r.value) / 100 \n        r.computedchar = \"(\"+str(r.value)+\")\"\n        r.computedm2o = self.env['res.partner'].search([('id','=',r.value)]).id # Many2one espera un id, que \u00e9s un camp Integer. \n        print '\\033[93m'+str(self.env['product.product'].search([('id','&gt;',r.value)]).ids)+'\\033[0m'\n        r.computedm2m = self.env['product.template'].search([('id','&gt;',r.value)]).ids #Many2many espera un array d'ids o un recordset. \n        # El codi comentat a continuaci\u00f3 fa el mateix, per si volem fer altres coses dins del for.\n        #ids = []\n        #for t in self.env['product.template'].search([('id','&gt;',r.value)]):\n        # ids.append(t.id)\n        #r.computedm2m = ids\n\n        #r.computeddate = date.today() # Aquest depen de Python\n        r.computeddate = fields.date.today() # Recomanem aquest, ja que \u00e9s propi de la classe fields d'Odoo\n        #r.computeddate = datetime.now()\n        r.computeddatetime = fields.datetime.now()\n\n\n     @api.depends('image')\n     def _redimensionar(self):\n       for r in self:\n         image_original = r.image\n         if image_original:\n            images = tools.image_get_resized_images(image_original)\n            r.medium_image = images['image_medium']                        \n            r.small_image = images['image_small']                \n         else:\n            r.medium_image = \"\"                        \n            r.small_image = \"\"\n</code></pre> <p>(Codi complet)</p> <p>En l\\'apartat del <code>controlador</code> s\\'expliquem m\u00e9s detalls de les funcions en python-odoo.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#buscar-i-escriure-en-camps-computed","title":"Buscar i escriure en camps computed","text":"<p>Amb el api.depends podem fer que camps calculats puguen ser buscats o referenciats des d\\'uns altres models, ja que podem dir que s\u00ed se guarden en la base de dades. Si es guarda en la base de dades no es recalcula fins que no canvia el contingut del field del que dep\u00e8n. Per\u00f2 si el camp calculat no dep\u00e8n de valors est\u00e0tics d\\'altres fields i/o necessitem que sempre es calcule, no tenim moltes opcions elegants. Una d\\'elles pot ser fer dos camps, un calculat store=False i altre no i fer un write en la funci\u00f3. L\\'altra possibilitat \u00e9s fer una funci\u00f3 p\u00fablica que puga ser cridada des d\\'un altre model. La m\u00e9s elegant que no sempre funciona \u00e9s utilitzar l\\'opci\u00f3 search i assignar-li una funci\u00f3 que ha de retornar un domini de b\u00fasqueda. El problema \u00e9s que no accepta molta complexitat, ja que suposa una cerca per tota la base de dades i pot ser molt ineficient.</p> <p>Per defecte no es pot escriure en un camp computed. No t\u00e9 massa sentit la majoria dels casos, ja que \u00e9s un camp que dep\u00e8n d\\'altres. Per\u00f2 pot ser que, de vegades volem escriure el resultat i que modifique el camp origen. Imaginem, per exemple, que sabem el preu final i volem que calcule el preu sense IVA. Per fer-ho, la millor manera \u00e9s crear una funci\u00f3 i fer que estiga en l\\'opci\u00f3 inverse.</p> <p>Exemple:</p> <pre><code> preu = fields.Float('Price',compute=\"_get_price\",search='_search_price',inverse='_set_price')\n\n @api.depends('pelicula','descompte')\n      def _get_price(self):\n        for r in self:\n          price = r.pelicula.preu\n          price = price - (price*r.descompte/100)\n          r.preu = price\n\n      def _search_price(self,operator,value): # De moment aquest search sols \u00e9s per a ==\n       preus = self.search([]).mapped(lambda e: [e.id , e.pelicula.preu - (e.pelicula.preu*e.descompte/100)]) # Un bon exemple de mapped en lambda\n       print preus\n       p = [ num[0] for num in preus if num[1] == value]  # condici\u00f3 if en una llista python sense fer un for (list comprehension)\n       # tamb\u00e9 es pot provar en un filter() de python\n       print p\n       # p \u00e9s una llista de les id que ja compleixen la condici\u00f3, per tant sols cal fer que la id estiga en la llista.\n       return [('id','in',p)]\n\n      def _set_price(self):\n       self.pelicula.preu = self.preu  # A\u00e7\u00f2 \u00e9s un exemple, per\u00f2 est\u00e0 mal, ja que modifiques el preu de la peli en totes les sessions\n</code></pre> <p>Documentaci\u00f3 oficial: https://www.odoo.com/documentation/master/developer/reference/backend/orm.html</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#valors-per-defecte","title":"Valors per defecte","text":"<p>En Odoo \u00e9s molt f\u00e0cil fer valors per defecte, ja que \u00e9s un argument m\u00e9s en el constructor dels fields:</p> <pre><code>name = fields.Char(default=\"Unknown\")\nuser_id = fields.Many2one('res.users', default=lambda self: self.env.user)\nstart_date = fields.Date(default=fields.Date.today())\nactive = fields.Boolean(default=True)\ndef compute_default_value(self):\n    return self.get_value()\na_field = fields.Char(default=compute_default_value)\n</code></pre> <p>Si volem, per exemple, ficar la data del moment de crear, no podem fer aix\u00f2:</p> <pre><code>start_date = fields.Date(default=fields.Date.today())  # MAL\n</code></pre> <p>Perqu\u00e8 calcula la data del moment d\\'actualitzar el m\u00f2dul, no el de crear l\\'element en el model. Cal fer:</p> <pre><code>start_date = fields.Date(default=lambda self: fields.Date.today())  # CORRECTE\n</code></pre> <p>o</p> <pre><code>start_date = fields.Datetime(default=lambda self: fields.Datetime.now()) # CORRECTE\n</code></pre> <p>El valor per defecte no pot dependre d\\'un field que est\u00e0 creant-se en eixe moment. En eixe cas es pot utilitzar un on_change.</p> <p>En cas de tindre molts valors per defecte o que depenen del context, es pot utilitzar la funci\u00f3 default_get que ja tenen els models.</p> <pre><code>    @api.model\n    def default_get(self, default_fields):\n        result = super(SelectSalePrice, self).default_get(default_fields)\n        if self._context.get('default_picking_id') is not None:\n            result['picking_id'] = self._context.get('default_picking_id')\n        return result\n</code></pre> <p>El que fa aquesta funci\u00f3 \u00e9s un poc avan\u00e7at de moment, ja que fa \u00fas del <code>context</code> i l\\'herencia per afegir un valor per defecte al diccionari que retorna aquesta funci\u00f3 en la classe Model</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#restriccions-constrains","title":"Restriccions (constrains)","text":"<p>Els objectes poden incorporar, de forma opcional, restriccions d'integritat, addicionals a les de la base de dades. Odoo valida aquestes restriccions en les modificacions de dades i, en cas de violaci\u00f3, mostra una pantalla d'error.</p> <pre><code>from ***Odoo***.exceptions import ValidationError\n\n@api.constrains('age')\ndef _check_something(self):\n    for record in self:\n        if record.age &gt; 20:\n            raise ValidationError(\"Your record is too old: %s\" % record.age)\n    # all records passed the test, don't return anything\n</code></pre> <p>En ocasions, quan tenim clar c\u00f3m far\u00edem aquesta restricci\u00f3 en SQL, tal vegada ens resulte m\u00e9s interessant fer una restricci\u00f3 de la base de dades amb una sql constraint. Aquestes es defineixen amb 3 strings (name, sql_definition, message). Per exemple:</p> <pre><code>_sql_constraints = [\n    ('name_uniq', 'unique(name)', 'Custom Warning Message'),\n    ('contact_uniq', 'unique(contact)', 'Custom Warning Message')\n]\n</code></pre> <p>En aquest cas \u00e9s una restricci\u00f3 d\\'unicitat, la qual \u00e9s m\u00e9s simple que fer una b\u00fasqueda en python.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#fitxers-de-dades","title":"Fitxers de dades","text":"<p>Quan fem un m\u00f2dul d\\'Odoo, es poden definir dades que es guardaran en la base de dades. Aquestes dades poden ser necess\u00e0ries per al funcionament del m\u00f2dul, de demostraci\u00f3 o incl\u00fas part de la vista.</p> <p><pre><code>Alguns m\u00f2duls sols estan per clavar dades en Odoo\n</code></pre> Tots els fitxers de dades s\u00f3n en XML i tenen una estructura com esta:</p> <pre><code>&lt;odoo&gt;\n        &lt;record model=\"{model name}\" id=\"{record identifier}\"&gt;\n            &lt;field name=\"{a field name}\"&gt;{a value}&lt;/field&gt;\n        &lt;/record&gt;\n&lt;odoo&gt;\n</code></pre> <p>Dins de les etiquetes odoo poden trobar una etiqueta record per cada fila en la taula que volem introduir. Cal especificar el model i el id. El id \u00e9s un identificador extern, que no te perqu\u00e8 coincidir amb la clau prim\u00e0ria que l\\'ORM utilitzar\u00e0 despr\u00e9s. Cada field tindr\u00e0 un nom i un valor.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#external-ids","title":"External Ids","text":"<p>Tots els records de la base de dades tenen un identificador \u00fanic en la seua taula, el id. \u00c9s un n\u00famero auto incremental assignat per la base de dades. No obstant, si volem fer refer\u00e8ncia a ell en fitxers de dades o altres llocs, no sempre tenim perqu\u00e8 saber el id. La soluci\u00f3 d\\'odoo s\u00f3n els External Identifiers. Aix\u00f2 \u00e9s una taula que relaciona cada id de cada taula en un nom. Es tracta del model ir.model.data. Per trobar-los cal anar a:</p> <p><code>Settings\u00a0&gt;\u00a0Technical\u00a0&gt;\u00a0Sequences\u00a0&amp;\u00a0identifiers\u00a0&gt;\u00a0External\u00a0Indentifiers</code></p> <p>Ah\u00ed dins trobem la columna Complete ID.</p> <p>Per trobar les id al fer fitxers de demostraci\u00f3 o de dades podem anar al men\u00fa, per\u00f2 eixes ids canvien d\\'una instal\u00b7laci\u00f3 a un altra. Per tant, cal utilitzar les external id. Per aconseguir-lo podem obrir el mode desenvolupador i obrir el men\u00fa View Metadata.</p> <p>En les dades de demo, els external Ids s\\'utilitzen per no utilitzar les id, que poden canviar al ser auto incrementals. Per a que funcione cal utilitzar l\\'atribut ref:</p> <pre><code>&lt;field name=\"product_id\" ref=\"product.product1\"/&gt;\n</code></pre> <pre><code>Es recomana fer l'atribut '''id''' en el record, encara que no sobreescriu el id real, serveix per declarar el External Id i \u00e9s m\u00e9s f\u00e0cil despr\u00e9s fer refer\u00e8ncia a ell.\n</code></pre> <p>Veure tamb\u00e9 la funci\u00f3 ref() de l\\'ORM</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#expressions","title":"Expressions","text":"<p>De vegades volem que els fields es calculen cada vegada que s\\'actualitza el m\u00f2dul. Aix\u00f2 es pot fer en l\\'atribut eval que avalua una expressi\u00f3 de Python.</p> <pre><code>&lt;field name=\"date\" eval=\"(datetime.now()+timedelta(-1)).strftime('%Y-%m-%d')\"/&gt;\n&lt;field name=\"product_id\" eval=\"ref('product.product1')\"/&gt; # Equivalent a l'exemple anterior\n&lt;field name=\"price\" eval=\"ref('product.product1').price\"/&gt;\n&lt;field name=\"avatar\" model=\"school.template\" eval=\"obj().env.ref('school.template_student1').image\" &gt;&lt;/field&gt;  # Com que utilitza obj() necessita model=\"...\n</code></pre> <p>Per al x2many, es pot utilitzar el eval per assignar una llista d\\'elements.</p> <pre><code>&lt;field name=\"tag_ids\" eval=\"[(6,0,[ref('vehicle_tag_leasing'),ref('fleet.vehicle_tag_compact'),\n                                   ref('fleet.vehicle_tag_senior')] )]\" /&gt;\n</code></pre> <p>Observem que hem passat una tripleta amb un 6, un 0 i una llista de refs. Les tripletes poden ser:</p> <ul> <li>(0,_ ,{\\'field\\': value}): Crea un nou registre i el vincula</li> <li>(1,id,{\\'field\\': value}): Actualtiza els valors en un registre ja     vinculats</li> <li>(2,id,_): Desvincula i elimina el registre</li> <li>(3,id,_): Desvincula per\u00f2 no elimina el registre de la relaci\u00f3.</li> <li>(4,id,_): Vincula un registre ja existent</li> <li>(5,_,_): Desvincula pero no elimina tots els registres vinculats</li> <li>(6,_,[ids]): Reempla\u00e7a la llista de registres vinculats.</li> </ul>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#dades-per-als-binary-i-image","title":"Dades per als Binary i Image","text":"<p>Algunes dades com les imatges o fitxers es poden posar en records. Hi ha dos maneres: </p> <ul> <li>Convertir en Base64 el fitxer i copiar i pegar el resultat dins del field.</li> <li>Afegir el atribut <code>type=\"base64\"</code> i el atribut <code>file=\"modul/demo/fitxer\"</code></li> </ul> <p><pre><code>&lt;field name=\"image_1920\" type=\"base64\" file=\"exemple/demo/cares/1000.jpg\"/&gt;\n</code></pre> Observem la ruta que inicia des del directori del m\u00f2dul.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#esborrar","title":"Esborrar","text":"<p>Amb l\\'etiqueta delete es pot especificar els elements a esborrar amb el external ID o amb un search:</p> <pre><code>&lt;delete model=\"cine.sessio\" id=\"sessio_cine1_1\"&gt;&lt;/delete&gt;\n</code></pre> <pre><code>Si falla l'actualitzaci\u00f3 amb dades de demo, \u00e9s possible que ***Odoo*** deshabilite la possibilitat de tornar-les a instal\u00b7lar. Aix\u00f2 \u00e9s el field demo de ir.module.module que \u00e9s readonly, per tant, cal modificar-lo a ma en la base de dades:\n\n`update\u00a0ir_module_module\u00a0set\u00a0demo\u00a0=\u00a0't'\u00a0where\u00a0name='school';`\n</code></pre> <p>M\u00e9s informaci\u00f3: https://www.odoo.com/documentation/master/developer/reference/backend/data.html</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#accions-i-menus","title":"Accions i men\u00fas","text":"<p>Si vols con\u00e8ixer en m\u00e9s detall c\u00f3m funcionen les accions en Odoo, llig l\\'article Accions i men\u00fas en Odoo</p> <p>El client web de Odoo cont\u00e9 uns men\u00fas dalt i a l\\'esquerra. Aquests men\u00fas, al ser accionats mostren altres men\u00fas i les pantalles del programa. Quant pulsem en un men\u00fa, canvia la pantalla perqu\u00e8 hem fet una acci\u00f3.</p> <p>Una acci\u00f3 b\u00e0sicament t\u00e9:</p> <ul> <li>type: El tipus d\\'acci\u00f3 que \u00e9s i c\u00f3m l\\'acci\u00f3 \u00e9s interpretada.     Quan la definim en el XML, el type no cal especificar-lo, ja que ho     indica el model en que es guarda.</li> <li>name: El nom, que pot ser mostrat en la pantalla o no. Es     recomana que siga llegible per els humans.</li> </ul> <p>Les accions i els men\u00fas es declaren en fitxers de dades en XML o dir\u00e8ctament si una funci\u00f3 retorna un diccionari que la defineix. Les accions poden ser cridades de tres maneres:</p> <ul> <li>Fent clic en un men\u00fa.</li> <li>Fent clic en botons de les vistes (han d\\'estar connectats amb     accions).</li> <li>Com accions contextuals en els objectes.</li> </ul> <p>D\\'aquesta manera, el client web pot saber quina acci\u00f3 ha d\\'executar si rep alguna d\\'aquestes coses:</p> <ul> <li>false: Indica que s\\'ha de tancar el di\u00e0leg actual.</li> <li>Una string: Amb l\\'etiqueta de l\\'acci\u00f3 de client a     executar.</li> <li>Un n\u00famero: Amb el ID o external ID de l\\'acci\u00f3 a trobar a la     base de dades.</li> <li>Un diccionari: Amb la definici\u00f3 de l\\'acci\u00f3, aquesta no est\u00e0 ni     en XML ni en la base de dades. En general, \u00e9s la manera de cridar a     un action al finalitzar una funci\u00f3.</li> </ul>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#accions-tipus-window","title":"Accions tipus window","text":"<p>Les accions window s\u00f3n un record m\u00e9s (ir.actions.act_window). No obstant, els men\u00fas que les criden, tenen una manera m\u00e9s r\u00e0pida de ser declarats amb una etiqueta menuitem:</p> <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"action_list_ideas\"&gt;\n    &lt;field name=\"name\"&gt;Ideas&lt;/field&gt;\n    &lt;field name=\"res_model\"&gt;idea.idea&lt;/field&gt;\n    &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n&lt;/record&gt;\n&lt;menuitem id=\"menu_ideas\" parent=\"menu_root\" name=\"Ideas\" sequence=\"10\"\n          action=\"action_list_ideas\"/&gt;\n</code></pre> <pre><code> Les accions han de ser declarades al XML abans que els men\u00fas que les accionen. \n</code></pre> <p>Exemple:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;openerp&gt;\n    &lt;data&gt;\n        &lt;!-- window action --&gt;\n        &lt;!--\n            The following tag is an action definition for a \"window action\",\n            that is an action opening a view or a set of views\n        --&gt;\n        &lt;record model=\"ir.actions.act_window\" id=\"course_list_action\"&gt;\n            &lt;field name=\"name\"&gt;Courses&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;openacademy.course&lt;/field&gt;\n            &lt;field name=\"view_type\"&gt;form&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n            &lt;field name=\"help\" type=\"html\"&gt;\n                &lt;p class=\"oe_view_nocontent_create\"&gt;Create the first course\n                &lt;/p&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n\n        &lt;!-- top level menu: no parent --&gt;\n        &lt;menuitem id=\"main_openacademy_menu\" name=\"Open Academy\"/&gt;\n        &lt;!-- A first level in the left side menu is needed\n             before using action= attribute --&gt;\n        &lt;menuitem id=\"openacademy_menu\" name=\"Open Academy\"\n                  parent=\"main_openacademy_menu\"/&gt;\n        &lt;!-- the following menuitem should appear *after*\n             its parent openacademy_menu and *after* its\n             action course_list_action --&gt;\n        &lt;menuitem id=\"courses_menu\" name=\"Courses\" parent=\"openacademy_menu\"\n                  action=\"course_list_action\"/&gt;\n        &lt;!-- Full id location:\n             action=\"openacademy.course_list_action\"\n             It is not required when it is the same module --&gt;\n    &lt;/data&gt;\n&lt;/openerp&gt;\n</code></pre> Sols el tercer nivell de men\u00fas pot tindre associada un action. El primer \u00e9s el men\u00fa de dalt i el segon no es \\'clicable\\'.</p> <pre><code>El que hem vist en esta secci\u00f3 \u00e9s la definici\u00f3 d'una acci\u00f3 en un XML com a part de la vista, per\u00f2 una acci\u00f3 no \u00e9s m\u00e9s que una forma c\u00f2moda d'escriure moltes coses que far\u00e0 el client en javascript per demanar alguna cosa al servidor. Els actions separen i simplifiquen el desenvolupament de la interf\u00edcie d'usuari que \u00e9s el client web. Un men\u00fa o bot\u00f3 en html acciona una funci\u00f3 javascript que en principi no sap el que fer. Aquesta demana que es carregue la definici\u00f3 del seu action. Una vegada carregada la definici\u00f3, queda clar tot el que ha de demanar (les vistes, context, dominis, vistes search, lloc on carregar-ho tot...) aleshores demana les vistes i amb ajuda de les vistes i els fields, demana els records que s\u00f3n les dades a mostrar. Per tant, un action \u00e9s la definici\u00f3 sense programar javascript de coses que ha de fer el javascript. ***Odoo*** permet declarar actions com a resposta de funcions. Aquestes actions no estan en la base de dades, per\u00f2 s\u00f3n enviades igualment al client i el client fa en elles el mateix que en un action que ell ha demanat. Un exemple d'aix\u00f2 s\u00f3n els actions que retornen els botons dels wizards. De fet, podem fer que un bot\u00f3 torne un action i, per tant, obrir una vista diferent. \n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#la-vista","title":"La vista","text":"<p>Per saber m\u00e9s sobre les vistes i c\u00f3mo millorar-les, consulta l\\'article de La vista en Odoo</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#herencia","title":"Her\u00e8ncia","text":"<p>El framework d\\'Odoo facilita el mecanisme de l'her\u00e8ncia per tal que els programadors puguin adaptar m\u00f2duls existents i garantir a la vegada que les actualitzacions dels m\u00f2duls no destrossin les adequacions desenvolupades.</p> <p>L'her\u00e8ncia es pot aplicar en els tres components del patr\u00f3 MVC:</p> <ul> <li>En el model: possibilita ampliar les classes existents o dissenyar     noves classes a partir de les existents.</li> <li>En la vista: possibilita modificar el comportament de vistes     existents o dissenyar noves vistes.</li> <li>En el controlador: possibilita sobreescriure els m\u00e8todes existents o     dissenyar-ne de nous.</li> </ul> <p>OpenObject proporciona tres mecanismes d'her\u00e8ncia: l'her\u00e8ncia de classe, l'her\u00e8ncia per prototip i l'her\u00e8ncia per delegaci\u00f3.</p> Mecanisme Caracter\u00edstiques Com es defineix De classe - Her\u00e8ncia simple. - La classe original queda substitu\u00efda o ampliada.  - Afegeix noves funcionalitats (atributs i/o m\u00e8todes) a la classe original.  - Les vistes definides sobre la classe original continuen funcionant.  - Permet sobreescriure m\u00e8todes de la classe original.  - En PostgreSQL, continua mapada en la mateixa taula que la classe original, ampliada amb els nous atributs que pugui incorporar. - S'utilitza l'atribut <code>_inherit</code> en la definici\u00f3 de la nova classe Python: <code>_inherit = 'obj'</code>.  - El nom de la nova classe ha de continuar sent el mateix que el de la classe original: <code>_name = 'obj'</code>. Per prototip - Her\u00e8ncia simple.  - Aprofita la definici\u00f3 de la classe original (com si fos un \u00abprototipus\u00bb).  - La classe original continua existint.  - Afegeix noves funcionalitats (atributs i/o m\u00e8todes) a les aportades per la classe original.  - Les vistes definides sobre la classe original no existeixen (cal dissenyar-les de nou).  - Permet sobreescriure m\u00e8todes de la classe original.  - En PostgreSQL, queda mapada en una nova taula. - S'utilitza l'atribut <code>_inherit</code> en la definici\u00f3 de la nova classe Python: <code>_inherit = 'obj'</code>.  - Cal indicar el nom de la nova classe: <code>_name = 'nou_nom'</code>. Per delegaci\u00f3 - Her\u00e8ncia simple o m\u00faltiple.  - La nova classe \u00abdelega\u00bb certs funcionaments a altres classes que incorpora a l'interior.  - Els recursos de la nova classe contenen un recurs de cada classe de la que deriven.  - Les classes base continuen existint.  - Afegeix les funcionalitats pr\u00f2pies (atributs i/o m\u00e8todes) que correspongui.  - Les vistes definides sobre les classes bases no existeixen a la nova classe.  - En PostgreSQL, queda mapada en diferents taules: una taula per als atributs propis, mentre que els recursos de les classes derivades resideixen en les taules corresponents a les dites classes. - S'utilitza l'atribut <code>_inherits</code> en la definici\u00f3 de la nova classe Python: <code>_inherits = {'obj': 'field_id'}</code>.  - Cal indicar el nom de la nova classe: <code>_name = 'nou_nom'</code>. <pre><code>```{figure} imgs/Inheritance_methods.png\n:scale: 100 %\n:alt: Her\u00e8ncia\n\nDiferents modes d'her\u00e8ncia\n```\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#herencia-en-el-model","title":"Her\u00e8ncia en el Model","text":"<p>El disseny d'un model d'Odoo heretat \u00e9s paregut al disseny d'un no heretat; \u00fanicament hi ha dues difer\u00e8ncies:</p> <ul> <li>Apareix l'atribut _inherit o _inherits per indicar     l'objecte (her\u00e8ncia simple) o els objectes (her\u00e8ncia m\u00faltiple) dels     quals deriva el nou objecte. La sintaxi a seguir \u00e9s:</li> </ul> <p><code>_inherit\u00a0=\u00a0'nom.objecte.del.que.es.deriva'</code>\\ <code>_inherits\u00a0=\u00a0{'nom.objecte1':'nom_camp_FK1',\u00a0...}</code></p> <ul> <li>En cas d'her\u00e8ncia simple, el nom (atribut _name) de l'objecte     derivat pot coincidir o no amb el nom de l'objecte pare. Tamb\u00e9 \u00e9s     possible no indicar l'atribut _name, fet que indica que el nou     objecte mant\u00e9 el nom de l'objecte pare.</li> </ul> <p>L'her\u00e8ncia simple (_inherit) amb atribut _name id\u00e8ntic al de l'objecte pare, s'anomena her\u00e8ncia de classe i en ella el nou objecte substitueix l'objecte pare, tot i que les vistes sobre l'objecte pare continuen funcionant. Aquest tipus d'her\u00e8ncia, la m\u00e9s habitual, s'utilitza quan es vol afegir fields i/o modificar propietats de dades existents i/o modificar el funcionament d'alguns m\u00e8todes. En cas d'afegir dades, aquestes s'afegeixen a la taula de la base de dades en la qual estava mapat l'objecte pare.</p> <p>Exemple d\\'her\u00e8ncia de classe L'her\u00e8ncia de classe la trobem en molts m\u00f2duls que afegeixen dades i m\u00e8todes a objectes ja existents, com per exemple, el m\u00f2dul comptabilitat (account) que afegix dades i m\u00e8todes a l'objecte res.partner. Fixem-nos en el contingut del m\u00f2dul account:</p> <pre><code>    class res_partner(Model.model):\n    _inherit = 'res.partner'\n    debit_limit = fields.float('Payable limit')\n    ...\n</code></pre> <p>Podeu comprovar que la taula res_partner d'una empresa sense el m\u00f2dul account instal\u00b7lat no cont\u00e9 el camp debit_limit, que en canvi s\u00ed que hi apareix una vegada instal\u00b7lat el m\u00f2dul.</p> <p>Odoo t\u00e9 molts m\u00f2duls que deriven de l'objecte res.partner per afegir-hi caracter\u00edstiques i funcionalitats.</p> <p>L'her\u00e8ncia simple (_inherit) amb atribut _name diferent al de l'objecte pare, s'anomena her\u00e8ncia per prototip i en ella es crea un nou objecte que aglutina les dades i m\u00e8todes que tenia l'objecte del qual deriva, juntament amb les noves dades i m\u00e8todes que pugua incorporar el nou objecte. En aquest cas, sempre es crea una nova taula a la base de dades per mapar el nou objecte.</p> <p>Exemple d\\'her\u00e8ncia per prototip L'her\u00e8ncia per prototip \u00e9s dif\u00edcil de trobar en els m\u00f2duls que incorpora Odoo. Un exemple el tenim en el m\u00f2dul base_calendar en el qual podem observar el m\u00f2dul comptabilitat (account) que afegix dades i m\u00e8todes a l'objecte res.partner. Fixem-nos en el contingut del m\u00f2dul account:</p> <pre><code>    class res_alarm(Model.model):\n    _name = 'res.alarm'\n    ...\n    class calendar_alarm(Model.model):\n    _name = 'calendar.alarm'\n    _inherit = 'res.alarm'\n    ...\n</code></pre> <p>En una empresa que tingui el m\u00f2dul base_calendar instal\u00b7lat podeu comprovar l'exist\u00e8ncia de la taula res_alarm amb els camps definits a l'apartat _atributs de la classe res_alarm i la taula calendar_alarm amb camps id\u00e8ntics als de la taula res_alarm m\u00e9s els camps definits a l'apartat _atributs de la classe calendar_alarm.</p> <p><pre><code>L'her\u00e8ncia per prototip \u00e9s la tradicional en els llenguatges orientats a objectes, ja que crea una nova classe vinculada\n</code></pre> L'her\u00e8ncia m\u00faltiple (_inherits) s'anomena her\u00e8ncia per delegaci\u00f3 i sempre provoca la creaci\u00f3 d'una nova taula a la base de dades. L'objecte derivat ha d'incloure, per cada derivaci\u00f3, un camp many2one apuntant l'objecte del qual deriva, amb la propietat ondelete=\\'cascade\\'. L'her\u00e8ncia per delegaci\u00f3 obliga que cada recurs de l'objecte derivat apunte a un recurs de cadascun dels objectes dels quals deriva i es pot donar el cas que hi hagi diversos recursos de l'objecte derivat que apunten a un mateix recurs per algun dels objectes dels quals deriva.</p> <pre><code>    class res_alarm(Model.model):\n    _name = 'res.alarm'\n    ...\n    class calendar_alarm(Model.model):\n    _name = 'calendar.alarm'\n    _inherits = {'res.alarm':'alarm_id'}\n    ...\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#herencia-en-la-vista","title":"Her\u00e8ncia en la vista","text":"<p>L'her\u00e8ncia de classe possibilita continuar utilitzant les vistes definides sobre l'objecte pare, per\u00f2 en moltes ocasions interessa disposar d'una versi\u00f3 retocada. En aquest cas, \u00e9s molt millor heretar de les vistes existents (per afegir, modificar o eliminar camps) que reempla\u00e7ar-les completament.</p> <pre><code> &lt;field name=\"inherit_id\" ref=\"id_xml_vista_pare\"/&gt;\n</code></pre> <p>En cas que la vista id_xml_vista_pare estiga en un m\u00f2dul diferent del que estem dissenyant, cal afegir el nom del m\u00f2dul al davant:</p> <pre><code> &lt;field name=\"inherit_id\" ref=\"modul.id_xml_vista_pare\"/&gt;\n</code></pre> <p>El motor d'her\u00e8ncia d'OpenObject, en trobar una vista heretada, processa el contingut de l'element arch. Per cada fill d'aquest element que tingui algun atribut, OpenObject cerca a la vista pare una etiqueta amb atributs coincidents (excepte el de la posici\u00f3) i, a continuaci\u00f3, combina els camps de la vista pare amb els de la vista heretada i estableix la posici\u00f3 de les noves etiquetes a partir dels seg\u00fcents valors:</p> <ul> <li>inside (per defecte): els valors s'afegeixen \"dins\" de l'etiqueta.</li> <li>after: afegeix el contingut despr\u00e9s de l'etiqueta.</li> <li>before: afegeix el contingut abans de l'etiqueta.</li> <li>replace: reempla\u00e7a el contingut de l'etiqueta.</li> <li>attributes: Modifica els     atributs.</li> </ul> <p>Reempla\u00e7ar</p> <pre><code> &lt;field name=\"arch\" type=\"xml\"&gt;\n   &lt;field name=\"camp\" position=\"replace\"&gt;\n     &lt;field name=\"nou_camp\" ... /&gt;\n   &lt;/field&gt;\n &lt;/field&gt;\n</code></pre> <p>Esborrar</p> <pre><code> &lt;field name=\"arch\" type=\"xml\"&gt;\n   &lt;field name=\"camp\" position=\"replace\"/&gt;\n &lt;/field&gt;\n</code></pre> <p>Inserir nous camps</p> <pre><code> &lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;field name=\"camp\" position=\"before\"&gt;\n       &lt;field name=\"nou_camp\" .../&gt;\n    &lt;/field&gt;\n &lt;/field&gt;\n\n &lt;field name=\"arch\" type=\"xml\" style=\"font-family:monospace\"&gt;\n    &lt;field name=\"camp\" position=\"after\"&gt;\n       &lt;field name=\"nou_camp\" .../&gt;\n    &lt;/field&gt;\n &lt;/field&gt;\n</code></pre> <p>Fer combinacions</p> <pre><code> &lt;field name=\"arch\"type=\"xml\"&gt;\n   &lt;data&gt;\n     &lt;field name=\"camp1\" position=\"after\"&gt;\n       &lt;field name=\"nou_camp1\"/&gt;\n     &lt;/field&gt;\n     &lt;field name=\"camp2\" position=\"replace\"/&gt;\n     &lt;field name=\"camp3\" position=\"before\"&gt;\n        &lt;field name=\"nou_camp3\"/&gt;\n     &lt;/field&gt;\n   &lt;/data&gt;\n &lt;/field&gt;\n</code></pre> <p>Per definir la posici\u00f3 dels elements que afegim, podem utilitzar una expresi\u00f3 xpath:</p> <pre><code> &lt;xpath expr=\"//field[@name='order_line']/tree/field[@name='price_unit']\" position=\"before\"&gt;\n &lt;xpath expr=\"//form/*\" position=\"before\"&gt;\n  &lt;header&gt;\n    &lt;field name=\"status\" widget=\"statusbar\"/&gt;\n  &lt;/header&gt;\n &lt;/xpath&gt;\n</code></pre> <p>\u00c9s posssible que necessitem una vista totalment nova de l\\'objecte heredat. Si fem un action normal en l\\'XML es veuran els que m\u00e9s prioritat tenen. Si volem especificar quina vista volem en concret hem d\\'utilitzar view_ids, observem aquest exemple:</p> <pre><code>        &lt;record model=\"ir.actions.act_window\" id=\"terraform.player_action_window\"&gt;\n            &lt;field name=\"name\"&gt;Players&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form,kanban&lt;/field&gt;\n            &lt;field name=\"view_ids\" eval=\"[(5, 0, 0),\n            (0, 0, {'view_mode': 'tree', 'view_id': ref('terraform.player_tree')}),\n            (0, 0, {'view_mode': 'form', 'view_id': ref('terraform.player_form')}),]\" /&gt;\n        &lt;/record&gt;\n</code></pre> <p>En (0,0,{registre_a_crear}) li diguem que a eixe Many2many hi ha que afegir un nou registre amb eixes dades en concret. El que necessita \u00e9s el view_mode i el view_id, com en els records anteriors.</p> <p>Si es vol especificar una vista search es pot inclourer la etiqueta search_view_id:</p> <pre><code> &lt;field name=\"search_view_id\" ref=\"cine.pos_order_line_search_view\"/&gt;  \n</code></pre> <p>Domains</p> <p>Si volem que el action heredat sols mostre els elements que volem, s\\'ha de ficar un domain en el action:</p> <pre><code>&lt;field name=\"domain\"&gt; [('isplayer','=',True)]&lt;/field&gt; \n</code></pre> <p>Am\u00e9s, es pot dir que, per defecte, quan es crea un nou registre a trav\u00e9s d\\'aquest action, tinga el field a True:</p> <pre><code>&lt;field name=\"context\"&gt;{'default_is_player': True}&lt;/field&gt;\n</code></pre> <p>Filtre per defecte</p> <p>El problema en la soluci\u00f3 anterior \u00e9s que lleva la possibilitat de veure el que no tenen aquest field a True i cal anar per un altre action a modificar-los. Si volem poder veure tots, podem crear un filtre en la vista search i en l\\'action dir que volem aquest filtre per defecte:</p> <pre><code>&lt;!--   En la vista search --&gt;\n...\n    &lt;search&gt;\n        &lt;filter name=\"player_partner\" string=\"Is Player\" domain=\"[('is_player','=',True)]\" /&gt;\n    &lt;/search&gt;\n...\n&lt;!-- En l'action --&gt;\n            &lt;!--  &lt;field name=\"domain\"&gt; [('is_player','=',True)]&lt;/field&gt; --&gt;\n            &lt;field name=\"domain\"&gt;&lt;/field&gt;\n            &lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n</code></pre> <p>Per tant, un action complet per a vistes personalitzades i amb filtres quedar\u00e0 com aquest:</p> <pre><code>        &lt;record model=\"ir.actions.act_window\" id=\"terraform.player_action_window\"&gt;\n            &lt;field name=\"name\"&gt;Players&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form,kanban&lt;/field&gt;\n            &lt;field name=\"domain\"&gt;&lt;/field&gt;\n            &lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n            &lt;field name=\"view_ids\" eval=\"[(5, 0, 0),\n            (0, 0, {'view_mode': 'tree', 'view_id': ref('terraform.player_tree')}),\n            (0, 0, {'view_mode': 'form', 'view_id': ref('terraform.player_form')}),]\" /&gt;\n        &lt;/record&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#herencia-en-el-controlador","title":"Her\u00e8ncia en el controlador","text":"<p>L'her\u00e8ncia en el controlador \u00e9s un mecanisme conegut, ja que l'apliquem de forma inconscient quan ens veiem obligats a sobreescriure els m\u00e8todes de la capa ORM d'OpenObject en el disseny de molts m\u00f2duls.</p> <p><pre><code>Funci\u00f3 super()\n\nEl llenguatge Python recomana utilitzar la funci\u00f3 super() per invocar el m\u00e8tode de la classe base quan s\u2019est\u00e0 sobreescrivint en una classe derivada, en lloc d\u2019utilitzar la sintaxi nomClasseBase.metode(self\u2026).\n</code></pre> L'efecte de l'her\u00e8ncia en el controlador es manifesta \u00fanicament quan cal sobreescriure algun dels m\u00e8todes de l'objecte del qual es deriva i per a fer-ho adequadament cal tenir en compte que el m\u00e8tode sobreescrit en l'objecte derivat:</p> <ul> <li>De vegades vol substituir el m\u00e8tode de l'objecte base sense     aprofitar-ne cap funcionalitat: el m\u00e8tode de l'objecte derivat no     invoca el m\u00e8tode sobreescrit.</li> <li>De vegades vol aprofitar la funcionalitat del m\u00e8tode de l'objecte     base: el m\u00e8tode de l'objecte derivat invoca el m\u00e8tode sobreescrit.</li> </ul> <p>Exemples:</p> <p>Sobreescriure el m\u00e8tode create:</p> <pre><code>class res_partner(models.Model):\n    _inherit = 'res.partner'\n    passed_override_write_function = fields.Boolean(string='Has passed our super method')\n\n    @api.model\n    def create(self, values):\n        # Override the original create function for the res.partner model\n        record = super(res_partner, self).create(values)\n\n        # Change the values of a variable in this super function\n        record['passed_override_write_function'] = True\n        print 'Passed this function. passed_override_write_function value: ' + str(record['passed_override_write_function'])\n\n        # Return the record so that the changes are applied and everything is stored.\n    return record\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#el-controlador","title":"El controlador","text":"<p>Part del controlador l\\'hem mencionat al parlar dels camps computed. No obstant, cal comentar les facilitats que proporciona Odoo per a no tindre que accedir dir\u00e8ctament a la base de dades.</p> <p>La capa ORM d'Odoo facilita uns m\u00e8todes que s'encarreguen del mapatge entre els objectes Python i les taules de PostgreSQL. Aix\u00ed, disposem de m\u00e8todes per crear, modificar, eliminar i cercar registres a la base de dades.</p> <p>En ocasions, pot ser necessari alterar l'acci\u00f3 autom\u00e0tica de cerca -- creaci\u00f3 -- modificaci\u00f3 -- eliminaci\u00f3 facilitada per Odoo i haurem de sobreescriure els corresponents m\u00e8todes en les nostres classes.</p> <p>Els programadors en el framework d\\'Odoo hem de con\u00e8ixer els m\u00e8todes subministrats per la capa ORM i hem de dominar el disseny de m\u00e8todes per:</p> <ul> <li>Poder definir camps funcionals en el disseny del model.</li> <li>Poder definir l'acci\u00f3 que cal executar en modificar el contingut     d'un field d'una vista form (@api.onchange)</li> <li>Poder alterar les accions autom\u00e0tiques de cerca, creaci\u00f3,     modificaci\u00f3 i eliminaci\u00f3 de recursos.</li> </ul> <p>Una darrera consideraci\u00f3 a tenir en compte en l'escriptura de m\u00e8todes i funcions en Odoo \u00e9s que els textos de missatges inclosos en m\u00e8todes i funcions, per poder ser tradu\u00efbles, han de ser introdu\u00efts amb la sintaxi _(\\'text\\') i el fitxer .py ha de contenir from tools.translate import _ a la cap\u00e7alera.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#api-de-lorm","title":"API de l\\'ORM","text":"<pre><code>**Interactuar en la terminal**\n    $ ***Odoo*** shell -d castillo -u containers\n\nObserva c\u00f3m hem ficat el par\u00e0metre '''shell'''. Les coses que se fan en la terminal no s\u00f3n persistents en la base de dades fins que no s'executa '''self.env.cr.commit()'''. Dins de la terminal podem obtindre ajuda dels m\u00e8todes d'Odoo amb help(), per exemple: help(tools.image)\nAmb el seg\u00fcent exemple, podem arrancar ***Odoo*** sense molestar a l'inst\u00e0ncia que est\u00e0 en marxa redefinint els ports:\n\n    $ ***Odoo*** shell -c /path/to/odoo.conf --xmlrpc-port 8888 --longpolling-port 8899\n\nhttps://asciinema.org/a/123126 (Asciinema amb alguns exemples)\n</code></pre> <p>Un m\u00e8tode creat dins d\\'un model actua sobre tots els elements del model que estiguen actius en el moment de cridar al m\u00e8tode. Si \u00e9s un tree, seran molts i si \u00e9s un form sols un. Per\u00f2 en qualsevol cas \u00e9s una \\'llista\\' d\\'elements i es diu recordset.</p> <p>B\u00e0sicament la interacci\u00f3 amb els models en el controlador es fa amb els anomenats recordsets que s\u00f3n col\u00b7leccions d\\'objectes sobre un model. Si iterem dins dels recordset , obtenim els singletons, que s\u00f3n objectes individuals de cada l\u00ednia en la base de dades.</p> <pre><code>def do_operation(self):\n    print self # =&gt; a.model(1, 2, 3, 4, 5)\n    for record in self:\n        print record # =&gt; a.model(1), then a.model(2), then a.model(3), ...\n</code></pre> <p>Podem accedir a tots els fields d\\'un model sempre que estem en un singleton, no en un recordset:</p> <pre><code>&gt;&gt;&gt; record.name\nExample Name\n&gt;&gt;&gt; record.company_id.name\nCompany Name\n&gt;&gt;&gt; record.name = \"Bob\"\n</code></pre> <p>Intentar llegir o escriure un field en un recordset donar\u00e0 un error. Accedir a un many2one, one2many o many2many donar\u00e0 un recordset.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#set-operations","title":"Set operations","text":"<p>Els recordsets es poden combinar amb operacions espec\u00edfiques que s\u00f3n les t\u00edpiques dels conjunts:</p> <ul> <li>record in set retorna si el record est\u00e0 en el set</li> <li>set1 | set2 Uni\u00f3 de sets</li> <li>set1 &amp; set2 Intersecci\u00f3 de sets</li> <li>set1 - set2 Difer\u00e8ncia de sets</li> </ul> <p>Am\u00e9s, un recordset no t\u00e9 elements repetits i permet accedir a recordsets dins d\\'ell. Per exemple:</p> <pre><code>&gt;&gt;&gt; record.students.classrooms\n</code></pre> <p>Dona la llista de totes les classes de tots els estudiants i sense repetir cap.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#programacio-funcional-en-lorm","title":"Programaci\u00f3 funcional en l\\'ORM","text":"<p>Python t\u00e9 una serie de funcions que permeten iterar una llista i aplicar una funci\u00f3 als elements. Les m\u00e9s utilitzades s\u00f3n map(), filter(), reduce(), sort(), zip()... Odoo treballa en recordsets, no llistes, i t\u00e9 les seues funcions pr\u00f2pies per a imitar aquestes:</p> <ul> <li>filtered() Filtra el recordset de manera que sols tinga els     records que complixen una condici\u00f3.</li> </ul> <pre><code>records.filtered(lambda r: r.company_id == user.company_id)\nrecords.filtered(\"partner_id.is_company\")\n</code></pre> <ul> <li>sorted() Ordena segons uns funci\u00f3, se defineix una funci\u00f3 lambda     (key) que indica que s\\'ordena per el camp name:</li> </ul> <pre><code># sort records by name\nrecords.sorted(key=lambda r: r.name)\nrecords.sorted(key=lambda r: r.name, reverse=True)\n</code></pre> <ul> <li>mapped() Li aplica una funci\u00f3 a cada recordset i retorna un     recordset amb els canvis demanats:</li> </ul> <pre><code># returns a list of summing two fields for each record in the set\nrecords.mapped(lambda r: r.field1 + r.field2)\n# returns a list of names\nrecords.mapped('name')\n# returns a recordset of partners\nrecord.mapped('partner_id')\n# returns the union of all partner banks, with duplicates removed\nrecord.mapped('partner_id.bank_ids')\n</code></pre> <p>Aquestes funcions s\u00f3n \u00fatils per a fer t\u00e8cniques de programaci\u00f3 funcional</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#enviroment","title":"Enviroment","text":"<p>L\\'anomenat enviroment o env guarda algunes dades contextuals interessants per a treballar amb l\\'ORM, com ara el cursor a la base de dades, l\\'usuari actual o el context (que guarda algunes metadades).</p> <p>Tots els recordsets tenen un enviroment accesible amb env. Quant volem crear un recordset dins d\\'un altre, podem usar env:</p> <pre><code>&gt;&gt;&gt; self.env['res.partner']\nres.partner\n&gt;&gt;&gt; self.env['res.partner'].search([['is_company', '=', True], ['customer', '=', True]])\nres.partner(7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74)\n</code></pre> <p>El primer cas crea un recordset buit per\u00f2 que fa refer\u00e8ncia a res.partner i es poden fer les funcions de l\\'ORM que necessitem.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#context","title":"Context","text":"<p>El context \u00e9s un diccionari de python que cont\u00e9 dades \u00fatils per a totes les vistes i els m\u00e8todes. Les funcions d\\'Odoo reben el context i el consulten si cal. Context pot tindre de tot, per\u00f2 quasi sempre t\u00e9 al menys el user ID, l\\'idioma o la zona temporal. Quant Odoo va a renderitzar una vista XML, consulta el context per veure si ha d\\'aplicar algun par\u00e0metre.</p> <pre><code>print(self.env.context)\n</code></pre> <p>Al llarg de tot aquest manual utilitzem sovint par\u00e0metres del context. Aquests s\u00f3n els par\u00e0metres que hem utilitzat en algun moment:</p> <ul> <li>active_id : self._context.get(\\'active_id\\') es tracta de l\\'id de     l\\'element del model que est\u00e0 en pantalla.</li> <li>active_ids : Llista de les id seleccionats en un tree.</li> <li>active_model : El model actual.</li> <li>default_<code>&lt;field&gt;</code> : En un action o en un one2many es pot     assignar un valor per defecte a un field.</li> <li>search_default_<code>&lt;filter&gt;</code> : Per aplicar un filtre per     defecte a la vista en un action.</li> <li>group_by : Dins d\\'un camp filter per a crear agrupacions en les     vistes search.</li> <li>graph_mode : En les vistes graph, aquest par\u00e0metre canvia el     type</li> <li>context.get : En les vistes es pot treure algunes dades del context     per a mostrar condicionalment o per als domains</li> </ul> <p>El context va passant d\\'un m\u00e8tode a un altre o a les vistes i, de vegades volem modificar-lo.</p> <p>Imaginem que volem fer un bot\u00f3 que obriga un wizard, per\u00f2 volem passar-li par\u00e0metres al wizard. En els botons i fields relacionals es pot especificar un context:</p> <pre><code>&lt;button name=\"%(reserves.act_w_clients_bookings)d\" type=\"action\" string=\"Select bookings\" context=\"{'b_fs':bookings_fs}\"/&gt;\n</code></pre> <p>Eixe action obre un wizard, que \u00e9s un model transitori en el que podem definir un field amb els continguts del context:</p> <pre><code>def _default_bookings(self):\n         return self._context.get('b_fs')\nbookings_fs = fields.Many2many('reserves.bookings',readonly=True, default=_default_bookings)\n</code></pre> <p>Aquest many2many tindr\u00e0 els mateixos elements que el form que l\\'ha cridat. (Aix\u00f2 \u00e9s com el default_ en els One2many, per\u00f2 fet a m\u00e0)</p> <p>Tamb\u00e9 es pot utilitzar aquesta manera d\\'enviar un recordset per un context per al domain d\\'un field Many2one o Many2many:</p> <pre><code>def _domain_bookings(self):\n         return [('id','=',self._context.get('b_fs').ids)]\nbookings_fs = fields.Many2many('reserves.bookings',readonly=True, domain=_default_bookings)\n</code></pre> <p>En ocasions necessitem especificar valors per defecte i filtres per defecte en un action. Per exemple, quan implementem l\\'her\u00e8ncia, volem que els nous registres que es facen en el nostre action tinguem un valor per defecte. En el seg\u00fcent exemple, en la primera l\u00ednia \u00e9s el que es sol fer en la Her\u00e8ncia i en la segona estem especificant un External ID amb ref() dins d\\'un eval.</p> <pre><code>        &lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n        &lt;field name=\"context\" eval=\"{'default_partner_id':ref('base.main_partner'), 'company_hide':False, 'default_company_id':ref('base.main_company'), 'search_default_my_bank':1}\"/&gt;\n</code></pre> <p>El context \u00e9s un diccionari inmutable (frozendict) que no pot ser alterat en funcions. no obstant, si volem modificar el context actual per enviar-lo a un action o cridar a una funci\u00f3 d\\'un model amb un altre context, es pot fer amb with_context:</p> <pre><code># current context is {'key1': True}\nr2 = records.with_context({}, key2=True)\n# -&gt; r2._context is {'key2': True}\nr2 = records.with_context(key2=True)\n# -&gt; r2._context is {'key1': True, 'key2': True}\n</code></pre> <p>Si \u00e9s prec\u00eds modificar el context es pot fer:</p> <p><pre><code> self.env.context = dict(self.env.context)\n self.env.context.update({'key': 'val'})\n</code></pre> o</p> <pre><code> self = self.with_context(get_sizes=True)\n print self.env.context\n</code></pre> <p>Per\u00f2 no funciona m\u00e9s enll\u00e0 del recordset actual. \u00c9s a dir, no modifica el context en el que s\\'ha cridat.</p> <p>Si el que volem \u00e9s passar el valor d\\'un field per context a un bot\u00f3 dins d\\'una \\'subvista\\', podem utilitzar el par\u00e0metre parent, que funciona tant en en domain, attr, com en context. Ac\u00ed tenim un exemple de tree dins d\\'un field amb botons que env\u00eden per context coses del pare:</p> <pre><code> &lt;field name=\"movies\" &gt;\n    &lt;tree&gt;\n        &lt;field name=\"photo_small\"/&gt;\n        &lt;field name=\"name\"/&gt;\n        &lt;field name=\"score\" widget='priority'/&gt;\n        &lt;button name=\"book_it\" string=\"Book it\" type=\"object\" context=\"{'b_client':parent.client,'b_day':parent.day}\"/&gt;\n     &lt;/tree&gt;\n</code></pre> <p>Podem passar el context per un action i el podem utilitzar en la vista, ja que tenim l\\'objecte context disponible en QWeb. Si, per exemple, volem retornar un action que cride a una vista i un field tinga un domain passat per context:</p> <pre><code>     return {\n            'name': 'Travel wizard action',\n            'type': 'ir.actions.act_window',\n            'res_model': self._name,\n            'res_id': self.id,\n            'view_mode': 'form',\n            'target': 'new',\n            'context': dict(self._context, cities_available_context= (self.cities_available.city).ids),\n        }\n</code></pre> <pre><code>           &lt;field name=\"destiny\"\n                  domain = \"[('id','in',context.get('cities_available_context',[]))]\"\n                  /&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#metodes-de-lorm","title":"M\u00e8todes de l\\'ORM","text":""},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#search","title":"search()","text":"<p>A partir d\\'un domain de Odoo, proporciona un recordset amb tots els elements que coincideixen:</p> <pre><code>&gt;&gt;&gt; # searches the current model\n&gt;&gt;&gt; self.search([('is_company', '=', True), ('customer', '=', True)])\nres.partner(7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74)\n&gt;&gt;&gt; self.search([('is_company', '=', True)], limit=1).name\n'Agrolait'\n</code></pre> <p><pre><code> Es pot obtindre la quantitat d'elements amb el m\u00e8tode '''search_count()'''\n</code></pre> <pre><code>Parameters\n    args -- A search domain. Use an empty list to match all records.\n    offset (int) -- number of results to ignore (default: none)\n    limit (int) -- maximum number of records to return (default: all)\n    order (str) -- sort string\n    count (bool) -- if True, only counts and returns the number of matching records (default: False)\n</code></pre></p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#create","title":"create()","text":"<p>Te dona un recordset a partir d\\'una definici\u00f3 de varis fields:</p> <pre><code>&gt;&gt;&gt; self.create({'name': \"New Name\"})\nres.partner(78)\n</code></pre> <p>El m\u00e8tode create s\\'utilitza sovint per a ser sobreescrit en her\u00e8ncia per fer coses en el moment de la creaci\u00f3. Ac\u00ed tenim un exemple en el que modifiquem el create d\\'un model per crear una inst\u00e0ncia associada amb una imatge predefinida:</p> <pre><code>     @api.model\n     def create(self, values):\n        new_id = super(player, self).create(values)\n        print values\n        name_player = new_id.name\n        img = self.env['mmog.fortress'].search([('name','=','f1')])[0].icon\n        self.env['mmog.fortress'].create({'name':name_player+\"-fortress\",'level':1,'soldiers':100,'population':10,'food':1000,'integrity':100,'id_player':new_id.id,'icon':img})\n        return new_id\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#write","title":"write()","text":"<p>Escriu uns fields dins de tots els elements del recordset, no retorna res:</p> <pre><code>self.write({'name': \"Newer Name\"})\n</code></pre> <p>Escriure en un many2many:</p> <p>La manera m\u00e9s senzilla \u00e9s passar una llista d\\'ids. Per\u00f2 si ja existeixen elements abans, necessitem uns codis especials (vegeu Odoo#Expressions):</p> <p>Per exemple:</p> <pre><code> self.sessions = [(4,s.id)] \n self.write({'sessions':[(4,s.id)]})\n self.write({'sessions':[(6,0,[ref('vehicle_tag_leasing'),ref('fleet.vehicle_tag_compact'),ref('fleet.vehicle_tag_senior')] )]})\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#browse","title":"browse()","text":"<p>A partir d\\'una llista de ids, retorna un recordset.</p> <pre><code>&gt;&gt;&gt; self.browse([7, 18, 12])\nres.partner(7, 18, 12)\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#exists","title":"exists()","text":"<p>Retorna si un record en concret encara est\u00e0 en la base de dades.</p> <pre><code>if not record.exists():\n    raise Exception(\"The record has been deleted\")\no:\nrecords.may_remove_some()\n# only keep records which were not deleted\nrecords = records.exists()\n</code></pre> <p>En el segon exemple, refresca un recordset amb aquells que encara existixen.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#ref","title":"ref()","text":"<p>Retorna un singleton a partir d\\'un External ID</p> <pre><code>&gt;&gt;&gt; env.ref('base.group_public')\nres.groups(2)\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#ensure_one","title":"ensure_one()","text":"<p>S\\'asegura de que el record en concret siga un singleton.</p> <pre><code>records.ensure_one()\n# is equivalent to but clearer than:\nassert len(records) == 1, \"Expected singleton\"\n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#unlink","title":"unlink()","text":"<p>Esborra de la base de dades els elements del recordset actual.</p> <p>Exemple de c\u00f3m sobreescriure el m\u00e8tode unlink per a esborrar en cascada:</p> <pre><code>    def unlink(self):\n        for x in self:\n            x.catid.unlink()\n        return super(product_uom_class, self).unlink()\n</code></pre> <p>read() Es tracta d\\'un m\u00e8tode de baix nivell per llegir un field en concret dels records. \u00c9s preferible emprar browse()</p> <p>\\'name_search(name=, args=None, operator=\\'ilike\\', limit=100)\\'\\'\\' \u2192 records Search for records that have a display name matching the given name pattern when compared with the given operator, while also matching the optional search domain (args).</p> <p>This is used for example to provide suggestions based on a partial value for a relational field. Sometimes be seen as the inverse function of name_get(), but it is not guaranteed to be.</p> <p>This method is equivalent to calling search() with a search domain based on display_name and then name_get() on the result of the search.</p> <p>ids Llista dels ids del recordset actual.</p> <p>sorted(key=None, reverse=False) Retorna el recordset ordenat per un criteri.</p> <p>display_name. Aquest atribut, per defecte, mostra el field name si est\u00e0. Es pot sobreescriure <code>_compute_display_name</code> per mostrar un altre camp o mescla d\\'ells. Tamb\u00e9 es pot canviar <code>_rec_name</code> per indicar un field distint de <code>name</code>.</p> <p>copy() Crea una c\u00f2pia del singleton i permet aportar nous valors per als fields de la copia.</p> <p>En els fields One2many no es pot copiar per defecte, per\u00f2 es pot dir copy=True.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#onchange","title":"onchange","text":"<p>Si volem que un valor siga modificat en temps real quant modifiquem el valor d\\'un altre field sense encara haver guardat, podem usar els m\u00e8todes on_change.</p> <pre><code> Els camps '''computed''' ja tenen el seu propi onchange, per tant, no cal fer-lo\n</code></pre> <pre><code> Ha quedat \"deprecated\" retornar un domain https://github.com/odoo/odoo/pull/41918#issuecomment-824946980\n</code></pre> <p>En onchange es modifica el valor d\\'un o m\u00e9s camps dir\u00e8ctament i, si cal un filtre o un missatge, es fa en el return:</p> <pre><code>return {\n    'warning': {'title': \"Warning\", 'message': \"What is this?\", 'type': 'notification'},\n}\n</code></pre> <p>Si el type \u00e9s notification es mostrar\u00e0 en una notificaci\u00f3, en un altre cas, en un dialog. (Odoo 13)</p> <p>Exemples:</p> <pre><code># onchange handler\n@api.onchange('amount', 'unit_price')\ndef _onchange_price(self):\n    # set auto-changing field\n    self.price = self.amount * self.unit_price\n    # Can optionally return a warning and domains\n    return {\n        'warning': {\n            'title': \"Something bad happened\",\n            'message': \"It was very bad indeed\",\n        }\n    }\n\n@api.onchange('seats', 'attendee_ids')\ndef _verify_valid_seats(self):\n     if self.seats &lt; 0:\n         return {\n             'warning': {\n                 'title': \"Incorrect 'seats' value\",\n                 'message': \"The number of available seats may not be negative\",\n             },          }\n     if self.seats &lt; len(self.attendee_ids):\n          return {\n             'warning': {\n                 'title': \"Too many attendees\",\n                 'message': \"Increase seats or remove excess attendees\",\n             },\n         }\n</code></pre> <pre><code>Si l'usuari s'equivoca introduint algunes dades, ***Odoo*** proporciona varies maneres d'evitar-lo: \n* Constraints\n* onchange amb missatge d'error i restablint els valors originals\n* Sobreescriptura del m\u00e8tode write o create per comprovar coses abans de guardar \n</code></pre>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#cron-jobs","title":"Cron Jobs","text":"<p>Cal crear un record en el model ir.cron, per exemple:</p> <pre><code>        &lt;record model=\"ir.cron\" forcecreate=\"True\" id=\"game.cron_update\"&gt;\n            &lt;field name=\"name\"&gt;Game: Cron Update&lt;/field&gt;\n            &lt;field name=\"model_id\" ref=\"model_game_player\"/&gt;\n            &lt;field name=\"state\"&gt;code&lt;/field&gt;\n            &lt;field name=\"code\"&gt;model.update_resources()&lt;/field&gt;\n            &lt;field name=\"user_id\" ref=\"base.user_root\"/&gt;\n            &lt;field name=\"interval_number\"&gt;1&lt;/field&gt;\n            &lt;field name=\"interval_type\"&gt;minutes&lt;/field&gt;\n            &lt;field name=\"numbercall\"&gt;-1&lt;/field&gt;\n            &lt;field name=\"activity_user_type\"&gt;specific&lt;/field&gt;\n            &lt;field name=\"doall\" eval=\"False\" /&gt;\n        &lt;/record&gt;\n</code></pre> <p>I un m\u00e8tode amb el \\@api.model i aquests arguments:</p> <pre><code>    @api.model\n    def update_resources(self):\n        ...\n</code></pre> <p>ir.cron t\u00e9 un many2one amb ir.actions.server i, al ser creat, crea l\\'acci\u00f3 de servidor corresponent. \u00c9s important ficar en el manifest que dep\u00e9n de mail, ja que \u00e9s un m\u00f2dul preinstal\u00b7lat que hereta i afegeix camps a ir.actions.server.</p> <p>https://poncesoft.blogspot.com/2018/05/creacion-metodos-automatizados-en-odoo.html https://webkul.com/blog/creating-cron-server-action-odoo-11/ https://odoo-development.readthedocs.io/en/latest/odoo/models/ir.cron.html</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#els-decoradors","title":"Els Decoradors","text":"<p>Com es veu, abans de moltes funcions es fica \\@api.depends, \\@api.multi...</p> <p>Els decoradors modifiquen la forma en la que \u00e9s cridada la funci\u00f3. Entre altres coses, modifiquen el contingut de self, les vegades que se crida i quant se crida.</p> <ul> <li>\\@api.depends() Aquest decorador crida a la funci\u00f3 sempre que el     camp del que dep\u00e9n siga modificat. Encara que el camp diga     store=True. Per defecte, self \u00e9s un recordset, per tant, cal     fer un for.</li> <li>\\@api.model S\\'utilitza per a funcions que afecten al model i no     als recordsets.</li> <li>\\@api.constrains() S\\'utilitza per a comprovar les constrains.     Self \u00e9s un recordset. Com que quasi sempre es crida en un form,     funciona si utilitzem self directament. Per\u00f2 cal fer for, ja que pot     ser cridat en un recordset quant modifiquem camps en grup.</li> <li>\\@api.onchange() S\\'executa cada vegada que modifiquem el field     indicat en la vista. En aquest, com que es crida quant es modifica     un form, sempre self ser\u00e0 un singleton. Per\u00f2 si fiquem un for no     passa res.</li> </ul>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#calculs-en-dates","title":"C\u00e0lculs en dates","text":"<p>Odoo gestiona les dates com a strings. Per una altra banda, python t\u00e9 el seu propi tipus de dades anomenat datetime, date i timedelta entre altres. Aix\u00f2 pot provocar dificultats per a fer c\u00e1lculs en dates. Odoo proporciona algunes ferramentes m\u00ednimes per facilitar aquesta tasca.</p> <p>Primer de tot, anem a importar datetime:</p> <pre><code>from ***Odoo*** import models, fields, api\nfrom datetime import datetime, timedelta\n</code></pre> <p>El primer que necessitem saber \u00e9s c\u00f3m transformar de date o datetime d'Odoo a python. En definitva, passar de string a datetime.</p> <p>Tenim un field datetime declarat de la seg\u00fcent manera:</p> <pre><code>start_date = fields.Datetime()\n</code></pre> <p>En la base de dades guardar\u00e0 un string amb el format: \\'%Y-%m-%d %H:%M:%S\\'. Per tant, si volem transformar aquesta data en string a un objecte datetime.datetime tenim que ejecutar el constructor de la classe amb aquests par\u00e0metres:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\ndata = datetime.strptime(self.start_date,fmt)\n</code></pre> <p>\u00c9s a dir, transforma un string en aquest format al tipus de dades datetime.datetime oficial de python.</p> <p>Per no tindre que especificar el format cada vegada, Odoo dona una ferramenta m\u00e9s facil. La classe fields.Datetime t\u00e9 un m\u00e8tode per generar un datetime.datetime de un string:</p> <pre><code>data = fields.Datetime.from_string(self.start_date)\n</code></pre> <p>De la mateixa manera passa al contrari:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\nself.start_date = data.strftime(fmt)\nvs\nself.start_date = fields.Datetime.to_string(data)\n</code></pre> <p>A continuaci\u00f3, anem a veure c\u00f3m incrementar una data en un temps:</p> <p>En el format d'Odoo (fields.Datetime) no es pot, cal passar a datetime.datetime per sumar el temps i despr\u00e9s tornar a passar a fields.Datetime. Per sumar o restar temps a un datetime.datetime cal utilitzar una classe anomenada datetime.timedelta. Aquesta classe representa una duraci\u00f3 o la difer\u00e8ncia entre dues dates. Per exemple, aquest constructor representa molt b\u00e9 les opcions que es poden ficar per crear un timedelta:</p> <pre><code>un_any = timedelta(weeks=40, days=84, hours=23, minutes=50, seconds=600) \n</code></pre> <p>Aquest exemple d'Odoo mostra c\u00f3m afegir 3 dies a un field:</p> <pre><code>data=fields.Datetime.from_string(self.start_date)\ndata=data+timedelta(hours=3)\nself.end_date=fields.Datetime.to_string(data)\n</code></pre> <p>O si es vol fer sols en m\u00e8todes python:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\ndata = datetime.strptime(self.start_date,fmt)\ndata=data+timedelta(hours=3)\nself.end_date=data.strftime(fmt)\n</code></pre> <p>Ara anem a veure c\u00f3m calcular el temps que ha passat entre dues dates:</p> <p>Soluci\u00f3 amb relativedelta:</p> <pre><code>from datetime import datetime, timedelta\nfrom dateutil.relativedelta import relativedelta\n\nstart=fields.Datetime.from_string(self.start_date)\nend=fields.Datetime.from_string(self.end_date)\n\nrelative=relativedelta(start,end)\nprint r.years\nprint r.months\nprint r.days\nprint r\n</code></pre> <p>El problema \u00e9s que dona la data per separat. No sol ser molt \u00fatil per a Odoo on necessitem la difer\u00e8ncia sols en dies, hores o minuts.</p> <p>Soluci\u00f3 sols amb Datetime:</p> <pre><code>from datetime import datetime\n\nstart=fields.Datetime.from_string(self.start_date)\nend=fields.Datetime.from_string(self.end_date)\n\nprint (end-start).days * 24 * 60\nprint (end-start).total_seconds()/60/60/24\n</code></pre> <p>Soluci\u00f3 amb Unix timestamp</p> <pre><code>d1_ts = time.mktime(d1.timetuple())\nd2_ts = time.mktime(d2.timetuple())\n\nprint int(d2_ts-d1_ts) / 60\n</code></pre> <p>La soluci\u00f3 \u00e9s la mateixa, sols \u00e9s per si necessiteu algun c\u00e0lcul intermedi que necessite la data en un Integer.</p> <p>El resultat de restar dos datetime \u00e9s un timedelta. Podem demanar els dies i segons com en el relative delta, per\u00f2 am\u00e9s t\u00e9 una funci\u00f3 per traure els segons totals i despr\u00e9s fer els c\u00e0lculs que necessitem.</p> <p>Consultar si una data \u00e9s anterior a una altra:</p> <p>Les dates en format Datetime o Date es poden comparar:</p> <pre><code>d3=fields.Datetime.from_string(self.d3)\nd4=datetime.now()\nif d3 &lt; d4:\n   print \"La data \u00e9s anterior\"\n</code></pre> <p>Tamb\u00e9 es pot calcular si \u00e9s del mateix dia, sols cal transformar de datetime a date:</p> <pre><code>d3=d3.date()\nd4=d4.date()\n\nif d3 == d4 :\n   \u2026.\n</code></pre> <p>Si volem saber si s\u00f3n del mateix m\u00e9s o any, es pot calcular la difer\u00e8ncia i veure si en dies \u00e9s major o menor de 30, per exemple. Per\u00f2 si volem major precisi\u00f3, en aquest cas es recomana utilitar relativedelta.</p>"},{"location":"JoseCastillo_Ini/3_desarrollo_odoo%20copy/#misc","title":"Misc.","text":"<ul> <li>Si volem fer un print en colors, podem ficar un caracter de escape:     \\033[93m i \\033[0m al final</li> <li>Traure la menor pot\u00e8ncia de 2 major o igual a un n\u00famero:     http://stackoverflow.com/a/14267557</li> </ul> <p>Distintes alertes:</p> <p>Odoo pot mostrar distintes alertes en funci\u00f3 del que necessitem. Totes estan en openerp.exceptions</p> <p>Si entrem en el mode shell del debug podem executar aquest comandament:</p> <pre><code>&gt;&gt;&gt; help(openerp.exceptions)\n</code></pre> <p>Una vegada dins podem detectar:</p> <p><code>AccessDenied</code>\\ <code>DeferredException</code>\\ <code>QWebException</code>\\ <code>RedirectWarning</code>\\ <code>except_orm</code>\\ <code>AccessError</code>\\ <code>MissingError</code>\\ <code>UserError</code>\\ <code>ValidationError</code></p> <p>Normalment s\u00f3n utilitzats pel Odoo sense necessitat de que els cridem nosaltres. Per\u00f2 en ocasion pot ser \u00fatil.</p> <p>Per exemple, si volem mostrar un Warning perqu\u00e8 \u00fasuari ha fet alguna cosa mal. (Normalment es fa un onchange que ja pot tornar el warning)</p> <pre><code>from openerp import _\nfrom openerp.exceptions import Warning\n[...]\nraise Warning(_('Alguna cosa ha fallat!'))\n</code></pre> <p>O si volem Donar opcions a l\\'usuari amb RedirectWarning:</p> <pre><code> action = self.env.ref('base.action_res_users')\n msg = _(\"You cannot create a new user from here.\\n To create new user please go to configuration panel.\")\n raise openerp.exceptions.RedirectWarning(msg, action.id, _('Go to the configuration panel'))\n</code></pre> <p>En aquest exemple, per al missatge, utilitza la barra baixa _() per a obtindre la traducci\u00f3 en cas de que existisca. self.env.ref() retorna l\\'objecte referit amb una id externa. En aquest cas, un action.</p> <p>En el cas de les Constrains tamb\u00e9 s\\'ha de llan\u00e7ar un Validation error.</p> <p>Funcions lambda:</p> <p>En moltes ocasions, cal cridar a alguna funci\u00f3 de l\\'ORM o similar passant com a par\u00e0metre una funci\u00f3 lambda. La ra\u00f3 \u00e9s que si passem una variable, esta queda establerta en temps de c\u00e0rrega i no es modifica. La funci\u00f3 sempre recalcula.</p> <p>La sintaxi de la funci\u00f3 lambda \u00e9s:</p> <pre><code>a = lambda x,y: x*y\na(2,3)\n6\n</code></pre> <p>On les primeres x,y s\u00f3n els arguments que rep la funci\u00f3, despr\u00e9s el que calcula.</p> <p>Cal recordar que les funcions lambda s\u00f3n de una sola l\u00ednia de codi. Si volem alguna cosa m\u00e9s sofisticada hem de cridar a una funci\u00f3 normal.</p> <p>Si volem que el nostre m\u00f2dul tinga configuraci\u00f3 podem afegir-la com a un field m\u00e9s del model res.control.settings. Aquest ja s\\'encarrega de centralitzar opcions de configuraci\u00f3. Per a que aparega en el men\u00fa de configuraci\u00f3 tamb\u00e9 podem afegir-lo heretant en la vista:</p> <pre><code>class config(models.TransientModel):\n    _inherit = 'res.config.settings'\n    players = fields.Char(string='players',\n                             config_parameter=\"expanse.players\")\n\n\n    def reset_universe(self):\n        print(\"reset\",self)\n</code></pre> <pre><code> &lt;record id=\"res_config_settings_view_form_inherit\" model=\"ir.ui.view\"&gt;\n            &lt;field name=\"name\"&gt;res.config.settings.view.form.&lt;/field&gt;\n            &lt;field name=\"model\"&gt;res.config.settings&lt;/field&gt;\n            &lt;field name=\"priority\" eval=\"25\" /&gt;\n            &lt;field name=\"inherit_id\" ref=\"base.res_config_settings_view_form\" /&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;xpath expr=\"//div[hasclass('settings')]\" position=\"inside\"&gt;\n                    &lt;div class=\"app_settings_block\" data-string=\"Expanse Settings\" string=\"Expanse Settings\" data-key=\"expanse\"&gt;\n                        &lt;div id=\"players\"&gt;\n                            &lt;h2&gt;Expanse&lt;/h2&gt;\n                            &lt;button type=\"object\" name=\"reset_universe\" string=\"Reset Universe\"  class=\"btn-primary\"/&gt;\n                        &lt;/div&gt;\n\n                    &lt;/div&gt;\n                &lt;/xpath&gt;\n\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre> <p>Si en data-key posem el nom del m\u00f2dul, afegir\u00e0 l\\'icona al men\u00fa de settings.</p>"},{"location":"JoseCastillo_Ini/accions_menus/","title":"Accions i men\u00fas","text":"<p>Diagrama de c\u00f3m es comporta el client web quan carrega Odoo per primera vegada i c\u00f3m crida a un action i carrega les vistes i les dades (records)</p> <p>El client web de Odoo cont\u00e9 uns men\u00fas dalt i a l\\'esquerra. Aquests men\u00fas, al ser accionats mostren altres men\u00fas i les pantalles del programa. Quant pulsem en un men\u00fa, canvia la pantalla perqu\u00e8 hem fet una acci\u00f3.</p> <p>Una acci\u00f3 b\u00e0sicament t\u00e9:</p> <ul> <li>type: El tipus d\\'acci\u00f3 que \u00e9s i c\u00f3m l\\'acci\u00f3 \u00e9s interpretada.     Quan la definim en el XML, el type no cal especificar-lo, ja que ho     indica el model en que es guarda.</li> <li>name: El nom, que pot ser mostrat en la pantalla o no. Es     recomana que siga llegible per els humans.</li> </ul> <p>Les accions i els men\u00fas es declaren en fitxers de dades en XML o directament si una funci\u00f3 retorna un diccionari que la defineix. Les accions poden ser cridades de tres maneres:</p> <ul> <li>Fent clic en un men\u00fa.</li> <li>Fent clic en botons de les vistes (han d\\'estar connectats amb     accions).</li> <li>Com accions contextuals en els objectes.</li> </ul> <p>D\\'aquesta manera, el client web pot saber quina acci\u00f3 ha d\\'executar si rep alguna d\\'aquestes coses:</p> <ul> <li>false: Indica que s\\'ha de tancar el di\u00e0leg actual.</li> <li>Una string: Amb l\\'etiqueta de l\\'acci\u00f3 de client a     executar.</li> <li>Un n\u00famero: Amb el ID o external ID de l\\'acci\u00f3 a trobar a la     base de dades.</li> <li>Un diccionari: Amb la definici\u00f3 de l\\'acci\u00f3, aquesta no est\u00e0 ni     en XML ni en la base de dades. En general, \u00e9s la manera de cridar a     un action al finalitzar una funci\u00f3.</li> </ul>"},{"location":"JoseCastillo_Ini/accions_menus/#accions-tipus-window","title":"Accions tipus window","text":"<p>Les accions window s\u00f3n un record m\u00e9s (ir.actions.act_window). No obstant, els men\u00fas que les criden, tenen una manera m\u00e9s r\u00e0pida de ser declarats amb una etiqueta menuitem:</p> <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"action_list_ideas\"&gt;\n    &lt;field name=\"name\"&gt;Ideas&lt;/field&gt;\n    &lt;field name=\"res_model\"&gt;idea.idea&lt;/field&gt;\n    &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n&lt;/record&gt;\n&lt;menuitem id=\"menu_ideas\" parent=\"menu_root\" name=\"Ideas\" sequence=\"10\"\n          action=\"action_list_ideas\"/&gt;\n</code></pre> <pre><code>Les accions han de ser declarades al XML abans que els men\u00fas que les accionen. \n</code></pre> <pre><code>El que hem vist en esta secci\u00f3 \u00e9s la definici\u00f3 d'una acci\u00f3 en un XML com a part de la vista, per\u00f2 una acci\u00f3 no \u00e9s m\u00e9s que una forma c\u00f2moda d'escriure moltes coses que far\u00e0 el client en javascript per demanar alguna cosa al servidor. Els actions separen i simplifiquen el desenvolupament de la interf\u00edcie d'usuari que \u00e9s el client web. Un men\u00fa o bot\u00f3 en html acciona una funci\u00f3 javascript que en principi no sap el que fer. Aquesta demana que es carregue la definici\u00f3 del seu action. Una vegada carregada la definici\u00f3, queda clar tot el que ha de demanar (les vistes, context, dominis, vistes search, lloc on carregar-ho tot...) aleshores demana les vistes i amb ajuda de les vistes i els fields, demana els records que s\u00f3n les dades a mostrar. Per tant, un action \u00e9s la definici\u00f3 sense programar javascript de coses que ha de fer el javascript. Odoo permet declarar actions com a resposta de funcions. Aquestes actions no estan en la base de dades, per\u00f2 s\u00f3n enviades igualment al client i el client fa en elles el mateix que en un action que ell ha demanat. Un exemple d'aix\u00f2 s\u00f3n els actions que retornen els botons dels wizards. De fet, podem fer que un bot\u00f3 torne un action i, per tant, obrir una vista diferent. \n</code></pre> <p>Aquest exemple \u00e9s una funci\u00f3 cridada per un bot\u00f3 que retorna un action:</p> <pre><code>    @api.multi    # Molt important que siga multi.\n    def create_comments(self):\n       clients=self.env['reserves.bookings'].search([('checking_day','&lt;',fields.Date.today()),('room.hotel','=',self.id)]).mapped('client').ids\n       print(clients)\n       if len(clients)&gt;0:\n        print(clients)\n        random.shuffle(clients)\n        comment = self.env['reserves.comments'].create({'hotel':self.id,'client':clients[0],'stars':str(random.randint(1,5))})\n        return {\n    'name': 'Comment',\n    'view_type': 'form',\n    'view_mode': 'form',\n    'res_model': 'reserves.comments',\n    'res_id': comment.id,\n    #'view_id': self.env.ref('reserves.comments_form').id,\n    'type': 'ir.actions.act_window',\n    'target': 'current',\n         }\n</code></pre> <p>Observem que li pasem el model i el res_id per a que puga obrir un formulari amb el comentari creat.</p> <p>Aquest \u00e9s el json que rep el client despr\u00e9s de cridar al bot\u00f3:</p> <pre><code>{\n   \"jsonrpc\":\"2.0\",\n   \"id\":878622456,\n   \"result\":{\n      \"name\":\"Comment\",\n      \"view_mode\":\"form\",\n      \"res_model\":\"reserves.comments\",\n      \"res_id\":20,\n      \"type\":\"ir.actions.act_window\",\n      \"target\":\"current\",\n      \"flags\":{ },\n      \"views\":[[false,\"form\"]]\n   }\n}\n</code></pre> <p>Ara el client pot demanar un formulari i el record corresponent al model reserves.comments i el id 20.</p> <p>Anem a veure en detall tots els fields que tenen aquestes accions:</p> <ul> <li>res_model: El model del que mostrar\u00e0 les vistes.</li> <li>views: Una llista de parelles en el ID de la vista i el tipus.     En cas de que no sabem el ID de la vista, podem ficar false i     triar\u00e0 o crear\u00e0 una per defecte. Observem l\\'exemple anterior, on en     la declaraci\u00f3 de l\\'acci\u00f3 no s\\'especifica aquest field, per\u00f2 el     client si acaba rebent-lo amb     \\\"views\\\":. La llista     de vistes la trau autom\u00e0ticament amb la funci\u00f3     fields_view_get().</li> <li>res_id: (Opcional) Si es va a mostrar un form, indica la ID del     record que es va a mostrar.</li> <li>search_view_id: (Opcional) Se li pasa (id, name) on id     respresenta el ID de la vista search que es mostrar\u00e0.</li> <li>target: (Opcional) El dest\u00ed del action. Per defecte \u00e9s en la     finestra actual (current), encara que pot ser a tota la pantalla     (full_screen) o en un di\u00e0leg o pop-up (new) o main en     cas de voler que es veja en la finestra actual sense les     breadcrumbs, el que vol dir que elimina el rastre d\\'on v\u00e9     l\\'acci\u00f3.</li> <li>context: (Opcional)Informaci\u00f3 addicional.</li> <li>domain: (Opcional) Aplica un filtre als registres que es demanaran a la base de dades.</li> <li>limit: (Opcional) Per defecte 80, \u00e9s la quantitat de records que     mostrar en la vista tree.</li> <li>auto-search: (Opcional) En cas de que necessitem una b\u00fasqueda     nom\u00e9s carregar la vista.</li> </ul> <p>Exemples d\\'Actions declarades en python:</p> <pre><code># Action per obrir arbre i form:\n{\n    \"type\": \"ir.actions.act_window\",\n    \"res_model\": \"res.partner\",\n    \"views\": [[False, \"tree\"], [False, \"form\"]],\n    \"domain\": [[\"customer\", \"=\", true]],\n}\n# Action sols per a form en un id espec\u00edfic.\n{\n    \"type\": \"ir.actions.act_window\",\n    \"res_model\": \"product.product\",\n    \"views\": [[False, \"form\"]],\n    \"res_id\": a_product_id,\n    \"target\": \"new\",\n}\n# Action que ja est\u00e0 en la base de dades:\n       action = self.env.ref('terraform.new_building_type_action_window').read()[0]\n       return action\n</code></pre> <p>Quan guardem una action en la base de dades, normalment definint-la com un XML, tenim aquest altres fields:</p> <ul> <li>view_mode: Lista separada per comes de les vistes que ha de     mostrar. Una vegada el servidor va a enviar aquest action al client,     amb a\u00e7\u00f2 generar\u00e0 el field views.</li> <li>view_ids: Una llista d\\'objectes de vista que permet definir la     vista de la primera part de views. Aquesta llista \u00e9s un     Many2many amb les vistes i la taula intermitja es diu     ir.actions.act_window.view.</li> <li>view_id: Una vista espec\u00edfica a afegir a views.</li> </ul> <p>Per tant, si volem definir les vistes que volem que mostre el action, podem omplir els camps anteriors. El servidor observa la llista de view_ids i afegeix el view_id. Si no ompli tot el definit en view_mode, acaba d\\'omplir el field views (el que env\u00eda als clients) amb (False,<code>&lt;tipus&gt;</code>). Exemple de c\u00f3m especificar una vista en un action:</p> <pre><code>&lt;field name=\"view_ids\" eval=\"[(5, 0, 0),(0, 0, {'view_mode': 'tree', 'view_id': ref('tree_external_id')}),(0, 0, {'view_mode': 'form', 'view_id': ref('form_external_id')}),]\" /&gt;\n</code></pre> <p>En els fitxers de dades, aquesta sintaxi \u00e9s per a modificar fields Many2many. El (5,0,0) per a desvincular les possibles vistes. El (0,0,<code>&lt;record&gt;</code>) per crear un nou record i vincular-ho. En aquest cas, crea un record amb els dos fields necessaris, el tipus de vista i el External ID de la vista a vincular.</p> <p>Aix\u00f2 tamb\u00e9 es pot fer m\u00e9s expl\u00edcitament insertant records en ir.actions.act_window.view.</p>"},{"location":"JoseCastillo_Ini/accions_menus/#accions-tipus-url","title":"Accions tipus URL","text":"<p>Aquestes accions s\u00edmplement obrin un URL. Exemple:</p> <pre><code>{\n    \"type\": \"ir.actions.act_url\",\n    \"url\": \"http://odoo.com\",\n    \"target\": \"self\",     # Target pot ser self o new per reempla\u00e7ar el contingut de la pestanya del navegador o obrir una nova.\n}\n</code></pre>"},{"location":"JoseCastillo_Ini/accions_menus/#accions-tipus-server","title":"Accions tipus Server","text":"<p>Les accions tipus server funcionen en un model base i poden ser executades autom\u00e0ticament o amb el men\u00fa contextual d\\'acci\u00f3 que es veu dalt en la vista.</p> <p>Les accions que pot fer un server action s\u00f3n:</p> <ul> <li>Executar un codi python. Amb un bloc de codi que ser\u00e0 executat     al servidor.</li> <li>Crear un nou record.</li> <li>Escriure en un record existent.</li> <li>Executar varies accions. Per poder executar varies accions     server.</li> </ul> <p>Com es pot veure al codi de les server action:</p> <pre><code> state = fields.Selection([\n        ('code', 'Execute Python Code'),\n        ('object_create', 'Create a new Record'),\n        ('object_write', 'Update the Record'),\n        ('multi', 'Execute several actions')], string='Action To Do',\n        default='object_write', required=True,\n        help=\"Type of server action. The following values are available:\\n\"\n             \"- 'Execute Python Code': a block of python code that will be executed\\n\"\n             \"- 'Create': create a new record with new values\\n\"\n             \"- 'Update a Record': update the values of a record\\n\"\n             \"- 'Execute several actions': define an action that triggers several other   \n\n server actions\\n\"\n             \"- 'Send Email': automatically send an email (Discuss)\\n\"\n             \"- 'Add Followers': add followers to a record (Discuss)\\n\"\n             \"- 'Create Next Activity': create an activity (Discuss)\")\n</code></pre> <p>Permet executar codi en el servidor. \u00c9s una acci\u00f3 molt gen\u00e8rica que pot, incl\u00fas retornar una acci\u00f3 tipus window. Les accions tipus server s\u00f3n una forma m\u00e9s gen\u00e8rica del que fa el button tipus object.</p> <p>Veiem un exemple:</p> <pre><code>&lt;record model=\"ir.actions.server\" id=\"print_instance\"&gt;\n    &lt;field name=\"name\"&gt;Res Partner Server Action&lt;/field&gt;\n    &lt;field name=\"model_id\" ref=\"model_res_partner\"/&gt;\n    &lt;field name=\"state\"&gt;code&lt;/field&gt;\n    &lt;field name=\"code\"&gt;\n        raise Warning(model._name)\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>En l\\'exemple anterior podem veure les caracter\u00edstiques b\u00e0siques:</p> <ul> <li>ir.action.server: El nom del model on es guardar\u00e0.</li> <li>model_id: \u00c9s l\\'equivalent a res_model en les accions tipus     window. Es tracta del model sobre el que treballar\u00e0 l\\'action.</li> <li>code: Tro\u00e7 de codi que executar\u00e0. Pot ser un python complex o el     nom d\\'un m\u00e8tode que ja tinga el model.</li> </ul> <p>El servidor rebr\u00e0 del client la ordre d\\'executar eixe action. Eixa ordre \u00e9s un Json en el que sols es diu la action_id del action i el context. Dins del context, tenim coses com els active_id, active_ids o el active_model. El servidor executa sobre eixe model el codi que diu l\\'action. En l\\'exemple anterior, simplement diu una alerta.</p> <p>El codi del action server pot definir una variable anomenada action que retornar\u00e0 al client la seguent acci\u00f3 a executar. Aquesta pot ser window, aix\u00f2 pot servir per refescar la p\u00e0gina o enviar a una altra. Exemple:</p> <pre><code>&lt;record model=\"ir.actions.server\" id=\"print_instance\"&gt;\n    &lt;field name=\"name\"&gt;Res Partner Server Action&lt;/field&gt;\n    &lt;field name=\"model_id\" ref=\"model_res_partner\"/&gt;\n    &lt;field name=\"state\"&gt;code&lt;/field&gt;\n    &lt;field name=\"code\"&gt;\n        if object.some_condition():\n            action = {\n                \"type\": \"ir.actions.act_window\",\n                \"view_mode\": \"form\",\n                \"res_model\": model._name,\n                \"res_id\": object.id,\n            }\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Per\u00f2 no sempre s\\'utilitza l\\'etiqueta code. Aix\u00f2 depen d\\'una altra anomenada state que pot tindre el tipus d\\'acci\u00f3 de servidor. Estan disponibles els seg\u00fcents valors:</p> <ul> <li>code : Executar codi Python\\': un bloc de codi Python que ser\u00e0     executat. En el cas d\\'utilitzar code, el codi t\u00e9 acc\u00e9s a algunes     variables espec\u00edfiques:</li> <li>env: Enviroment d\\'Odoo en el que l\\'action s\\'executa.</li> <li>model: Model en que s\\'executa. Es tracta d\\'un         recordset buit.</li> <li>record: El registre en que s\\'executa l\\'acci\u00f3.</li> <li>records: Recordset de tots els registres en que s\\'executa         l\\'acci\u00f3 (si es cridada per un tree, per exemple)</li> <li>time, datetime, dateutil, timezone Bilioteques Python \u00fatils         (s\u00f3n python pures, no d\\'odoo)</li> <li>log(message, level=\\'info\\'): Per enviar missatges al log.</li> <li>Warning per llan\u00e7ar una excepci\u00f3 amb raise.</li> <li>action={...} per llan\u00e7ar una acci\u00f3.</li> <li>object_create: Crear o duplicar un nou registre: crea un nou     registre amb nous valors, o duplica un d\\'existent a la base de     dades</li> <li>object_write: Escriure en un registre: actualitza els valors     d\\'un registre</li> <li>multi: Executar diverses accions: defineix una acci\u00f3 que llan\u00e7a     altres diverses accions de servidor</li> <li>followers: Afegir seguidors: afegeix seguidors a un registre     (disponible a Discuss)</li> <li>email: Enviar un correu electr\u00f2nic: envia autom\u00e0ticament un     correu electr\u00f2nic (disponible a email_template)</li> </ul> <p>Exemple complet de action tipus server. (No fa res \u00fatil, per\u00f2 es pot veure c\u00f3m s\\'utilitza tot):</p> <pre><code>    &lt;record model=\"ir.actions.server\" id=\"escoleta.creaar_dia_menjador\"&gt;\n    &lt;field name=\"name\"&gt;Creacio de un dia de menjador a partir d'una plantilla d'alumnes&lt;/field&gt;\n    &lt;field name=\"model_id\" ref=\"model_escoleta_menjador\"/&gt;\n    &lt;field name=\"state\"&gt;code&lt;/field&gt;\n    &lt;field name=\"code\"&gt;\nfor r in records:\n     fecha = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n     env['escoleta.menjador_day'].create({'name':fecha,'day':r.id})\n     log('creat dia menjador',level='info')\n     for s in r.students:\n      log('creat alumne',level='info')\n      env['escoleta.student_day'].create({'name':str(s.name)+\" \"+str(fecha),'student':s.id,'menjador_day':r.id})\naction = {\n                \"type\": \"ir.actions.act_window\",\n                \"view_mode\": \"tree\",\n                \"res_model\": \"escoleta.menjador_day\",\n         }\n\n    &lt;/field&gt;\n    &lt;field name=\"binding_model_id\" ref=\"escoleta.model_escoleta_menjador\"/&gt;\n&lt;/record&gt;\n</code></pre> <p>L\\'exemple anterior mostra c\u00f3m podem crear un action server i executar coses complexes en el servidor sense modificar el codi python del model. Per\u00f2 a\u00e7\u00f2 t\u00e9 varis inconvenients: El primer \u00e9s que estem despla\u00e7ant la tasca del controlador a la vista o a una part en mig entre la vista i el controlador. El segon inconvenient \u00e9s que \u00e9s m\u00e9s complicat escriure codi python dins d\\'un XML sense equivocar-se en la indentaci\u00f3. I el inconvenient m\u00e9s important \u00e9s que no tenim acc\u00e9s a totes les funcions del ORM i biblioteques \u00fatils d\\'Odoo del controlador. Per tant, \u00e9s recomanable crear una funci\u00f3 en el model i cridar-la:</p> <pre><code>    &lt;record model=\"ir.actions.server\" id=\"escoleta.creaar_dia_menjador\"&gt;\n    &lt;field name=\"name\"&gt;Creacio de un dia de menjador a partir d'una plantilla d'alumnes&lt;/field&gt;\n    &lt;field name=\"model_id\" ref=\"model_escoleta_menjador\"/&gt;\n    &lt;field name=\"state\"&gt;code&lt;/field&gt;\n    &lt;field name=\"code\"&gt;\naction=model.crear_dia_menjador()      # Assignar el resultat de la funci\u00f3 a action per refrescar la web\n    &lt;/field&gt;\n    &lt;field name=\"binding_model_id\" ref=\"escoleta.model_escoleta_menjador\"/&gt;\n&lt;/record&gt;\n</code></pre> <p>Codi de la funci\u00f3:</p> <pre><code>    def crear_dia_menjador(self):                            \n        # En el XML era records i en el python cal extraurer els records de active_ids                             \n        records = self.browse(self._context.get('active_ids'))                            \n        for r in records:\n         # Ja es pot treballar millor en dates gr\u00e0cies a la biblioteca 'fields'\n         fecha = fields.Datetime.now()                                                               \n         self.env['escoleta.menjador_day'].create({'name':fecha,'day':r.id})              \n         for s in r.students:\n           self.env['escoleta.student_day'].create({'name':str(s.name)+\" \"+str(fecha),'student':s.id,'menjador_day':r.id})\n        return {                                                  \n                # En el XML era action i ac\u00ed fa falta que retorne el diccionari per assignar-lo a action\n                \"type\": \"ir.actions.act_window\",                                          \n                \"view_mode\": \"tree\",                                                      \n                \"res_model\": \"escoleta.menjador_day\",                                     \n         }      \n</code></pre>"},{"location":"JoseCastillo_Ini/accions_menus/#domains-en-les-actions","title":"Domains en les actions","text":"<p>En Odoo, el concepte de domain o domini est\u00e0 en varis llocs, encara que el seu funcionament sempre \u00e9s el mateix. Es tracta d\\'un criteri de b\u00fasqueda o filtre sobre un model. La sintaxi dels domains \u00e9s como veurem en aquest exemple:</p> <pre><code># [(nom_del_field, operador , valor)] \n['|',('gender','=','male'),('gender','=','female')]\n</code></pre> <p>Com es veu, cada condici\u00f3 va entre par\u00e8ntesis amb el mon del field i el valor desitjat entre cometes si \u00e9s un string i amb l\\'operador entre cometes i tot separat per comes. Les dues condicions tenen un | dabant, que significa la O l\u00f2gica. Est\u00e0 dabant per utilitzar la notaci\u00f3 polaca inversa.</p> <p>Un action en domain treu vistes per als elements del model que coincideixen en les condicions del domini. El domain \u00e9s trauit per el model en un where m\u00e9s a la consulta SQL. Per tant, al client no li arriben mai els registres que no pasen el filtre. Els domains en les vistes search el funcionament en la part del model \u00e9s igual, ja que no ejecuta un action, per\u00f2 fa la mateixa petici\u00f3 javascript.</p> <p>Exemple de domain en action:</p> <pre><code>    &lt;record id=\"action_employee\" model=\"ir.actions.act_window\"&gt;\n        &lt;field name=\"name\"&gt;Employee Male or Female&lt;/field&gt;\n        &lt;field name=\"res_model\"&gt;employee.employee&lt;/field&gt;\n        &lt;field name=\"view_type\"&gt;form&lt;/field&gt;\n        &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n                &lt;field name=\"domain\"&gt;['|',('gender','=','male'),('gender','=','female')]&lt;/field&gt;\n    &lt;/record&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/accions_menus/#actions-per-a-molts-records","title":"Actions per a molts records","text":"<p>Quan estem observant un tree, podem veure dalt uns men\u00fas desplegables que mostren varies accions que es poden fer als records seleccionats del tree. Com ara eliminar o duplicar. Nosaltres podem crear noves accions que estaran ah\u00ed dalt.</p> <p>Fins ara hem vist accions que s\\'executen al polsar un men\u00fa o un bot\u00f3. El men\u00fa est\u00e0 declarat expl\u00edcitament i el bot\u00f3 tamb\u00e9. Les accions sols s\u00f3n una manera de dir-li al client web c\u00f3m ha de demanar les coses i c\u00f3m ha de mostrar-les. El client web de Odoo genera moltes part de l\\'interf\u00edcie de manera autom\u00e0tica. En el cas que ens ocupa, el client web at\u00e9n a un action demanat pel men\u00fa lateral, aquest mostra un tree en la finestra corresponent. Per\u00f2 en la definici\u00f3 del tree, sols est\u00e0 la part de les dades. Dalt del tree, el client web mostra una barra de b\u00fasqueda i uns men\u00fas desplegables dropdown. Aquest men\u00fa \u00e9s generat pel client amb la llista d\\'accions vinculades al model que est\u00e0 mostrant.</p> <p>La manera m\u00e9s senzilla de vincular un action al men\u00fa de dalt \u00e9s amb aquests fields que ara tenen les actions:</p> <ul> <li>binding_type: Per defecte \u00e9s de tipus action, per\u00f2 pot ser     action_form_only per mostrar un formulari o report per     generar un report.</li> <li>binding_model_id: Aquest field serveix per vincular l\\'action al     men\u00fa de dalt de les vistes d\\'eixe model.</li> </ul> <p>Exemple tret del codi d\\'Odoo 11:</p> <pre><code> &lt;record id=\"action_view_sale_advance_payment_inv\" model=\"ir.actions.act_window\"&gt;\n  &lt;field name=\"name\"&gt;Invoice Order&lt;/field&gt;\n  &lt;field name=\"type\"&gt;ir.actions.act_window&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;sale.advance.payment.inv&lt;/field&gt;\n  &lt;field name=\"view_type\"&gt;form&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;form&lt;/field&gt;\n  &lt;field name=\"target\"&gt;new&lt;/field&gt;\n  &lt;field name=\"groups_id\" eval=\"[(4,ref('sales_team.group_sale_salesman'))]\"/&gt;\n  &lt;field name=\"binding_model_id\" ref=\"sale.model_sale_order\" /&gt;\n&lt;/record&gt;\n</code></pre> <p>Exemple per a accions tipus server:</p> <pre><code>&lt;record id=\"action_server_learn_skill\" model=\"ir.actions.server\"&gt;\n    &lt;field name=\"name\"&gt;Learning&lt;/field&gt;\n    &lt;field name=\"type\"&gt;ir.actions.server&lt;/field&gt;\n    &lt;field name=\"model_id\" ref=\"your_module_folder_name.model_your_model\" /&gt;\n    &lt;field name=\"binding_model_id\" ref=\"module_folder_name.model_your_target_model\" /&gt;\n    &lt;field name=\"state\"&gt;code&lt;/field&gt;\n    &lt;field name=\"code\"&gt;model.action_learn()&lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Per saber m\u00e9s de les actions, podem estudiar el codi: 1</p>"},{"location":"JoseCastillo_Ini/client_web/","title":"Client Web","text":"<p>En la secci\u00f3 de la vista i de l\\'her\u00e8ncia en la vista hem pogut modificar la forma en que <code>Odoo</code> mostra o gestiona la base de dades amb el client web. La gesti\u00f3 de la vista es limita a crear lists, forms, kanbans... Els creadors d\\'Odoo recomanen utilitzar aquestes vistes sempre que es puga. No obstant, de vegades volem fer alguna cosa m\u00e9s personalitzada. Si volem personalitzar a baix nivell l\\'aparen\u00e7a i funcionament del client web, deguem entendre b\u00e9 c\u00f3m funciona.</p> <p>L'Odoo actual carrega un client complet a la web, que es comunica amb missatges breus i concrets amb el servidor. Missatges en JSON que sols tenen dades o ordres a executar. Cada vegada que refresquem el navegador web, est\u00e0 enviant-se un programa de client complet, per\u00f2 quan entrem a un men\u00fa, sols s\\'envia un missatge JSON demanant unes dades i es rep un altre amb una llista de les dades a mostrar pel client. Opcionalment, s\\'env\u00eda el xml de la vista, el qual ser\u00e0 interpretat pel client per mostrar correctament les dades.</p> <p>Si volem veure tot el que el servidor rep o envia al client, podem arrancar el servici amb l\\'opci\u00f3 --log-level=debug_rpc. Tamb\u00e9 es pot obrir amb F12 la consola del navegador. </p> <p>El client web \u00e9s una SPA (Single Page Application), a l\\'estil d\\'altres frameworks coneguts com Angular o React, va creant i destruint elements de la interf\u00edcie cont\u00ednuament. Aquests elements es diuen <code>components</code>. Els components \u00e9s la manera gen\u00e8rica de compartimentar l'interficie. Despr\u00e9s hi ha components que actuen com a <code>Widgets</code> per mostrar fields o efectes visuals o altres, per exemples, s\u00f3n <code>views</code> per mostrar un o varis registres. </p> <p>Amb Odoo, es proporcionen tres clients web diferenciats, per\u00f2 que, internament, funcionen amb el mateix framework. Aquest s\u00f3n el web client que \u00e9s el \"backoffice\" utilitzat pel empleats de l'empresa, el website que \u00e9s la p\u00e0gina web p\u00fablica i el point of sale, que \u00e9s per al punts de venda.</p> <p>Quan ens referim a crear m\u00f2duls per al client, generalment ens referim a fer canvis en l\\'apari\u00e8ncia o comportament de la web.</p> <p>Reflexionem sobre el tipus de modificaci\u00f3 que necessitem:</p> <ul> <li>Un canvi menor en l\\'apari\u00e8ncia: Afegir algunes regles CSS.</li> <li>Un canvi est\u00e9tic o de comportament de la manera en que es visualitza un field: Afegir HTML, CSS i Javascript a un Widget.</li> <li>Un canvi en la manera en la que un field enmagatzema o recupera les dades: Modificaci\u00f3 del Javascript del Widget i de la part del model o el controlador Javascript de la vista.</li> <li>Un canvi en la manera de mostrar un recordset sencer: Crear una  vista.</li> <li>Fer una web des de 0 amb les dades d\\'Odoo: Utilitzar els Web controllers</li> </ul>"},{"location":"JoseCastillo_Ini/client_web/#arquitectura-del-client-web","title":"Arquitectura del client web","text":"<p>El WebClient d\\'Odoo es construeix amb m\u00f2duls, de la mateixa manera que els m\u00f2duls per al \\'servidor\\'. Sols que en els m\u00f2duls per ampliar el client web es modifiquen altres arxius a banda dels t\u00edpics dels models de python o els xml de la vista.</p> <p>L\\'arquitectura \u00e9s MVC internament. \u00c9s a dir, Odoo t\u00e9 un model (ORM sobre PostgresSQL), un controlador (M\u00e8todes de Python) i una vista (El client Web definit en el servidor amb XML) i el propi client web tamb\u00e9 t\u00e9 un model (Les peticions Ajax al servidor amb JSON i la interpretaci\u00f3 d\\'aquestes), un controlador (Funcions Javascript per a gestionar aquestes dades) i una vista (El renderitzat dels elements web al navegador). Com que Javascript \u00e9s un llenguatge que deixa fer de tot, no tenim perqu\u00e8 respectar aquesta arquitectura, per\u00f2 els nostres m\u00f2duls han de poder ser mantinguts i cal que aprofiten al m\u00e0xim els recursos que el client web ja ens proporciona, per tant, intentarem programar el menys possible i aprofitar tot el que ja t\u00e9 el client.</p> <p>Els m\u00f2duls principals del client web depenen del m\u00f2dul web, que proporciona el nucli del client web. Els altres complementen a aquest. Hi ha m\u00f2duls que espec\u00edficament es diuen, per exemple, web_kanban, que amplien la web. Per\u00f2 en realitat qualsevol m\u00f2dul ho pot fer. El m\u00f2dul web cont\u00e9 tot l'HTML i Javascript necessari per a que els altres m\u00f2duls de la web funcionen.</p> <p>Per modificar el client web cal proporcional HTML, xml, CSS, Javascript i imatges. Aix\u00f2 ha d\\'estar en el directori static del m\u00f2dul:</p> <ul> <li>static/src/js : the JavaScript files</li> <li>static/src/css : the CSS files</li> <li>static/src/xml : the HTML template files</li> <li>static/img : pictures used in templates or CSS</li> <li>static/libs : JS libraries needed by the module</li> </ul> <p>El server no manipula aquesta informaci\u00f3, per\u00f2 la processa i l\\'envia a client.</p> <pre><code>Com que els CSS i JS no s\u00f3n processades pel servidor, no cal reiniciar el servidor per veure els canvis, sols refrescar el navegador. Aix\u00f2 no sempre funciona, ja que el servidor pot ser que no processe els assets o que la cau del navegador no actualitze el JS o el XML.\n</code></pre>"},{"location":"JoseCastillo_Ini/client_web/#enviant-el-client-al-navegador","title":"Enviant el client al navegador","text":"<p>Cada vegada que refresquem, s\\'envia el client sencer. Aix\u00f2 vol dir molts CSS, moltes l\u00ednies de Javascript de molt fitxers distints i molt d'HTML i XML. Per evitar saturar la xarxa, el servidor fa una compressi\u00f3 de totes eixes dades de la seg\u00fcent manera:</p> <ul> <li>Tots els CSS i Javascript s\u00f3n concatenats en un sol fitxer. La concatenaci\u00f3 s\\'ordena per depend\u00e8ncies entre m\u00f2duls.</li> <li>El Javascript \u00e9s minimitzat llevant espais i refactoritzant les variables per noms m\u00e9s curts.</li> <li>Una web HTML molt simple sols amb l\\'enlla\u00e7 als CSS i Javascript \u00e9s enviada al client.</li> <li>Tot es comprimeix en gzip pel server per reduir l\\'enviament. El navegador \u00e9s capa\u00e7 de descomprimir.</li> </ul> <p>Tot aix\u00f2 fa dif\u00edcil de fer debug amb el client. Per aix\u00f2 es recomana ficar ?debug=1 a la URL per demanar que no minimitze.</p>"},{"location":"JoseCastillo_Ini/client_web/#els-assets","title":"Els Assets","text":"<p>El client d\\'Odoo \u00e9s molt complex i necessita tindre Javascript, HTML i CSS de molts fitxers distints. Gestionar aix\u00f2 permetent que qualsevol puga fer un m\u00f2dul per afegir m\u00e9s implica una gesti\u00f3 d\\'aquests enlla\u00e7os m\u00e9s autom\u00e0tica. Per aix\u00f2 han creat principalment tres bundles en XML que no s\u00f3n m\u00e9s que una col\u00b7lecci\u00f3 de links a Javascript o CSS. Aquests tenen l\\'estructura d\\'un Template QWeb i els m\u00e9s comuns s\u00f3n:</p> <ul> <li>web.assets_common: amb les coses comuns.</li> <li>web.assets_backend: Amb les coses espec\u00edfiques del Backend.</li> <li>web.assets_frontend: Amb les coses de la web p\u00fablica.</li> </ul> <p>Si volem afegir fitxers a un asset en odoo, s\\'ha d\\'afegir al manifest:</p> <pre><code>'assets': {\n    'web.assets_backend': [\n        'web/static/src/xml/**/*',\n    ],\n    'web.assets_common': [\n        'web/static/lib/bootstrap/**/*',\n        'web/static/src/js/boot.js',\n        'web/static/src/js/webclient.js',\n    ],\n},\n</code></pre> <p>Aquesta \u00e9s la manera general d'afegir funcionalitats o estils. Per\u00f2 tal vegada el nostre widget no necessita ser carregat sempre i estem afegint una c\u00e0rrega constant a la xarxa. Per aix\u00f2 pot ser interessant afegir la llibreria sols quan es crea el widget en temps d'execuci\u00f3. Odoo proporciona formes de carrega llibreries i CSS de forma din\u00e0mica (lazyload en Qweb template engine).</p> <p>Documentaci\u00f3 sobre els assets: https://www.odoo.com/documentation/master/developer/reference/frontend/assets.html</p>"},{"location":"JoseCastillo_Ini/client_web/#exemple-afegir-css-al-nostre-modul","title":"Exemple: Afegir CSS al nostre m\u00f2dul","text":"<p>Abans d\\'entrar en la creaci\u00f3 de Widgets, pot ser interessant observar c\u00f3m els bundles es poden ampliar d\\'una forma simple per modificar o afegir CSS.</p> <p>El primer \u00e9s crear el css en /<code>&lt;modul&gt;</code>/static/src/css/<code>&lt;modul&gt;</code>.css. En el nostre cas, sols fem un per a fer la lletra m\u00e8s menuda:</p> <pre><code>.reserves_tree { font-size:0.8em;}\n</code></pre> <p>Despr\u00e9s afegim el css al bundle assets_backend:</p> <pre><code>'assets': {\n    'web.assets_backend': [\n        'web/static/src/xml/**/*',\n    ],\n},\n</code></pre> <p>I per \u00faltim, sols cal utilitzar la classe css:</p> <pre><code>&lt;field name=\"bookings\" limit=\"10\" class=\"reserves_tree\"&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/client_web/#arquitectura-dels-moduls-en-javascript","title":"Arquitectura dels m\u00f2duls en Javascript","text":"<p>De la mateixa manera que hem vist per introduir un CSS personalitzat en Odoo, es pot introduir un Javascript. Aquest ser\u00e0 afegit al final del bundle i ser\u00e0 executat pel navegador.</p> <p>Odoo t\u00e9 molt de Javascript ja funcionant i podem interferir. Per\u00f2 el major problema \u00e9s que no sabem molt b\u00e9 qu\u00e9 s\\'est\u00e0 executant en cada moment. Javascript \u00e9s un llenguatge que treballa molt de forma as\u00edncrona. Aix\u00f2 permet que es puga carregar part de la web mentres una altra part ja est\u00e0 funcionant. Aquesta asincronia fa que no es puga predir f\u00e0cilment en quin ordre es carregar\u00e0 o executar\u00e0 tot. Totes les aplicacions web complexes tenen que solucionar eixos problemes. Javascript t\u00e9 un ecosistema de biblioteques molt divers i no tots treballen de la mateixa manera, de fet, molts han solventat car\u00e8ncies del llenguatge amb t\u00e8cniques de programaci\u00f3 i biblioteques. Aques \u00e9s el cas dels m\u00f2duls. Odoo gestiona la complexitat del seu Javascript amb m\u00f2duls i depend\u00e8ncies d\\'altres m\u00f2duls. Per aix\u00f2 no \u00e9s tan simple con afegir un parell d\\'instruccions Jquery per modificar una part del DOM, ja que no podem saber si est\u00e0 carregada o quan es carregar\u00e0. Abans de fer partxes que solucionen mal els problemes, cal estudiar c\u00f3m ho fa Odoo.</p> <pre><code>Els m\u00f2duls simplifiquen la programaci\u00f3 de les webs grans. Els m\u00f2duls oculten la complexitat de la programaci\u00f3 de les distintes parts l\u00f2giques d\u2019un programa. Els m\u00f2duls ofereixen una interf\u00edcie en la que interactuen amb la resta de m\u00f2duls. Un programa modular \u00e9s m\u00e9s f\u00e0cilment ampliable i reutilitzable.\nEn els m\u00f2duls cal aconseguir tindre la major independ\u00e8ncia al aconseguit el menor '''acoblament''' i la major '''cohesi\u00f3'''. L\u2019acoblament \u00e9s la excessiva depend\u00e8ncia d\u2019un m\u00f2dul respecte a altres i la cohesi\u00f3 \u00e9s la \u00edntima relaci\u00f3 entre els elements interns del m\u00f2dul. [https://developer.mozilla.org/es/docs/Web/JavaScript/Introducci%C3%B3n_a_JavaScript_orientado_a_objetos]\n</code></pre> <p>Odoo suporta tres maneres de fer codi Javascript:</p> <ul> <li>Sense m\u00f2duls (No recomanable)</li> <li>Amb m\u00f2duls natius ES6.</li> <li>Amb el seu propi sistema de m\u00f2duls (En versions antigues)</li> </ul>"},{"location":"JoseCastillo_Ini/client_web/#utilitzar-moduls-natius-es6-en-odoo","title":"Utilitzar m\u00f2duls natius ES6 en Odoo","text":"<p>La documentaci\u00f3 oficial recomana fer els nous m\u00f2duls d\\'aquesta manera.</p> <pre><code>import { someFunction } from './file_b';\n\nexport function otherFunction(val) {\n    return someFunction(val + 3);\n}\n</code></pre>"},{"location":"JoseCastillo_Ini/client_web/#owl","title":"OWL","text":"<p>Moltes p\u00e0gines web SPA com \u00e9s Odoo estan fetes en un framework de Javascript, ja que els manteniments dels components, els hooks, la reactivitat o la comunicaci\u00f3 amb el servidor s\u00f3n complicats i \u00e9s innecessari fer-ho sempre. Alguns dels frameworks s\u00f3n: Angular, Vue, React...</p> <p>Odoo t\u00e9 el seu propi, i a partir de la versi\u00f3 14 es diu <code>OWL</code> i es desenvolupa per separat, sempre pensant en que siga la base dels nous elements de la web en Odoo.</p> <pre><code>La primera pregunta que un desenvolupador web es fa al veure que Odoo est\u00e0 desenvolupant el seu framework \u00e9s perqu\u00e8 no utilitzen Angular, Vue o React o qualsevol altre framework madur. Els desenvolupadors d'Odoo la responen en cada article: Necessiten que siga m\u00e9s lleugera, adaptada totalment a Odoo i no dependre d'altres. Semblen bons motius i si tenen ra\u00f3 o no es veur\u00e0 en les pr\u00f2ximes versions. \n</code></pre> <p>OWL \u00e9s un framework web menut (\\&lt;20KB) que t\u00e9 els elements d\\'un framework modern:</p> <ul> <li>Un sistema declaratiu de components</li> <li>Un sistema de reactivitat basat en Hooks.</li> <li>Per defecte t\u00e9 un mode concurrent.</li> <li>Un store per a l\\'estat del programai</li> <li>Un Router.</li> <li>Un sistema de plantilles amb QWeb.</li> <li>Al contrari que en versions anteriors, OWL aprofita la sintaxi ES6     per a les classes.</li> <li>Un virtual DOM amb renderitzaci\u00f3 as\u00edncrona.</li> </ul> <p>En la documentaci\u00f3 oficial d\\'OWL quasi no menciona c\u00f3m integrar-lo en Odoo. Aix\u00f2 \u00e9s perqu\u00e8 OWL aspira a ser un framework independent i poder ser utilitzat per a quasevol cosa. En la realitat, ha sigut desenvolupat pensant en Odoo i quasi sols s'utilitza en projectes relacionats.</p> <p>Quan desenvolupem per a Odoo en OWL cal tenir en compte que Odoo afegeix a OWL alguns objectes propis, com una estructura est\u00e0ndard de <code>props</code>, el concepte de <code>Widget</code>, registres ja predefinits i moltes coses m\u00e9s. </p> <p>Abans de continuar cal preguntar-se qu\u00e8 es vol aconseguir o qu\u00e8 podem aconseguir amb OWL: - Crear una web completa sense relaci\u00f3 amb Odoo. - Crear una web completa que tinga com a backend Odoo (no t\u00e9 molta difer\u00e8ncia de l\\'anterior) - Fer una secci\u00f3 en la web o el backend d\\'Odoo. - Fer una vista, un men\u00fa, un widget nou per a Odoo.</p> <p>Aquest manual es centra sobretot en l\\'\u00faltima opci\u00f3 i anem a comen\u00e7ar per ella.</p>"},{"location":"JoseCastillo_Ini/client_web/#crear-un-component-dodoo-en-owl","title":"Crear un component d\\'Odoo en OWL","text":"<p>Els components tenen una plantilla <code>Qweb</code>, un estil <code>css</code> i un <code>Javascript</code>. Am\u00e9s, estan enregistrats.</p> <p>Abans de comen\u00e7ar, cal fer l\\'estructura de directoris i fitxers i un xml per afegir el nostre Javascript al bundle:</p> <pre><code>  'assets': {\n    'web.assets_backend': [\n        'provesowl/static/src/js/component.js',\n        'provesowl/static/src/css/component.css',\n    ],\n</code></pre> <p>En la ruta especificada farem el fitxer components.js i el css.</p> <p>Els components en OWL estan basats en classes ES6 o en el seu sistema modular. En components.js afegim aquest codi:</p> <pre><code>//Importar els elements del framework\nimport { Component, xml, useState, mount } from \"@odoo/owl\";\n\n// Crear el component que hereta de Component d'OWL\nclass MyComponent extends Component {\n    static template = xml`\n        &lt;div t-on-click=\"increment\"&gt;\n            &lt;t t-esc=\"state.value\"&gt;\n        &lt;/div&gt;\n    `;\n\n    // La funci\u00f3 setup \u00e9s on s'inicialitza el component, no deuriem utilitzar constructor.\n    setup() {\n        this.state = useState({ value: 1 });\n    }\n\n    increment() {\n        this.state.value++;\n    }\n}\n\n// La forma de cridar a la funci\u00f3 xml en tagged templates \n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates\n\nMyComponent.template = xml`&lt;button t-on-click=\"increment\"&gt;  \nClick Me! [&lt;t t-esc=\"state.value\"/&gt;]\n&lt;/button&gt;`;\n</code></pre> <p>Es necessita donar d'alta un Widget o ampliar les vistes. Per provar si funciona el donamem d'alta de la manera m\u00e9s senzilla, amb un <code>widget</code> independent a l'estil del <code>web_ribbon</code>:</p> <pre><code>registry.category(\"view_widgets\").add(\"click_count\", {component: MyComponent});\n</code></pre> <pre><code>&lt;widget name=\"click_count\"/&gt;\n</code></pre> <p>El codi anterior \u00e9s s\u00edmplement un exemple tret de la documentaci\u00f3 d'Odoo. T\u00e9 un problema de disseny i \u00e9s que la plantilla <code>xml</code> deuria estar en un fitxer a banda i ser referenciada per a poder estar en un asset, poder ser traduida i ser m\u00e9s eficient.</p> <p>```{admonition} Consells :class: tip El client web d'Odoo, al igual que la programaci\u00f3 del servidor, t\u00e9 moltes opcions. Am\u00e9s, canvia m\u00e9s d'una versi\u00f3 a un altra, al menys mentre s'acaba de consolidar OWL. Per tant, \u00e9s interessant buscar exemples a la documentaci\u00f3 d'Odoo. Especialment a l'addon Web, per\u00f2 tamb\u00e9 es pot buscar al propi repositori d'Odoo en github per veure c\u00f3m utilitzen determinades classes o funcions a la resta de m\u00f2duls. <pre><code>## Insertar components en Odoo\n\nEls components fets en OWL per a Odoo es poden aplicar de moltes maneres, entre elles:\n\n- Com a widgets de fields amb `widget=\u201d\u201d` \n- Com widgets independents com el `web_ribbon` dins de vistes.\n- Amb `client actions` que mostren un component personalitzar. Ac\u00ed es tracta de crear un `ir.actions.client` amb un tag determinat que apunte a un component enregistrat com `registry.category(\"actions\")` \n- Com una vista personalitzada cridada amb un action window.\n- Dins d'altres components com a component predefinit.\n- Dialogs (Popups personalitzats)\n- Notification Toasts (Notificacions emergents)\n\nAlgunes d'aquestes maneres les anirem utilitzant al llarg d'aquest article. Per exemple, el `click_count` de l'exemple anterior \u00e9s un widget independent.\n\nPer a que els components i altres elements del frontend estiguen disponibles per a ser insertats en altres components s'ha d'enregistrar. OWL gestiona el registres a l'objecte `registry`. Aquests estan organitzats per categories. A nosaltres en interessen les categories de `actions`,  `views`, `view_widgets` o `fields`, per exemple.  \n\n\n## Modificar components en OWL\n\nDe la mateixa manera que hem vist anteriorment, anem a modificar un component existent. En aquest cas ser\u00e0 un component per a un `field`, per tant, estem parlan de un `widget`. La paraula `Widget` es considera obsoleta en Odoo amb OWL, ara cal dir `Components`. No obstant, al crear forms o trees, encara posem `widget=`, per tant, podem entendre al Widget com un component capa\u00e7 de mostrar o editar dades dins de les vistes.\n\n&gt; Cal dir que els Widgets s\u00f3n l'\u00fanica manera actualment de clavar components personalitzats en `form`, `list` o `search`, ja que aquestes vistes no accepten plantilles `Qweb`. En les vistes `form` sols s'accepta `XML` amb `fields` que poden tenir `widgets`. No obstant, en Kanban i altres m\u00e9s manuals s\u00ed es pot utilitzar QWeb.\n\n\nEl primer que farem ser\u00e0 crear un nou component a partir d\\'un existent amb her\u00e8ncia en OWL:\n\n\n```javascript\nexport class FabBooleanField extends BooleanField {\n   static template = \"natacio.FabBooleanField\"\n}\nexport const booleanField = {\n    component: FabBooleanField,\n};\nregistry.category(\"fields\").add(\"fabboolean\", booleanField);\n</code></pre></p> <p>El primer que fem \u00e9s heretar de <code>BooleanField</code>, que \u00e9s un widget per a un field Boolean que hereta de <code>Component</code>.</p> <p>Tots els components tenen un atribut est\u00e1tic que es diu <code>template</code> i que definirem despr\u00e9s en un <code>xml</code>.</p> <p>Despr\u00e9s es crea un objecte booleanField que servir\u00e0 per enregistrar-lo en la categoria de <code>fields</code>.</p> <p>El <code>xml</code> \u00e9s molt simple:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n\n&lt;templates xml:space=\"preserve\"&gt;\n    &lt;t t-name=\"natacio.FabBooleanField\"&gt;\n        &lt;div class=\"o_fab_boolean_field\"&gt;\n            &lt;t t-call=\"web.BooleanField\"/&gt;\n            &lt;span t-if=\"state.value\"&gt;\u2764\ufe0f&lt;/span&gt;\n            &lt;span t-if=\"!state.value\"&gt;\ud83d\udda4&lt;/span&gt;\n            &lt;span class=\"mx-2\"&gt;Valor: &lt;t t-esc=\"state.value\"/&gt;&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/t&gt;\n&lt;/templates&gt;\n</code></pre> <p>El valor del Boolean est\u00e0 en <code>state</code>i amb <code>Qweb</code> mostrem un \u2764\ufe0f en funci\u00f3 del seu valor.</p> <p>Amb <code>t-call</code> es crida a la plantilla original.</p> <p>Fixem-nos en <code>state</code>, que \u00e9s un atribut heretat del field BooleanField. Les dades les rep per <code>props</code>, per\u00f2 en el seu setup les extreu.</p>"},{"location":"JoseCastillo_Ini/client_web/#crear-nous-widgets-en-owl","title":"Crear nous Widgets en OWL","text":""},{"location":"JoseCastillo_Ini/client_web/#crear-un-widget-molt-simple","title":"Crear un Widget molt simple","text":"<p>Aquest \u00e9s un codi m\u00ednim que funciona per crear un widget:</p> <pre><code>import { Component, xml, useState, mount } from \"@odoo/owl\";\nimport { standardFieldProps } from \"@web/views/fields/standard_field_props\";\nimport {registry} from \"@web/core/registry\";\nexport class CodeField extends Component {\n    static props = {...standardFieldProps}\n    setup() {\n        this.formattedValue = this.props.record.data[this.props.name];\n    }\n}\nCodeField.template = xml`&lt;pre t-esc=\"formattedValue\" class=\"bg-primary text-white p-3 rounded\"/&gt;`;\nregistry.category(\"fields\").add(\"codefield\", {\n    component: CodeField,\n});\n</code></pre> <p>Per utilitzar el widget:</p> <pre><code>&lt;field name=\"code\" widget=\"codefield\"/&gt;\n</code></pre> <p>Aquest field sols \u00e9s de lectura i mostra el codi dins d'un <code>&lt;pre&gt;</code> blau. \u00c9s interessant perqu\u00e8 arreplega el seu valor de <code>props</code> i perqu\u00e8 pot ser utilitzat com a Widget. A continuaci\u00f3 anem a aprofuncir un poc m\u00e9s i a fer Widgets i components m\u00e9s complexos.</p> <p>Hi ha widgets com el <code>ribbon</code> que es poden fer i enregistrar i utilitzar directament. </p>"},{"location":"JoseCastillo_Ini/client_web/#crear-un-widget-per-a-un-many2many","title":"Crear un widget per a un Many2many","text":"<p>Els components per a fields en Odoo han d'oferir al component pare uns <code>props</code> est\u00e0ndad. El pare els utilitzar\u00e0 per passar tota l'informaci\u00f3 que necessita el component fill. El primer que necessitem \u00e9s indicar aquests props i llegir les dades en la funci\u00f3 <code>setup</code>:</p> <pre><code>export class Tree extends Component {\n    static template = \"natacio.Tree\"\n    static props = {\n        ...standardFieldProps\n    }\n    relatedRecords = useState([]);\n    setup(){\n        console.log(this.props);\n        let ids = this.props.record.data[this.props.name].records.map(r =&gt; r.resId);\n        this.orm = useService(\"orm\");\n        if (ids.length) {\n            this.orm.read(this.props.record.data[this.props.name].resModel, ids, []).then((records) =&gt; {\n                this.relatedRecords.push(...records);\n            });\n        }\n    }\n}\n\nregistry.category(\"fields\").add(\"tree\", {component: Tree});\n</code></pre> <p><code>Props</code> t\u00e9 molta informaci\u00f3 sobre tot el que necessita el field i la vista pare. </p> <p>Am\u00e9s, l'exemple utilitza <code>this.orm.read()</code> que \u00e9s una funci\u00f3 disponible al servici <code>orm</code>. Els servicis proporcionen diverses utilitats. En aquest cas, s\u00f3n les mateixes funcions de l'ORM que es poden fer als <code>models</code>. Aquesta funci\u00f3 necessita el model, les ids a llegir i un array de fields. Si l'array est\u00e0 buit els retorna tots. </p> <p>Una altra cosa interessant \u00e9s <code>relatedRecords</code>. Es declara com un <code>useState</code> per aconseguir la reactivitat. Les dades que es posen ah\u00ed es sincronitzar\u00e0n amb l'intef\u00edcie. En cas de que canvien, canviaran a l'intef\u00edcie.</p> <p>Falta definir el <code>xml</code> de la plantilla:</p> <pre><code>  &lt;t t-name=\"natacio.Tree\"&gt;\n        &lt;div class=\"natacio-tree-container\"&gt;\n        &lt;div t-ref=\"treeContainer\"/&gt;\n        &lt;t t-esc=\"relatedRecords.length\"/&gt;\n            &lt;t t-foreach=\"relatedRecords\" t-as=\"i\" t-key=\"i.id\"&gt;\n                &lt;p&gt;\n                    &lt;t t-esc=\"i.name\"/&gt;\n                &lt;/p&gt;\n            &lt;/t&gt;\n        &lt;/div&gt;\n    &lt;/t&gt;\n</code></pre> <p>Aquesta template mostra tant la quantitat de registres com el nom de tots ells. \u00c9s molt simple, per\u00f2 amb altres etiquetes i <code>css</code> es podria fer una llista com la vista <code>list</code>, per exemple. </p>"},{"location":"JoseCastillo_Ini/client_web/#props","title":"Props","text":"<p>Com en React o Vue, OWL permet que els components tinguen una propietat est\u00e0tica anomenada <code>props</code> (properties). Serveix per a comunicar al component les seues dades.</p> <p>https://github.com/odoo/owl/blob/master/doc/reference/props.md </p> <p>Els props poden ser valors est\u00e0tics, poden ser refer\u00e8ncies a objectes per ser din\u00e0mics i reactius o poden ser refer\u00e8ncies a funcions. Els components pares els poden assignar de la seg\u00fcent manera:</p> <pre><code>class Child extends Component {\n  static template = xml`&lt;div&gt;&lt;t t-esc=\"props.a\"/&gt;&lt;t t-esc=\"props.b\"/&gt;&lt;/div&gt;`;\n}\n\nclass Parent extends Component {\n  static template = xml`&lt;div&gt;&lt;Child a=\"state.a\" b=\"'string'\"/&gt;&lt;/div&gt;`;\n  static components = { Child };\n  state = useState({ a: \"fromparent\" });\n}\n</code></pre> <p>Com que el pare ha de saber quin nom posar al props, hi ha uns amb un nom per defecte que funcionen espec\u00edficament per a Odoo: <code>standardFieldProps</code>. Am\u00e9s, es poden crear nous dins de l'objecte <code>static props</code> del component. D'aquesta manera, fem components (Widgets) compatibles amb les vistes (components pares) ja existents.  El codi oficial d'Odoo els defineix aix\u00ed:</p> <pre><code>export const standardFieldProps = {\n    id: { type: String, optional: true },\n    name: { type: String },\n    readonly: { type: Boolean, optional: true },\n    record: { type: Object },\n};\n</code></pre> <p>Dins del record es por aconseguir tota l'informaci\u00f3 que es vol mostrar. De fet, est\u00e0 tota l'informaci\u00f3 de la vista que cont\u00e9 el field. </p> <p>Cal fer, per exemple, un console.log dels props per veure tot el que poden oferir, en els exemples es por veure que obtenim les dades i el nom del model. En l'exemple les dades s\u00f3n d'un Many2many, per tant, contenen l'array <code>records</code> amb tots els registres relacionats.</p>"},{"location":"JoseCastillo_Ini/client_web/#components-prefedinits","title":"Components prefedinits","text":"<p>Odoo t\u00e9 desenvolupats amb OWL una serie de components predefinits que podem utilitzar en els nostre components. </p> <p>Documentaci\u00f3: https://www.odoo.com/documentation/18.0/developer/reference/frontend/owl_components.html#reference-list </p> <p>Aquest, com els components que podem fer nosaltres, tenen una etiqueta i una serie de <code>props</code> que es poden definir. Si observem el field <code>BooleanField</code>, que \u00e9s molt simple, aquesta es la seua plantilla:</p> <pre><code>    &lt;t t-name=\"web.BooleanField\"&gt;\n        &lt;CheckBox id=\"props.id\" value=\"state.value\" className=\"'d-inline-block'\" disabled=\"props.readonly\" onChange.bind=\"onChange\" /&gt;\n    &lt;/t&gt;\n</code></pre> <p>I \u00e9s importat aix\u00ed en javascript</p> <pre><code>static components = { CheckBox };\n</code></pre>"},{"location":"JoseCastillo_Ini/client_web/#crear-components-predefinits","title":"Crear Components predefinits","text":"<p>Un component que siga importat i afegi a <code>static components</code>  ja pot utilitzar-se com a etiqueta. Mirem aquest exemple tant simple:</p> <pre><code>export class EmojiField extends Component {\n    static template = \"modul.EmojiField\"\n}\n</code></pre> <p>En un altre component: <pre><code> static components = { EmojiField }\n</code></pre></p> <pre><code>&lt;EmojiField/&gt;\n</code></pre> <p>La propia definici\u00f3 com a classe i importaci\u00f3 com a element de l'objecte <code>static components</code> ja fa que es puga utilitzar com a <code>tag</code> en la plantilla XML. </p>"},{"location":"JoseCastillo_Ini/client_web/#crear-un-widget-per-a-un-field-en-mode-lecturaescriptura","title":"Crear un widget per a un field en mode lectura/escriptura","text":""},{"location":"JoseCastillo_Ini/client_web/#modificar-una-vista-en-owl","title":"Modificar una vista en OWL","text":"<p>Les vistes existents tamb\u00e9 s\u00f3n <code>components</code>, per\u00f2 s\u00f3n molt m\u00e9s complexos que els <code>fields</code> normals. Un field sol obtenir les dades per <code>props</code> i, com a molt, implementar la manera de comunicar els canvis a la vista. Les vistes han d'obtenir les dades del servidor, cridar a widgets i, en ocasions, interpretar un <code>xml</code> passat per <code>arch</code>. </p> <p>Per abordar aquesta complexitat, Odoo opta per una arquitectura <code>MVC</code> i fa per a les vistes un model, un controlador i un renderitzador, a banda d'una plantilla <code>xml</code>. </p>"},{"location":"JoseCastillo_Ini/client_web/#crear-noves-vistes-en-owl","title":"Crear noves vistes en OWL","text":"<p>https://codingdodo.com/odoo-javascript-101-classes-and-mvc-architecture/ https://codingdodo.com/odoo-15-javascript-reference/</p>"},{"location":"JoseCastillo_Ini/client_web/#hooks-en-owl","title":"Hooks en OWL","text":"<p>https://www.cybrosys.com/blog/hooks-in-odoo-owl-framework</p> <p>OWL, el nou framework per a Odoo 14</p> <p>tutorial complet</p> <p>2</p> <p>3</p> <p>https://www.youtube.com/watch?v=IrcQf4hgjtw</p> <p>Enlla\u00e7os: https://github.com/odoo/owl https://odoo.github.io/owl/playground/ https://medium.com/cybrosys/introduction-to-odoo-owl-framework-29cbe9111919 https://www.odoo.com/es_ES/forum/ayuda-1/blogs-or-websites-available-for-owl-odoo-web-library-for-odoo-v14-to-learn-from-the-scratch-168365 https://www.youtube.com/watch?v=HSer89uSnoM&amp;list=PL1-aSABtP6ABc8HP_02IuC9lUHESnUJM1&amp;index=11</p>"},{"location":"JoseCastillo_Ini/client_web/#qweb","title":"QWeb","text":""},{"location":"JoseCastillo_Ini/intro/","title":"Introducci\u00f3 a Odoo","text":"<p>Aquests apunts s\u00f3n per desenvolupar per a Odoo en el m\u00f2dul SGE de DAM. Moltes instruccions estan adaptades per al funcionament d'Odoo en un entorn d'aprenetatge. </p> <p>L'objectiu \u00e9s desenvolupar m\u00f2duls per ampliar les funcionalitats de l'ERP segons les necessitats de l'empresa. </p> <p>Odoo \u00e9s un ERP complet fet en programari lliure. Am\u00e9s, \u00e9s un framework de programaci\u00f3 RAD, pot ser considerat un framework web full stack amb un proposit empresarial, per\u00f2 amb la posibilitat de fer qualsevol aplicaci\u00f3 web. l'ERP que ens trobem quan l'instal\u00b7lem aprofita aquest framework per mostrar un backoffice llest per a ser utilitzat en qualsevol empresa de qualsevol mida. Al tenir cost 0 (la versio community) no hi ha cost inicial d'implantaci\u00f3. </p> <p>Per aquests motius \u00e9s ideal per a l'ensenyament i moltes empreses l'han adoptat front a les famoses solucions privatives i molt cares. </p>"},{"location":"JoseCastillo_Ini/reports/","title":"Reports","text":"<p>El motor de reports utilitza una combinaci\u00f3 de QWeb, BootStrap i Wkhtmltopdf.</p> <p>```{admonition} Consell :class: tip</p> <p>Pot ser que el wkhtmltopdf de la distribuci\u00f3 no funcione. Cal anar a https://github.com/wkhtmltopdf/wkhtmltopdf/releases/ i descarregar el '''.deb''' de la versi\u00f3 estable m\u00e9s alta. S'instal\u00b7lar\u00e0 amb '''dpkg -i'''</p> <p>Amb '''wkhtmltopdf -V''' podem comprovar si la versi\u00f3 correcta s'ha instal\u00b7lat.  <pre><code>Un report consta de dos elements:\n\n-   Un registre en la base de dades en el model:\n    **ir.actions.report.xml** amb els par\u00e0metres b\u00e0sics\n-   Una vista `Qweb`  per al contingut.\n\nPer exemple, en el xml:\n\n``` xml\n&lt;report\n        id=\"report_session\"\n        model=\"openacademy.session\"\n        string=\"Session Report\"\n        name=\"openacademy.report_session_view\"\n        file=\"openacademy.report_session\"\n        report_type=\"qweb-pdf\" /&gt;\n\n    &lt;template id=\"report_session_view\"&gt;\n        &lt;t t-call=\"report.html_container\"&gt;\n            &lt;t t-foreach=\"docs\" t-as=\"doc\"&gt;\n                &lt;t t-call=\"report.external_layout\"&gt;\n                    &lt;div class=\"page\"&gt;\n                        &lt;h2 t-field=\"doc.name\"/&gt;\n                        &lt;p&gt;From &lt;span t-field=\"doc.start_date\"/&gt; to &lt;span t-field=\"doc.end_date\"/&gt;&lt;/p&gt;\n                        &lt;h3&gt;Attendees:&lt;/h3&gt;\n                        &lt;ul&gt;\n                            &lt;t t-foreach=\"doc.attendee_ids\" t-as=\"attendee\"&gt;\n                                &lt;li&gt;&lt;span t-field=\"attendee.name\"/&gt;&lt;/li&gt;\n                            &lt;/t&gt;\n                        &lt;/ul&gt;\n                    &lt;/div&gt;\n                &lt;/t&gt;\n            &lt;/t&gt;\n        &lt;/t&gt;\n    &lt;/template&gt;\n</code></pre></p> <p>Els reports simplifiquen amb l\\'etiqueta report la creaci\u00f3 d\\'un action de tipus report. Autom\u00e0ticament situen un bot\u00f3 dalt del tree o form per imprimir.</p> <p>Una m\u00ednima template que funciona:</p> <pre><code>&lt;template id=\"report_invoice\"&gt;\n    &lt;t t-call=\"report.html_container\"&gt;\n        &lt;t t-foreach=\"docs\" t-as=\"o\"&gt;\n            &lt;t t-call=\"report.external_layout\"&gt;\n                &lt;div class=\"page\"&gt;\n                    &lt;h2&gt;Report title&lt;/h2&gt;\n                    &lt;p&gt;This object's name is &lt;span t-field=\"o.name\"/&gt;&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/t&gt;\n        &lt;/t&gt;\n    &lt;/t&gt;\n&lt;/template&gt;\n</code></pre> <p>Analitzem aquesta template:</p> <ul> <li>external_layout: Afegeix la cap\u00e7alera i el peu per defecte de     Odoo.</li> <li>Dins de     <pre><code>&lt;div class=\"page\"&gt;\n</code></pre>     Est\u00e0 el contingut del report.</li> <li>id: A de ser el mateix que el name del report.</li> <li>docs: Llista d\\'objectes a imprimir. (Paregut a self)</li> </ul> <p>Es poden afegir css locals o externs al report heredant el template e insertant el css:</p> <pre><code>&lt;template id=\"report_saleorder_style\" inherit_id=\"report.layout\"&gt;\n  &lt;xpath expr=\"//style\" position=\"after\"&gt;\n    &lt;style type=\"text/css\"&gt;\n      .example-css-class {\n        background-color: red;\n      }\n    &lt;/style&gt;\n  &lt;/xpath&gt;\n&lt;/template&gt;\n</code></pre> <p>Per afegir una imatge de la base de dades:</p> <pre><code>&lt;span t-field=\"doc.logo\" t-field-options=\"{&amp;quot;widget&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;class&amp;quot;: &amp;quot;img-rounded&amp;quot;}\"/&gt;\n</code></pre> <p>Notes sobre QWeb</p> <p>QWeb \u00e9s el motor de plantilles de Odoo. Els elements s\u00f3n etiquetes XML que comencen per t-</p> <ul> <li>t-field: Per mostrar el contingut d\\'un field</li> <li>t-if: Per fer condicionals. Per fer un condicional en funci\u00f3 de si     un field est\u00e0 o no, sols cal ficar el field en questi\u00f3 dins del     condicional.</li> </ul> <pre><code>  &lt;t t-if=\"viatge.hotel\"&gt;\n    &lt;!-- ... --&gt;\n  &lt;/t&gt;\n</code></pre> <ul> <li>t-foreach: Per fer bucles per els elements d\\'un one2many, per     exemple.</li> </ul> <p>Depurar els reports</p> <p>Because reports are standard web pages, they are available through a URL and output parameters can be manipulated through this URL, for instance the HTML version of the Invoice report is available through http://localhost:8069/report/html/account.report_invoice/1 (if account is installed) and the PDF version through http://localhost:8069/report/pdf/account.report_invoice/1.</p> <p>M\u00e9s informaci\u00f3 https://www.odoo.com/documentation/8.0/reference/reports.html</p>"},{"location":"JoseCastillo_Ini/vista/","title":"La vista","text":"<p>En aquest cap\u00edtol, explorarem com funcionen les vistes en Odoo, quins tipus de vistes podem utilitzar i com es poden personalitzar mitjan\u00e7ant XML i accions de servidor. Aprendrem a estructurar correctament una interf\u00edcie d'usuari, a definir formularis, llistats, kanbans i gr\u00e0fics, i a gestionar la navegaci\u00f3 entre ells.</p> <p>Les vistes s\u00f3n la manera en la que es representen els models. En cas de que no declarem les vistes, es poden referenciar per el seu tipus i Odoo generar\u00e0 una vista de llista o formulari estandar per poder vorer els registres de cada model. No obstant, quasi sempre volem personalitzar les vistes i en aquest cas, es poden referenciar per un identificador.</p> <p>Les vistes tenen una prioritat i, si no s\\'especifica el identificador de la que volem mostrar, es mostrar\u00e0 la que m\u00e9s prioritat tinga.</p> <pre><code>&lt;record model=\"ir.ui.view\" id=\"view_id\"&gt;\n    &lt;field name=\"name\"&gt;view.name&lt;/field&gt;\n    &lt;field name=\"model\"&gt;object_name&lt;/field&gt;\n    &lt;field name=\"priority\" eval=\"16\"/&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;!-- view content: &lt;form&gt;, &lt;list&gt;, &lt;graph&gt;, ... --&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p><pre><code>Les vistes es guarden en el model `ir.ui.view`. Tots els elements de interficie tenen en el seu nom ir.ui (Information Repository, User Interface). Els men\u00fas a ir.ui.menu o les accions a `ir.actions.window`\n</code></pre> Exemple de vista form:</p> <pre><code>  &lt;record model=\"ir.ui.view\" id=\"course_form_view\"&gt;\n            &lt;field name=\"name\"&gt;course.form&lt;/field&gt;\n            &lt;field name=\"model\"&gt;openacademy.course&lt;/field&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;form string=\"Course Form\"&gt;\n                    &lt;sheet&gt;\n                        &lt;group&gt;\n                            &lt;field name=\"name\"/&gt;\n                            &lt;field name=\"description\"/&gt;\n                        &lt;/group&gt;\n                    &lt;/sheet&gt;\n                &lt;/form&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre> <p>Encara que Odoo ja proporciona un list i un form per defecte, la vista cal millorar-la quasi sempre. Totes les vistes tenen fields que poden tindre widgets diferents. En les vistes form, podem adaptar molt l\\'aspecte amb grups de fields, pestanyes, camps ocults condicionalment...</p>"},{"location":"JoseCastillo_Ini/vista/#les-vistes-list","title":"Les vistes list","text":"<p>A partir d'Odoo 18 ja no hi ha vistes <code>tree</code> i s\u00f3n totes <code>list</code>, els exemples antics funcionaran canviant aquesta paraula. </p> <p>Les vistes list (o vistes de llista) s\u00f3n un dels tipus de vistes m\u00e9s utilitzats en Odoo. Permeten mostrar registres en format de taula, facilitant la visualitzaci\u00f3 i la gesti\u00f3 de grans quantitats de dades.  </p> <p>Aquestes vistes s\u00f3n especialment \u00fatils per a representar informaci\u00f3 resumida d'un conjunt de registres, amb columnes que mostren els camps m\u00e9s rellevants. A m\u00e9s, poden incloure funcionalitats com l\u2019ordenaci\u00f3, els filtres i les accions r\u00e0pides.  </p> <p>Un exemple b\u00e0sic d\u2019una vista list per al model de clients (res.partner) seria el seg\u00fcent:  </p> <pre><code>&lt;record id=\"view_partner_list\" model=\"ir.ui.view\"&gt;\n    &lt;field name=\"name\"&gt;res.partner.list&lt;/field&gt;\n    &lt;field name=\"model\"&gt;res.partner&lt;/field&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;list&gt;\n            &lt;field name=\"name\"/&gt;\n            &lt;field name=\"phone\"/&gt;\n            &lt;field name=\"email\"/&gt;\n            &lt;field name=\"company_id\"/&gt;\n        &lt;/list&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <ul> <li><code>&lt;record&gt;</code>: Defineix un nou registre en el model <code>ir.ui.view</code>, que representa la vista.  </li> <li><code>&lt;field name=\"name\"&gt;</code>: Assigna un nom \u00fanic a la vista.  </li> <li><code>&lt;field name=\"model\"&gt;</code>: Indica el model al qual pertany la vista (<code>res.partner</code> en aquest cas).  </li> <li><code>&lt;field name=\"arch\" type=\"xml\"&gt;</code>: Cont\u00e9 l'estructura XML de la vista.  </li> <li><code>&lt;list&gt;</code>: Defineix una vista de tipus list.  </li> <li><code>&lt;field name=\"name\"/&gt;</code>, <code>&lt;field name=\"phone\"/&gt;</code>, etc.: Representen les columnes que es mostraran en la llista.  </li> </ul>"},{"location":"JoseCastillo_Ini/vista/#colors","title":"Colors","text":"<p>En les vistes list es pot modificar el color en funci\u00f3 del contingut d\\'un field amb l\\'etiqueta decoration, que utilitza colors contextuals de Bootstrap:</p> <p><code>decoration-bf\u00a0-\u00a0Lineas\u00a0en\u00a0BOLD</code>\\ <code>decoration-it\u00a0-\u00a0Lineas\u00a0en\u00a0ITALICS</code>\\ <code>decoration-danger\u00a0-\u00a0Color\u00a0LIGHT\u00a0RED</code>\\ <code>decoration-info\u00a0-\u00a0Color\u00a0LIGHT\u00a0BLUE</code>\\ <code>decoration-muted\u00a0-\u00a0Color\u00a0LIGHT\u00a0GRAY</code>\\ <code>decoration-primary\u00a0-\u00a0Color\u00a0LIGHT\u00a0PURPLE</code>\\ <code>decoration-success\u00a0-\u00a0Color\u00a0LIGHT\u00a0GREEN</code>\\ <code>decoration-warning\u00a0-\u00a0Color\u00a0LIGHT\u00a0BROWN</code></p> <pre><code>&lt;list  decoration-info=\"state=='draft'\" decoration-danger=\"state=='trashed'\"&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"state\"/&gt;\n&lt;/list&gt;\n</code></pre> <p>En el cas de que es vulga comparar un field Date o Datetime es pot fer amb la variable global de QWeb current_date. Per exemple:</p> <pre><code>&lt;list  decoration-info=\"start_date==current_date\"&gt;\n...\n</code></pre> <p>Tamb\u00e9 es pot fer decoration en els fields individualment.</p>"},{"location":"JoseCastillo_Ini/vista/#editable","title":"Editable","text":"<p>Tamb\u00e9 es pot fer editable per no tindre que obrir un form: editable=\\\"[top | bottom]\\\". Top o Bottom indica on es crearan els nous registres. Els lists editables poden tindre un atribut m\u00e9s on_write que indica un m\u00e8tode a executar quan s\\'edita o crea un element.</p>"},{"location":"JoseCastillo_Ini/vista/#camps-invisibles","title":"Camps invisibles","text":"<p>De vegades, un camp pot servir per a alguna cosa, per\u00f2 no cal que l\\'usuari el veja. El que cal fer \u00e9s ficar el field , per\u00f2 dir que es invisible=\\\"1\\\"</p> <pre><code>&lt;list  decoration-info=\"duration==0\"&gt;\n                    &lt;field name=\"name\"/&gt;\n                    &lt;field name=\"course_id\"/&gt;\n                    &lt;field name=\"duration\" invisible=\"1\"/&gt;\n                    &lt;field name=\"taken_seats\" widget=\"progressbar\"/&gt;\n                &lt;/list&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#botons","title":"Botons","text":"<p>Els lists poden tindre buttons amb els mateixos atributs que els buttons dels forms.</p> <pre><code>Cal tindre cura en els lists dins de forms (X2many), ja que el bot\u00f3 s'executa en el model del list i no del formulari que el cont\u00e9. Si volem accedir al pare, cal utilitzar l'atribut parent.\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#totals","title":"Totals","text":"<p>En els lists es pot calcular totals amb aquesta etiqueta:</p> <pre><code>&lt;field name=\"amount\" sum=\"Total Amount\"/&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#ordenar-per-un-field","title":"Ordenar per un field","text":"<p>Un list es pot ordenar per defecte per un field que no siga computat. Aix\u00f2 es fa en default_order. Mirem un exemple per ordenar descendentment:</p> <pre><code>&lt;list default_order=\"sequence,name desc\"&gt;\n</code></pre> <p>Si volem que sempre s\\'ordene per eixe criteri, sense importar la vista, cal afegir al model l\\'atribut _order.</p>"},{"location":"JoseCastillo_Ini/vista/#agrupar-per-un-field","title":"Agrupar per un field","text":"<p>Amb default_group_by. Com l'atribut per ordenar, sols funciona amb camps guardats a la base de dades. </p> <pre><code>&lt;list default_group_by=\"born_year\"&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"born_year\"/&gt;\n    &lt;field name=\"age\"/&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#banner_route","title":"banner_route","text":"<p>A partir de la versi\u00f3 12 d\\'Odoo, permet afegir als lists, forms, etc una cap\u00e7alera obtinguda per una url. https://www.odoo.com/documentation/12.0/reference/views.html#common-structure</p> <p>Aquesta cap\u00e7alera ser\u00e0 un codi HTML que pot aprofitar les classes CSS d\\'Odoo, per\u00f2 no aprofita la generaci\u00f3 de codi HTML que realitza el client web d\\'Odoo en la definici\u00f3 de les vistes. En cas d\\'utilitzar imatges, aquestes estaran en el directori static del m\u00f2dul.</p> <p>Fer un banner route pas a pas:</p> <p>El primer \u00e9s ficar en el list la refer\u00e8ncia al banner_route:</p> <pre><code>   &lt;list banner_route=\"/negocity/city_banner\" &gt;\n</code></pre> <p>Ara cal crear el web controller que implementa aquesta ruta (es recomana en controllers.py):</p> <pre><code>from odoo import http\n\n\nclass banner_city_controller(http.Controller):\n    @http.route('/negocity/city_banner', auth='user', type='json')\n    def banner(self):\n        return {\n            'html': \"\"\"\n                &lt;div  class=\"negocity_banner\" \n                style=\"height: 200px; background-size:100%; background-image: url(/negocity/static/src/img/negocity_city.jpg)\"&gt;\n                &lt;div class=\"negocity_button\" style=\"position: static; color:#fff;\"&gt;&lt;a&gt;Generate Cities&lt;/a&gt;&lt;/div&gt;\n                &lt;/div&gt; \"\"\"\n        }\n</code></pre> <p>En aquest cas, el CSS es podria fer un estil en CSS segons les instruccions de El client Web Odoo.</p> <p>El resultat \u00e9s un banner amb un <code>&lt;a&gt;</code> que, de moment, no fa res. Anem a donar-li funcionalitat a l\\'enlla\u00e7. El primer \u00e9s assignar-li un action:</p> <pre><code>                 &lt;a class=\"banner_button\" type=\"action\" data-reload-on-close=\"true\" \n                role=\"button\" data-method=\"action_generate_cities\" data-model=\"negocity.city\"&gt;Generate Cities&lt;/a&gt;\n</code></pre> <p>Segons les instruccions de addons/web/static/src/js/views/abstract_controller.js, si fem un <code>&lt;a&gt;</code> amb un type=\\\"action\\\", el JS d\\'Odoo interpretar\u00e0 que ha de cridar al backend a una funci\u00f3 d\\'un model en concret. La resta de dades es fan com l\\'exemple. La funci\u00f3 que diu data-method \u00e9s una funci\u00f3 que ha d\\'estar en el model que diu data-model.</p>"},{"location":"JoseCastillo_Ini/vista/#les-vistes-form","title":"Les vistes form","text":"<p>Per a que un form quede b\u00e9, es pot inclure la etiqueta <code>&lt;sheet&gt;</code>, que fa que no ocupe tota la pantalla encara que siga panor\u00e0mica.</p> <p>Tot sheet ha de tindre <code>&lt;group&gt;</code> i dins els fields. Es poden fer els group que vullgam i poden tindre string per mostrar un t\u00edtol.</p> <p>Si no utilitzem l\\'etiquet group, els fields no tindran label, no obstant, coses com el class=\\\"oe_edit_only\\\" no funcionen en el group, per tant, cal utilitzar l\\'etiqueta <code>&lt;label for=\"name\"&gt;</code></p> <p>Per facilitar la gesti\u00f3, un form pot tindre pestanyes tem\u00e0tiques. Es fa en <code>&lt;notebook&gt;</code> <code>&lt;page string=\"titol\"&gt;</code></p> <p>Es pot separar els grups amb <code>&lt;separator string=\"Description for Quotations\"/&gt;</code></p> <p>Alguns One2Many donen una vista list que no es adequada, per aix\u00f2 es pot modificar el list per defecte:</p> <pre><code>&lt;field name=\"subscriptions\" colspan=\"4\"&gt;\n   &lt;list&gt;...&lt;/list&gt;\n&lt;/field&gt;\n</code></pre> <p>O especificar la vista que volem: ``xml      <pre><code>En un One2many es pot especificar tamb\u00e9 el **form** que ens donar\u00e0 quan\nanem a crear un nou element.\n\nUna altra opci\u00f3 \u00e9s especificar la vista que insertar\u00e0 en el field:\n\n```xml\n    &lt;field name=\"m2o_id\" context=\"{'form_view_ref': 'module_name.form_id'}\"/&gt;\n</code></pre></p> <p>Les vistes tree embegudes tenen limitacions respecte a les cridades amb un action. Per exemple, no poden ser agrupades. </p> <p>Valors per defecte en un one2many</p> <p>Quant creem un One2many en el mode form (o list editable) ens permet crear elements d\\'aquesta relaci\u00f3. Per a aconseguir que, al crear-los, el camp many2one corresponga al pare des del que es crida, es pot fer amb el context: Dins del field one2many que estem fent fiquem aquest codi:</p> <pre><code>context=\"{'default_&lt;camp many2one&gt;':active_id}\"\n</code></pre> <p>O este exemple per a dins d\\'un action:</p> <pre><code>&lt;field name=\"context\"&gt;{\"default_doctor\": True}&lt;/field&gt;\n</code></pre> <p><pre><code>Aquesta sintaxi funciona per a passar per context valors per defecte a un form cridat amb un action. Pot ser en One2many, botons o men\u00fas\n</code></pre> <pre><code>`active_id` \u00e9s una variable que apunta al id del element que est\u00e0 en aquest moment actiu. Com que estem en un formulari, \u00e9s el que se est\u00e0 creant o modificant amb en formulari. En el cas de la creaci\u00f3, active_id no est\u00e0 encara apuntant a un element de la base de dades, per\u00f2 funciona internament, encara que en el field no diga res o diga False.\n</code></pre> <pre><code>En Odoo 14 ja no cal fer-ho, per\u00f2 el manual \u00e9s v\u00e0lid per a altres many2ones o altres valors per defecte\n</code></pre></p> <p>Domains en Many2ones</p> <p>Els camps Many2one es poden filtrar, per exemple:</p> <pre><code>&lt;field name=\"hotel\" domain=\"[('ishotel', '=', True)]\"/&gt;\n</code></pre> <p>Funciona tant per a Many2one com per a Many2many.</p>"},{"location":"JoseCastillo_Ini/vista/#widgets","title":"Widgets","text":"<p>Alguns camps, com ara les imatges, es poden mostrar utilitzant un widget distint que el per defecte:</p> <pre><code>&lt;field name=\"image\" widget=\"image\" class=\"oe_left oe_avatar\"/&gt;\n&lt;field name=\"taken_seats\" widget=\"progressbar\"/&gt;\n&lt;field name=\"country_id\" widget=\"selection\"/&gt;\n&lt;field name=\"state\" widget=\"statusbar\"/&gt;\n</code></pre> <p>Les vistes form, tree o kanban de Odoo mostren els fields en els anomenats widgets. Aquests permeten, per exemple, que les dates tinguen un calendari o que es mostre una llista en un many2many.</p> <p>Cada field te un widget per defecte, per\u00f2 es poden canviar si volem representar la informaci\u00f3 de manera distinta. Aquests s\u00f3n els widgets disponibles per a cada tipus de field, sobretot per al form, encara que alguns funcionen en el tree:</p>"},{"location":"JoseCastillo_Ini/vista/#integer-i-float","title":"Integer i Float","text":"<p>Els camps integer poden ser representats per molts widgets, es a dir, no donen error. Encara que no tots tenen sentit, com per exemple el text.</p> <ul> <li>widget=\\\"integer\\\": Tan sols mostra el n\u00famero sense comes. En     cas de no tindre valor, mostra 0.</li> <li>widget=\\\"char\\\": Tamb\u00e9 mostra el n\u00famero, si no te valor deixa un     buit i el camp \u00e9s m\u00e9s ample.</li> <li>widget=\\\"id\\\": Mostra el n\u00famero per\u00f2 no es pot editar.</li> <li>widget=\\\"float\\\": Mostra el n\u00famero en decimals.</li> <li>widget=\\\"percentpie\\\": Mostra un gr\u00e0fic circular amb el     percentatge (no funciona en la vista tree ni en kanban).</li> <li>widget=\\\"float_time\\\": Mostra els float com si representaren el     temps.</li> <li>widget=\\\"progressbar\\\": Mostra una barra de progr\u00e9s (funciona en     la vista tree i form, per\u00f2 no en kanban):</li> <li>widget=\\\"monetary\\\": Mostra el n\u00famero amb 2 decimals.</li> <li> <p>widget=\\\"gauge\\\": Mostra un curi\u00f3s gr\u00e0fic de semi-circul. Sols     funciona en kanban.</p> <p>Observem un \u00fas real del <code>Gauge</code> per veure com els widgets poden tenir opcions:</p> </li> </ul> <pre><code>&lt;field name=\"current\" widget=\"gauge\" options=\"{'max_field': 'target_goal', 'label_field': 'definition_suffix', 'style': 'width:160px; height: 120px;'}\" /&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#char_i_text","title":"Char i Text","text":"<ul> <li>widget=\\\"char\\\": Mostra un editor d\\'un l\u00ednia.</li> <li>widget=\\\"text\\\": Mostra un camp m\u00e9s alt per fer m\u00e9s d\\'una     l\u00ednia.</li> <li>widget=\\\"email\\\": Crea el enlla\u00e7 per enviar-li un correu.</li> <li>widget=\\\"url\\\": Crea el enlla\u00e7 amb http.</li> <li>widget=\\\"date\\\": Permet guardar dates com cadenes de text.</li> <li>widget=\\\"html\\\": Permet guardar textos per\u00f2 amb format. Apareix     un wysiwyg</li> <li>dashboard_graph:</li> </ul> <p>Mostra un gr\u00e0fic menut indicant alguna progressi\u00f3. Necessita tindre guardat (o generat) en el char un json determinat, per exemple:</p> <p><code>[{\"values\":</code>\\ <code>[{\"label\":\"2019-01-31\",\"value\":\u00a0\"7\"},</code>\\ <code>{\"label\":\"2019-02-01\",\"value\":\u00a0\"20\"},</code>\\ <code>{\"label\":\"2019-02-02\",\"value\":\u00a0\"45\"},</code>\\ <code>{\"label\":\"2019-02-03\",\"value\":\u00a0\"34\"},</code>\\ <code>{\"label\":\"2019-02-04\",\"value\":\u00a0\"40\"},</code>\\ <code>{\"label\":\"2019-02-05\",\"value\":\u00a0\"67\"},</code>\\ <code>{\"label\":\"2019-02-06\",\"value\":\u00a0\"80\"}],</code>\\ <code>\"area\":true,\u00a0\"title\":\u00a0\"Next\u00a0Week\",\u00a0\"key\":\u00a0\"Ocupation\",\u00a0\"color\":\u00a0\"#7c7bad\"}]</code></p> <p>I aquest seria un exemple del XML per a que funcione:</p> <pre><code>&lt;field name=\"week_ocupation\" widget=\"dashboard_graph\"  graph_type=\"bar\"/&gt;\n</code></pre> <p>En els exemples que es poden veure en Odoo, aquests valors s\u00f3n sempre computed, generant un json i invocant la funci\u00f3 de python json.dumps() (2):</p> <pre><code>           values = []\n           for i in record.sales:\n               reserves = i.quantity\n               values.append({'label':str(i.name),'value':str(reserves)})\n           graph = [{'values': values, 'area': True, 'title': 'Sales', 'key': 'Sales', 'color': '#7c7bad'}]\n           h.graph_data = json.dumps(graph)\n</code></pre> <p>Am\u00e9s, accepta algunes opcions:</p> <ul> <li>type: Pot ser bar o line. En el cas de ser line, en     compte de \\'label\\' i \\'value\\' cal posar \\'x\\' i \\'y\\'.</li> </ul>"},{"location":"JoseCastillo_Ini/vista/#boolean","title":"Boolean","text":"<ul> <li>Ribbon: (Odoo 13) Mostra com una cinta al costat del formulari     per mostrar un boolean important.</li> </ul> <pre><code>&lt;widget name=\"web_ribbon\" text=\"Archived\" bg_color=\"bg-danger\" /&gt;\n&lt;widget name=\"web_ribbon\" text=\"Paid\"/&gt;\n</code></pre> <ul> <li>boolean_toggle per als trees, permet activar un boolean en un     tree.</li> </ul>"},{"location":"JoseCastillo_Ini/vista/#date","title":"Date","text":"<ul> <li>Daterange: Mostra un rang de dates</li> </ul> <pre><code>date_begin = fields.Datetime( string='Start Date')\n&lt;field name=\"date_begin\" widget=\"daterange\"/&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#many2one","title":"Many2one","text":"<ul> <li>widget=\\\"many2one\\\": Per defecte, crea un selection amb opci\u00f3 de     crear nous. Accepta arguments per evitar les opcions de crear:</li> </ul> <pre><code> &lt;field name=\"field_name\" options=\"{'no_create': True, 'no_open': True}\"/&gt;\n</code></pre> <ul> <li>widget=\\\"many2onebutton\\\": Crea un simple bot\u00f3 que indica si     est\u00e0 assignat. Si polses s\\'obri el formulari.</li> </ul>"},{"location":"JoseCastillo_Ini/vista/#many2many","title":"Many2Many","text":"<ul> <li>widget=\\\"many2many\\\": Per defecte, crea una llista amb opci\u00f3 de     esborrar o afegir nous.</li> <li>widget=\\\"many2many_tags\\\": Llista amb etiquetes com en els     filtres</li> <li>widget=\\\"many2many_checkboxes\\\": Llista de checkboxes.</li> <li>widget=\\\"many2many_kanban\\\": Mostra un kanban dels que t\u00e9     associats, necessita que la vista kanban estiga definida.</li> <li>widget=\\\"x2many_counter\\\": Mostra sols la quantitat.</li> <li>many2many_tags_avatar:</li> </ul> <pre><code>partner_ids = fields.Many2many('res.partner', 'calendar_event_res_partner_rel', string='Attendees')\n&lt;field name=\"partner_ids\" widget=\"many2many_tags_avatar\" write_model=\"calendar.contacts\" write_field=\"partner_id\" avatar_field=\"image_128\"/&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#one2many","title":"One2many","text":"<ul> <li>widget=\\\"one2many\\\": Per defecte.</li> <li>widget=\\\"one2many_list\\\": Aparentment igual, es mant\u00e9 per     retrocompatibilitat</li> </ul>"},{"location":"JoseCastillo_Ini/vista/#modificar-el-tree-del-one2many","title":"Modificar el tree del One2many","text":"<p>El one2many, al igual que el many2one es poden vorer en format tree. Per defecte agafa el tree definit del model, per\u00f2 es pot especificar el tree que volem veure:</p> <pre><code>  &lt;field name=\"fortress\"&gt;\n   &lt;tree&gt;\n     &lt;field name=\"name\"/&gt;&lt;field name=\"level\"/&gt;\n   &lt;/tree&gt;\n  &lt;/field&gt;\n</code></pre> <p>Incl\u00fas es pot for\u00e7ar a mostrar un kanban:</p> <pre><code>&lt;field name=\"gallery\" mode=\"kanban,tree\" context=\"{'default_hotel_id':active_id}\"&gt;\n                 &lt;kanban&gt;\n                 &lt;!--list of field to be loaded --&gt;\n                 &lt;field name=\"name\" /&gt;\n                 &lt;field name=\"image\" /&gt;\n\n                 &lt;templates&gt;\n                 &lt;t t-name=\"kanban-box\"&gt;\n                     &lt;div class=\"oe_product_vignette\"&gt;\n                     &lt;a type=\"open\"&gt;\n                        &lt;img class=\"oe_kanban_image\" style=\"width:300px; height:auto;\"\n                        t-att-src=\"kanban_image('marsans.hotel.galley', 'image', record.id.value)\" /&gt;\n                    &lt;/a&gt;\n                    &lt;div class=\"oe_product_desc\"&gt;\n                        &lt;h4&gt;\n                        &lt;a type=\"edit\"&gt;\n                            &lt;field name=\"name\"&gt;&lt;/field&gt;\n                        &lt;/a&gt;\n                        &lt;/h4&gt;\n\n                    &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;/t&gt;\n                    &lt;/templates&gt;\n                &lt;/kanban&gt;\n                &lt;/field&gt;\n</code></pre> <p>De vegades, el kanban este no funciona perqu\u00e8 no for\u00e7a a carregar les imatges.</p>"},{"location":"JoseCastillo_Ini/vista/#binary-o-image","title":"Binary o Image","text":"<ul> <li>signature: Permet signar dir\u00e8nctament en la pantalla</li> <li>image: A banda del que es pot ficar en el field de max_width o     max_height, al widget es pot afegir opcions com:</li> </ul> <pre><code>    options=\"{&amp;quot;zoom&amp;quot;: true, &amp;quot;preview_image&amp;quot;: &amp;quot;image_128&amp;quot;}\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#selection","title":"Selection","text":"<pre><code>           &lt;field name=\"state\" decoration-success=\"state == 'sale' or state == 'done'\" decoration-info=\"state == 'draft' or state == 'sent'\" widget=\"badge\" optional=\"show\"/&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#fields-dels-trees","title":"Fields dels trees","text":"<ul> <li>handle: Per a ordenar a ma. Cal que aquest camp siga el criteri     d\\'ordenaci\u00f3.</li> </ul> <p>Reescalar les imatges</p> <p>Molt a sovint, tenim la necessitat de reescalar les imatges que l\\'usuari penja. A partir d\\'Odoo 13 tenim el field Image que permet tindre diferents resolucions amb varis related</p>"},{"location":"JoseCastillo_Ini/vista/#buttons","title":"buttons","text":"<p>Podem introduir un bot\u00f3 en el form:</p> <pre><code> &lt;button name=\"update_progress\" type=\"object\" string=\"update\" class=\"oe_highlight\" /&gt; &lt;!-- El name ha de ser igual que la funci\u00f3 a la que crida. --&gt;   \n</code></pre> <p>La funci\u00f3 pot ser una del model en el que est\u00e0 o un action. En el type cal indicar el tipus amb: object, action, url, client En l\\'exemple anterior, el button \u00e9s de tipus object. Aix\u00f3 vol dir que crida a una funci\u00f3 del model al que represente el formulari que el cont\u00e9.</p> <pre><code>\u00c9s important que el record sobre el que es pulsa un bot\u00f3 de tipus object estiga ja guardat, ja que si no existeix en la base de dades, el servidor no t\u00e9 la seua '''id''' i pot fer res. Per aix\u00f2, un bot\u00f3 polsat en fase de creaci\u00f3 crida primer a la funci\u00f3 create().\n</code></pre> <p>Per a fer un but\u00f3 que cride a un altre formulari, s\\'ha de fer en un tipus action. Am\u00e9s, per ficar la id del action al que es vol cridar, cal ficar el prefixe i sufixe %(...)d, com en l\\'exemple:</p> <pre><code> &lt;button name=\"%(launch_mmog_fortress_wizard)d\" type=\"action\" string=\"Launch attack\" class=\"oe_highlight\" /&gt;\n</code></pre> <p>D\\'aquesta manera, un formulari, t\u00e9 un bot\u00f3 que, al ser polsat, envia el ID de l\\'action a executar als servidor, aquest li retorna un action per a que el client l\\'execute. L\\'action pot obrir una altra finestra o un pop-up. En qualsevol cas, aquest action executat en el client, demana la vista i les dades que vol mostrar i les mostra. Aquesta \u00e9s la ra\u00f3 de la sintaxis %(...)d.  Ja que es tracta d\\'un External Id a una action guardada en la base de dades.</p> <p>Els buttons poden tindre una icona. Odoo proporciona algunes que es poden trobar a aquesta web: 1</p> <pre><code>&lt;button name=\"test\" icon=\"fa-star-o\" confirm=\"Are you sure?\"/&gt;\nEsborrar: &lt;button type=\"object\" icon=\"fa-trash-o\"  name=\"unlink\"/&gt;\n</code></pre> <p>En l\\'exemple anterior, tamb\u00e9 hem ficat l\\'atribut confirm per mostrar una pregunta a l\\'usuari. Els buttons es poden posar per el form, encara que es recomana en el header:</p> <pre><code>&lt;header&gt;\n &lt;field name=\"state\" widget=\"statusbar\"/&gt;\n &lt;button name=\"accept\" type=\"object\" string=\"Accept\" class=\"oe_highlight\"/&gt;\n &lt;button special=\"cancel\" string=\"Cancel\"/&gt;\n&lt;/header&gt;\n</code></pre> <p>Els botons sempre executen una funci\u00f3 de Javascript en la part del client web que demana alguna cosa al servidor. En el cas dels button action, demana el action, per despr\u00e9s executar aquesta. En el cas dels buttons object demana que s\\'execute una funci\u00f3 del model i recordset actual en el servidor. El client web es queda a l\\'espera d\\'una resposta del servidor, que si \u00e9s un diccionari buit, provoca un refresc de la p\u00e0gina, per\u00f2 pot retornar moltes coses: warnings, domains, actions... i el client ha d\\'actuar en conseq\u00fc\u00e8ncia. Els buttons poden tindre tamb\u00e9 context per enviar alguna cosa extra al servidor.</p> <p>Smart Buttons 2</p> <p>En el formulari dels client, podem veure aquests botons.</p> <p>Es tracta de botons que, am\u00e9s d\\'executar-se, mostren una informaci\u00f3 resumida i una icona. El text i la forma del bot\u00f3 es modifica din\u00e0micament en funci\u00f3 d\\'alguns criteris i aix\u00f2 li dona m\u00e9s comoditat a l\\'usuari. Per exemple, si sols vol saber quantes factures t\u00e9 eixe client, el bot\u00f3 li ho diu. Si polsa el bot\u00f3 ja va a les factures en detall.</p> <p>Per fer-los, el primer \u00e9s modificar la seua forma, de bot\u00f3 autom\u00e0ticament creat per el navegador a un rectangle. Aix\u00f2 odoo ho pot fer per CSS amb la classe class=\\\"oe_stat_button\\\". A continuaci\u00f3, se li posa una icona icon=\\\"fa-star\\\". 3. A partir d\\'ah\u00ed, l\\'etiqueta <code>&lt;button&gt;</code> pot contindre el contingut que desitgem. Per exemple, camps computed que mostren el resum del formulari que va a obrir.</p> <pre><code>       &lt;div class=\"oe_button_box\"&gt;\n             &lt;button type=\"object\" class=\"oe_stat_button\" icon=\"fa-pencil-square-o\" name=\"regenerate_password\"&gt;\n                        &lt;div class=\"o_form_field o_stat_info\"&gt;\n                            &lt;span class=\"o_stat_value\"&gt;\n                                &lt;field name=\"password\" string=\"Password\"/&gt;\n                            &lt;/span&gt;\n                            &lt;span class=\"o_stat_text\"&gt;Password&lt;/span&gt;\n                        &lt;/div&gt;\n                    &lt;/button&gt;\n            &lt;/div&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#formularis-dinamics","title":"Formularis din\u00e0mics","text":"<p>Els fields dels formularis permet modificar el seu comportament en funci\u00f3 de condicions. Per exemple, ocultar amb invisible, permetre ser editat o no amb readonly o required.</p> <p>Ocultar condicionalment un field</p> <p>Es pot ocultar un field si algunes condicions no es cumpleixen. Per exemple:</p> <pre><code>&lt;field name=\"boyfriend_name\" invisible = \"married != False\"/&gt;\n</code></pre> <p>Tamb\u00e9s es pot ocultar i mostrar sols en el mode edici\u00f3 o lectura:</p> <pre><code>&lt;field name=\"partit\" class=\"oe_edit_only\"/&gt;\n&lt;field name=\"equip\" class=\"oe_read_only\"/&gt;\n</code></pre> <p>O mostrar si un camp anomenat state t\u00e9 un determinat valor:</p> <pre><code> &lt;group invisible = \"state in ['player', 'stats']\" &gt;&lt;field name=\"dia\"/&gt;&lt;/group&gt;\n</code></pre> <p>En el seg\u00fcent exemple, introdueix dos conceptes nous: el column_invisible per ocultar una columna d\\'un list i el parent per fer refer\u00e8ncia al valor d\\'un field de la vista pare:</p> <pre><code>&lt;field name=\"lot_id\" \nattrs=\"{'column_invisible': [('parent.state', 'not in', ['sale', 'done'])] }\"\n/&gt;\n</code></pre> <p>Editar condicionalment un field</p> <p>Es pot afegir readonly</p> <pre><code>&lt;field name=\"name2\"\nreadonly = \"condition == False\"\n/&gt;\n</code></pre> <p>Aquests exemples combinen tots:</p> <pre><code>&lt;field name=\"name\" \ninvisible = \"condition1 == False\" \nrequired = \"condition2 == True\"\nreadonly = \"condition3 == True\"\n /&gt;\n\n&lt;field name=\"suma\" \nreadonly = \"valor == 'calculat\"\ninvisible = \"servici in ['Reparacions','Manteniment'] or client == 'Pepe'\"\n/&gt;\n</code></pre> <p>readonly</p> <p>En ocasions volem que un field siga readonly, al no poder editar, no pot ser required. En cas de ser modificar per un Onchage i es vulga guardar, cal afegir:</p> <pre><code>&lt;field name=\"salary\" readonly=\"1\" force_save=\"1\"/&gt; \n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#vistes-kanban","title":"Vistes Kanban","text":"<p>Les vistes kanban s\u00f3n per a mostrar el model en forma de \\'cartes\\'. Les vistes kanban se declaren amb una mescla de xml, html i plantilles Qweb.</p> <p>Un Kanban \u00e9s una mescla entre list i form. En Odoo, les vistes tenen una estructura jer\u00e0rquica. En el cas del Kanban, est\u00e0 la vista Kanban, que cont\u00e9 molts Kanban Box, un per a cada record mostrat. Cada kanban box t\u00e9 dins un div de class vignette o card i, dins, els Widgets per a cada field.</p> <pre><code>             Window\n+---------------------------+\n|     Kanban View           |\n| +----------+ +----------+ |\n| |Kanban Box| |Kanban Box| |\n| +----------+ +----------+ |\n| || Widget || || Widget || |\n| |----------| |----------| |\n| |----------| |----------| |\n| || Widget || || Widget || |\n| |----------| |----------| |\n| +----------+ +----------+ |\n|                           |\n+---------------------------+\n</code></pre> <p>Per mostrar un Kanban, la vista de Odoo, obri un action Window, dins clava una caixa que ocupa tota la finestra i va recorreguent els records que es tenen que mostrant i dibuixant els widgets de cada record.</p> <p><pre><code>A difer\u00e8ncia en els lists o forms, els kanbans poden ser molt variats i han de deixar llibertat per ser dissenyats. \u00c9s per aix\u00f2, que els desenvolupadors d'Odoo no han proporcionat unes etiquetes i atributs XML d'alt nivell com passa en els forms o lists, en els que no hem de preocupar-nos de la manera en que ser\u00e0 renderitzar, el CSS o c\u00f3m obt\u00e9 els fields de la base de dades. Al fer un Kanban, entrem al nivel de QWeb, per el que controlem plantilles, CSS i indicacions i funcions per al Javascript. Tot aix\u00f2 est\u00e0 ocult en la resta de vistes, per\u00f2 en Kanban \u00e9s impossible ocultar-ho.\nEs poden utilitzar certs widgets en els fields com `image` o `progress_bar`, per\u00f2 s\u00f3n molts menys widgets que en els forms o lists.\n</code></pre> Exemple b\u00e0sic:</p> <pre><code>&lt;record model=\"ir.ui.view\" id=\"socio_kanban_view\"&gt;\n            &lt;field name=\"name\"&gt;cooperativa.socio&lt;/field&gt;\n            &lt;field name=\"model\"&gt;cooperativa.socio&lt;/field&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;kanban&gt;\n                    &lt;!--list of field to be loaded --&gt;\n                    &lt;field name=\"name\" /&gt;\n                    &lt;field name=\"id\" /&gt; &lt;!-- \u00c9s important afegir el id per al record.id.value --&gt;\n                    &lt;field name=\"foto\" /&gt;\n                    &lt;field name=\"arrobas\"/&gt;\n\n                    &lt;templates&gt;\n                    &lt;t t-name=\"kanban-box\"&gt;\n                            &lt;div class=\"oe_product_vignette\"&gt;\n                                &lt;a type=\"open\"&gt;\n                                    &lt;img class=\"oe_kanban_image\"\n                                        t-att-alt=\"record.name.value\"\n                                        t-att-src=\"kanban_image('cooperativa.socio', 'foto', record.id.value)\" /&gt;\n                                &lt;/a&gt;\n                                &lt;div class=\"oe_product_desc\"&gt;\n                                    &lt;h4&gt;\n                                        &lt;a type=\"edit\"&gt;\n                                            &lt;field name=\"name\"&gt;&lt;/field&gt;\n                                        &lt;/a&gt;\n                                    &lt;/h4&gt;\n                                    &lt;ul&gt;\n\n                                       &lt;li&gt;Arrobas: &lt;field name=\"arrobas\"&gt;&lt;/field&gt;&lt;/li&gt;\n                                    &lt;/ul&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/t&gt;\n                    &lt;/templates&gt;\n                &lt;/kanban&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre> <p>En l\\'anterior vista kanban cal comentar les l\u00ednies.</p> <p>Al principi es declaren els fields que han de ser mostrats. Si no es necessiten per a la l\u00f2gica del kanban i sols han de ser mostrats no cal que estiguen declarats al principi. No obstant, per que l\\'exemple estiga complet els hem deixat. Aquesta declaraci\u00f3, fa demanar els fields en la primera petici\u00f3 as\u00edncrona de dades. Els no especificats ac\u00ed, s\u00f3n demanats despr\u00e9s, per\u00f2 no estan disponibles per a que el Javascript puga utilitzar-los.</p> <p>A continuaci\u00f3 ve un template Qweb en el que cal definir una etiqueta <code>&lt;t t-name=\"kanban-box\"&gt;</code> que ser\u00e0 renderitzada una vegada per cada element del model.</p> <p>Dins del template, es declaren divs o el que necessitem per donar-li el aspecte definitiu. Odoo ja t\u00e9 en el seu CSS unes classes per al productes o partners que podem aprofitar. El primer div defineix la forma i aspecte de cada caixa. Hi ha m\u00faltiples classes CSS que es poden utilitzar. Les que tenen vignette en principi no mostren vores ni colors de fons. Les que tenen card tenen el border prou marcat i un color de fons. Les b\u00e0siques s\u00f3n oe_kanban_vignette i oe_kanban_card.</p> <p>Hi ha molts altres CSS que podem estudiar i utilitzar. Per exemple, els oe_kanban_image per a fer la imatge d\\'una mida adequada o el oe_product_desc que ajuda a colocar el text al costat de la foto. En l\\'exemple, usem uns <code>&lt;a&gt;</code> amb dos tipus: open i edit. Segons el que posem, al fer click ens obri el form en mode vista o edici\u00f3. Aquests botons o enlla\u00e7os poden tindre aquestes funcions:</p> <ul> <li>action, object: Com en els botons dels forms, criden a     accions o a m\u00e8todes.</li> <li>open, edit, delete: Efectua aquestes accions al record     que representa el kanban box.</li> </ul> <p>Si ja volem fer un kanban m\u00e9s avan\u00e7at, tenim aquestes opcions:</p> <ul> <li>En la etiqueta <code>&lt;kanban&gt;</code>:<ul> <li>default_group_by per agrupar segons algun criteri al agrupar     apareixen opcions per crear nous elements sense necessitat     d\\'entrar al formulari.</li> <li>default_order per ordenar segons algun criteri si no s\\'ha     ordenat en el list.</li> <li>quick_create a true o false segons vulguem que es puga crear     elements sobre la marxa sense el form. Per defecte \u00e9s false si     no est\u00e0 agrupat i true si est\u00e0 agrupat.</li> </ul> </li> <li>En cada field:<ul> <li>sum, avg, min, max, count com a funcions d\\'agregaci\u00f3 en els     kanbans agrupats.</li> </ul> </li> <li>Dins del template:<ul> <li>Cada field pot tindre un type que pot ser open, edit,     action, delete.</li> </ul> </li> <li>Una serie de funcions javascript:<ul> <li>kanban_image() que accepta com a argument: model, field, id,     cache i retorna una url a una imatge. La ra\u00f3 \u00e9s perqu\u00e8 la imatge     est\u00e0 en base64 i dins de la base de dades i cal convertir-la per     mostrar-la.</li> <li>kanban_text_ellipsis(string[, size=160]) per acurtar     textos llargs, ja que el kanban sols \u00e9s una previsualitzaci\u00f3.</li> <li>kanban_getcolor(raw_value) per a obtindre un color dels 0-9     que odoo te predefinits en el CSS a partir de qualsevol field     b\u00e0sic.</li> <li>kanban_color(raw_value) Si tenim un field color que pot     definir de forma espec\u00edfica el color que necessitem. Aquest     field tindr\u00e0 un valor de 0-9.</li> </ul> </li> </ul> <p>Forms dins de kanbans:</p> <p>A partir de la versi\u00f3 12 es pot introduir un form dins d\\'un kanban, encara que es recomana que siga simple. Aquest funciona si tenim activat el quick_create i preferiblement quan el kanban est\u00e0 agrupat per Many2one o altres. Observem, per exemple el kanban de la secci\u00f3 de tasques del m\u00f2dul de proyecte:</p> <pre><code>&lt;kanban default_group_by=\"stage_id\" class=\"o_kanban_small_column o_kanban_project_tasks\" on_create=\"quick_create\"\n quick_create_view=\"project.quick_create_task_form\" examples=\"project\"&gt;\n....\n&lt;/kanban&gt;\n</code></pre> <p>Com podem observar, t\u00e9 activat el quick_create i una refer\u00e8ncia al identificador extern d\\'una vista form en quick_create_view. Aquest \u00e9s el contingut del form:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;form&gt;\n  &lt;group&gt;\n     &lt;field name=\"name\" string=\"Task Title\"/&gt;\n     &lt;field name=\"user_id\" options=\"{'no_open': True,'no_create': True}\"/&gt;\n  &lt;/group&gt;\n &lt;/form&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#imatges-en-els-kanbans","title":"Imatges en els Kanbans","text":"<p>En molts llocs trobarem la funci\u00f3 <code>kanban_image</code>. \u00c9s la manera correcta de fer-ho en Qweb. Necessita posar el camp <code>id</code> el principi. per\u00f2 tamb\u00e9 es pot utilitzar dir\u00e8ctament el <code>widget=\"image\"</code> com en els forms. </p>"},{"location":"JoseCastillo_Ini/vista/#vistes-search","title":"Vistes search","text":"<p>Les vistes search tenen 3 tipus:</p> <ul> <li>field que permeten buscar en un determinat camp.</li> <li>filter amb domain per filtrar per un valor predeterminat.</li> <li>filter amb group per agrupar per algun criteri.</li> </ul> <p>Pel que fa a les search field, sols cal indicar quins fields seran buscats.</p> <pre><code>&lt;search&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"inventor_id\"/&gt;\n&lt;/search&gt;\n</code></pre> <p><pre><code>Els fields han de ser guardats en la base de dades, encara que siguen de tipus '''computed'''\n</code></pre> Les field poden tindre un domain per especificar quin tipus de b\u00fasqueda volem. Per exemple:</p> <pre><code>&lt;field name=\"description\" string=\"Name and description\"\n    filter_domain=\"['|', ('name', 'ilike', self), ('description', 'ilike', self)]\"/&gt;\n</code></pre> <p>Busca per 'name' i 'description' amb un domini que busca que es parega en \"case-insensitive\" (ilike) el que escriu l'usuari (self) amb el name o amb la descripci\u00f3.</p> <p>o:</p> <pre><code>&lt;field name=\"cajones\" string=\"Boxes or @\" filter_domain=\"['|',('cajones','=',self),('arrobas','=',self)]\"/&gt; \n</code></pre> <p>Busca per cajones o arrobas sempre que l\\'usuari pose el mateix n\u00famero.</p> <p>Les filter amb domain s\u00f3n per a predefinir filtres o b\u00fasquedes. Per exemple:</p> <pre><code>&lt;filter name=\"my_ideas\" string=\"My Ideas\" domain=\"[('inventor_id', '=', uid)]\"/&gt;\n&lt;filter name=\"more_100\" string=\"More than 100 boxes\" domain=\"[('cajones','&gt;',100)]\"/&gt; \n&lt;filter name=\"Today\" string=\"Today\" domain=\"[('date', '&amp;gt;=', datetime.datetime.now().strftime('%Y-%m-%d 00:00:00')),\n                                             ('date', '&amp;lt;=',datetime.datetime.now().strftime('%Y-%m-%d 23:23:59'))]\"/&gt;\n</code></pre> <pre><code>Els filtres sols poden comparar un field amb un valor espec\u00edfic. Aix\u00ed que si volem comparar dos fields cal fer una funci\u00f3.\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#operadors-per-als-domains","title":"Operadors per als domains:","text":"<p>\\'like\\': [(\\'input\\', \\'like\\', \\'open\\')] - Returns case sensitive (wildcards - \\'%open%\\') search.</p> <p>O/p: open, opensource, openerp, Odooopenerp</p> <p>\\'not like\\': [(\\'input\\', \\'not like\\', \\'open\\')] - Returns results not matched with case sensitive (wildcards - \\'%open%\\') search.</p> <p>O/p: Openerp, Opensource, Open, Odoo, odoo, OdooOpenerp</p> <p>\\'=like\\': [(\\'name\\', \\'=like\\', \\'open\\')] - Returns exact (= \\'open\\') case sensitive search.</p> <p>O/p: open</p> <p>\\'ilike\\': [(\\'name\\', \\'ilike\\', \\'open\\')] - Returns exact case insensitive (wildcards - \\'%open%\\') search.</p> <p>O/p: Openerp, openerp, Opensource, opensource, Open, open, Odooopenerp, OdooOpenerp</p> <p>\\'not ilike\\': [(\\'name\\', \\'not ilike\\', \\'open\\')] - Returns results not matched with exact case insensitive (wildcards - \\'%open%\\') search.</p> <p>O/p: Odoo, odoo</p> <p>\\'=ilike\\': [(\\'name\\', \\'=ilike\\', \\'open\\')] - Returns exact (= \\'open\\' or \\'Open\\') case insensitive search.</p> <p>O/p: Open, open</p> <p>\\'=?\\':</p> <p>name = \\'odoo\\' parent_id = False [(\\'name\\', \\'like\\', name), (\\'parent_id\\', \\'=?\\', parent_id)] - Returns name domain result &amp; True</p> <p>name = \\'odoo\\' parent_id = \\'openerp\\' [(\\'name\\', \\'like\\', name), (\\'parent_id\\', \\'=?\\', parent_id)] - Returns name domain result &amp; parent_id domain result</p> <p>\\'=?\\' is a short-circuit that makes the term TRUE if right is None or False, \\'=?\\' behaves like \\'=\\' in other cases</p> <p>\\'in\\': [(\\'value1\\', \\'in\\', [\\'value1\\', \\'value2\\'])] - in operator will check the value1 is present or not in list of right term</p> <p>\\'not in\\': [(\\'value1\\', \\'not in\\', [\\'value2\\'])] - not in operator will check the value1 is not present in list of right term While these \\'in\\' and \\'not in\\' works with list/tuple of values, the latter \\'=\\' and \\'!=\\' works with string</p> <p>\\'=\\': value = 10 [(\\'value\\',\\'=\\',value)] - term left side has 10 in db and term right our value 10 will match</p> <p>\\'!=\\': value = 15 [(\\'value\\',\\'!=\\',value)] - term left side has 10 in db and term right our value 10 will not match</p> <p>\\'child_of\\': parent_id = \\'1\\' #Agrolait \\'child_of\\': [(\\'partner_id\\', \\'child_of\\', parent_id)] - return left and right list of partner_id for given parent_id</p> <p>\\'\\&lt;=\\', \\'\\&lt;\\', \\'&gt;\\', \\'&gt;=\\': These operators are largely used in openerp for comparing dates - [(\\'date\\', \\'&gt;=\\', date_begin), (\\'date\\', \\'\\&lt;=\\', date_end)]. You can use these operators to compare int or float also.</p> <p>Els filter amb group agrupen per algun field:</p> <pre><code>&lt;group string=\"Group By\"&gt;\n        &lt;filter name=\"group_by_inventor\" string=\"Inventor\" context=\"{'group_by': 'inventor_id'}\"/&gt;\n&lt;/group&gt;\no:\n</code></pre> <pre><code>  &lt;filter name=\"group_by_matricula\" string=\"Matricula\" context=\"{'group_by': 'matricula'}\"/&gt;\n</code></pre> <p>Si agrupem per data, el grup \u00e9s per defecte per cada mes, si volem agrupar per dia:</p> <pre><code>&lt;filter name=\"group_by_exit_day\" string=\"Exit\" context=\"{'group_by': 'exit_day:day'}\"/&gt;  \n</code></pre> <p>Si volem que un filtre estiga predefinit s\\'ha de posar en el context de l\\'action:</p> <pre><code>&lt;field name=\"context\"&gt;{'search_default_clients':1,\"default_is_client\": True}&lt;/field&gt;\n</code></pre> <p>En aquest exemple, filtra amb en search_default_XXXX que activa el filtre XXXX i, am\u00e9s, fa que en els formularis tiguen un camp boolean a true.</p>"},{"location":"JoseCastillo_Ini/vista/#vistes-calendar","title":"Vistes Calendar","text":"<p>Si el recurs t\u00e9 un camp date o datetime. Permet editar els recursos ordenats per temps. L'exemple s\u00f3n els esdeveniments del m\u00f2dul de ventes.</p> <ul> <li>string, per al t\u00edtol de la vista</li> <li>date_start, que ha de contenir el nom d'un camp datetime o date     del model.</li> <li>date_delay, que ha de contenir la llargada en hores de     l'interval.</li> <li>date_stop, Aquest atribut \u00e9s ignorat si existeix l'atribut     date_delay.</li> <li>day_length, per indicar la durada en hores d'un dia. OpenObject     utilitza aquest valor per calcular la data final a partir del valor     de date_delay. Per defecte, el seu valor \u00e9s 8 hores.</li> <li>color, per indicar el camp del model utilitzat per distingir,     amb colors, els recursos mostrats a la vista.</li> <li>mode, per mostrar l'enfoc (dia/setmana/mes) amb el qu\u00e8 s'obre la     vista. Valors possibles: day, week, month. Per defecte, month.</li> </ul> <pre><code> &lt;record model=\"ir.ui.view\" id=\"session_calendar_view\"&gt;\n            &lt;field name=\"name\"&gt;session.calendar&lt;/field&gt;\n            &lt;field name=\"model\"&gt;openacademy.session&lt;/field&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;calendar string=\"Session Calendar\" date_start=\"start_date\"\n                          date_stop=\"end_date\"\n                          color=\"instructor_id\"&gt;\n                    &lt;field name=\"name\"/&gt;\n                &lt;/calendar&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre>"},{"location":"JoseCastillo_Ini/vista/#vistes-graph","title":"Vistes Graph","text":"<p>En general s\\'utilitza per a veure agregacions sobre les dades a mostrar. Accepta els seg\u00fcents atributs:</p> <ul> <li>string, per al t\u00edtol de la vista</li> <li>type, per al tipus de gr\u00e0fic. (bar, pie, line)</li> <li>stacked sols per a bar per mostrar les dades amuntonades en una     \u00fanica barra.</li> </ul> <p>La definici\u00f3 dels elements fills de l'element arrel graph determina el contingut del gr\u00e0fic:</p> <ul> <li>Primer camp: eix X (horitzontal). Obligatori.</li> <li>Segon camp: eix Y (vertical). Obligatori.</li> </ul> <p>A cadascun dels camps que determinen els eixos, se'ls pot aplicar els atributs seg\u00fcents:</p> <ul> <li>name: El nom del field</li> <li>title: El nom que tindr\u00e0 en el gr\u00e0fic</li> <li>invisible: No apareixer\u00e0</li> <li>type: En aquest cas cal dir si \u00e9s row per agrupar per aquest     field, col per fer distintes l\u00ednies o measure per a les     dades en s\u00ed que es van a agregar.</li> </ul> <pre><code> &lt;record model=\"ir.ui.view\" id=\"terraform.planet_changes_graph\"&gt;\n      &lt;field name=\"name\"&gt;Planet Changes graph&lt;/field&gt;\n      &lt;field name=\"model\"&gt;terraform.planetary_changes&lt;/field&gt;\n      &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;graph string=\"Changes History\" type=\"line\"&gt;\n          &lt;field name=\"time\"  type=\"row\"/&gt;\n          &lt;field name=\"planet\"  type=\"col\"/&gt;\n          &lt;field name=\"greenhouse\" type=\"measure\"/&gt;\n        &lt;/graph&gt;\n      &lt;/field&gt;\n    &lt;/record&gt;\n</code></pre> <pre><code>Les vistes graph en Odoo s\u00f3n molt limitades, sols accepten un element en les X i necessiten que els camps estiguen guardats en la base de dades\n</code></pre>"},{"location":"JoseCastillo_Ini/web_controllers/","title":"Web Controllers","text":"<p>En Odoo hi ha moltes maneres de comunicar-se amb el servidor:</p> <ul> <li>Entrant en el backend</li> <li>La p\u00e0gina web (frontend)</li> <li>El TPV</li> <li>Amb un API de XML-RPC per a aplicacions Java, Python o PHP.</li> <li>Amb els controladors web per a consultes web o Ajax.</li> </ul> <p>Si volem fer la web amb el CMS d\\'Odoo, cal aprendre a fer webs en Odoo. Per\u00f2 si el que volem \u00e9s accedir a Odoo com un servidor Rest o similar des de una aplicaci\u00f3 web diferent, hem de crear la interficie de servidor web amb Odoo i formular correctament les peticions Ajax.</p> <p>En aquest manual la intenci\u00f3 \u00e9s fer una aplicaci\u00f3 web en Angular que consulte coses a Odoo.</p> <p>Odoo utilitza la biblioteca https://werkzeug.palletsprojects.com/en/1.0.x/ per als seus controladors web, encara que simplifica la complexitat de la mateixa en els seus propis m\u00e8todes. Quasi totes les aplicacions web fetes en Python necessiten una manera est\u00e0ndard de comunicar-se amb el servidor web. Aquesta es diu WSGI i Odoo la implementa a partir de la biblioteca Werzeug. Aquesta biblioteca implementa les particularitats d\\'un servidor web i les translada amb un llenguatge com\u00fa a l\\'aplicaci\u00f3 web corresponent. No obstant, a l\\'hora del desplegament, es sol instal\u00b7lar un servidor web tipus Nginx per fer de proxy invers i implementar HTTPS o una web est\u00e0tica, per exemple. 1</p> <p>Quan fem un m\u00f2dul en scaffold, es crea el fitxer controllers/controllers.py, el qual est\u00e0 comentat, per\u00f2 que t\u00e9 un exemple molt \u00fatil de controlador.</p> <p>Si analitzem les primeres l\u00ednies:</p> <pre><code>class MyController(http.Controller):\n    @http.route('/school/course/', auth='user', type='json')\n    def course(self):\n...\n</code></pre> <p>Veurem que \u00e9s una classe que hereta de http.controller. A continuaci\u00f3 hi ha un decorador que modifica la funci\u00f3 course() per a ser executada quan es demana la ruta especificada. Aquest decorador diu que necessita una autentificaci\u00f3 d\\'usuari i que espera i retorna un json.</p> <p>L\\'autentificaci\u00f3 pot ser public, user o none.</p> <p>En aquestes funcions es sol cridar a http.request.render amb una template per a fer html. Una altra opci\u00f3 \u00e9s generar les dades directament en Python.</p> <p>Podem fer aquest exemple:</p> <pre><code>@http.route('/school/courses/json', type='json', auth='none')\ndef courses_json(self):\n   records = request.env['school.course'].sudo().search([])\n   return records.read(['name'])\n</code></pre> <p>El controlador espera un JSON i retorna un JSON. Si volem provar si funciona sense complicacions, podem excriure en una terminal:</p> <p><code>curl\u00a0-i\u00a0-X\u00a0POST\u00a0-H\u00a0\"Content-Type:\u00a0application/json\"\u00a0-d\u00a0\"{}\"\u00a0localhost:8069/school/courses/json</code></p> <p>Com es veu, sols hem enviat un JSON buit.</p> <pre><code>JSON tamb\u00e9 \u00e9s HTTP, podem fer un route de tipus http que retorne un JSON, per\u00f2 Odoo facilita molt el tractament de les dades si fiquem directament json en el type.\n</code></pre> <p>Una altra cosa que cal mirar en l\\'exemple \u00e9s que no estic generant un JSON, sols retornant un array de noms. Odoo, a trav\u00e9s del decorador que diu que \u00e9s JSON ja el formatar\u00e0 per a que retorne un JSON correcte. En cas de voler controlar tot el que s\\'env\u00eda, podem retornar el resultat de request.make_response()</p> <p>Request \u00e9s un objecte est\u00e0tic que fa refer\u00e8ncia a la petici\u00f3 que s\\'est\u00e0 realizant. T\u00e9 m\u00e9todes i atributs \u00fatils com request.env, que \u00e9s similar al self.env dels models. Una altra utilitat \u00e9s request.session que guarda la sessi\u00f3 actual.</p> <p>sudo() \u00e9s necessari si fem que no es necessite autentificaci\u00f3. No obstant, a\u00e7\u00f2 \u00e9s per provar. En producci\u00f3 sempre necessitarem autentificaci\u00f3.</p>"},{"location":"JoseCastillo_Ini/web_controllers/#passar-parametres-al-web-controller","title":"Passar par\u00e0metres al web controller","text":"<p>Odoo permet passar par\u00e0metres de la forma tradicional del GET o el POST (amb ?) o com es fa en REST, com a part de la URL.</p> <p>En el cas tradicional:</p> <pre><code>@http.route('/school/course_details', type='http', auth='none')\ndef course_details(self, course_id):\n  record = request.env['school.course'].sudo().browse(int(course_id))\n  return u'&lt;html&gt;&lt;body&gt;&lt;h1&gt;%s&lt;/h1&gt;Teachers: %s' % ( record.name, u', '.join(record.teachers_ids.mapped('name')) or 'none',)\n</code></pre> <p>El que ens interessa \u00e9s course_id, el qual trau de una url com aquesta:</p> <p><code>/school/course_details?course_id=2</code></p> <p>En el cas d\\'una URL segons l\\'estandard REST:</p> <pre><code>@http.route('/school/course_details/&lt;model('school.course'):course&gt;', type='http', auth='none')\ndef course_details(self, course):\n  return u'&lt;html&gt;&lt;body&gt;&lt;h1&gt;%s&lt;/h1&gt;Teachers: %s' % ( course.name, u', '.join(course.teachers_ids.mapped('name')) or 'none',)\n</code></pre> <p>En aquest cas veiem c\u00f3m obt\u00e9 la variable course de buscar en el model school.course el id passat per par\u00e0metres amb \\&lt;model(\\'school.course\\'):course&gt; i ja el pot utilitzar per al que necessite. La URL en aquest cas quedar\u00e0 com:</p> <p><code>/school/course_details/2</code></p> <p>Aquest m\u00e8tode utilitza un converter de la biblioteca werkzeug.</p> <p>Si el que volem \u00e9s enviar dades en JSON, sols cal indicar en el decorador route que \u00e9s de type=\\'json\\' i respectar un format en el json com aquest:</p> <pre><code> {\"jsonrpc\":\"2.0\",\"method\":\"call\",\"params\":{\"user\":\"${user}\",\"password\":\"${pass}\"}}\n</code></pre>"},{"location":"JoseCastillo_Ini/web_controllers/#cors-en-odoo","title":"CORS en Odoo","text":"<p>Odoo no permet peticions Ajax que no vinguen del mateix origen que ell. Aix\u00f2 ho podem canviar en cada route amb cors=\\'*\\'</p> <p>Si volem permetre CORS en tot odoo, el millor \u00e9s instal\u00b7lar Ngingx, configurar-lo per a permetre CORS i fer que actue com a proxy d\\'Odoo.</p>"},{"location":"JoseCastillo_Ini/web_controllers/#autenticacio","title":"Autenticaci\u00f3","text":"<p>En el directori d\\'addons d\\'Odoo, en el m\u00f2dul web/controller, trobem aquest codi:</p> <pre><code>    @http.route('/web/session/authenticate', type='json', auth=\"none\")\n    def authenticate(self, db, login, password, base_location=None):\n        request.session.authenticate(db, login, password)\n        return request.env['ir.http'].session_info()\n</code></pre> <p>Eixa \u00e9s la ruta d\\'autentificaci\u00f3. Com es veu, accepta un json amb la base de dades, login, password...</p> <p>Si vulguem fer una aplicaci\u00f3 que connecte amb Odoo via web, deguem autenticar-nos. Anem a analitzar el que demana. Per a fer-ho utilitzarem el programa Postman</p> <p>Podem copiar aquest codi per autenticar-nos en la ruta que necessitem. Cal importar:</p> <pre><code>from odoo.http import request\n</code></pre> <p>Observem que en la resposta va una Cookie que \u00e9s la sessi\u00f3. Si en el postman o en navegador l\\'esborrem es perd la sessi\u00f3.</p> <p>A partir d\\'aquest moment, en Postman podem fer peticions que necessiten autenticaci\u00f3.</p> <p>No obstant, si accedim per AJAX en un altre servidor, el navegador no pot utilitzar la cookie. Per aix\u00f2 \u00e9s t\u00e9 que implementar un sistema de token que implemente l\\'autenticaci\u00f3 de forma manual sense el sistema de Odoo. Una possibilitat \u00e9s manejar token JWT i hi ha m\u00f2duls per a implementar aix\u00f2 en Odoo. En qualsevol cas, per provar es pot generar un token amb dades aleat\u00f2ries i enviar-ho al JSON de resposta si l\\'usuari fa login. A partir d\\'aquest moment es pot demanar aquest token en totes les peticions posteriors.</p>"},{"location":"JoseCastillo_Ini/web_controllers/#controllers-amb-json","title":"Controllers amb JSON","text":"<p>Com es veu en l\\'exemple anterior, el client ha d\\'enviar un JSON en un format determinat i el servidor tamb\u00e9 el retorna. Odoo necessita que el json tinga el format</p> <p><code>{\"jsonrpc\":\u00a0\"2.0\",\u00a0\"params\":{...}}</code></p> <p>https://www.youtube.com/watch?v=wGvuRbCyytk&amp;list=PL5ESsgnHGfa8d3EetmuUA8quawtJjEiH4&amp;index=19&amp;t=713s</p>"},{"location":"JoseCastillo_Ini/web_controllers/#exemple-complet","title":"Exemple complet","text":"<p>Este \u00e9s el controller:</p> <pre><code>     @http.route('/terraform/terraform/create/travel', auth='public', cors='*', type='json')\n     def terraform_model_filter(self, p1, p2, player, **kw):\n        travel = http.request.env['terraform.travel'].sudo().create({'origin_planet':p1, 'destiny_planet': p2, 'player':player})\n        return travel.read()[0]\n</code></pre> <p>Este \u00e9s el comandament i el resultat:</p> <pre><code>curl -i -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"method\":\"call\",\"params\":{\"player\":\"1\",\"p1\":\"8316\",\"p2\":\"8317\"}}' localhost:8069/terraform/terraform/create/travel\nHTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 518\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: POST\nSet-Cookie: session_id=e745287b948236557adde062fb0183fb282b181d; Expires=Thu, 04-Mar-2021 08:15:09 GMT; Max-Age=7776000; HttpOnly; Path=/\nServer: Werkzeug/0.16.1 Python/3.8.5\nDate: Fri, 04 Dec 2020 08:15:09 GMT\n\n{\"jsonrpc\": \"2.0\", \"id\": null, \"result\": {\"id\": 4, \"name\": \"Pedro Hdisadlufa -&gt; Fmeeiponovi\", \"player\": [1, \"Pedro\"], \"origin_planet\": [8316, \"Hdisadlufa\"], \"destiny_planet\": [8317, \"Fmeeiponovi\"], \"distance\": 0.1, \"percent\": 0.18482222222222222, \"launch_time\": \"2020-12-04 08:15:09\", \"display_name\": \"Pedro Hdisadlufa -&gt; Fmeeiponovi\", \"create_uid\": [4, \"Public user\"], \"create_date\": \"2020-12-04 08:15:09\", \"write_uid\": [4, \"Public user\"], \"write_date\": \"2020-12-04 08:15:09\", \"__last_update\": \"2020-12-04 08:15:09\"}}\n</code></pre>"},{"location":"JoseCastillo_Ini/web_controllers/#fer-una-api-rest","title":"Fer una API Rest","text":"<p>En general, Odoo i la seua documentaci\u00f3 estan pensats per a que utilitzes el seu framework de client web junt en el backend. No obstant, si volem fer un client web o m\u00f2bil que es connecte a Odoo com si fora una API, cal tindre algunes consideracions:</p> <ul> <li>Accedir\u00e0 d\\'una altra URL i far\u00e0 peticions AJAX, per tant, cal ficar     cors=\\\"*\\\" al decorador dels m\u00e8todes del controlador.</li> <li>Al no utilitzar el seu client web, no pot fer \u00fas de csrf, per tant,     cal desactivar-lo tamb\u00e9 en el decorador.</li> <li>No podem fer \u00fas de l\\'autenticaci\u00f3 d\\'Odoo, ja que envia una cookie     per\u00f2 al ser cross-origin tampoc val.</li> <li>Tenim que implementar una autenticaci\u00f3 per token propia. Pot ser     JWT.</li> <li>Cal fer els m\u00e8todes adaptats al tipus de m\u00e9tode HTTP que demana el     client. Ja que en les API REST, el m\u00e8tode \u00e9s el verb de la     petici\u00f3. Aix\u00ed, si demanem un GET ser\u00e0 per llegir, per\u00f2 si \u00e9s un POST     ser\u00e0 per guardar.</li> </ul> <p>Ac\u00ed tenim un exemple funcional al que li falten moltes comprovacions per evitar errades:</p> <pre><code>     @http.route('/terraform/api/&lt;model&gt;', auth=\"none\", cors='*', csrf=False, type='json')\n     def api(self, **args):\n       print('APIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII')\n       print(args, http.request.httprequest.method)\n       model = args['model']\n       if( http.request.httprequest.method == 'POST'):   #  {\"jsonrpc\":\"2.0\",\"method\":\"call\",\"params\":{\"planet\":{\"name\":\"Trantor\",\"average_temperature\":20},\"password\":\"1234\"}}\n           record = http.request.env['terraform.'+model].sudo().create(args[model])\n           return record.read()\n       if( http.request.httprequest.method == 'GET'):\n           record = http.request.env['terraform.'+model].sudo().search([('id','=',args[model]['id'])])\n           return record.read()\n       if( http.request.httprequest.method == 'PUT' or  http.request.httprequest.method == 'PATCH'):\n           record = http.request.env['terraform.'+model].sudo().search([('id','=',args[model]['id'])])[0]\n           record.write(args[model])\n           return record.read()\n       if(http.request.httprequest.method == 'DELETE'):\n           record = http.request.env['terraform.'+model].sudo().search([('id','=',args[model]['id'])])[0]\n           print(record)\n           record.unlink()\n           return record.read()\n\n       return http.request.env['ir.http'].session_info()\n</code></pre> <p>Tenim un problema i \u00e9s que per GET en teoria no es pot enviar body i aquesta API l\\'est\u00e0 esperant al dir que \u00e9s de tipus json. Si volem fer una API correcta, tenim que fer una funci\u00f3 diferent per al GET en http i retornar el JSON, que ha de ser construit dins de la funci\u00f3.</p>"},{"location":"JoseCastillo_Ini/wizards/","title":"Wizards","text":"<p>Els wizards d\\'Odoo permeten fer un asistent interactiu per a que l'usuari complete una tasca. Es tracta simplement d'un formulari emergent que va demanant dades i ajundant a l'usuari i en el que les dades s\u00f3n temporals.</p> <p>Els wizards en Odoo se fan a partir de models que estenen la classe TransientModel en compte de Model. Aquesta classe \u00e9s molt pareguda, per\u00f2:</p> <ul> <li>Les dades no s\u00f3n persistents, encara que es guarden temporalment en la base de dades.</li> <li>Els records dels wizards poden tindre refer\u00e8ncies Many2one o Many2many amb el records dels models normals, per\u00f2 no al contrari.</li> <li>Els records dels models normals poden tindre One2many a Wizards, per\u00f2 cada cert tems s\\'eliminen.</li> </ul> <p>En realitat, no estem fent res molt diferent al que fem en Odoo a exepci\u00f3 del TransientModel. Es tracta de crear formularis i accions igual que podem crear-los per a altres prop\u00f2sits. Un Wizard \u00e9s un conjunt de t\u00e8cniques que s\\'utilitzen conjuntament sovint. Aix\u00ed, el cicle de vida d\\'un wizard ser\u00e0 el seg\u00fcent:</p> <ul> <li>Un bot\u00f3 o el men\u00fa de dalt de la vista crida a un action que     mostrar\u00e0 el wizard. Por ser cridat de 4 maneres:</li> <li>Per un action ja preexistent en la base de dades amb %()d i         un bot\u00f3 de tipus action.</li> <li>Per un action ja preexistent que tinga binding_model i per         tant isca en el men\u00fa de dalt d\\'una vista en eixe model.</li> <li>Per un action generat per Python i retornat per una funci\u00f3. (En         Odoo totes les funcions cridades des de la vista poden retornar         un action que despr\u00e9s el client executa).</li> <li>La m\u00e9s ex\u00f2tica \u00e9s per un action preexistent per\u00f2 obtingut en una         funci\u00f3 Python i retornat per aquesta. No \u00e9s molt freq\u00fcent, per\u00f2         pot ser l\\'\u00fanica opci\u00f3 si la funci\u00f3 pot o no retornar un wizard         i la cridada al mateix es vol definir una vegada nom\u00e9s.</li> <li>Eixe action, en els wizards, sol obrir una finestra modal     (target=\\\"new\\\") on es mostren alguns fields del TransientModel.</li> <li>La finestra cont\u00e9 un formulari que sol tindre un bot\u00f3 per a enviar,     crear o el que es necessite i un especial Cancel que t\u00e9 la seua     sintaxi espec\u00edfica.</li> <li>Els wizards solen ser assistents que tenen botos de next,     back per exemple. Eixe comportament s\\'implementa amb:</li> <li>Un field de tipus selection anomenat state (\u00e9s important         el nom).</li> <li>Un header en el formulari amb un widget statusbar per         mostrar el progr\u00e9s.</li> <li>Els botons anterior i seg\u00fcent que criden a funcions del         TransientModel.</li> <li>Aquestes funcions canvien el field state i retornen un         action del mateix wizard per refrescar-lo i que no es tanque.</li> <li>El formulari t\u00e9 groups o field que es mostren o s\\'oculten en         funci\u00f3 del field state.</li> <li>En cas de tindre un wizard complex en el que omplir Many2many o     One2many, tal vegada es necessiten m\u00e9s transientModels per fer     relacions. No es poden fer relacions x2many amb models normals.</li> <li>Finalment, el wizard acabar\u00e0 creant o modificant alguns models     permanent de la base de dades. Aix\u00f2 es fa en una funci\u00f3. Eixa funci\u00f3     pot retornar un action per mostrar les inst\u00e0ncies creades o per     refrescar la vista que l\\'ha cridat.</li> </ul>"},{"location":"JoseCastillo_Ini/wizards/#wizard-basic","title":"Wizard b\u00e0sic","text":"<p>A continuaci\u00f3 anem a veure un exemple de wizard que sols mostra un formulari i crea una inst\u00e0ncia d\\'un model a partir de les dades del formulari:</p> <pre><code>class wizard(models.TransientModel):\n     _name = 'mmog.wizard'\n     def _default_attacker(self):\n         return self.env['mmog.fortress'].browse(self._context.get('active_id')) # El context cont\u00e9, entre altre coses, \n                                                                                 #el active_id del model que est\u00e0 obert.\n     fortress_attacker = fields.Many2one('mmog.fortress',default=_default_attacker)\n     fortress_target = fields.Many2one('mmog.fortress')\n     soldiers_sent = fields.Integer(default=1)\n\n     def launch(self):\n       if self.fortress_attacker.soldiers &gt;= self.soldiers_sent:\n          self.env['mmog.attack'].create({'fortress_attacking':self.fortress_attacker.id,\n                                          'fortress_defender':self.fortress_target.id,\n                                          'data':fields.datetime.now(),'soldiers_sent':self.soldiers_sent})\n       return {}\n</code></pre> <p>En el python cal observar la classe de la que hereta (<code>TransientModel</code>). Tamb\u00e9 el default, que extrau el active_id del form que a llan\u00e7at el wizard i el m\u00e8tode que \u00e9s cridat pel bot\u00f3 de la vista.</p> <pre><code>        &lt;record model=\"ir.ui.view\" id=\"wizard_mmog_fortress_view\"&gt;\n            &lt;field name=\"name\"&gt;wizard.mmog.fortress&lt;/field&gt;\n            &lt;field name=\"model\"&gt;mmog.wizard&lt;/field&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n                &lt;form string=\"Select fortress\"&gt;\n                    &lt;group&gt;\n                        &lt;field name=\"fortress_attacker\"/&gt;\n                        &lt;field name=\"fortress_target\"/&gt;\n                        &lt;field name=\"soldiers_sent\"/&gt;\n                    &lt;/group&gt;\n                    &lt;footer&gt;\n                        &lt;button name=\"launch\" type=\"object\"\n                                string=\"Launch\" class=\"oe_highlight\"/&gt;\n                        or\n                        &lt;button special=\"cancel\" string=\"Cancel\"/&gt;\n                    &lt;/footer&gt;\n\n                &lt;/form&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n\n          &lt;record id=\"launch_mmog_fortress_wizard\" model=\"ir.actions.act_window\"&gt;\n            &lt;field name=\"name\"&gt;Launch attack&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;mmog.wizard&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;form&lt;/field&gt;\n            &lt;field name=\"target\"&gt;new&lt;/field&gt;\n            &lt;field name=\"binding_model_id\" ref=\"model_mmog_fortress\"/&gt;\n</code></pre> <p>En la vista, tenim creat un form normal amb dos botons. Un d\\'ells \u00e9s especial per a cancel\u00b7lar el wizard. L\\'altre crida al m\u00e8tode. Tamb\u00e9 s\\'ha creat un action indicant el src_model sobre el que treballa i el model del wizard que utilitza. Els action que criden a wizard tenen l\\'atribut target a new per a que llance una finestra emergent.</p> <pre><code>`binding_model` \u00e9s el model on es pot llan\u00e7ar el wizard. Amb aix\u00f2 nom\u00e9s ja apareix en el men\u00fa superior d'accions. Per\u00f2 podem fer un bot\u00f3 que el cride de forma m\u00e9s intu\u00eftiva.\n</code></pre> <pre><code> &lt;button name=\"%(launch_mmog_fortress_wizard)d\" type=\"action\" string=\"Launch attack\" class=\"oe_highlight\" /&gt;\n</code></pre> <p>Si volem, podem ficar un bot\u00f3 que cride al action del wizard. Observem la sintaxi del name, que \u00e9s igual sempre que el button siga de tipus action, ja que \u00e9s l\\'anomenat XML id.</p> <p>Una altra opci\u00f3 \u00e9s fer que el bot\u00f3 siga de tipus <code>object</code> i que la funci\u00f3 retorne un action com el creat anteriorment:</p> <pre><code>def launch_mmog_fortress_wizard(self):\n    return {\n        'name': 'Launch attack',\n        'type': 'ir.actions.act_window',\n        'res_model': 'mmog.wizard',\n        'view_mode': 'form',\n        'target': 'new',\n        'context': self._context,\n    }\n</code></pre>"},{"location":"JoseCastillo_Ini/wizards/#wizard-amb-assistent","title":"Wizard amb assistent","text":"<p>En aquest exemple anem a fer un wizard amb assistent. Un assistent va demanant les dades poc a poc i autocompletant o indicant a l'usuari l'ordre en el que ha d'introduir les dades. \u00c9s \u00fatil quan es tracta de formularis complexos amb molts camps que depenen d'altres.</p> <p>Per comen\u00e7ar, cal crear un camp state tipus <code>Selection</code> amb varis valors possibles i el primer per defecte:</p> <pre><code>    state = fields.Selection([\n        ('pelis', \"Movie Selection\"),\n        ('dia', \"Day Selection\"),                                                                        \n      ], default='pelis')\n\n\n    def next(self):\n        if self.state == 'state1':\n            self.state = 'state2'\n        return {\n            'type': 'ir.actions.act_window',\n            'res_model': self._name,\n            'res_id': self.id,\n            'view_mode': 'form',\n            'target': 'new',\n        }\n\n    def previous(self):\n        if self.state == 'player':\n            self.state = 'building'\n        return {\n            'type': 'ir.actions.act_window',\n            'res_model': self._name,\n            'res_id': self.id,\n            'view_mode': 'form',\n            'target': 'new',\n        }\n</code></pre> <p>I uns botons que van fent que passe d\\'un estar a un altre:</p> <pre><code>                    &lt;header&gt;\n                        &lt;button name=\"action_pelis\" type=\"object\"\n                                string=\"Reset to movie selection\"\n                                invisible = \"state in ['pelis']\"/&gt;\n                        &lt;button name=\"action_dia\" type=\"object\"\n                                string=\"Select dia\" invisible = \"state in ['dia']\"\n                                class=\"oe_highlight\"/&gt;\n                        &lt;field name=\"state\" widget=\"statusbar\"/&gt;\n                    &lt;/header&gt;\n\n                    &lt;group invisible = \"state in ['dia']\"&gt;\n                        &lt;field name=\"cine\"/&gt;\n                        &lt;field name=\"pelicules\"/&gt;\n                    &lt;/group&gt;\n                    &lt;group invisible = \"state in ['pelis']\"&gt;\n                        &lt;field name=\"dia\"/&gt;\n                    &lt;/group&gt;\n</code></pre> <p>Despr\u00e9s es pot fer que el formulari tinga un aspecte diferent dep\u00e8n del valor de state.</p> <pre><code>En l'anterior exemple els botons per a passar al seg\u00fcent estat s'oculten. Si volem deshabilitar-los podem crear un duplicat amb els states inversos i amb la classe \"oe_highlight disabled\"\n</code></pre> <p>Els wizards poden tornar a recarregar la vista des de la que s\u00f3n cridats o poden retornar un action per carregar qualsevol vista, per exemple una del registre que s'ha creat:</p> <pre><code>return {\n    'name': 'Reserves',\n    'view_type': 'form',\n    'view_mode': 'form',   # Pot ser form, tree, kanban...\n    'res_model': 'wizards.reserves', # El model de dest\u00ed\n    'res_id': reserva.id,       # El id concret per obrir el form\n   # 'view_id': self.ref('wizards.reserves_form') # Opcional si hi ha m\u00e9s d'una vista posible.\n    'context': self._context,   # El context es pot ampliar per afegir opcions\n    'type': 'ir.actions.act_window',\n    'target': 'current',  # Si ho fem en current, canvia la finestra actual.\n}\n</code></pre>"},{"location":"JoseCastillo_Ini/wizards/#wizard-amb-dades-per-context","title":"Wizard amb dades per context","text":"<p>En ocasions, necessitem que el wizard obtinga informaci\u00f3 de qui l\\'ha cridat. En els exemples hem vist que obtenim el active_id, \u00e9s a di, el registre del que ha sigut cridat, amb:</p> <pre><code>  self._context.get('active_id')\n</code></pre> <p>El traguem del context perqu\u00e8 s\\'envia autom\u00e0ticament per Odoo. Per\u00f2 pot ser que necessitem altres coses, com el parent.id o el valor d\\'un altre field, per exemple. Per a enviar informaci\u00f3 extra al wizard, podem afegir coses al context en el action o en el bot\u00f3 que el crida.</p> <pre><code>  &lt;button name=\"%(negocity.travel_wizard_action)d\"\u00e7\n          type=\"action\" string=\"Create Travel\"\n          context=\"{'player_context': parent.id, 'city_context': active_id}\"\n          class=\"oe_highlight\"\n  /&gt;\n</code></pre> <p>Eixa informaci\u00f3 pot ser llegida amb aquestes instruccions:</p> <pre><code> player = self.env.context.get('player_context')\n city = self.env.context.get('city_context')\n</code></pre>"},{"location":"JoseCastillo_Ini/wizards/#x2many-en-wizards","title":"X2many en Wizards","text":"<p>Els Many2one en wizards s\u00f3n simples, ja que es tracta d\\'una relaci\u00f3 de dins del wizard cap a un model permanent. El problema est\u00e0 en els One2many i els Many2many. Aquestes relacions impliquen que hi ha algun model que apunta al transientmodel del wizard. Eixe tipus de relacions s\u00f3n impossibles o no recomanables, aleshores cal crear altres <code>transientmodels</code> auxiliars que representen als originals per implementar les relacions.</p> <p>Les relacions <code>Many2many</code> entre un TransientModel i un model normal s\u00f3n interessants unidireccionalment, \u00e9s a dir, al <code>TransientModel</code> es pot veure i utilitzar la llista, per\u00f2 no t\u00e9 sentit aquesta llista al model normal si al final es va a esborrar. Odoo mant\u00e9 durant un temps el model per al wizard y al esborrar, tamb\u00e9 elimina les relacions a la taula interm\u00e8dia.</p> <p>Per tant, si durant el wizard es va a necessitar manipular llistes, pot ser recomanable fer un model transitori tamb\u00e9 per a simular el model en el que es fa la relaci\u00f3 final.</p>"},{"location":"JoseCastillo_Ini/wizards/#amb-one2many","title":"Amb One2many","text":"<p>En el seg\u00fcent exemple anem a veure c\u00f3m implementar un wizard per a un viatge en el que tindrem una llista de ciutats disponibles en funci\u00f3 d\\'un origen i unes carreteres. Observem primer el transientModel de travel:</p> <pre><code>class travel_wizard(models.TransientModel):\n    _name = 'negocity.travel_wizard'\n    _description = 'Wizard of travels'\n\n    def _get_origin(self):\n        city = self.env.context.get('city_context')\n        return city\n\n    name = fields.Char()\n    origin = fields.Many2one('negocity.city', default = _get_origin)\n    cities_available = fields.One2many('negocity.city_transient','wizard')\n    destiny = fields.Many2one('negocity.city')  # filtrat\n</code></pre> <p>Com es veu, obt\u00e9 la ciutat d\\'origen per context i cal filtrar les ciutats disponibles per al dest\u00ed en funci\u00f3 d\\'un field One2many que tenim que omplir amb la informaci\u00f3 de l\\'origen.</p> <pre><code>En realitat \u00e9s millor fer-ho en un Many2many, despr\u00e9s ho emplicarem\n</code></pre> <p>Mirem tamb\u00e9 el transientModel de les ciutats per a cities_available:</p> <pre><code>class city_transient(models.TransientModel):\n    _name = 'negocity.city_transient'\n\n    city = fields.Many2one('negocity.city')\n    wizard = fields.Many2one('negocity.travel_wizard')\n</code></pre> <p>Aquest model temporal sols fa d\\'intermediari entre la ciutat real i el wizard.</p> <p>Ara anem a fer que, al canviar la ciutat d\\'origen, es modifique la llista de ciutats disponibles:</p> <pre><code>@api.onchange('origin')\n    def _onchange_origin(self):\n        if len(self.origin)&gt;0:\n            roads_available = self.origin.roads\n            cities_available = roads_available.city_1 + roads_available.city_2 - self.origin\n            self.cities_available.unlink()\n            for city in cities_available:\n                self.env['negocity.city_transient'].create({'city': city.id, 'wizard': self.id})\n            return {\n            }\n</code></pre> <p>Encara que no entra dins del tema dels wizards, la manera en la que troba les ciutats disponibles \u00e9s interessant per l\\'\u00fas d\\'operacions de conjunts en recordsets.</p> <p>Com es veu, el que es tracta \u00e9s d\\'eliminar les altres relacions i crear noves. Com que mai estem tractant en ciutats de veritat, no passa res en fer unlink(). Despr\u00e9s es crea un nou registre temporal per cada ciutat de les noves.</p> <p>Podem aprofitar la llista de ciutats disponibles per fer un filtre en la vista en el field destiny. Per a fer aix\u00f3 tenim algunes opcions ja tractades:</p> <p>Observem la sintaxi en la que es crea un diccionari amb dict() concatenant el context amb dos nous atributs, el de les ciutats i l\\'origen. El context enviat tindr\u00e0 aquestes dades i seran accessibles tant pel model com per la vista. Amb aquesta informaci\u00f3, la vista pot aplicar el filtre:</p> <pre><code>&lt;field name=\"destiny\"\n    domain = \"[('id','in',context.get('cities_available_context',[]))]\"\n    attrs=\"{'readonly': [('origin', '=', False)]}\"/&gt;\n</code></pre> <p>Aprofita la funci\u00f3 context.get de QWeb per obtindre el context i aplicar el filtre.</p>"},{"location":"JoseCastillo_Ini/wizards/#amb-many2many","title":"Amb Many2many","text":"<p>Anem a veure el mateix exemple implementat en Many2many computed. En primer lloc, la definici\u00f3 del field:</p> <pre><code> cities_available = fields.Many2many('negocity.city_transient', compute=\"_get_cities_available\")\n</code></pre> <p>Aquest field necessita una funci\u00f3 compute:</p> <pre><code>    @api.depends('origin')\n    def _get_cities_available(self):\n        cities = self.env['negocity.city_transient']\n        self.cities_available = cities\n\n        if len(self.origin)&gt;0:\n            roads_available = self.origin.roads\n            cities_available = roads_available.city_1 + roads_available.city_2 - self.origin\n            for city in cities_available:\n               cities = cities + self.env['negocity.city_transient'].create({'city': city.id, 'wizard': self.id})\n\n            self.cities_available = cities\n</code></pre> <p>Aquesta implementaci\u00f3 simplifica fer el filtre, ja que es tracta d\\'un field computat que es pot recalcular cada vegada que es reinicia el formulari.</p> <p>De vegades volem utilitzar aquesta llista computada per fer un bot\u00f3 que ens permet seleccionar. Si fem el bot\u00f3 d\\'aquesta manera:</p> <pre><code>   &lt;button name=\"select\" type=\"object\" string=\"Select\" class=\"oe_highlight\" context=\"{'travel_wizard_context': parent.id}\"/&gt;\n</code></pre> <p>Podem implementar la funci\u00f3 se\u00fcent:</p> <pre><code>    def select(self):\n        road_available = self.wizard.origin.roads &amp; self.city.roads\n        wizard = self._context.get('travel_wizard_context')\n        wizard = self.env['negocity.travel_wizard'].browse(wizard)\n        wizard.write({'destiny': self.city.id,'road': road_available.id})\n\n        return {\n            'name': 'Negocity travel wizard action',\n            'type': 'ir.actions.act_window',\n            'res_model': self.wizard._name,\n            'res_id': self.wizard.id,\n            'view_mode': 'form',\n            'target': 'new',\n            'context': wizard._context\n        }\n</code></pre>"},{"location":"JoseCastillo_Ini/wizards/#onchange-en-wizards","title":"Onchange en Wizards","text":"<p>En principi els Onchange funcionen igual que sempre. \u00c9s a dir, poden modificar el valor dels fields o retornar un warning. No obstant, cal indicar que Onchange funciona sobre un record virtual c\u00f2pia del record real en el que treballa el wizard. Aix\u00ed, quan fa un canvi, sols afecta a la vista. Aix\u00f2 no \u00e9s cap problema quan fem un formulari normal, per\u00f2 els wizards tenen varis estats (next, state...) i el canvi d\\'estat provoca recrear la vista de nou per mitj\u00e0 d\\'un action. Eixos canvis desapareixen. Si volem que Onchange modifique realment el record del wizard i eixe canvi es quede, cal utilitzar self._origin. Observem aquest codi:</p> <pre><code>    @api.onchange('destiny')\n    def _onchange_destiny(self):\n        if len(self.destiny)&gt;0:\n            road_available = self.origin.roads &amp; self.destiny.roads\n            self._origin.write({'road': road_available.id})\n            self.road = road_available.id\n\n            return {}\n</code></pre> <p>El primer write escriu sobre el registre real del wizard i el segon sobre el virtual per a veure el canvi.</p>"},{"location":"JoseCastillo_Ini/wizards/#alertes","title":"Alertes","text":"<p>\u00c9s possible notificar a l\\'usuari de varies maneres. En cas de que s\\'equivoque en un field, podem afegir un label amb vista condicional:</p> <pre><code> &lt;field name=\"oil_required\" /&gt;\n &lt;field name=\"not_oil\" invisible=\"1\" /&gt;\n &lt;label colspan=\"2\"\n    for=\"oil_available\"\n    string=\"Not sufficient Oil\"\n    attrs=\"{'invisible': [('not_oil','=', False)]}\"\n    style=\"background-color:yellow;\"/&gt;\n &lt;field name=\"oil_available\" /&gt;\n</code></pre> <p>Tamb\u00e9 es pot mostrar un error en una finestra emergent. La manera m\u00e9s senzilla \u00e9s:</p> <pre><code>from odoo.exceptions import UserError\n....\n     raise UserError('Not Sufficient Oil for the travel')\n</code></pre> <p>En cas de necessitar una finestra m\u00e9s completa es pot fer un model, una vista form i cridar a un action que la mostre.</p> <p>Si volem notificar sense molestar massa, es pot cridar a una action.client espec\u00edfica que mostra una notificaci\u00f3:</p> <pre><code>   return {\n        'type': 'ir.actions.client',\n        'tag': 'display_notification',\n        'params': {\n        'message': 'Not sufficient Oil, vehicle or driver',\n        'type': 'danger',  #types: success,warning,danger,info\n        'sticky': False,\n    }\n</code></pre> <p>Pot ser de molts tipus i no tanca el wizard, per tant, es pot continuar.</p>"},{"location":"JoseCastillo_Ini/wizards/#exemple-complet-de-wizards","title":"Exemple Complet de Wizards","text":"<p>El codi complet de l\\'exemple est\u00e0 a: 1</p> <p>Wizard cridat en un bot\u00f3 del formulari:</p> <p>Els wizards, generalment, necessiten una vista i un action que la cride:</p> <pre><code>      &lt;record model=\"ir.ui.view\" id=\"wizards.w_reserves\"&gt;\n            &lt;field name=\"name\"&gt;wizard reserves&lt;/field&gt;\n            &lt;field name=\"model\"&gt;wizards.w_reserves&lt;/field&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n            &lt;form&gt;\n                 &lt;header&gt;\n                        &lt;field name=\"state\" widget=\"statusbar\"/&gt;\n                    &lt;/header&gt;\n                    &lt;group&gt;\n                &lt;h4&gt;   &lt;field name=\"teatre\"/&gt;&lt;/h4&gt;\n            &lt;/group&gt;\n            &lt;group states=\"obra\"&gt;\n                &lt;field name=\"obra\"/&gt;\n            &lt;/group&gt;\n            &lt;group states = \"actuacio\"&gt;\n                &lt;field name=\"actuacio\"/&gt;\n            &lt;/group&gt;\n            &lt;group states=\"butaca,fin\"&gt;\n                        &lt;field name=\"butaca\"/&gt;\n\n                    &lt;/group&gt;\n                    &lt;footer&gt;\n                &lt;button states=\"fin\" name=\"reserva\" type=\"object\"\n                        string=\"Reserva\" class=\"oe_highlight\"/&gt;\n                        or\n                        &lt;button special=\"cancel\" string=\"Cancel\"/&gt;\n                    &lt;/footer&gt;\n\n                &lt;/form&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n\n        &lt;act_window id=\"wizards.w_reserves_action\"\n                    name=\"Crear reserves\"\n                    src_model=\"wizards.teatres\"\n                    res_model=\"wizards.w_reserves\"\n                    view_mode=\"form\"\n                    target=\"new\"\n                    /&gt;\n</code></pre> <p>Observem, en especial, el header amb el camp state i els groups amd states per ser mostrats condicionalment. Aix\u00f2 permetr\u00e0 crear un assistent.</p> <p>Per a que funcione la vista, \u00e9s necessari el model i el codi del controlador del wizard:</p> <pre><code>class w_reserves(models.TransientModel):   # La classe \u00e9s transientModel\n     _name = 'wizards.w_reserves'\n\n     def _default_teatre(self):                    \n         return self.env['wizards.teatres'].browse(self._context.get('active_id')) \n         # El context cont\u00e9, entre altre coses, el active_id del model que est\u00e0 obert.\n\n     teatre = fields.Many2one('wizards.teatres',default=_default_teatre)\n     obra = fields.Many2one('wizards.obres')\n     actuacio = fields.Many2one('wizards.actuacions',required=True)\n     butaca = fields.Many2one('wizards.butaques',required=True)\n     state = fields.Selection([     # El camp state \u00e9s per a crear l'assistent.\n        ('teatre', \"Teatre Selection\"),\n        ('obra', \"Obra Selection\"),                                             \n        ('actuacio', \"Actuacio Selection\"),\n        ('butaca', \"butaca Selection\"),\n        ('fin', \"Fin\"),\n        ], default='teatre')\n\n\n     @api.onchange('teatre')   \n     # Tots aquests onchange serveixen per ajudar a \n     # seleccionar les coses a l'usuari amb filtres\n     def _oc_teatre(self):\n        if len(self.teatre) &gt; 0:\n         actuacions = self.env['wizards.actuacions'].search([('teatre','=',self.teatre.id)])\n         print(actuacions)\n         obres = actuacions.mapped('obra')\n         print(obres)\n         self.state='obra'    \n         # Canviem el state per a donar continuitat a l'assistent.\n         return { 'domain': {'obra': [('id', 'in', obres.ids)]},}    \n         # Modifiquem el filtre del seg\u00fcent field.\n\n     @api.onchange('obra')\n     def _oc_obra(self):\n        if len(self.obra) &gt; 0:\n          actuacions = self.env['wizards.actuacions'].search([('teatre','=',self.teatre.id),('obra','=',self.obra.id)])\n\n          self.state='actuacio'\n          return { 'domain': {'actuacio': [('id', 'in', actuacions.ids)]},}\n\n\n     @api.onchange('actuacio')\n     def _oc_actuacio(self):\n        if len(self.actuacio) &gt; 0:\n          print('butaques ******************************************')\n          butaques = self.env['wizards.butaques'].search([('teatre','=',self.actuacio.teatre.id)])\n          b_reservades = self.actuacio.reserves.mapped('butaca')\n          print(b_reservades)\n          b_disponibles = butaques - b_reservades    \n          # Despres d'obtindre totes les butaques li llevem les reservades.\n          print(b_disponibles)\n\n          self.state='butaca'\n          return { 'domain': {'butaca': [('id', 'in', b_disponibles.ids)]},}\n\n     @api.onchange('butaca')\n     def _oc_butaca(self):\n        if len(self.butaca) &gt; 0:\n            self.state='fin'\n\n     @api.multi\n     def reserva(self):\n         reserva = self.env['wizards.reserves'].create({\n              'actuacio':self.actuacio.id,\n               'butaca':self.butaca.id,\n               'name':str(self.actuacio.name)+\" - \"+str(self.butaca.name)\n               })\n         return {     \n         # Aquest return crea un action que, al ser cridat pel client,\n         # obri el formulari amb la reserva creada.\n    'name': 'Reserves',\n    'view_type': 'form',\n    'view_mode': 'form',\n    'res_model': 'wizards.reserves',\n    'res_id': reserva.id,\n    'context': self._context,\n    'type': 'ir.actions.act_window',\n    'target': 'current',\n                 }\n</code></pre> <p>Ara, al formulari del teatre, li afegim un bot\u00f3 per obrir el wizard:</p> <pre><code>    &lt;button name=\"%(wizards.w_reserves_action)d\" string=\"Crear Reserva\" type=\"action\"/&gt;\n</code></pre> <p>Wizard cridat des del men\u00fa dropdown de action (el desplegable de dalt):</p> <p>En aquest cas, hem de crear un action window per\u00f2 amb un binding_model_id:</p> <pre><code> &lt;record id=\"wizards.w_reserves_pagar_action\" model=\"ir.actions.act_window\"&gt;\n  &lt;field name=\"name\"&gt;Pagar varies reserves&lt;/field&gt;\n  &lt;field name=\"type\"&gt;ir.actions.act_window&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;wizards.w_pagar_reserves&lt;/field&gt;\n  &lt;field name=\"view_type\"&gt;form&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;form&lt;/field&gt;\n  &lt;field name=\"target\"&gt;new&lt;/field&gt;\n  &lt;field name=\"binding_model_id\" ref=\"wizards.model_wizards_reserves\"  /&gt;\n&lt;/record&gt;\n</code></pre> <p>El codi python \u00e9s molt simple, en aquest cas, sols canvia que at\u00e9n a la variable de context active_ids en compte de active_id:</p> <pre><code>class w_pagar_reserves(models.TransientModel):\n    _name = 'wizards.w_pagar_reserves'\n\n    def _default_reserves(self):\n         return self.env['wizards.reserves'].browse(self._context.get('active_ids')) # El context cont\u00e9, entre altre coses, els active_ids dels models que es seleccionen en un tree.\n\n    reserves = fields.Many2many('wizards.reserves',default=_default_reserves)\n\n    def pagar(self):\n        for r in self.reserves:\n            r.write({'pagada':True})\n</code></pre> <p>El formulari del wizard tamb\u00e9 \u00e9s molt senzill:</p> <pre><code>        &lt;record model=\"ir.ui.view\" id=\"wizards.w_pagar_reserves\"&gt;\n            &lt;field name=\"name\"&gt;wizard pagar reserves&lt;/field&gt;\n            &lt;field name=\"model\"&gt;wizards.w_pagar_reserves&lt;/field&gt;\n            &lt;field name=\"arch\" type=\"xml\"&gt;\n            &lt;form&gt;\n            &lt;group &gt;\n                &lt;field name=\"reserves\"/&gt;\n            &lt;/group&gt;\n                    &lt;footer&gt;\n                &lt;button name=\"pagar\" type=\"object\"\n                    string=\"Pagar\" class=\"oe_highlight\"/&gt;\n                        or\n                        &lt;button special=\"cancel\" string=\"Cancel\"/&gt;\n                    &lt;/footer&gt;\n\n                &lt;/form&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n</code></pre>"}]}