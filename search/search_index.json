{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducci\u00f3n al curso","text":"<p>Apuntes del m\u00f3dulo de SGE (Sistemas de Gesti\u00f3n Empresarial) para el ciclo formativo de grado superior de DAM (Desarrollo de Aplicaciones Multimedia)</p> <p>En este espacio encontrar\u00e1s los apuntes b\u00e1sicos sobre el m\u00f3dulo pasando por la descripci\u00f3n y caracterizaci\u00f3n de ERPs (Enterprise Resource Planning o Planificaci\u00f3n de Recursos Empresariales), as\u00ed como la posterior preparaci\u00f3n del entorno de trabajo para instalar, configurar y desarrollar en Odoo. </p> <p>Muchas instrucciones est\u00e1n adaptadas para el funcionamiento de Odoo en un entorno de aprendizaje. El objetivo es desarrollar m\u00f3dulos para ampliar las funcionalidades del ERP seg\u00fan las necesidades de la empresa.</p> <p>Esta documentaci\u00f3n, esencialmente la parte de ODOO, se ha realizado teniendo como base el siguiente material:</p> <ul> <li>Odoo: Technical Training - Introducing to development</li> <li>Odoo: Tutorial Server framework 101</li> <li>Odoo: Referencia</li> <li>Apuntes de SGE de los siguientes profesores/as<ul> <li>Jose Castillo</li> <li>Alberto Aparicio</li> <li>Inma Gij\u00f3n</li> <li>Alfredo Oltra</li> </ul> </li> </ul> <p>Apuntes desarrollados por Sergio Rey Martinez</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_1_IntroduccionERP/","title":"1.1. Introducci\u00f3n a la Gesti\u00f3n Empresarial","text":"<p>La gesti\u00f3n empresarial es aquella actividad que, a trav\u00e9s de diferentes individuos especializados (directores institucionales, consultores, productores, gerentes, entre otros) y acciones, busca mejorar la productividad y competitividad de una empresa o negocio.</p>"},{"location":"1_1_IntroduccionERP/#principales-caracteristicas-de-la-gestion-empresarial","title":"Principales caracter\u00edsticas de la gesti\u00f3n empresarial","text":"<ul> <li>Una empresa existe mientras genere beneficios.  </li> <li>Una empresa debe gestionar bien sus recursos para ser competitiva.  </li> <li>El principal objetivo de la empresa es el cliente.</li> </ul> <p>No todas las personas tienen la capacidad de llevar a cabo una buena administraci\u00f3n en su empresa. Por eso, de alguna manera, la gesti\u00f3n empresarial se considera un arte o una virtud particular, ya que se requiere organizaci\u00f3n, control y liderazgo efectivo para alcanzar los resultados deseados de la forma m\u00e1s eficiente posible.</p> <p>Siempre se busca mejorar la productividad y las finanzas de una organizaci\u00f3n para ser competitivos en el mercado, y en este \u00e1mbito el tiempo es un factor importante para lograr los objetivos propuestos. Una empresa que realiza una gesti\u00f3n \u00f3ptima siempre tendr\u00e1 mejores resultados tanto en su producci\u00f3n y log\u00edstica como en el mercado, logrando buenas ventas y obteniendo un margen de beneficio adecuado (esto tambi\u00e9n aplica a las empresas de servicios).</p> Gesti\u00f3n Empresarial. <p>La persona que asume la direcci\u00f3n de una empresa lleva la responsabilidad de optimizar recursos como el tiempo, los productos y el personal para dirigir esa organizaci\u00f3n hacia una econom\u00eda deseable. En este \u00e1mbito siempre existen normas y est\u00e1ndares que cumplir, aunque por otro lado, un emprendedor debe ser innovador y creativo para destacar frente a otros que trabajan en el mismo sector.</p>"},{"location":"1_1_IntroduccionERP/#gestion-empresarial-y-sistemas-de-informacion","title":"Gesti\u00f3n empresarial y sistemas de informaci\u00f3n","text":"<p>La gesti\u00f3n empresarial moderna se apoya en los Sistemas de Informaci\u00f3n (SI) para mejorar la productividad, competitividad y toma de decisiones. Estos sistemas automatizan procesos, organizan datos y permiten una explotaci\u00f3n eficiente de la documentaci\u00f3n administrativa.</p> <p>La inform\u00e1tica aplicada a la gesti\u00f3n empresarial permite:</p> <ul> <li>Automatizar tareas repetitivas</li> <li>Organizar y analizar grandes vol\u00famenes de informaci\u00f3n</li> <li>Mejorar la comunicaci\u00f3n interna y externa</li> <li>Optimizar procesos administrativos y productivos</li> </ul>"},{"location":"1_2_Sistemas_Informacion/","title":"1.2. Inform\u00e1tica en la Gesti\u00f3n Empresarial","text":"<p>La inform\u00e1tica consiste b\u00e1sicamente en el procesamiento autom\u00e1tico de la informaci\u00f3n. Si una empresa tiene como una de sus principales actividades la generaci\u00f3n, gesti\u00f3n y an\u00e1lisis de cierta informaci\u00f3n, parece l\u00f3gico pensar que la tecnolog\u00eda de la informaci\u00f3n va a desempe\u00f1ar un papel importante en la gesti\u00f3n empresarial.</p> <p>La inform\u00e1tica hace mucho m\u00e1s que ayudar a las empresas a crear presentaciones profesionales y reportes de ventas impresionantes. Los ordenadores pueden automatizar tareas que consumen mucho tiempo, dando ideas a los desarrolladores para crear programas que resuelvan una gran variedad de problemas. Ya seas due\u00f1o de una joyer\u00eda o de una multinacional como Sony, la inform\u00e1tica te ayudar\u00e1 a mejorar la gesti\u00f3n de tu negocio.</p> Inform\u00e1tica en la Empresa. <p>Veamos algunas de las formas en que la inform\u00e1tica puede ayudarte a gestionar tu empresa.</p>"},{"location":"1_2_Sistemas_Informacion/#gestion-de-datos","title":"Gesti\u00f3n de Datos","text":"<p>Las tareas de gesti\u00f3n de datos son la base de muchas de las actividades que realizan las empresas. La inform\u00e1tica permite organizar y manipular grandes cantidades de informaci\u00f3n de forma productiva. Las empresas pueden usar bases de datos para monitorizar sus operaciones.</p> <p>Independientemente del tama\u00f1o de tu empresa, es probable que trabajes con informaci\u00f3n y necesites almacenarla. Los sitios web de comercio electr\u00f3nico tambi\u00e9n utilizan software de bases de datos para vender productos e incluso permitir que las personas se registren en sus plataformas. Si tu empresa tiene un sitio web, puedes configurar el software de gesti\u00f3n de datos t\u00fa mismo o contratar a una empresa para que lo haga por ti.</p>"},{"location":"1_2_Sistemas_Informacion/#gestion-de-oficina-y-almacen","title":"Gesti\u00f3n de Oficina y Almac\u00e9n","text":"<p>Muchas empresas obtienen ingresos mediante la compra y venta de productos con un margen de beneficio, y la inform\u00e1tica ayuda a gestionar todo ese inventario y materiales de manera eficiente. Los grandes almacenes, por ejemplo, utilizan software de gesti\u00f3n de inventario sofisticado que puede ser desarrollado por sus propios departamentos de IT o adaptaciones de productos est\u00e1ndar. Estas aplicaciones permiten a las compa\u00f1\u00edas asegurarse de que los productos est\u00e9n disponibles en las tiendas cuando los clientes los necesitan. Los ordenadores tambi\u00e9n son \u00fatiles para rastrear y administrar suministros b\u00e1sicos como papel de impresora, l\u00e1pices y otros materiales de oficina.</p>"},{"location":"1_2_Sistemas_Informacion/#gestion-de-personal","title":"Gesti\u00f3n de Personal","text":"<p>Comunicarse con un compa\u00f1ero que est\u00e1 en la oficina de al lado no suele ser un problema, pero coordinar reuniones cuando las personas est\u00e1n en distintas ubicaciones puede ser un desaf\u00edo. El software inform\u00e1tico permite realizar reuniones virtuales a trav\u00e9s de Internet y facilita que todos en la empresa compartan un calendario com\u00fan. Algunas empresas buscan aumentar la productividad controlando los ordenadores que usan sus empleados. Monitorearlos permite hacer seguimiento de las horas facturables e identificar actividades rentables. Si haces seguimiento del tiempo o planificaci\u00f3n de reuniones, una herramienta de software puede ayudarte.</p>"},{"location":"1_2_Sistemas_Informacion/#gestion-de-contabilidad-y-facturacion","title":"Gesti\u00f3n de Contabilidad y Facturaci\u00f3n","text":"<p>Cuando llega la temporada de impuestos, estos pueden prepararse accediendo a los registros financieros mantenidos durante el a\u00f1o en un ordenador. El software de contabilidad ayuda a gestionar el dinero, crear presupuestos, seguir ventas y controlar el uso de recursos. Estas aplicaciones ofrecen soluciones para empresas de todos los tama\u00f1os. Incluso puedes encontrar programas de contabilidad y facturaci\u00f3n accesibles desde la web, algunos gratuitos hasta cierto l\u00edmite. Si los miembros de tu organizaci\u00f3n necesitan acceder y compartir informaci\u00f3n contable desde m\u00faltiples ubicaciones, esta puede ser una soluci\u00f3n ideal. Tambi\u00e9n encontrar\u00e1s programas de hojas de c\u00e1lculo \u00fatiles para tareas como listas de asistencia o gesti\u00f3n de n\u00f3minas.</p>"},{"location":"1_2_Sistemas_Informacion/#ventajas-de-aplicar-la-informatica-a-la-gestion-empresarial","title":"Ventajas de aplicar la inform\u00e1tica a la gesti\u00f3n empresarial","text":"<ul> <li>Reducci\u00f3n de errores humanos</li> <li>Ahorro de tiempo y costes</li> <li>Mejora en la toma de decisiones</li> <li>Acceso remoto a la informaci\u00f3n</li> <li>Mayor seguridad y trazabilidad</li> <li>Automatizaci\u00f3n de procesos repetitivos</li> </ul> <p>La inform\u00e1tica no solo mejora la eficiencia operativa, sino que tambi\u00e9n permite a las empresas adaptarse a entornos cambiantes, responder con agilidad a las demandas del mercado y ofrecer un mejor servicio al cliente.</p>"},{"location":"1_2_Sistemas_Informacion/#sistemas-de-informacion-empresarial","title":"Sistemas de Informaci\u00f3n Empresarial","text":"<p>Los sistemas de informaci\u00f3n (SI) son herramientas que permiten la automatizaci\u00f3n de tareas, la organizaci\u00f3n de la informaci\u00f3n y la mejora de procesos en la empresa. Se estructuran en niveles jer\u00e1rquicos que responden a diferentes necesidades operativas, t\u00e1cticas y estrat\u00e9gicas.</p>"},{"location":"1_2_Sistemas_Informacion/#niveles-de-los-sistemas-de-informacion","title":"Niveles de los Sistemas de Informaci\u00f3n","text":"Pir\u00e1mide de los Sistemas de Informaci\u00f3n. Nivel Tipo de Sistema Ejemplos Estrat\u00e9gico ESS (Executive Support Systems), BI (Business Intelligence) SAP BI, Power BI T\u00e1ctico DSS (Decision Support Systems) Sistemas de an\u00e1lisis predictivo Operativo MIS (Management Information Systems) Informes peri\u00f3dicos, KPIs Transaccional TPS (Transaction Processing Systems), OAS (Office Automation Systems) ERP, CRM, DMS"},{"location":"1_2_Sistemas_Informacion/#-nivel-estrategico","title":"- Nivel Estrat\u00e9gico","text":"Pir\u00e1mide de los Sistemas de Informaci\u00f3n. Nivel Estrat\u00e9gico <ul> <li>Nivel T\u00e1ctico</li> </ul> Pir\u00e1mide de los Sistemas de Informaci\u00f3n. Nivel T\u00e1ctico <ul> <li>Nivel Operativo</li> </ul> Pir\u00e1mide de los Sistemas de Informaci\u00f3n. Nivel Operativo <ul> <li>Nivel Transanccional </li> </ul> Pir\u00e1mide de los Sistemas de Informaci\u00f3n. Nivel Transaccional"},{"location":"1_2_Sistemas_Informacion/#tipos-de-sistemas-de-informacion","title":"Tipos de Sistemas de Informaci\u00f3n","text":""},{"location":"1_2_Sistemas_Informacion/#tps-transaction-processing-system","title":"TPS \u2013 Transaction Processing System","text":"<p>Los sistemas de procesamiento de transacciones son los sistemas empresariales b\u00e1sicos que sirven al nivel de operaciones y de transacciones de la organizaci\u00f3n. Efect\u00faan y registran las transacciones diarias rutinarias. Ejemplos t\u00edpicos son las entradas y salidas de pedidos, o los sistemas de reserva de l\u00edneas a\u00e9reas. Algunas de las propiedades o caracter\u00edsticas de estos sistemas son que automatizan tareas operativas en una organizaci\u00f3n, y se basan en c\u00e1lculos y procesos sencillos.</p> <p>Adem\u00e1s, deben ser de respuesta r\u00e1pida, fiables e inflexible, puesto que no pueden aceptar informaci\u00f3n distinta a la establecida.</p>"},{"location":"1_2_Sistemas_Informacion/#oas-office-automation-system","title":"OAS \u2013 Office Automation System","text":"<p>Los sistemas de automatizaci\u00f3n de oficinas consisten en aplicaciones destinadas a ayudar al trabajo diario del administrativo de una organizaci\u00f3n, como los procesadores de textos, las hojas de c\u00e1lculo, los editores de presentaciones, etc., que agrupados forman las suites ofim\u00e1ticas, utilizadas para aumentar la productividad de la empresa.</p> <p>Algunos OAS conocidos son Microsoft Office, iWork (propiedad de Apple), y LibreOffice, con licencia libre. Adem\u00e1s, las \u00faltimas tendencias utilizan la operatividad en la nube, mediante paquetes como Google Docs en Google Drive, o el propio Microsoft Office 365. En sistemas m\u00f3viles Android tambi\u00e9n existen suites ofim\u00e1ticas como las propias de Microsoft, Apple y Google.</p> <p>Tanto los TPS como los OAS son sistemas que operan a nivel de transacciones, es decir, en el nivel m\u00e1s bajo de la pir\u00e1mide de funcionamiento vista anteriormente.</p>"},{"location":"1_2_Sistemas_Informacion/#mis-management-information-system","title":"MIS \u2013 Management Information System","text":"<p>Los sistemas de gesti\u00f3n de informaci\u00f3n son un tipo de sistemas de informaci\u00f3n que recopilan y procesan informaci\u00f3n de diferentes fuentes tales como los TPS para ayudar en la toma de decisiones en lo referente a la gesti\u00f3n de la organizaci\u00f3n.</p> <p>Sirven a los administradores interesados en resultados semanales, mensuales y anuales y suelen contestar a preguntas estructuradas que se conocen con mucha antelaci\u00f3n. Funcionar\u00edan en el nivel operativo, para tomar decisiones a corto plazo. </p>"},{"location":"1_2_Sistemas_Informacion/#dss-decision-support-system","title":"DSS \u2013 Decision Support System","text":"<p>Los sistemas de apoyo a la toma de decisiones combinan datos y modelos anal\u00edticos avanzados o herramientas de an\u00e1lisis de datos, para apoyar la toma de decisiones semiestructurada y no estructurada y que cambian r\u00e1pidamente.</p> <p>Se basa en el an\u00e1lisis multidimensional que permite profundizar en la informaci\u00f3n hasta llegar a un alto nivel de detalle para pronosticar lo que puede ocurrir en el futuro, an\u00e1lisis de tendencias, an\u00e1lisis prospectivo, etc. Se emplear\u00edan en el tercer nivel piramidal visto antes, el t\u00e1ctico.</p>"},{"location":"1_2_Sistemas_Informacion/#ess-executive-support-system","title":"ESS \u2013 Executive Support System","text":"<p>Los sistemas de apoyo a ejecutivos est\u00e1n dise\u00f1ados para apoyar la toma de decisiones no estructuradas, mediante gr\u00e1ficos y comunicaciones avanzados. Estos sistemas filtran, comprimen y rastrean datos cruciales.</p> <p>Permiten hacer estimaciones de ventas a 5 a\u00f1os, dise\u00f1ar el plan operativo, hacer previsiones de presupuestos y estimaciones de beneficios de los pr\u00f3ximos a\u00f1os. Son, por tanto, sistemas para toma de decisiones a largo plazo, y operar\u00edan en el nivel estrat\u00e9gico de la pir\u00e1mide anterior, en la cima de la pir\u00e1mide. </p>"},{"location":"1_2_Sistemas_Informacion/#bi-business-intelligence","title":"BI \u2013 Business Intelligence","text":"<p>El BI o Inteligencia Empresarial o Inteligencia de Negocios, es el conjunto de procesos requeridos para ofrecer una soluci\u00f3n inform\u00e1tica que nos permita analizar c\u00f3mo est\u00e1 funcionando una empresa de forma que se optimice su funcionamiento mediante la toma de decisiones pertinentes. Se apoya en gran medida en el Big Data con el an\u00e1lisis de datos y el desarrollo de los mismos. Podemos distribuir las soluciones de inteligencia de negocio en tres categor\u00edas:</p> <ul> <li>Herramientas para la gesti\u00f3n de datos (del ingl\u00e9s, data management tools).    Permiten desde la depuraci\u00f3n y estandarizaci\u00f3n de datos de procedencia diversa hasta su extracci\u00f3n, transformaci\u00f3n y traslado a un determinado sistema.</li> <li>Las aplicaciones para descubrir nuevos datos (del ingl\u00e9s, data discovery applications). Permiten recopilar y evaluar nueva informaci\u00f3n (datamining o miner\u00eda de datos), y aplicar sobre esa informaci\u00f3n nueva o sobre la ya disponible t\u00e9cnica de an\u00e1lisis predictivo para realizar proyecciones de futuro.</li> <li>Herramientas de reporting. Una vez recopilada y tratada toda esa informaci\u00f3n preexistente o nueva, ayudan a las empresas a visualizarla de manera gr\u00e1fica e intuitiva. Tambi\u00e9n sirven para integrarla en cuadros de mando que midan si se cumplen o no determinados KPIs (Key Performance Indicator), o pueden incluso generar todo tipo de informes de reporting. Todos los ERPs actuales ofrecen herramientas BI, adem\u00e1s como ejemplo tenemos QLinkView, Microsoft Power BI, Oracle BI, SAP BI, IBM BI\u2026 </li> </ul>"},{"location":"1_2_Sistemas_Informacion/#elementos-de-un-sistema-de-informacion","title":"Elementos de un Sistema de Informaci\u00f3n","text":"<ul> <li>Procedimientos: Conjunto de reglas y m\u00e9todos que definen c\u00f3mo se debe operar el sistema.</li> <li>Informaci\u00f3n: Datos estructurados que se convierten en conocimiento \u00fatil para la empresa.</li> <li> <p>Usuarios:</p> <ul> <li>Directos: Empleados que interact\u00faan con el sistema.</li> <li>Indirectos: Clientes, proveedores, socios.</li> <li>Administradores: Responsables del mantenimiento y configuraci\u00f3n.</li> <li>Directivos: Toman decisiones basadas en la informaci\u00f3n proporcionada.</li> </ul> </li> <li> <p>Equipos: Hardware y software que soportan el funcionamiento del sistema.</p> </li> </ul>"},{"location":"1_2_Sistemas_Informacion/#importancia-de-los-si-en-la-empresa","title":"Importancia de los SI en la empresa","text":"<p>Los sistemas de informaci\u00f3n permiten:</p> <ul> <li>Automatizar procesos</li> <li>Mejorar la eficiencia operativa</li> <li>Facilitar la toma de decisiones</li> <li>Reducir costes</li> <li>Aumentar la competitividad</li> <li>Cumplir con normativas y est\u00e1ndares</li> </ul> <p>Su correcta implementaci\u00f3n y uso son fundamentales para el \u00e9xito de cualquier organizaci\u00f3n moderna.</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_3_Sistemas_Clave/","title":"1.3. Sistemas Clave en la Empresa","text":"<p>Los sistemas clave dentro de un sistema empresarial son los siguientes: </p>"},{"location":"1_3_Sistemas_Clave/#dms-document-management-system","title":"DMS \u2013 Document Management System","text":"<p>Un sistema de gesti\u00f3n documental (DMS) es un software que permite almacenar, gestionar y controlar documentos electr\u00f3nicos. Su objetivo es facilitar el acceso, la seguridad, la trazabilidad y la colaboraci\u00f3n en torno a la documentaci\u00f3n de la empresa.</p>"},{"location":"1_3_Sistemas_Clave/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<ul> <li>Almacenamiento centralizado: Todos los documentos se guardan en un repositorio \u00fanico.</li> <li>Control de versiones: Se mantiene un historial de cambios y versiones anteriores.</li> <li>Seguridad: Gesti\u00f3n de permisos, cifrado y auditor\u00eda de accesos.</li> <li>B\u00fasqueda avanzada: Indexaci\u00f3n por metadatos, contenido y etiquetas.</li> <li>Integraci\u00f3n: Compatible con ERP, CRM y otros sistemas empresariales.</li> </ul> <p>Ejemplos de DMS</p> <ul> <li>Alfresco</li> <li>OpenKm</li> <li>SharePoint</li> <li>DocuWare</li> <li>M-Files</li> <li>\u00bfAdministrador de Archivos?</li> </ul> Sistema de Gesti\u00f3n Documental (DMS)."},{"location":"1_3_Sistemas_Clave/#erp-enterprise-resource-planning","title":"ERP \u2013 Enterprise Resource Planning","text":"<p>Un ERP es un sistema de planificaci\u00f3n de recursos empresariales que integra todos los procesos de negocio en una \u00fanica plataforma. Est\u00e1 compuesto por m\u00f3dulos que gestionan \u00e1reas como finanzas, producci\u00f3n, log\u00edstica, recursos humanos, ventas, compras, etc.</p>"},{"location":"1_3_Sistemas_Clave/#caracteristicas-del-erp","title":"Caracter\u00edsticas del ERP","text":"<ul> <li>Integral: Cubre todas las \u00e1reas funcionales de la empresa.</li> <li>Modular: Cada m\u00f3dulo puede activarse seg\u00fan las necesidades.</li> <li>Adaptable: Se configura seg\u00fan el tama\u00f1o y sector de la empresa.</li> <li>Interconectado: Los datos fluyen entre m\u00f3dulos sin duplicidad.</li> </ul>"},{"location":"1_3_Sistemas_Clave/#tipos-de-erp","title":"Tipos de ERP","text":"<ul> <li>A medida: Desarrollado espec\u00edficamente para una empresa.</li> <li>Est\u00e1ndar: Soluci\u00f3n gen\u00e9rica adaptada a m\u00faltiples sectores.</li> <li>Local: Instalado en servidores propios.</li> <li>En la nube: Acceso remoto, mantenimiento externo.</li> <li>Vertical: Especializado en un sector (salud, educaci\u00f3n, etc.).</li> <li>Horizontal: Aplicable a cualquier tipo de empresa.</li> <li>C\u00f3digo abierto: Libre acceso al c\u00f3digo fuente.</li> <li>Propietario: Licencia cerrada, soporte del fabricante.</li> </ul>"},{"location":"1_3_Sistemas_Clave/#modulos-comunes","title":"M\u00f3dulos comunes","text":"<ul> <li>Finanzas y contabilidad</li> <li>Gesti\u00f3n de inventario</li> <li>Producci\u00f3n y planificaci\u00f3n</li> <li>Recursos humanos</li> <li>Ventas y marketing</li> <li>Compras y proveedores</li> <li>Atenci\u00f3n al cliente</li> </ul> <p>Ejemplos de ERP</p> <ul> <li>SAP</li> <li>Microsoft Dynamics 365</li> <li>Oracle E-Business Suite</li> <li>Odoo</li> <li>Sage X3</li> </ul> Planificaci\u00f3n de Recursos Empresariales (ERP)."},{"location":"1_3_Sistemas_Clave/#crm-customer-relationship-management","title":"CRM \u2013 Customer Relationship Management","text":"<p>El CRM es un sistema que permite gestionar las relaciones con los clientes, desde el primer contacto hasta el servicio postventa. Su objetivo es mejorar la experiencia del cliente, aumentar la fidelizaci\u00f3n y optimizar las estrategias de marketing y ventas.</p>"},{"location":"1_3_Sistemas_Clave/#tipos-de-crm","title":"Tipos de CRM","text":"<ul> <li>Operativo: Automatiza procesos comerciales como ventas, atenci\u00f3n al cliente y marketing.</li> <li>Anal\u00edtico: Analiza datos de clientes para identificar patrones, segmentar mercados y predecir comportamientos.</li> <li>Colaborativo: Facilita la comunicaci\u00f3n entre departamentos y canales (tel\u00e9fono, email, redes sociales).</li> </ul>"},{"location":"1_3_Sistemas_Clave/#funcionalidades-clave","title":"Funcionalidades clave","text":"<ul> <li>Gesti\u00f3n de contactos y cuentas</li> <li>Seguimiento de oportunidades de venta</li> <li>Automatizaci\u00f3n de campa\u00f1as de marketing</li> <li>Servicio de atenci\u00f3n al cliente</li> <li>Informes y an\u00e1lisis de rendimiento</li> </ul> <p>Ejemplos de CRM</p> <ul> <li>Salesforce</li> <li>SugarCRM</li> <li>VTiger</li> <li>Microsoft Dynamics 365</li> <li>Zoho CRM</li> <li>HubSpot</li> </ul> Gesti\u00f3n de Relaciones con Clientes (CRM)."},{"location":"1_3_Sistemas_Clave/#otros-sistemas-empresariales","title":"Otros Sistemas Empresariales","text":"<p>Adem\u00e1s de los sistemas ERP, CRM y DMS, existen otras soluciones tecnol\u00f3gicas que permiten gestionar \u00e1reas espec\u00edficas de la empresa con gran eficacia.</p>"},{"location":"1_3_Sistemas_Clave/#mes-manufacturing-execution-system","title":"MES \u2013 Manufacturing Execution System","text":"<p>El MES es un sistema de ejecuci\u00f3n de fabricaci\u00f3n que permite controlar y monitorizar la producci\u00f3n en tiempo real. Su objetivo es mejorar la eficiencia, la trazabilidad y la calidad en los procesos industriales.</p>"},{"location":"1_3_Sistemas_Clave/#funcionalidades-del-mes","title":"Funcionalidades del MES","text":"<ul> <li>Control de \u00f3rdenes de producci\u00f3n</li> <li>Registro de tiempos y consumos</li> <li>Supervisi\u00f3n de maquinaria y operarios</li> <li>Gesti\u00f3n de calidad y trazabilidad</li> <li>Integraci\u00f3n con ERP y sistemas SCADA</li> </ul> <p>Ejemplo destacado</p> <p>MesBook, una soluci\u00f3n espa\u00f1ola que ofrece control total de la planta de producci\u00f3n con enfoque en eficiencia y rentabilidad. Valenciana fruto de Lanzadera</p> Manufacturing Execution System."},{"location":"1_3_Sistemas_Clave/#bi-business-intelligence","title":"BI \u2013 Business Intelligence","text":"<p>La inteligencia de negocio (BI) es el conjunto de herramientas y metodolog\u00edas que permiten transformar datos en informaci\u00f3n \u00fatil para la toma de decisiones estrat\u00e9gicas.</p>"},{"location":"1_3_Sistemas_Clave/#componentes-de-bi","title":"Componentes de BI","text":"<ul> <li>ETL (Extract, Transform, Load): Procesos para extraer datos de m\u00faltiples fuentes, transformarlos y cargarlos en almacenes de datos.</li> <li>Data Warehouse: Almac\u00e9n centralizado de datos estructurados.</li> <li>Dashboards: Paneles visuales con indicadores clave (KPIs).</li> <li>Miner\u00eda de datos: T\u00e9cnicas estad\u00edsticas para descubrir patrones ocultos.</li> </ul> <p>Ejemplos de herramientas BI</p> <ul> <li>Power BI</li> <li>Tableau</li> <li>QlikView</li> <li>SAP BusinessObjects</li> <li>Elastic stack</li> </ul>  Business Intelligence."},{"location":"1_3_Sistemas_Clave/#webs-corporativas-y-ecommerce","title":"Webs Corporativas y eCommerce","text":"<p>Las plataformas web permiten a las empresas tener presencia online, ofrecer informaci\u00f3n institucional y vender productos o servicios a trav\u00e9s de tiendas virtuales.</p>"},{"location":"1_3_Sistemas_Clave/#funcionalidades-comunes","title":"Funcionalidades comunes","text":"<ul> <li>Cat\u00e1logo de productos</li> <li>Carrito de compra</li> <li>Pasarela de pago</li> <li>Gesti\u00f3n de pedidos y env\u00edos</li> <li>Integraci\u00f3n con ERP y CRM</li> </ul> <p>Ejemplos de plataformas eCommerce</p> <ul> <li>Magento</li> <li>PrestaShop</li> <li>WooCommerce</li> <li>Shopify</li> </ul>  Web Corporativa."},{"location":"1_3_Sistemas_Clave/#sistemas-especificos-por-area","title":"Sistemas Espec\u00edficos por \u00c1rea","text":""},{"location":"1_3_Sistemas_Clave/#recursos-humanos-rrhh","title":"Recursos Humanos (RRHH)","text":"<ul> <li>Gesti\u00f3n de n\u00f3minas</li> <li>Control de asistencia</li> <li>Evaluaci\u00f3n de desempe\u00f1o</li> <li>Formaci\u00f3n y desarrollo</li> <li>Reclutamiento y selecci\u00f3n</li> </ul>"},{"location":"1_3_Sistemas_Clave/#contabilidad-y-finanzas","title":"Contabilidad y Finanzas","text":"<ul> <li>Presupuestos</li> <li>Balances</li> <li>Cuentas por cobrar y pagar</li> <li>Declaraciones fiscales</li> <li>Auditor\u00edas</li> </ul>"},{"location":"1_3_Sistemas_Clave/#calidad","title":"Calidad","text":"<ul> <li>Gesti\u00f3n de normas ISO</li> <li>Control de calidad en procesos</li> <li>Auditor\u00edas internas</li> <li>No conformidades</li> </ul>"},{"location":"1_3_Sistemas_Clave/#mantenimiento","title":"Mantenimiento","text":"<ul> <li>Mantenimiento preventivo y correctivo</li> <li>Gesti\u00f3n de activos</li> <li>Planificaci\u00f3n de intervenciones</li> <li>Registro de incidencias</li> </ul>"},{"location":"1_3_Sistemas_Clave/#gestion-de-proyectos","title":"Gesti\u00f3n de Proyectos","text":"<ul> <li>Planificaci\u00f3n de tareas</li> <li>Asignaci\u00f3n de recursos</li> <li>Control de tiempos y costes</li> <li>Seguimiento de hitos</li> <li>Informes de avance</li> </ul>"},{"location":"1_3_Sistemas_Clave/#bpms-business-process-management-system","title":"BPMS \u2013 Business Process Management System","text":"<p>Sistema para modelar, automatizar y optimizar procesos de negocio. Permite definir flujos de trabajo, asignar responsabilidades y medir resultados.</p> <p>Ejemplos: Bizagi, BonitaSoft, Appian</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_4_ERP_CRM/","title":"1.4. ERP-CRM","text":""},{"location":"1_4_ERP_CRM/#que-es-un-erp","title":"\u00bfQu\u00e9 es un ERP?","text":"Youtube: \u00bfQu\u00e9 es un ERP y para qu\u00e9 sirve? <p>Un ERP (Enterprise Resource Planning o Planificaci\u00f3n de Recursos Empresariales) es un sistema dise\u00f1ado para planificar, modelar y automatizar la mayor\u00eda de los procesos de una empresa, tales como: finanzas, \u00e1rea comercial, log\u00edstica, producci\u00f3n, contabilidad, inventario, etc.</p> <p>Organiza y unifica toda la informaci\u00f3n de la empresa en un solo lugar, facilitando as\u00ed las tareas empresariales. El ERP utiliza una arquitectura modular, y cada m\u00f3dulo se encarga de gestionar un \u00e1rea diferente: finanzas, comercial, log\u00edstica, producci\u00f3n, contabilidad, inventario\u2026</p> Modulos ERP."},{"location":"1_4_ERP_CRM/#ventajas-de-un-sistema-erp","title":"Ventajas de un sistema ERP","text":"<p>Las principales ventajas de estos sistemas son:</p> <ul> <li>Automatizaci\u00f3n de los procesos empresariales.  </li> <li>Disponibilidad de la informaci\u00f3n de la empresa en una misma plataforma.  </li> <li>Integraci\u00f3n de las distintas bases de datos en un \u00fanico programa.  </li> <li>Ahorro de tiempo y costes.</li> </ul> <p>Adem\u00e1s, el ERP ofrece integraci\u00f3n con soluciones de BI (Business Intelligence), lo que permite generar informes sobre el estado de la empresa directamente a partir de los datos del sistema ERP. Esto proporciona un conocimiento detallado y actualizado que resulta esencial para analizar y mejorar procesos internos como marketing, ventas, organizaci\u00f3n y otros aspectos clave.</p>"},{"location":"1_4_ERP_CRM/#que-empresas-necesitan-un-sistema-erp","title":"\u00bfQu\u00e9 empresas necesitan un sistema ERP?","text":"<p>Un sistema ERP es adecuado para todo tipo de empresas, tanto multinacionales como pymes. Gracias a los diferentes m\u00f3dulos personalizables, cualquier empresa \u2014independientemente de sus procesos o del sector al que pertenezca\u2014 puede adaptar su propio ERP.</p> <p>Existen proveedores especializados en la implementaci\u00f3n de determinados ERPs, ya sea por tipo de producto o sector, lo que permite obtener mejores resultados tras su adquisici\u00f3n.</p>"},{"location":"1_4_ERP_CRM/#que-es-un-crm","title":"\u00bfQu\u00e9 es un CRM?","text":"<p>Un CRM (Customer Relationship Management o Gesti\u00f3n de Relaciones con Clientes) es una soluci\u00f3n orientada a gestionar tres \u00e1reas b\u00e1sicas: gesti\u00f3n comercial, marketing y atenci\u00f3n al cliente o postventa.</p> <p>El uso de un CRM forma parte de una estrategia centrada en el cliente, en la que todas las acciones tienen como objetivo final mejorar el servicio y la relaci\u00f3n con los clientes actuales y potenciales.</p> <p>La herramienta CRM y la orientaci\u00f3n al cliente ofrecen resultados demostrables, tanto por una gesti\u00f3n comercial estructurada que mejora la productividad en ventas, como por el conocimiento profundo del cliente que permite campa\u00f1as de marketing m\u00e1s efectivas.</p> <p>Las funciones de atenci\u00f3n al cliente de un CRM tambi\u00e9n fomentan la fidelizaci\u00f3n y satisfacci\u00f3n del cliente, lo que tiene un impacto muy positivo en t\u00e9rminos de ventas recurrentes y cruzadas.</p> CRM."},{"location":"1_4_ERP_CRM/#propuesta-debate","title":"Propuesta debate","text":"<p>\ud83d\udd0d Investiga algunos ERPs actuales disponibles en el mercado.</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_5_ERP_actuales/","title":"1.5. Historia y caracter\u00edsticas de los ERP","text":""},{"location":"1_5_ERP_actuales/#historia-del-erp","title":"Historia del ERP","text":"<p>Los sistemas ERP han evolucionado con el tiempo de la siguiente manera:</p> <p>Los antecedentes del ERP fueron los sistemas MRP (Material Requirements Planning \u2013 Planificaci\u00f3n de Requerimientos de Materiales).</p> <ul> <li>En los a\u00f1os 50, los sistemas MRP permit\u00edan realizar operaciones como: facturaci\u00f3n, administraci\u00f3n de n\u00f3minas, control de inventario...</li> <li>En los a\u00f1os 60 y 70, los MRP evolucionaron ayudando a reducir costes.</li> <li>En los a\u00f1os 80, los MRP pasaron a llamarse MRP II (Manufacturing Resource Planning \u2013 Planificaci\u00f3n de Recursos de Manufactura).</li> <li>En los a\u00f1os 90, el MRP II se expandi\u00f3 a \u00e1reas como Recursos Humanos, Finanzas, Gesti\u00f3n de Proyectos... dando lugar al ERP.</li> </ul> Historia del ERP."},{"location":"1_5_ERP_actuales/#clasificacion-de-los-erp","title":"Clasificaci\u00f3n de los ERP","text":""},{"location":"1_5_ERP_actuales/#segun-el-diseno","title":"Seg\u00fan el dise\u00f1o","text":"<ul> <li>ERP a medida: Es la soluci\u00f3n m\u00e1s costosa, ya que se desarrolla espec\u00edficamente para una empresa concreta. Se adapta al 100% al negocio, pero su principal inconveniente es el alto coste.</li> <li>ERP est\u00e1ndar: Tiene la ventaja de estar probado y ser m\u00e1s f\u00e1cil de implementar. Gracias a sus m\u00f3dulos adicionales, es altamente personalizable y m\u00e1s econ\u00f3mico que uno a medida. Muy utilizado por peque\u00f1as empresas.</li> </ul>"},{"location":"1_5_ERP_actuales/#segun-la-instalacion","title":"Seg\u00fan la instalaci\u00f3n","text":"<ul> <li>ERP local: Los servidores y dispositivos est\u00e1n instalados en la propia empresa. Su uso se limita a los equipos donde est\u00e1 instalado.</li> <li>ERP en la nube: Los servidores est\u00e1n alojados en la nube, lo que permite acceder desde cualquier dispositivo con conexi\u00f3n a Internet. La informaci\u00f3n se guarda en los servidores del proveedor, que suelen realizar copias de seguridad para evitar p\u00e9rdidas.</li> </ul>"},{"location":"1_5_ERP_actuales/#segun-solucion-vertical-u-horizontal","title":"Seg\u00fan soluci\u00f3n vertical u horizontal","text":"<ul> <li>ERP vertical: Dise\u00f1ado espec\u00edficamente para un sector concreto. Por ejemplo, bodegas y hospitales suelen usar este tipo de ERP.</li> <li>ERP horizontal: Puede servir para cualquier empresa, aunque requiere m\u00e1s adaptaci\u00f3n que uno vertical.</li> </ul>"},{"location":"1_5_ERP_actuales/#segun-el-tipo-de-software","title":"Seg\u00fan el tipo de software","text":"<ul> <li>ERP de c\u00f3digo abierto: Permite acceder libremente al c\u00f3digo fuente, lo que facilita su modificaci\u00f3n sin pagar al desarrollador. Requiere personal inform\u00e1tico capacitado. Su principal inconveniente es el tiempo necesario para desarrollar los m\u00f3dulos personalizados.</li> </ul> ERP de C\u00f3digo Abierto. <ul> <li>ERP de c\u00f3digo privado: No permite acceso al c\u00f3digo fuente. Solo puede ser modificado por los desarrolladores. Las pymes suelen optar por este tipo de ERP, ya que no requieren funcionalidades muy espec\u00edficas.</li> </ul> Ranking ERPs."},{"location":"1_5_ERP_actuales/#caracteristicas-de-los-erp","title":"Caracter\u00edsticas de los ERP","text":"<p>Las principales caracter\u00edsticas de un sistema ERP son:</p> <ul> <li>Integral: Todas las \u00e1reas de la empresa se comunican e intercambian informaci\u00f3n durante la ejecuci\u00f3n de los procesos. La gesti\u00f3n y control deben estar integrados para evitar duplicidades y asegurar eficiencia y trazabilidad.</li> <li>Modular: Cada empresa tiene procesos y departamentos distintos. El ERP debe permitir elegir los componentes necesarios: compras, ventas, materiales, finanzas, almac\u00e9n, recursos humanos, etc.</li> <li>Adaptable: Debe poder configurarse seg\u00fan los procesos, est\u00e1ndares y par\u00e1metros espec\u00edficos de cada empresa.</li> </ul>"},{"location":"1_5_ERP_actuales/#propuesta-debate-continuacion","title":"Propuesta debate continuaci\u00f3n","text":"<p>\ud83d\udccc Clasifica los ERPs que has investigado en la actividad del punto anterior seg\u00fan sus caracter\u00edsticas.</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_6_ERP_Libres_Privativos/","title":"1.6. Elecci\u00f3n de ERP. Aspectos a tener en cuenta.","text":""},{"location":"1_6_ERP_Libres_Privativos/#comparativa-entre-erps","title":"Comparativa entre ERPs","text":"<p>Los ERPs propietarios son elegidos por muchas empresas por la seguridad que ofrece trabajar con grandes compa\u00f1\u00edas especializadas en desarrollo de software. Adem\u00e1s, estos ERPs suelen ser m\u00e1s intuitivos en su uso gracias a interfaces m\u00e1s refinadas.</p> <p>Sin embargo, las peque\u00f1as y medianas empresas no tienen necesidades tan complejas; buscan m\u00f3dulos flexibles y personalizables. Esto hace que los ERPs de software libre sean m\u00e1s atractivos para este tipo de empresas.</p> <p>Para resolver problemas de soporte y facilidad de uso, las organizaciones que desarrollan ERPs de software libre ofrecen tutoriales que ayudan al usuario a entender el entorno de aplicaci\u00f3n. Adem\u00e1s, gracias al crecimiento de este tipo de soluciones, los desarrolladores est\u00e1n creando software cada vez m\u00e1s est\u00e9tico y manejable. Al tener acceso al c\u00f3digo fuente, los errores pueden compartirse y corregirse por otros usuarios.</p>"},{"location":"1_6_ERP_Libres_Privativos/#costes-e-implementacion","title":"Costes e implementaci\u00f3n","text":"<p>Software como SAP u Oracle requiere una gran inversi\u00f3n inicial, no solo por la compra de la licencia, sino tambi\u00e9n por los costes derivados del proceso de implementaci\u00f3n. Muchas empresas, tanto grandes como peque\u00f1as, no pueden asumir estos gastos, por lo que optan por ERPs como Odoo o Dolibarr.</p> <p>El proceso de implementaci\u00f3n con software propietario es m\u00e1s sencillo en cuanto a complejidad, pero suele ser m\u00e1s lento que con software de c\u00f3digo abierto. La mayor\u00eda de estos ERPs son modulares, lo que permite a las empresas instalar solo los m\u00f3dulos necesarios, reduciendo as\u00ed el tiempo de instalaci\u00f3n.</p>"},{"location":"1_6_ERP_Libres_Privativos/#tendencias-del-mercado","title":"Tendencias del mercado","text":"<p>En cuanto a la situaci\u00f3n del mercado, los ERPs de c\u00f3digo abierto est\u00e1n ganando terreno frente a las soluciones propietarias. Aunque llegaron m\u00e1s tarde, han conseguido ponerse al d\u00eda.</p> <p>Adem\u00e1s de los factores mencionados y las posibilidades que ofrecen, otro punto clave que ha contribuido a su \u00e9xito ha sido el desarrollo de aplicaciones compatibles con ERPs existentes. Es decir, estos sistemas de gesti\u00f3n de software libre han logrado trabajar conjuntamente con m\u00f3dulos ofrecidos por ERPs propietarios.</p> <p>Incluso en un escenario donde todos los consumidores optaran por software propietario, la presencia del software libre como alternativa reduce los precios, aumentando su valor. Esta compatibilidad se deriva de los efectos de red: las relaciones entre empresas, como clientes y proveedores en log\u00edstica y compras, hacen que estas interconexiones sean un factor competitivo clave.</p>"},{"location":"1_6_ERP_Libres_Privativos/#eleccion-del-erp","title":"Elecci\u00f3n del ERP","text":"<p>Al elegir entre un software u otro, es importante tener en cuenta diversos factores y definir claramente las necesidades que queremos cubrir en nuestra empresa tras la instalaci\u00f3n de un ERP.</p> Matriz de decisi\u00f3n de ERPs."},{"location":"1_6_ERP_Libres_Privativos/#principales-sistemas-erp-crm-del-mercado","title":"Principales Sistemas ERP-CRM del Mercado","text":"Logos de principales ERPs. <p>A continuaci\u00f3n se presentan algunos de los principales sistemas ERP y CRM disponibles actualmente. Esta tabla resume sus tipos y una breve descripci\u00f3n que permite identificar sus principales caracter\u00edsticas y enfoques empresariales.</p> Sistema Tipo Descripci\u00f3n breve SAP ERP ERP Soluci\u00f3n robusta para grandes empresas, altamente personalizable. Oracle NetSuite ERP ERP en la nube, ideal para medianas empresas. Microsoft Dynamics 365 ERP/CRM Plataforma integrada que combina ERP y CRM. Salesforce CRM L\u00edder en gesti\u00f3n de relaciones con clientes, basado en la nube. Zoho CRM CRM Soluci\u00f3n asequible para pymes, con buena integraci\u00f3n. Odoo ERP/CRM Software libre modular, adaptable a m\u00faltiples necesidades. Sage X3 ERP ERP orientado a la gesti\u00f3n financiera y producci\u00f3n. <p>La tabla muestra una clara diferenciaci\u00f3n entre sistemas orientados a la planificaci\u00f3n de recursos empresariales (ERP) y aquellos centrados en la gesti\u00f3n de relaciones con clientes (CRM). Algunos productos, como Microsoft Dynamics 365 y Odoo, ofrecen una soluci\u00f3n h\u00edbrida que permite integrar ambos mundos, lo cual es especialmente \u00fatil para empresas que buscan una plataforma unificada.</p> <p>Escalabilidad y tama\u00f1o empresarial</p> <ul> <li>SAP ERP y Oracle NetSuite est\u00e1n dise\u00f1ados para empresas medianas y grandes, con necesidades complejas de gesti\u00f3n financiera, log\u00edstica y producci\u00f3n.</li> <li>Zoho CRM y Odoo, por su flexibilidad y coste reducido, son opciones atractivas para pymes y startups que requieren una soluci\u00f3n funcional sin grandes inversiones iniciales.</li> </ul> <p>Modelo de despliegue</p> <ul> <li>Salesforce, NetSuite y Zoho CRM operan bajo modelos SaaS (Software as a Service), lo que facilita su implementaci\u00f3n y mantenimiento, al tiempo que reduce la necesidad de infraestructura local.</li> <li>SAP ERP y Sage X3 suelen requerir instalaciones locales o h\u00edbridas, lo que implica mayor control pero tambi\u00e9n mayor complejidad t\u00e9cnica.</li> </ul> <p>Licenciamiento y comunidad - Odoo destaca por su modelo de c\u00f3digo abierto, lo que permite personalizaciones profundas y una comunidad activa que contribuye a su evoluci\u00f3n. - En contraste, SAP, Salesforce y Microsoft Dynamics operan bajo licencias propietarias, con soporte profesional y garant\u00edas de servicio, aunque a un coste m\u00e1s elevado.</p> <p>Integraci\u00f3n y compatibilidad - Microsoft Dynamics 365 se integra de forma nativa con el ecosistema de Microsoft (Office, Azure, Power BI), lo que lo convierte en una opci\u00f3n estrat\u00e9gica para empresas que ya utilizan estas tecnolog\u00edas. - Salesforce ofrece una amplia gama de integraciones con herramientas de marketing, atenci\u00f3n al cliente y an\u00e1lisis de datos, siendo especialmente fuerte en entornos comerciales.</p> <p>Reflexi\u00f3n T\u00e9cnica</p> <p>La elecci\u00f3n de un sistema ERP-CRM no debe basarse \u00fanicamente en su popularidad o coste, sino en una evaluaci\u00f3n profunda de los procesos internos de la empresa, su proyecci\u00f3n de crecimiento, y la capacidad t\u00e9cnica del equipo para implementar y mantener la soluci\u00f3n. Adem\u00e1s, es fundamental considerar aspectos como:</p> <ul> <li>Requisitos de hardware y software</li> <li>Capacidad de personalizaci\u00f3n</li> <li>Soporte t\u00e9cnico y formaci\u00f3n</li> <li>Seguridad y cumplimiento normativo (GDPR, ISO, etc.)</li> </ul>"},{"location":"1_6_ERP_Libres_Privativos/#tipos-de-licencia-de-los-sistemas-erp-crm","title":"Tipos de Licencia de los Sistemas ERP-CRM","text":"<p>Los sistemas ERP-CRM pueden distribuirse bajo diferentes modelos de licencia:</p> <ul> <li>Propietaria: Requiere pago por uso o suscripci\u00f3n. Ejemplo: SAP, Salesforce.</li> <li>Software Libre / Open Source: C\u00f3digo abierto, permite modificaci\u00f3n y distribuci\u00f3n. Ejemplo: Odoo, ERPNext.</li> <li>Freemium: Versi\u00f3n gratuita con funcionalidades limitadas, ampliables mediante pago. Ejemplo: Zoho CRM.</li> <li>SaaS (Software as a Service): Acceso mediante suscripci\u00f3n en la nube. Ejemplo: NetSuite, Dynamics 365.</li> </ul> <p>Tabla Comparativa de tipo de licencia de Sistemas ERP-CRM</p> Caracter\u00edstica SAP ERP Odoo Salesforce Dynamics 365 Oracle NetSuite Tipo ERP ERP/CRM CRM ERP/CRM ERP Licencia Propietaria Libre SaaS SaaS SaaS Escalabilidad Alta Media-Alta Alta Alta Alta Personalizaci\u00f3n Completa Modular Alta Alta Alta Integraci\u00f3n Compleja Sencilla Excelente Excelente Excelente Coste Elevado Bajo-Medio Medio-Alto Medio-Alto Medio-Alto Comunidad/Soporte Amplio Activa Profesional Profesional Profesional"},{"location":"1_6_ERP_Libres_Privativos/#sistemas-operativos-recomendados","title":"Sistemas Operativos Recomendados","text":"<p>Cada sistema ERP-CRM tiene requisitos espec\u00edficos de sistema operativo, que dependen de su arquitectura, modelo de despliegue (local o en la nube), y compatibilidad con otros componentes del sistema.</p> Sistema ERP-CRM SO Recomendado SAP ERP Windows Server, Linux Odoo Linux (Ubuntu, Debian) Salesforce Web-based (independiente del SO) Dynamics 365 Windows Server, Web-based Zoho CRM Web-based Oracle NetSuite Web-based (independiente del SO) <p>La tabla presentada ofrece una visi\u00f3n clara y comparativa de los sistemas operativos recomendados para distintos ERP-CRM, destacando c\u00f3mo el modelo de despliegue influye directamente en los requisitos t\u00e9cnicos. Se observa que las soluciones tradicionales como SAP ERP y Odoo requieren entornos espec\u00edficos (Windows Server o distribuciones Linux), mientras que las plataformas modernas basadas en la nube \u2014como Salesforce, Zoho CRM y Oracle NetSuite\u2014 eliminan esa dependencia, permitiendo acceso multiplataforma desde cualquier sistema operativo con navegador web.</p> <p>Este enfoque refleja la evoluci\u00f3n del software empresarial hacia modelos SaaS, donde la infraestructura local pierde protagonismo frente a la flexibilidad, escalabilidad y accesibilidad que ofrece la nube. Adem\u00e1s, facilita la adopci\u00f3n en organizaciones con entornos heterog\u00e9neos, reduciendo barreras t\u00e9cnicas y mejorando la experiencia del usuario final.</p> <p>En conjunto, la tabla sirve como herramienta \u00fatil para orientar decisiones de implementaci\u00f3n seg\u00fan las capacidades del entorno inform\u00e1tico disponible.</p>"},{"location":"1_6_ERP_Libres_Privativos/#sistemas-gestores-de-bases-de-datos-asociados-a-los-principales-erp-crm","title":"Sistemas Gestores de Bases de Datos asociados a los principales ERP-CRM","text":"<p>Los sistemas ERP-CRM requieren una base de datos robusta, escalable y segura para almacenar y gestionar grandes vol\u00famenes de informaci\u00f3n empresarial. La elecci\u00f3n del SGBD influye directamente en el rendimiento, la capacidad de integraci\u00f3n y la escalabilidad del sistema.</p> Sistema ERP-CRM SGBD Compatible/Recomendado SAP ERP SAP HANA, Oracle, SQL Server Oracle NetSuite Oracle Cloud Infrastructure (OCI) Odoo PostgreSQL Salesforce Propietario (multi-tenant) Microsoft Dynamics 365 SQL Server Zoho CRM Propietario <ul> <li> <p>SAP ERP</p> <ul> <li>SAP HANA es el SGBD nativo y recomendado por SAP. Se trata de una base de datos en memoria que permite procesamiento en tiempo real, ideal para entornos de alta demanda.</li> <li>Oracle y SQL Server son compatibles en versiones anteriores o en instalaciones h\u00edbridas, aunque SAP est\u00e1 migrando progresivamente hacia HANA como est\u00e1ndar.</li> <li>Ventajas: rendimiento extremo, an\u00e1lisis predictivo, integraci\u00f3n con SAP BW y SAP Fiori.</li> <li>Consideraciones: requiere hardware certificado y conocimientos avanzados en administraci\u00f3n de bases en memoria.</li> </ul> </li> <li> <p>Oracle NetSuite</p> <ul> <li>Utiliza la infraestructura de Oracle Cloud Infrastructure (OCI), con bases de datos Oracle altamente optimizadas para SaaS.</li> <li>Arquitectura multitenant, escalable y segura, con replicaci\u00f3n autom\u00e1tica y recuperaci\u00f3n ante desastres.</li> <li>Ventajas: rendimiento empresarial, integraci\u00f3n nativa con otros servicios Oracle (Analytics, Autonomous DB).</li> <li>Consideraciones: acceso limitado al backend, pero con potentes herramientas de personalizaci\u00f3n mediante SuiteScript y SuiteAnalytics.</li> </ul> </li> <li> <p>Odoo</p> <ul> <li>Utiliza PostgreSQL como \u00fanico motor de base de datos soportado oficialmente.</li> <li>PostgreSQL ofrece una excelente relaci\u00f3n rendimiento/estabilidad, con soporte para transacciones ACID, extensiones como PostGIS y una comunidad activa.</li> <li>Ventajas: c\u00f3digo abierto, alta fiabilidad, f\u00e1cil de escalar horizontalmente.</li> <li>Consideraciones: se recomienda ajustar par\u00e1metros como <code>work_mem</code>, <code>shared_buffers</code> y <code>effective_cache_size</code> para entornos productivos.</li> </ul> </li> <li> <p>Salesforce</p> <ul> <li>Opera sobre una arquitectura multi-tenant con un sistema de base de datos propietario altamente optimizado para entornos SaaS.</li> <li>No se tiene acceso directo al SGBD, pero se interact\u00faa mediante APIs (REST, SOAP) y herramientas como SOQL (Salesforce Object Query Language).</li> <li>Ventajas: alta disponibilidad, replicaci\u00f3n autom\u00e1tica, escalabilidad global.</li> <li>Consideraciones: las limitaciones de consulta y almacenamiento deben ser gestionadas cuidadosamente en grandes vol\u00famenes de datos.</li> </ul> </li> <li> <p>Microsoft Dynamics 365</p> <ul> <li>Utiliza SQL Server como base de datos principal, tanto en instalaciones locales como en entornos cloud (Azure SQL).</li> <li>SQL Server permite integraci\u00f3n con Power BI, Azure Synapse y otras herramientas del ecosistema Microsoft.</li> <li>Ventajas: seguridad avanzada, replicaci\u00f3n, an\u00e1lisis OLAP, compatibilidad con T-SQL.</li> <li>Consideraciones: se recomienda configurar \u00edndices, particiones y planes de mantenimiento para optimizar el rendimiento.</li> </ul> </li> <li> <p>Zoho CRM</p> <ul> <li>Utiliza un sistema de base de datos propietario, dise\u00f1ado para operar en la nube bajo arquitectura SaaS.</li> <li>Al igual que Salesforce, el acceso se realiza mediante APIs y herramientas de integraci\u00f3n como Zoho Creator o Zoho Analytics.</li> <li>Ventajas: simplicidad de uso, integraci\u00f3n nativa con otros productos Zoho.</li> <li>Consideraciones: limitado acceso a la estructura interna de la base de datos, lo que puede dificultar auditor\u00edas o migraciones complejas.</li> </ul> </li> </ul> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_7_CRM_Actuales/","title":"1.7. CRM Actual","text":"<p>Una soluci\u00f3n o herramienta CRM (Customer Relationship Management o Gesti\u00f3n de Relaciones con Clientes) puede incorporar distintos tipos de funciones con prop\u00f3sitos complementarios.</p>"},{"location":"1_7_CRM_Actuales/#crm-operativo","title":"CRM Operativo","text":"<p>El CRM operativo permite organizar los procesos empresariales. Por un lado, facilita la coordinaci\u00f3n y estandariza los procedimientos de trabajo de cada departamento. Por otro, permite gestionar las actividades directamente relacionadas con el cliente, como el centro de llamadas, el servicio de asistencia o las campa\u00f1as de marketing.</p> <p>En resumen, optimiza la gesti\u00f3n operativa de la empresa.</p>"},{"location":"1_7_CRM_Actuales/#crm-analitico","title":"CRM Anal\u00edtico","text":"<p>El CRM anal\u00edtico facilita el an\u00e1lisis de la informaci\u00f3n disponible sobre clientes y ventas. El t\u00e9rmino \u201canal\u00edtico\u201d se refiere al procesamiento y tratamiento de datos.</p> <p>Estas herramientas permiten conocer el impacto de la actividad en los resultados de la empresa y la rentabilidad de las distintas unidades de negocio. Esta informaci\u00f3n es muy valiosa, ya que facilita la toma de decisiones e identifica las estrategias comerciales y de marketing m\u00e1s rentables.</p>"},{"location":"1_7_CRM_Actuales/#crm-colaborativo","title":"CRM Colaborativo","text":"<p>El CRM colaborativo centraliza todos los canales de comunicaci\u00f3n utilizados por las partes interesadas (personal, proveedores, clientes\u2026). El objetivo es compartir y centralizar toda la informaci\u00f3n para ofrecer un trato individual y personalizado.</p> <p>Conocer de antemano todas las caracter\u00edsticas de un cliente \u2014como si fuera \u00fanico\u2014 (nombre, apellidos, lugar de residencia, h\u00e1bitos y preferencias de compra) permite segmentar mejor y proponer el producto o servicio ideal en el momento adecuado.</p>"},{"location":"1_7_CRM_Actuales/#modelos-de-crm-mas-utilizados-por-las-empresas","title":"Modelos de CRM m\u00e1s utilizados por las empresas","text":"<p>Un software CRM es un sistema para:</p> <ul> <li>Gestionar autom\u00e1ticamente y de forma centralizada la relaci\u00f3n con el cliente.  </li> <li>Mejorar los intercambios con clientes y contactos en general.  </li> <li>Fidelizar, transmitir una imagen positiva y coherente de la empresa.  </li> <li>Generar leads (clientes potenciales) y aumentar las ventas.  </li> <li>Optimizar procesos comerciales como la prospecci\u00f3n, las ventas y el marketing.</li> </ul>"},{"location":"1_7_CRM_Actuales/#las-soluciones-crm-mas-completas-del-mercado","title":"Las soluciones CRM m\u00e1s completas del mercado","text":"<p>Las soluciones m\u00e1s completas integran los tres tipos de CRM: operativo, anal\u00edtico y colaborativo.</p>"},{"location":"1_7_CRM_Actuales/#sugarcrm","title":"SugarCRM","text":"<p>Herramienta con arquitectura abierta que facilita la sincronizaci\u00f3n con otros programas internos y aplicaciones de terceros. Prioriza la flexibilidad, el intercambio de informaci\u00f3n y la facilidad de uso.</p>"},{"location":"1_7_CRM_Actuales/#vtiger","title":"VTiger","text":"<p>Adem\u00e1s de las funciones b\u00e1sicas, incluye gesti\u00f3n de facturaci\u00f3n y pedidos:</p> <ul> <li>Proveedores  </li> <li>Listas de precios  </li> <li>Cat\u00e1logo de productos  </li> <li>Presupuestos  </li> <li>Emisi\u00f3n de facturas</li> </ul> <p>Permite gestionar por contactos, cuentas, proyectos o l\u00edneas de negocio. Ambas herramientas se caracterizan por una presentaci\u00f3n sobria pero intuitiva y eficiente.</p>"},{"location":"1_7_CRM_Actuales/#salesforce","title":"Salesforce","text":"<p>Con m\u00e1s de 17 a\u00f1os de experiencia, Salesforce es una de las soluciones m\u00e1s completas y populares del mercado.</p> <p>La nueva plataforma Lightning Design ofrece un servicio en la nube adaptado a la era digital. No solo mejora las ventas y atrae nuevos clientes, sino que tambi\u00e9n analiza inteligentemente los datos disponibles para anticiparse a sus necesidades.</p>"},{"location":"1_7_CRM_Actuales/#microsoft-dynamics-365","title":"Microsoft Dynamics 365","text":"<p>Gracias a la transformaci\u00f3n digital y al desarrollo de aplicaciones inteligentes en la nube, Microsoft ofrece su propia soluci\u00f3n.</p> <p>Facilita la integraci\u00f3n de un CRM y un ERP, adem\u00e1s de otros dispositivos y herramientas de Microsoft que las empresas utilizan a diario, como Outlook.</p>"},{"location":"1_7_CRM_Actuales/#que-tipo-de-aplicacion-crm-necesita-mi-empresa","title":"\u00bfQu\u00e9 tipo de aplicaci\u00f3n CRM necesita mi empresa?","text":"<p>Depende del uso que vayas a darle, de las necesidades de tu negocio y del tama\u00f1o de tu empresa.</p> <p>Compara funciones, precios y caracter\u00edsticas de los distintos softwares disponibles y elige el que cumpla con todos tus requisitos.</p> <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_8_Modelos_Servicio/","title":"1.8. Modelos de Servicio","text":""},{"location":"1_8_Modelos_Servicio/#tipos-de-despliegue-de-sistemas-empresariales","title":"Tipos de Despliegue de Sistemas Empresariales","text":"<p>Adem\u00e1s de los modelos de servicio, es fundamental entender c\u00f3mo se despliegan los sistemas empresariales en funci\u00f3n de la infraestructura disponible y las necesidades de la organizaci\u00f3n.</p>"},{"location":"1_8_Modelos_Servicio/#on-premise-local","title":"On-Premise (Local)","text":"<p>El software se instala y ejecuta en servidores propios de la empresa, dentro de sus instalaciones f\u00edsicas.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Control total sobre los datos y la infraestructura  </li> <li>Requiere inversi\u00f3n en hardware, licencias y personal t\u00e9cnico  </li> <li>Mayor personalizaci\u00f3n y adaptaci\u00f3n a procesos internos  </li> <li>Ideal para empresas con pol\u00edticas estrictas de seguridad o sin acceso fiable a internet  </li> </ul> <p>Ventajas:</p> <ul> <li>M\u00e1ximo control y privacidad  </li> <li>Integraci\u00f3n profunda con sistemas internos  </li> <li>Sin dependencia de terceros  </li> </ul> <p>Inconvenientes:</p> <ul> <li>Costes elevados de instalaci\u00f3n y mantenimiento  </li> <li>Escalabilidad limitada  </li> <li>Actualizaciones m\u00e1s lentas  </li> </ul>"},{"location":"1_8_Modelos_Servicio/#cloud-en-la-nube","title":"Cloud (En la nube)","text":"<p>El software se aloja en servidores externos gestionados por un proveedor. Se accede a trav\u00e9s de internet.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Modelo de pago por uso o suscripci\u00f3n  </li> <li>Escalabilidad inmediata  </li> <li>Mantenimiento delegado al proveedor  </li> <li>Acceso desde cualquier lugar  </li> </ul> <p>Ventajas:</p> <ul> <li>Reducci\u00f3n de costes iniciales  </li> <li>Flexibilidad y movilidad  </li> <li>Actualizaciones autom\u00e1ticas  </li> </ul> <p>Inconvenientes:</p> <ul> <li>Dependencia de conexi\u00f3n  </li> <li>Menor control sobre los datos  </li> <li>Riesgos de seguridad si no se gestiona adecuadamente  </li> </ul>"},{"location":"1_8_Modelos_Servicio/#hibrido","title":"H\u00edbrido","text":"<p>Combina elementos de los modelos on-premise y cloud. Algunas aplicaciones o datos se alojan localmente, mientras que otros se gestionan en la nube.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Permite mantener datos sensibles en local y aprovechar la nube para otras funciones  </li> <li>Ideal para empresas en transici\u00f3n hacia la nube  </li> <li>Requiere una arquitectura bien dise\u00f1ada para evitar duplicidades y problemas de integraci\u00f3n  </li> </ul> <p>Ventajas:</p> <ul> <li>Equilibrio entre control y flexibilidad  </li> <li>Optimizaci\u00f3n de costes  </li> <li>Adaptaci\u00f3n progresiva a la nube  </li> </ul> <p>Inconvenientes:</p> <ul> <li>Mayor complejidad t\u00e9cnica  </li> <li>Necesidad de sincronizaci\u00f3n entre entornos  </li> <li>Posibles problemas de compatibilidad  </li> </ul> Modelos de despliegue: On-Premise, Cloud y H\u00edbrido."},{"location":"1_8_Modelos_Servicio/#modelos-de-servicio-en-la-nube","title":"Modelos de Servicio en la Nube","text":"<p>La computaci\u00f3n en la nube ha revolucionado la forma en que las empresas acceden, gestionan y explotan sus sistemas de informaci\u00f3n. Permite utilizar recursos inform\u00e1ticos a trav\u00e9s de internet sin necesidad de infraestructura propia, lo que facilita la escalabilidad, el mantenimiento y el acceso remoto.</p>"},{"location":"1_8_Modelos_Servicio/#saas-software-as-a-service","title":"SaaS \u2013 Software as a Service","text":"<p>El software se ofrece como un servicio accesible desde cualquier navegador. El proveedor se encarga del mantenimiento, actualizaciones y seguridad.</p> <p>Ejemplos: ERP en la nube como Odoo Online, CRM como Salesforce, herramientas ofim\u00e1ticas como Microsoft 365 o Google Workspace.</p> <p>Ventajas:</p> <ul> <li>No requiere instalaci\u00f3n local  </li> <li>Acceso desde cualquier dispositivo  </li> <li>Coste por suscripci\u00f3n  </li> <li>Actualizaciones autom\u00e1ticas  </li> </ul> <p>Inconvenientes:</p> <ul> <li>Menor personalizaci\u00f3n  </li> <li>Dependencia de conexi\u00f3n a internet  </li> <li>Posibles restricciones de integraci\u00f3n  </li> </ul>"},{"location":"1_8_Modelos_Servicio/#paas-platform-as-a-service","title":"PaaS \u2013 Platform as a Service","text":"<p>Se ofrece una plataforma completa para desarrollar, probar y desplegar aplicaciones. Incluye sistema operativo, servidor web, base de datos y herramientas de desarrollo.</p> <p>Ejemplos: Google App Engine, Microsoft Azure App Services, Heroku</p> <p>Ventajas:</p> <ul> <li>Entorno listo para desarrollo  </li> <li>Escalabilidad autom\u00e1tica  </li> <li>Reducci\u00f3n de costes de infraestructura  </li> </ul> <p>Inconvenientes:</p> <ul> <li>Dependencia del proveedor  </li> <li>Limitaciones en tecnolog\u00edas soportadas  </li> </ul>"},{"location":"1_8_Modelos_Servicio/#iaas-infrastructure-as-a-service","title":"IaaS \u2013 Infrastructure as a Service","text":"<p>Proporciona infraestructura virtual: servidores, almacenamiento, redes, etc. El cliente gestiona el sistema operativo y las aplicaciones.</p> <p>Ejemplos: Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform</p> <p>Ventajas:</p> <ul> <li>Control total sobre la configuraci\u00f3n  </li> <li>Escalabilidad bajo demanda  </li> <li>Pago por uso  </li> </ul> <p>Inconvenientes:</p> <ul> <li>Mayor complejidad t\u00e9cnica  </li> <li>Requiere personal especializado  </li> </ul> Modelos de servicio en la nube: SaaS, PaaS, IaaS. <p>Licenciado bajo la Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.0</p>"},{"location":"1_9_Terminolog%C3%ADa/","title":"1.8. Terminolog\u00eda ERP","text":"<p>Este glosario recoge los t\u00e9rminos m\u00e1s utilizados en el \u00e1mbito de los sistemas ERP (Enterprise Resource Planning), traducidos al castellano para facilitar su comprensi\u00f3n.</p>"},{"location":"1_9_Terminolog%C3%ADa/#glosario-de-terminos","title":"Glosario de t\u00e9rminos","text":"<ul> <li>Aplicaci\u00f3n de terceros: Software que no ha sido desarrollado por el proveedor del ERP.  </li> <li>An\u00e1lisis ABC: Clasificaci\u00f3n de art\u00edculos seg\u00fan su valor y frecuencia de uso.  </li> <li>Periodo contable: Intervalo de tiempo que incluye todas las transacciones financieras (normalmente 12 meses).  </li> <li>Cuentas por pagar: Saldos pendientes que la empresa debe a sus proveedores.  </li> <li>Cuentas por cobrar: Saldos pendientes que los clientes deben a la empresa.  </li> <li>Costo real: Valor de una transacci\u00f3n seg\u00fan el coste pagado al proveedor o empleado.  </li> <li>Planificaci\u00f3n avanzada (APS): M\u00e9todo que equilibra capacidad y materiales para optimizar la producci\u00f3n.  </li> <li>Antig\u00fcedad (Aging): D\u00edas transcurridos desde la emisi\u00f3n de una factura.  </li> <li>Asignaci\u00f3n: Reserva de materiales para una orden espec\u00edfica.  </li> <li>API (Interfaz de programaci\u00f3n de aplicaciones): Funciones del ERP accesibles para desarrolladores.  </li> <li>Montaje bajo pedido (ATO): Estrategia de producci\u00f3n r\u00e1pida de productos personalizados.  </li> <li>Disponible para prometer (ATP): Fecha estimada de disponibilidad de producto para env\u00edo.  </li> <li>B2B / B2C: Venta entre empresas / Venta a consumidores.  </li> <li>Backflush: Emisi\u00f3n autom\u00e1tica de materiales desde inventario a una orden de trabajo.  </li> <li>Pedido pendiente (Backorder): Pedido que no puede completarse por falta de stock.  </li> <li>C\u00f3digo de barras: Representaci\u00f3n gr\u00e1fica de datos legibles por esc\u00e1ner.  </li> <li>Inteligencia empresarial (BI): Herramientas para visualizar indicadores clave (KPIs).  </li> <li>Carta de porte (BOL): Detalle de lo que se env\u00eda, entregado al transportista.  </li> <li>Lista de materiales (BOM): Materias primas necesarias para fabricar un producto.  </li> <li>Cuello de botella: Recurso cuya capacidad limita el rendimiento global.  </li> <li>Fabricar para stock: Producci\u00f3n basada en previsiones de demanda.  </li> <li>Carga indirecta (Burden): Costes no relacionados directamente con materiales o mano de obra.  </li> <li>Capacidad: Tiempo disponible en un recurso.  </li> <li>Planificaci\u00f3n de necesidades de capacidad (CRP): C\u00e1lculo de capacidad necesaria para la demanda.  </li> <li>Nube (Cloud): M\u00e9todo de despliegue que usa servidores remotos.  </li> <li>CPQ (Configurar, Precio, Cotizar): Software para configurar productos y generar presupuestos.  </li> <li>Consumibles: Art\u00edculos que se gastan al recibirlos, sin pasar por inventario.  </li> <li>CRM (Gesti\u00f3n de relaciones con clientes): Software para gestionar interacciones con clientes.  </li> <li>Contaje c\u00edclico: Auditor\u00eda regular de inventario por muestreo.  </li> <li>Demanda: Art\u00edculos necesarios para cumplir pedidos.  </li> <li>Desglose (Drill Down): Acceso al detalle de los datos visualizados.  </li> <li>Env\u00edo directo (Drop Ship): Art\u00edculos enviados directamente al cliente desde el proveedor.  </li> <li>Comercio electr\u00f3nico: Transacciones de compra/venta por Internet.  </li> <li>EDI (Intercambio electr\u00f3nico de datos): Transferencia autom\u00e1tica de datos entre sistemas.  </li> <li>EFT (Transferencia electr\u00f3nica de fondos): Transferencia autom\u00e1tica de dinero entre bancos.  </li> <li>Ingenier\u00eda bajo pedido (ETO): Producci\u00f3n personalizada tras recibir el pedido.  </li> <li>ERP (Planificaci\u00f3n de recursos empresariales): Software que integra todas las \u00e1reas de la empresa.  </li> <li>Estimaci\u00f3n: C\u00e1lculo de coste y precio de venta de un art\u00edculo.  </li> <li>FIFO / LIFO: M\u00e9todos de valoraci\u00f3n de inventario (primero en entrar / \u00faltimo en entrar).  </li> <li>A\u00f1o fiscal: A\u00f1o definido por la empresa para informes financieros.  </li> <li>Activos fijos: Bienes necesarios para la producci\u00f3n que no generan liquidez inmediata.  </li> <li>Cantidad fija de pedido: Reposici\u00f3n autom\u00e1tica de una cantidad predefinida.  </li> <li>FOB (Libre a bordo): Punto en que se transfiere la propiedad del producto.  </li> <li>Previsi\u00f3n: Estimaci\u00f3n de demanda futura.  </li> <li>Error de previsi\u00f3n: Diferencia entre valor real y previsto.  </li> <li>Libro mayor (G/L): Registro de todas las transacciones financieras.  </li> <li>Implementaci\u00f3n: Configuraci\u00f3n del ERP y formaci\u00f3n del personal.  </li> <li>Estado de resultados: Informe de ingresos y gastos para determinar beneficios o p\u00e9rdidas.  </li> <li>Software integrado: Aplicaci\u00f3n que combina m\u00faltiples funciones.  </li> <li>Inventario: Lista de art\u00edculos disponibles con cantidad y valor.  </li> <li>Ajuste de inventario: Modificaci\u00f3n manual del inventario.  </li> <li>Factura: Documento que detalla productos/servicios y su valor.  </li> <li>Fecha de factura: Fecha de emisi\u00f3n de la factura.  </li> <li>Art\u00edculo: Unidad individual en inventario.  </li> <li>JIT (Justo a tiempo): M\u00e9todo para minimizar inventario.  </li> <li>Orden de trabajo: Autorizaci\u00f3n para producir una cantidad definida de un art\u00edculo.  </li> <li>Coste de orden de trabajo: Valor de materiales, mano de obra y otros costes asociados.  </li> <li>KPI (Indicador clave de rendimiento): M\u00e9trica que refleja el cumplimiento de objetivos.  </li> <li>Tiempo de entrega (Lead Time): Tiempo entre pedido y disponibilidad del producto.  </li> <li>Fabricaci\u00f3n ajustada (Lean): M\u00e9todo que busca reducir desperdicios.  </li> <li>N\u00famero de lote: Identificador de una cantidad espec\u00edfica de material.  </li> <li>Fabricar bajo pedido (MTO): Producci\u00f3n que comienza tras recibir el pedido.  </li> <li>Fabricar para stock (MTS): Producci\u00f3n basada en previsiones.  </li> <li>Programa maestro de producci\u00f3n (MPS): Planificaci\u00f3n de producci\u00f3n por periodo.  </li> <li>MRP / MRP II: Planificaci\u00f3n de necesidades de materiales / Recursos de manufactura.  </li> <li>NAICS: Clasificaci\u00f3n industrial est\u00e1ndar en EE. UU.  </li> <li>Subcontrataci\u00f3n: Uso de terceros para realizar tareas.  </li> <li>Costes indirectos (Overhead): Costes generales no ligados a producci\u00f3n.  </li> <li>Albar\u00e1n: Lista de art\u00edculos incluidos en un env\u00edo.  </li> <li>N\u00famero de parte: Identificador \u00fanico de cada art\u00edculo.  </li> <li>Recuento f\u00edsico: Conteo manual de todo el inventario.  </li> <li>Compra: Proceso de adquisici\u00f3n de materiales o servicios.  </li> <li>Orden de compra: Autorizaci\u00f3n para adquirir productos o servicios.  </li> <li>Solicitud de compra: Petici\u00f3n de aprobaci\u00f3n para comprar.  </li> <li>Cotizaci\u00f3n: Lista de productos/servicios con precios.  </li> <li>Materia prima: Materiales utilizados en la fabricaci\u00f3n.  </li> <li>Recepci\u00f3n: Proceso de entrada de mercanc\u00eda.  </li> <li>Nivel de reposici\u00f3n: Punto que activa una nueva compra.  </li> <li>Reposici\u00f3n: Reabastecimiento de inventario.  </li> <li>Autorizaci\u00f3n de devoluci\u00f3n (RMA): Permiso para devolver productos.  </li> <li>Ruta de producci\u00f3n: Secuencia de pasos para fabricar un art\u00edculo.  </li> <li>Stock de seguridad: Reserva para imprevistos.  </li> <li>Pedido de venta: Autorizaci\u00f3n del cliente para recibir productos.  </li> <li>Planificaci\u00f3n: Organizaci\u00f3n de pedidos para optimizar recursos.  </li> <li>SCM (Gesti\u00f3n de la cadena de suministro): Control de todas las actividades log\u00edsticas.  </li> <li>M\u00e9todo de env\u00edo (Ship Via): Forma de transporte del producto.  </li> <li>Env\u00edo: Proceso de documentaci\u00f3n y entrega de productos.  </li> <li>Licencia de software: Autorizaci\u00f3n para usar un programa.  </li> <li>C\u00f3digo fuente: Propiedad intelectual del software.  </li> <li>Repuestos: Art\u00edculos en stock para mantenimiento.  </li> <li>Proveedor: Organizaci\u00f3n externa que abastece inventario.  </li> <li>Cadena de suministro: Red de actividades desde proveedor hasta cliente final.  </li> <li>Administrador de sistemas: Responsable de configuraci\u00f3n y mantenimiento del ERP.  </li> <li>Hoja de ruta (Traveler): Documento que acompa\u00f1a al producto en producci\u00f3n.  </li> <li>Campo definido por el usuario (UDF): Campo personalizable en el ERP.  </li> <li>Interfaz de usuario (UI): Forma en que el usuario interact\u00faa con el sistema.  </li> <li>Unidad de medida (UOM): Forma de contar un art\u00edculo (unidad, kg, cm\u2026).  </li> <li>Actualizaci\u00f3n: Reemplazo de la versi\u00f3n actual del software por una m\u00e1s reciente.  </li> <li>Usuario: Persona autorizada para acceder al ERP.  </li> <li>Inventario gestionado por proveedor: Stock controlado por el proveedor.  </li> <li>Almac\u00e9n: Lugar donde se guarda inventario.  </li> <li>Trabajo en curso: Art\u00edculos en proceso de producci\u00f3n.</li> </ul> <p>_Licenciado bajo la [Licencia Creative Commons Atribuci\u00f3n Compartir Igual 4.</p>"},{"location":"2_1_IntroduccionPython/","title":"Introducci\u00f3n a Python","text":"<p>Empezamos esta secci\u00f3n con una serie de contenidos dedicados a aprender Python, el lenguaje de programaci\u00f3n que vamos a utilizar para crear los m\u00f3dulos de Odoo. </p> <p>Antes de nada contextualicemos qu\u00e9 es Python y como ha llegado hasta aqu\u00ed.</p>"},{"location":"2_1_IntroduccionPython/#un-poco-de-historia","title":"Un poco de historia","text":"<p>Para empezar, qu\u00e9 mejor manera que conocer qu\u00e9 es Python y cu\u00e1les son sus principales caracter\u00edsticas, que lo han convertido en uno de los lenguajes m\u00e1s utilizados hoy en d\u00eda.</p> Guido van Rossum <p>Todo comenz\u00f3 con Guido van Rossum, un desarrollador holand\u00e9s que, a finales de los a\u00f1os 80, decidi\u00f3 crear casi por hobby un lenguaje de scripting. Es decir, un lenguaje pensado m\u00e1s para el trabajo en sistemas que para la creaci\u00f3n de aplicaciones completas. Su objetivo era que tuviera una sintaxis similar a C y que adem\u00e1s fuera f\u00e1cil tanto de aprender como de utilizar.</p> <p>La primera versi\u00f3n de este lenguaje, que llam\u00f3 Python en honor al grupo c\u00f3mico Monty Python, no tuvo una gran acogida inicial. Sin embargo, sent\u00f3 las bases de lo que hoy es Python: un lenguaje muy vers\u00e1til y ampliamente extendido.</p> <p>Durante todo este tiempo, han colaborado muchas personas en el proyecto, pero Guido segu\u00eda siendo el coordinador principal. De hecho, ten\u00eda un t\u00edtulo honor\u00edfico: BDFL (Benevolent Dictator For Life), lo que le otorgaba la \u00faltima palabra sobre las decisiones del proyecto. No obstante, desde mediados de 2018, Guido se retir\u00f3 de ese cargo para quedarse en un segundo plano.</p>"},{"location":"2_1_IntroduccionPython/#definiendo-python","title":"Definiendo Python","text":"<p>La mejor manera de definir Python es como un lenguaje de programaci\u00f3n de prop\u00f3sito general. Esto puede parecer contradictorio despu\u00e9s de haber comentado que naci\u00f3 como lenguaje de scripts, pero aunque ese fue su punto de partida, Python pronto se convirti\u00f3 en un lenguaje capaz de aplicarse a la creaci\u00f3n de casi cualquier tipo de aplicaci\u00f3n.</p> <p>Se utiliza para desarrollar videojuegos, gestionar microcontroladores, construir elementos del stack web, crear scripts, y \u00faltimamente, en \u00e1reas tan populares como la inteligencia artificial o la ciencia de datos.</p> <p>Es un lenguaje de alto nivel, y en este caso, interpretado, no compilado. Esto implica, por un lado, mayores tiempos de ejecuci\u00f3n y la necesidad de incluir siempre el int\u00e9rprete para su ejecuci\u00f3n. Pero por otro lado, esa misma necesidad facilita la multiplataforma: cualquier sistema que tenga un int\u00e9rprete puede ejecutar c\u00f3digo Python.</p> <p>Adem\u00e1s, Python posee una licencia libre llamada PSFL (Python Software Foundation License). Aunque no es la licencia GPL, permite realizar modificaciones del c\u00f3digo que no sean libres, y es compatible con GPL, ya que permite trabajar con otros c\u00f3digos desarrollados bajo esa licencia.</p>"},{"location":"2_1_IntroduccionPython/#caracteristicas-tecnicas","title":"Caracter\u00edsticas t\u00e9cnicas","text":"<p>Entrando en las caracter\u00edsticas t\u00e9cnicas, una de las m\u00e1s llamativas es que Python es un lenguaje multiparadigma, soportando:</p> <ul> <li>Programaci\u00f3n funcional  </li> <li>Programaci\u00f3n orientada a objetos  </li> <li>Programaci\u00f3n estructurada cl\u00e1sica  </li> </ul> <p>Tambi\u00e9n soporta tipado din\u00e1mico, lo que permite al programador despreocuparse de la asignaci\u00f3n del tipo de variable. Es el propio int\u00e9rprete quien infiere el tipo a partir del valor asignado.</p> <p>Incluye un garbage collector (recolector de basura) que limpia autom\u00e1ticamente las estructuras de datos que ocupan memoria y ya no est\u00e1n en uso.</p> <p>Es un lenguaje extensible, lo que significa que se le pueden a\u00f1adir nuevas caracter\u00edsticas mediante m\u00f3dulos o paquetes. Un m\u00f3dulo no es m\u00e1s que un fichero de c\u00f3digo Python que puede ser reutilizado en nuestros programas.</p> <p>Adem\u00e1s, es posible crear m\u00f3dulos no solo en Python, sino tambi\u00e9n en lenguajes como C++, que pueden ser considerados como m\u00f3dulos del sistema. Existe tambi\u00e9n el concepto de paquete, que podemos entender como un conjunto de m\u00f3dulos con un objetivo com\u00fan.</p> <p>Para gestionar estos paquetes, Python incluye una herramienta llamada pip, algo similar a npm en Node.js. Esta herramienta permite gestionar los paquetes de Python comportandose de una forma muy similar a como lo hacen los diferentes gestores de repositorios de linux: <code>apt</code>, <code>snap</code>, <code>yum</code>...</p> <p>Por \u00faltimo, el c\u00f3digo escrito en Python es muy legible. Por ejemplo, se eliminan las t\u00edpicas llaves que definen bloques en lenguajes como C o Java, y se utiliza la indentaci\u00f3n obligatoria para definir qu\u00e9 elementos pertenecen a un bloque.</p>"},{"location":"2_1_IntroduccionPython/#implantacion","title":"Implantaci\u00f3n","text":"<p>Las caracter\u00edsticas que hemos comentado anteriormente hacen que la implantaci\u00f3n de Python sea muy grande hoy en d\u00eda. De hecho, es uno de los lenguajes mejor considerados en la mayor\u00eda de rankings (TIOBE, LinkedIn, Stackoverflow) que valoran lenguajes de programaci\u00f3n.</p> <p>Estos \u00edndices tienen en cuenta factores como:</p> <ul> <li>La popularidad entre los programadores  </li> <li>La cantidad de ofertas laborales que requieren conocimientos en Python  </li> <li>Los sueldos que se pagan a los desarrolladores que lo dominan  </li> </ul> <p>\u00bfY por qu\u00e9 ocurre esto? Entre muchas razones, destaca que su curva de aprendizaje es muy suave, lo que permite que pueda ser utilizado en entornos acad\u00e9micos para introducir la programaci\u00f3n. Tambi\u00e9n es ideal para desarrolladores eventuales, es decir, personas que no se dedican 100% a programar, pero que de vez en cuando necesitan crear alg\u00fan peque\u00f1o programa para resolver problemas puntuales.</p> <p>Adem\u00e1s, Python posee una gran cantidad de m\u00f3dulos y paquetes, lo que facilita encontrar soluciones ya desarrolladas para necesidades concretas de una aplicaci\u00f3n. Por supuesto, es portable, lo que significa que puede funcionar en muchos sistemas operativos, de hecho en los sistemas GNU/Linux como Ubuntu suele estar preinstalado.</p> <p>Y por \u00faltimo, se ha convertido en uno de los lenguajes m\u00e1s habituales en campos como la ciencia de datos y la inteligencia artificial, gracias a la enorme cantidad de paquetes disponibles para trabajar en estos \u00e1mbitos, como <code>TensorFlow</code>, <code>Keras</code> o <code>Pandas</code>.</p>"},{"location":"2_1_IntroduccionPython/#algunas-desventajas","title":"Algunas desventajas","text":"<p>Pero no todo es perfecto. Python tiene una serie de inconvenientes, pocos, pero importantes a tener en cuenta cuando se elige como lenguaje principal para un proyecto.</p> <ul> <li>Velocidad de ejecuci\u00f3n: Python es un lenguaje interpretado, lo que lo hace m\u00e1s lento que los lenguajes compilados. Para ciertas tareas esto puede no ser relevante, pero en otras puede ser cr\u00edtico.</li> <li>Consumo de memoria: No es un lenguaje liviano ni optimizado para trabajar con poca memoria. Su consumo puede ser elevado en comparaci\u00f3n con otros lenguajes.</li> <li>Limitaciones en m\u00f3viles y front-end web: Aunque existen frameworks como <code>Flask</code> o <code>Django</code> para el desarrollo backend, el trabajo en la parte de frontend o en entornos como <code>WebAssembly</code> es muy limitado, por no decir pr\u00e1cticamente nulo.</li> </ul>"},{"location":"2_1_IntroduccionPython/#alternativas-y-soluciones","title":"Alternativas y soluciones","text":"<p>Algunos de estos inconvenientes, especialmente los relacionados con la lentitud, pueden ser solucionados parcialmente mediante alternativas t\u00e9cnicas.</p>"},{"location":"2_1_IntroduccionPython/#interpretes-alternativos","title":"Int\u00e9rpretes alternativos","text":"<p>El int\u00e9rprete original de Python est\u00e1 escrito en C, y muchas veces lo encontrar\u00e1s como CPython. Sin embargo, existen otras implementaciones pensadas para m\u00e1quinas virtuales espec\u00edficas:</p> <ul> <li>Jython: Implementaci\u00f3n escrita en Java que permite ejecutar Python sobre la m\u00e1quina virtual de Java (JVM).</li> <li>IronPython: Similar a Jython, pero para la plataforma .NET, ejecut\u00e1ndose sobre el CLR.</li> <li>PyPy: Implementaci\u00f3n escrita en Python, \u00fatil cuando se quiere trabajar directamente sobre el propio c\u00f3digo del lenguaje.</li> </ul>"},{"location":"2_1_IntroduccionPython/#compiladores-cruzados","title":"Compiladores cruzados","text":"<p>Tambi\u00e9n existen herramientas conocidas como cross-compilers o compiladores cruzados, que convierten c\u00f3digo Python en C. Por ejemplo:</p> <ul> <li>Cython: Convierte c\u00f3digo Python en C, que luego puede ser compilado de forma nativa para una m\u00e1quina concreta, eliminando la necesidad del int\u00e9rprete.</li> <li>OpenInstaller: Genera un \u00fanico paquete ejecutable que incluye tanto el c\u00f3digo Python como el int\u00e9rprete. Para el usuario final, se presenta como un simple fichero <code>.exe</code>.</li> </ul>"},{"location":"2_1_IntroduccionPython/#versiones-de-python","title":"Versiones de Python","text":"<p>Para finalizar, conviene conocer c\u00f3mo se identifican las versiones de Python. Cada versi\u00f3n se compone de tres n\u00fameros: X.Y.Z</p> <ul> <li>X: Versi\u00f3n mayor. Son incompatibles entre s\u00ed. Por ejemplo, un c\u00f3digo pensado para Python 2 no se ejecutar\u00e1 en Python 1, y lo mismo ocurre entre Python 2 y Python 3.</li> <li>Y: Versi\u00f3n menor importante. Introduce novedades en el lenguaje, pero mantiene compatibilidad con la versi\u00f3n mayor correspondiente.</li> <li>Z: Versi\u00f3n de mantenimiento. Corrige errores y fallos de seguridad.</li> </ul> Versi\u00f3n ejecutada de Python <p>Actualmente, la versi\u00f3n 1 est\u00e1 completamente obsoleta. Sin embargo, siguen en producci\u00f3n tanto la versi\u00f3n 2 como la versi\u00f3n 3. La idea es que Python 2 quede obsoleto pronto, pero existe un gran parque de aplicaciones desarrolladas con esa versi\u00f3n, y la migraci\u00f3n a Python 3 no es sencilla. Por eso, muchos sistemas a\u00fan incorporan int\u00e9rpretes para ambas versiones.</p>"},{"location":"2_1_IntroduccionPython/#comparativa-python-vs-java","title":"Comparativa Python vs. Java","text":"<p>Teniendo en cuenta que se ha trabajado <code>Java</code> en otros m\u00f3dulos en el primer curso, es interesante ver las diferencias b\u00e1sicas entre <code>Java</code> y <code>Python</code></p> Caracter\u00edstica Java Python Tipado Est\u00e1tico Din\u00e1mico Sintaxis Verbosa Concisa Compilaci\u00f3n Compilado a bytecode Interpretado Declaraci\u00f3n de variables Obligatoria Impl\u00edcita Manejo de excepciones Obligatorio en muchos casos Opcional Orientaci\u00f3n a objetos Obligatoria Opcional"},{"location":"2_1_IntroduccionPython/#ejemplo-comparativo","title":"Ejemplo comparativo","text":"<p>Como siempre se dice, un ejemplo vale m\u00e1s que mil palabras.</p> <p>Java </p><pre><code>int x = 5;\nSystem.out.println(x);\n</code></pre><p></p> <p>Python </p><pre><code>x = 5\nprint(x)\n</code></pre><p></p> <p>Continuemos centr\u00e1ndonos en las caracter\u00edsticas principales de Python</p>"},{"location":"2_1_IntroduccionPython/#instalacion-de-python","title":"Instalaci\u00f3n de Python","text":""},{"location":"2_1_IntroduccionPython/#windows","title":"Windows","text":"<ol> <li>Visita https://www.python.org/downloads/</li> <li>Descarga el instalador para Windows.</li> <li>Ejecuta el instalador y aseg\u00farate de marcar la opci\u00f3n \"Add Python to PATH\".</li> </ol>"},{"location":"2_1_IntroduccionPython/#macos","title":"macOS","text":"<p>Puedes instalar Python usando Homebrew: </p><pre><code>brew install python\n</code></pre><p></p>"},{"location":"2_1_IntroduccionPython/#linux","title":"Linux","text":"<p>En la mayor\u00eda de distribuciones, puedes instalar Python con: </p><pre><code>sudo apt update\nsudo apt install python3\n</code></pre><p></p>"},{"location":"2_1_IntroduccionPython/#verificacion-de-la-instalacion","title":"Verificaci\u00f3n de la instalaci\u00f3n","text":"<p>Para verificar que Python est\u00e1 correctamente instalado, abre una terminal y ejecuta:</p> <p></p><pre><code>python --version\n</code></pre> o<p></p> <pre><code>python3 --version\n</code></pre>"},{"location":"2_1_IntroduccionPython/#primeros-pasos-en-python","title":"Primeros pasos en Python","text":"<p>Puedes iniciar el int\u00e9rprete interactivo escribiendo <code>python</code> o <code>python3</code> en la terminal. </p> Primeros pasos en Python. Ejecutando desde terminal <p>Tambi\u00e9n puedes guardar tus programas en archivos <code>.py</code> y ejecutarlos.</p> Primeros pasos en Python. Ejecutando script"},{"location":"2_1_IntroduccionPython/#comentarios","title":"Comentarios","text":"<p>Es fundamental el uso de comentarios en nuestro c\u00f3digo. En Python existen b\u00e1sicamente dos modos de introducir comentarios, en una l\u00ednea mediante <code>#</code> y de varias l\u00edneas mediante tres dobles comillas (<code>\"\"\"</code>) en lineas anterior y posterior: </p> <pre><code># Esto es un comentario de l\u00ednea\n\n\"\"\"\nEsto es un comentario\nde varias l\u00edneas\n\"\"\"\n</code></pre>"},{"location":"2_1_IntroduccionPython/#tipos-de-datos-basicos","title":"Tipos de datos b\u00e1sicos","text":"<p>Antes de empezar a escribir c\u00f3digo en Python, es fundamental entender c\u00f3mo maneja la informaci\u00f3n. Todo lenguaje de programaci\u00f3n necesita representar datos: n\u00fameros, textos, valores l\u00f3gicos... y Python lo hace de forma sencilla y muy intuitiva.</p> <p>En esta secci\u00f3n vamos a conocer los tipos de datos b\u00e1sicos que forman la base de cualquier programa en Python. Estos tipos permiten almacenar y manipular informaci\u00f3n de forma eficiente, y son el punto de partida para construir estructuras m\u00e1s complejas como listas, diccionarios o clases.</p> <p>Una caracter\u00edstica muy particular de Python es que las variables no tienen un tipo fijo, sino que el tipo se asigna din\u00e1micamente en funci\u00f3n del valor que contienen. Esto significa que una misma variable puede almacenar un n\u00famero entero en un momento dado, y m\u00e1s adelante contener una cadena de texto, sin necesidad de declararlo expl\u00edcitamente.</p> <pre><code>x = 5        # x es un entero\nx = \"Hola\"   # ahora x es una cadena\n</code></pre> <p>Este comportamiento se conoce como tipado din\u00e1mico, y aunque facilita mucho la escritura de c\u00f3digo, tambi\u00e9n requiere que el programador est\u00e9 atento al tipo de dato que est\u00e1 manipulando en cada momento para evitar errores inesperados.</p>"},{"location":"2_1_IntroduccionPython/#numeros","title":"N\u00fameros","text":"<p>Los n\u00famero pueden ser de diferente tipo. </p> <pre><code>entero = 10\nflotante = 3.14\ncomplejo = 2 + 3j\n</code></pre> <p>Tal y como se asigne un valor u otro, el interprete ya asigna el tipo adecuado a la variable </p> <p>N\u00famero complejos</p> <p>Python es capaz de trabajar con n\u00fameros complejos, que est\u00e1n compuestos por un n\u00famero en coma flotante y un imaginario, pero queda fuera del alcance de nuestro curso, aunque sirva saber que tiene esta capacidad para comprender la dimensi\u00f3n de python.</p>"},{"location":"2_1_IntroduccionPython/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Por supuesto podemos realizas diferentes operaciones matem\u00e1ticas:</p> Operador Descripci\u00f3n Ejemplo Resultado <code>+</code> Suma <code>5 + 3</code> <code>8</code> <code>-</code> Resta <code>5 - 2</code> <code>3</code> <code>*</code> Multiplicaci\u00f3n <code>4 * 2</code> <code>8</code> <code>/</code> Divisi\u00f3n flotante <code>5 / 2</code> <code>2.5</code> <code>//</code> Divisi\u00f3n entera <code>5 // 2</code> <code>2</code> <code>%</code> M\u00f3dulo (resto) <code>5 % 2</code> <code>1</code> <code>**</code> Potencia <code>2 ** 3</code> <code>8</code> <p>El tipo de la variable resultante tras la realizaci\u00f3n de una operaci\u00f3n matem\u00e1tica, ser\u00e1 el tipo m\u00e1s complejo, o sea si se hacer una suma de un entero y un flotante, el resultado ser\u00e1 un flotante.</p>"},{"location":"2_1_IntroduccionPython/#cadenas-de-texto-str","title":"Cadenas de texto  (<code>str</code>)","text":"<p>La definici\u00f3n de l\u00edneas se puede realizar tanto con comillas dobles (<code>\"</code>) como con comillas simples ( <code>'</code>):</p> <pre><code>nombre = \"Sergio\"\nsaludo = 'Hola'\n</code></pre> <p>Podemos definir cadenas t\u00edpicas de una palabra o l\u00ednea o de varias l\u00edneas:</p> <pre><code>cadena = \"Hola, mundo\"\ntexto_multilinea = '''Esto es\nuna cadena\nmultil\u00ednea'''\n</code></pre>"},{"location":"2_1_IntroduccionPython/#concatenacion","title":"Concatenaci\u00f3n","text":"<pre><code>nombre = \"Sergio\"\nmensaje = \"Hola \" + nombre\nprint( mensaje)\nprint( \"Esta tambi\u00e9n es otra cadena concatenada con comas, \", nombre, \"\u00bfse entiende?\")\n</code></pre> <p>Cuidado</p> <p>Si concatenamos cadenas, debemos tener cuidado con el tipo de las variables </p><pre><code>txt = \"hola\"\nnum = 25\nprint( txt, num)                # Correcto\nprint( txt + \" \" + num)         # Incorrecto\nprint( txt + \" \" + str( num))   # Correcto\n</code></pre><p></p>"},{"location":"2_1_IntroduccionPython/#alternativa-moderna-f-strings","title":"Alternativa moderna: f-strings","text":"<p>Desde Python 3.6, puedes usar f-strings para insertar valores dentro de cadenas de forma m\u00e1s limpia y legible. Este tipo de cadenas se define anteponiendo un <code>f</code> a la cadena, de forma que las variables ya no las ponemos entre comillas, sino que las incluimos entre llaves <code>{}</code>:</p> <pre><code>nombre = \"Sergio\"\nedad = 25\nprint(f\"{nombre} tiene {edad} a\u00f1os\")\n</code></pre> <p>Adem\u00e1s no tenemos problemas con el tipo de las variables.</p>"},{"location":"2_1_IntroduccionPython/#tipado-dinamico-y-variables-como-objetos","title":"Tipado din\u00e1mico y variables como objetos","text":"<p>En Python, todo dato que usamos en un programa (ya sea un n\u00famero, una cadena de texto o un valor l\u00f3gico) est\u00e1 representado por un objeto. Esto significa que cada variable que creamos no es simplemente un contenedor de datos, sino una instancia de una clase que define su comportamiento.</p> <p>Cuando creamos una variable en Python, lo que realmente estamos haciendo es crear una referencia a un objeto. Por ejemplo:</p> <pre><code>x = 10\nprint(type(x))  # &lt;class 'int'&gt;\n</code></pre> <p>Aqu\u00ed, <code>x</code> no es simplemente un n\u00famero: es una referencia a un objeto de la clase <code>int</code>. Si luego cambiamos el valor de <code>x</code> por una cadena, el tipo tambi\u00e9n cambia:</p> <pre><code>x = \"Hola\"\nprint(type(x))  # &lt;class 'str'&gt;\n</code></pre> <p>Este comportamiento se llama tipado din\u00e1mico, y es una de las caracter\u00edsticas m\u00e1s distintivas de Python. Aunque facilita mucho la escritura de c\u00f3digo, tambi\u00e9n puede provocar errores si no se tiene cuidado al mezclar tipos.</p> <p>Uno de los errores m\u00e1s frecuentes ocurre al intentar concatenar cadenas con otros tipos de datos. Por ejemplo:</p> <pre><code>edad = 25\nprint(\"Tengo \" + edad + \" a\u00f1os\")  # \u274c Error\n</code></pre> <p>Este c\u00f3digo lanza un error porque estamos intentando sumar (<code>+</code>) una cadena (<code>str</code>) con un entero (<code>int</code>). Para solucionarlo, debemos convertir el n\u00famero a cadena:</p> <pre><code>print(\"Tengo \" + str(edad) + \" a\u00f1os\")  # \u2705 Correcto\n</code></pre> <p>Funciones \u00fatiles de conversi\u00f3n</p> <p>Python incluye varias funciones para convertir entre tipos de datos. Aqu\u00ed tienes las m\u00e1s comunes:</p> Funci\u00f3n Convierte a... Ejemplo de uso <code>str()</code> Cadena (<code>str</code>) <code>str(123)</code> \u2192 <code>\"123\"</code> <code>int()</code> Entero (<code>int</code>) <code>int(\"42\")</code> \u2192 <code>42</code> <code>float()</code> Decimal (<code>float</code>) <code>float(\"3.14\")</code> \u2192 <code>3.14</code> <code>bool()</code> Booleano (<code>bool</code>) <code>bool(\"\")</code> \u2192 <code>False</code> <p>Consejo para realizar operaciones entre variables</p> <p>Antes de realizar operaciones entre variables, aseg\u00farate de que los tipos son compatibles. Si no lo son, usa funciones de conversi\u00f3n para evitar errores.</p> <p>Ejemplos de uso de m\u00e9todos asociados a objetos en las variables</p> <p>No profundizaremos mucho en el tema, pero tal y como se ha comentado toda variable es considerada un objeto por lo que tiene asociado implicitamente una serie de m\u00e9todos </p> <pre><code>texto = \"Python DAM\"\nprint(len(texto))            # Longitud\nprint(texto.upper())         # May\u00fasculas\nprint(texto.lower())         # Min\u00fasculas\nprint(texto.replace(\"DAM\", \"2025\"))  # Reemplazo\nprint(texto[0:6])            # Slicing\n</code></pre>"},{"location":"2_1_IntroduccionPython/#booleanos","title":"Booleanos","text":"<pre><code>verdadero = True\nfalso = False\n</code></pre>"},{"location":"2_1_IntroduccionPython/#entrada-por-consola-input","title":"Entrada por consola: <code>input()</code>","text":"<p>La entrada por consola se realiza mediante el comando <code>input()</code></p> <pre><code>nombre = input()  # Sin mensaje al usuario \n\nnombre = input(\"Introduce tu nombre: \") # Con mensaje al usuario\nprint(f\"Bienvenido, {nombre}\")\n</code></pre> <p>Debemos tener cuidad si queremos hacer conversi\u00f3n de tipos puesto que todas las entradas son cadenas, por lo tanto si necesitamos recoger un valor entero (<code>int</code>) entonces debemos utilizar la funci\u00f3n de conversion <code>int()</code></p> <pre><code>edad = int(input(\"Introduce tu edad: \"))\nprint(f\"Tu edad es {edad}\")\n</code></pre>"},{"location":"2_1_IntroduccionPython/#buenas-practicas-y-estilo-convenciones-pep8","title":"Buenas pr\u00e1cticas y estilo: Convenciones PEP8","text":"<p>La PEP8 es una gu\u00eda que indica las convenciones estil\u00edsticas a seguir para escribir c\u00f3digo Python. Se trata de un conjunto de recomendaciones cuyo objetivo es ayudar a escribir c\u00f3digo m\u00e1s legible y abarca desde c\u00f3mo nombrar variables, al n\u00famero m\u00e1ximo de caracteres que una l\u00ednea debe tener.</p> <p>Recomendaciones m\u00e1s importantes.</p> <pre><code>- Usa 4 espacios por nivel de indentaci\u00f3n.\n- Nombres de variables en min\u00fasculas y con guiones bajos: `nombre_usuario`\n- Comentarios claros y \u00fatiles.\n- Usa docstrings para documentar funciones y clases.\n</code></pre> <p>M\u00e1s info: El libro de Python. Python PEP8: Escribiendo C\u00f3digo F\u00e1cil de Leer</p>"},{"location":"2_2_ControlFlujo/","title":"Estructuras condicionales y control de flujo","text":"<p>En esta sesi\u00f3n se exploran las herramientas fundamentales que permiten tomar decisiones dentro de un programa. Las estructuras condicionales como <code>if</code>, <code>elif</code> y <code>else</code> permiten ejecutar diferentes bloques de c\u00f3digo seg\u00fan se cumplan ciertas condiciones, lo que aporta flexibilidad y dinamismo al comportamiento del programa. Este tipo de l\u00f3gica es esencial para modelar situaciones reales como validaciones, bifurcaciones o respuestas ante distintos escenarios.</p> <p>Tambi\u00e9n se aborda el control de flujo, que incluye instrucciones como <code>break</code>, <code>continue</code> y <code>pass</code>, utilizadas para modificar el comportamiento de los bucles o gestionar casos especiales. Estas herramientas permiten controlar con precisi\u00f3n c\u00f3mo se ejecuta el c\u00f3digo, evitando repeticiones innecesarias o errores en estructuras incompletas. Se explicar\u00e1 c\u00f3mo y cu\u00e1ndo interrumpir o saltar partes del flujo de ejecuci\u00f3n para mantener la l\u00f3gica del programa clara y eficiente.</p> <p>Por \u00faltimo, se introducen los bucles como estructuras que permiten repetir acciones de forma controlada. Se trabajar\u00e1 con <code>for</code> y <code>while</code>, analizando c\u00f3mo recorrer colecciones, repetir tareas hasta que se cumpla una condici\u00f3n, y c\u00f3mo combinar bucles con condicionales para construir programas m\u00e1s expresivos. </p> <p>El objetivo es dominar el flujo de ejecuci\u00f3n completo: decidir, repetir y controlar:</p> <ul> <li>Comprender el uso de condicionales en Python.</li> <li>Aplicar estructuras de control para tomar decisiones en el c\u00f3digo.</li> <li>Comparar la l\u00f3gica condicional en Python con la de Java.</li> <li>Utilizar operadores l\u00f3gicos y de comparaci\u00f3n.</li> <li>Crear scripts interactivos que respondan a diferentes entradas del usuario.</li> </ul>"},{"location":"2_2_ControlFlujo/#condicionales-en-python","title":"Condicionales en Python","text":"<p>El control de flujo permite que un programa tome decisiones y ejecute diferentes bloques de c\u00f3digo seg\u00fan ciertas condiciones. En Python, esto se logra principalmente con las estructuras <code>if</code>, <code>elif</code> y <code>else</code>.</p>"},{"location":"2_2_ControlFlujo/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<pre><code># Definimos una variable con la edad del usuario\nedad = 20\n\n# Evaluamos si la edad es mayor o igual a 18\nif edad &gt;= 18:\n    print(\"Eres mayor de edad.\")\n</code></pre> <p>Este es el caso m\u00e1s simple: si la condici\u00f3n <code>edad &gt;= 18</code> se cumple, se ejecuta el bloque indentado y la condici\u00f3n <code>if</code> finaliza con dos puntos (<code>:</code>). Si no, el programa contin\u00faa sin hacer nada.</p>"},{"location":"2_2_ControlFlujo/#estructura-completa-if-elif-else","title":"Estructura completa: <code>if</code> - <code>elif</code> - <code>else</code>","text":"<p>Para m\u00e1s de una condiciones tenemos la estructura <code>if</code> - <code>elif</code> - <code>else</code>. Observar de nuevo la identaci\u00f3n y el final de las l\u00edneas de los <code>if</code>, <code>elif</code> y <code>else</code></p> <p>Ejemplo 1:</p> <pre><code># Evaluamos una nota num\u00e9rica y mostramos la calificaci\u00f3n correspondiente\nnota = 7\n\nif nota &gt;= 9:\n    print(\"Sobresaliente\")\nelif nota &gt;= 7:\n    print(\"Notable\")\nelif nota &gt;= 5:\n    print(\"Aprobado\")\nelse:\n    print(\"Suspenso\")\n</code></pre> <p>Esta estructura permite evaluar m\u00faltiples condiciones de forma ordenada. Python las eval\u00faa de arriba hacia abajo y ejecuta solo el primer bloque que cumpla la condici\u00f3n.</p> <p>Ejemplo 2:</p> <pre><code># Evaluamos la nota de un alumno con entrada por teclado\nnota = float(input(\"Introduce tu nota (0-10): \"))\n\nif nota &gt;= 9:\n    print(\"\u00a1Excelente! Has sacado un Sobresaliente.\")\nelif nota &gt;= 7:\n    print(\"Muy bien, tu nota es Notable.\")\nelif nota &gt;= 5:\n    print(\"Has aprobado. \u00a1\u00c1nimo para mejorar!\")\nelse:\n    print(\"Lo siento, has suspendido.\")\n</code></pre> <p>Importancia de la indentaci\u00f3n</p> <p>En Python, los bloques de c\u00f3digo se definen por indentaci\u00f3n (espacios), no por llaves <code>{}</code> como en Java. Se recomienda usar 4 espacios por nivel. Una indentaci\u00f3n incorrecta provocar\u00e1 errores de sintaxis (<code>IndentationError</code>).</p>"},{"location":"2_2_ControlFlujo/#operadores","title":"Operadores","text":"<p>Los operadores permiten comparar valores y construir condiciones l\u00f3gicas. Son esenciales para trabajar con estructuras condicionales.</p>"},{"location":"2_2_ControlFlujo/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<p>En la siguiente tabla tenemos los operadores t\u00edpicos de Python.\u00e7</p> Operador Significado Ejemplo Resultado <code>==</code> Igual a <code>x == 5</code> <code>True</code> <code>!=</code> Distinto de <code>x != 3</code> <code>True</code> <code>&lt;</code> Menor que <code>x &lt; 10</code> <code>True</code> <code>&gt;</code> Mayor que <code>x &gt; 2</code> <code>True</code> <code>&lt;=</code> Menor o igual que <code>x &lt;= 5</code> <code>True</code> <code>&gt;=</code> Mayor o igual que <code>x &gt;= 5</code> <code>True</code> <p>Estos operadores devuelven valores booleanos (<code>True</code> o <code>False</code>) que se usan en condiciones. Por ejemplo, <code>if x != 3:</code> se ejecutar\u00e1 si <code>x</code> es distinto de 3.</p>"},{"location":"2_2_ControlFlujo/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"Operador Descripci\u00f3n Ejemplo Resultado <code>and</code> Ambas condiciones <code>x &gt; 5 and x &lt; 10</code> <code>True</code> <code>or</code> Una u otra <code>x &lt; 3 or x &gt; 8</code> <code>True</code> <code>not</code> Negaci\u00f3n <code>not x == 5</code> <code>False</code> <p>Los operadores l\u00f3gicos permiten combinar condiciones. Por ejemplo, <code>if edad &gt;= 18 and pais == \"Espa\u00f1a\":</code> verifica dos requisitos a la vez.</p> <p>Ejemplo entrada de datos</p> <pre><code># Verificamos si un usuario puede acceder a una plataforma\nusuario = input(\"Introduce tu nombre: \")\nedad = int(input(\"Introduce tu edad: \"))\npais = input(\"\u00bfEn qu\u00e9 pa\u00eds vives?: \")\n\nif edad &gt;= 18 and pais.lower() == \"espa\u00f1a\":\n    print(f\"{usuario}, puedes acceder al sistema desde Espa\u00f1a.\")\nelse:\n    print(f\"{usuario}, acceso denegado por edad o pa\u00eds.\")\n</code></pre> <p>Este ejemplo combina entrada de datos, conversi\u00f3n de tipos (<code>int()</code>), condicionales y salida formateada con <code>f-strings</code>. Es ideal para introducir l\u00f3gica b\u00e1sica en Python.</p> <p>Buenas pr\u00e1cticas</p> <ul> <li>Usa nombres de variables descriptivos.</li> <li>Evita condicionales anidados innecesarios.</li> <li>Comenta el prop\u00f3sito de cada bloque si no es evidente.</li> <li>Usa <code>elif</code> en lugar de m\u00faltiples <code>if</code> independientes.</li> </ul>"},{"location":"2_2_ControlFlujo/#estructura-match-en-python-equivalente-a-switchcase","title":"Estructura <code>match</code> en Python (equivalente a <code>switch</code>/<code>case</code>)","text":"<p>En otros lenguajes como Java, C o JavaScript, existe la estructura <code>switch</code>/<code>case</code> para evaluar m\u00faltiples condiciones sobre una misma variable. Python no tuvo una alternativa directa hasta la versi\u00f3n 3.10, donde se introdujo la instrucci\u00f3n <code>match</code>, tambi\u00e9n conocida como pattern matching.</p> <p>Esta nueva sintaxis permite escribir c\u00f3digo m\u00e1s limpio y legible cuando se necesita comparar un valor contra m\u00faltiples opciones.</p>"},{"location":"2_2_ControlFlujo/#instruccion-match","title":"Instrucci\u00f3n <code>match</code>","text":"<p>La instrucci\u00f3n <code>match</code> permite comparar un valor con diferentes patrones. Cada patr\u00f3n se define con la palabra clave <code>case</code>, y se ejecuta el bloque correspondiente si hay coincidencia.</p> <p>Evaluando el d\u00eda de la semana</p> <pre><code># Evaluamos el d\u00eda de la semana usando match-case\ndia = \"lunes\"\n\nmatch dia:\n    case \"lunes\":\n        print(\"Inicio de semana\")\n    case \"viernes\":\n        print(\"\u00daltimo d\u00eda laboral\")\n    case \"s\u00e1bado\" | \"domingo\":\n        print(\"Fin de semana\")\n    case _:\n        print(\"D\u00eda no reconocido\")\n</code></pre> <p>Donde:</p> <ul> <li><code>match dia:</code> inicia la evaluaci\u00f3n del valor de la variable <code>dia</code>.</li> <li>Cada <code>case</code> representa una posible coincidencia.</li> <li>El s\u00edmbolo <code>|</code> permite agrupar varias opciones en un mismo caso.</li> <li>El patr\u00f3n <code>_</code> act\u00faa como comod\u00edn o caso por defecto, similar a <code>default</code> en otros lenguajes.</li> </ul>"},{"location":"2_2_ControlFlujo/#comparacion-con-if-elif-else","title":"Comparaci\u00f3n con <code>if</code> - <code>elif</code> - <code>else</code>","text":"<p>Aunque <code>if</code> sigue siendo m\u00e1s flexible, <code>match</code> es m\u00e1s limpio cuando se eval\u00faa una sola variable contra m\u00faltiples valores.</p> <p>Elecci\u00f3n de d\u00eda con <code>if</code>-<code>elif</code>-<code>else</code></p> <pre><code># Versi\u00f3n equivalente con if-elif-else\ndia = \"lunes\"\n\nif dia == \"lunes\":\n    print(\"Inicio de semana\")\nelif dia == \"viernes\":\n    print(\"\u00daltimo d\u00eda laboral\")\nelif dia == \"s\u00e1bado\" or dia == \"domingo\":\n    print(\"Fin de semana\")\nelse:\n    print(\"D\u00eda no reconocido\")\n</code></pre> <p>Ventajas de <code>match</code>: </p> <ul> <li>Menor repetici\u00f3n de la variable.</li> <li>M\u00e1s legible en estructuras largas.</li> <li>Permite patrones m\u00e1s avanzados (como desestructuraci\u00f3n).</li> </ul>"},{"location":"2_2_ControlFlujo/#uso-con-valores-numericos","title":"Uso con valores num\u00e9ricos","text":"<p>Ejemplo de <code>match</code> con n\u00fameros</p> <pre><code># Evaluamos una nota num\u00e9rica\nnota = 8\n\nmatch nota:\n    case 10:\n        print(\"Matr\u00edcula de honor\")\n    case 9:\n        print(\"Sobresaliente\")\n    case 7 | 8:\n        print(\"Notable\")\n    case 5 | 6:\n        print(\"Aprobado\")\n    case _:\n        print(\"Suspenso\")\n</code></pre> <p>Este ejemplo muestra c\u00f3mo agrupar varios valores en un mismo <code>case</code>. Es \u00fatil cuando varios valores deben producir la misma salida.</p>"},{"location":"2_2_ControlFlujo/#uso-con-tuplas-y-desestructuracion","title":"Uso con tuplas y desestructuraci\u00f3n","text":"<p>En la siguiente sesi\u00f3n veremos veremos datos m\u00e1s avanzados como duplas que veremos en la siguiente sesi\u00f3n, pero, aun as\u00ed en este punto enunciaremos que una de las caracter\u00edsticas m\u00e1s potentes de <code>match</code> es su capacidad para trabajar con estructuras de datos como tuplas o listas.</p> <p>Evaluaci\u00f3n con tuplas</p> <pre><code># Evaluamos coordenadas en un plano\ncoordenada = (0, 0)\n\nmatch coordenada:\n    case (0, 0):\n        print(\"Origen\")\n    case (x, 0):\n        print(f\"Eje X en la posici\u00f3n {x}\")\n    case (0, y):\n        print(f\"Eje Y en la posici\u00f3n {y}\")\n    case (x, y):\n        print(f\"Punto en ({x}, {y})\")\n</code></pre> <ul> <li>Se puede extraer el contenido de la tupla directamente en el <code>case</code>.</li> <li>Si la estructura coincide, se asignan los valores a las variables <code>x</code> e <code>y</code>.</li> </ul>"},{"location":"2_2_ControlFlujo/#caso-por-defecto-con-_","title":"Caso por defecto con <code>_</code>","text":"<p>El patr\u00f3n <code>_</code> se utiliza para capturar cualquier valor que no haya coincidido con los casos anteriores. Es el t\u00edpico <code>default</code> que podemos ver en cualquier otro lenguaje.</p> <p>Veamos de nuevo otro ejemplo.</p> <p>Ejemplo de men\u00fa t\u00edpico para el caso de cualquier otro valor</p> <pre><code># Evaluamos una opci\u00f3n de men\u00fa\nopcion = \"salir\"\n\nmatch opcion:\n    case \"iniciar\":\n        print(\"Sistema iniciado\")\n    case \"configurar\":\n        print(\"Abriendo configuraci\u00f3n\")\n    case _:\n        print(\"Opci\u00f3n no v\u00e1lida\")\n</code></pre> <p>Siempre es recomendable incluir un <code>case _</code> para manejar entradas inesperadas o errores del usuario.</p> <p>Tambi\u00e9n puede ser \u00fatil cuando solicitamos unos valores concretos, y el usuario no teclea uno de estos valores</p> <p>Ejemplo completo con entrada del usuario</p> <pre><code># Simulamos un sistema de selecci\u00f3n de rol\nrol = input(\"Introduce tu rol (admin, editor, lector): \")\n\nmatch rol.lower():\n    case \"admin\":\n        print(\"Acceso completo al sistema.\")\n    case \"editor\":\n        print(\"Acceso limitado a edici\u00f3n de contenidos.\")\n    case \"lector\":\n        print(\"Acceso solo lectura.\")\n    case _:\n        print(\"Rol no reconocido.\")\n</code></pre> <p>en este ejemplo:  </p> <ul> <li>Se usa <code>.lower()</code> para normalizar la entrada del usuario.</li> <li>Se eval\u00faan diferentes roles con <code>match</code>.</li> <li>Se incluye un caso por defecto para manejar errores.</li> </ul>"},{"location":"2_2_ControlFlujo/#estructuras-de-control-de-bucles-en-python","title":"Estructuras de control de bucles en Python","text":"<p>En Python como en otros lenguajes, los bucles permiten ejecutar un bloque de c\u00f3digo varias veces. Son fundamentales para automatizar tareas repetitivas y recorrer estructuras de datos como listas, diccionarios o cadenas.</p> <p>Repasemos los m\u00e1s usados</p>"},{"location":"2_2_ControlFlujo/#bucle-for","title":"Bucle <code>for</code>","text":"<p>El bucle <code>for</code> se utiliza para iterar sobre una secuencia (como una lista, tupla, diccionario, conjunto o cadena).</p> <p>Sintaxis</p> <pre><code>for elemento in secuencia:\n    # Bloque de c\u00f3digo\n</code></pre> <p>El ejemplo t\u00edpico en el que iteramos un determinado n\u00famero de veces, se apoya en el uso del comando <code>range()</code>. El siguiente ejemplo puede ser muy representativo</p> <p>Usar <code>range()</code> para iterar 5 veces</p> <pre><code>for i in range(5):\n    print(\"N\u00famero:\", i)\n</code></pre> <p><code>range(5)</code> genera los n\u00fameros del 0 al 4. </p> <p>Realmente la funci\u00f3n <code>range()</code> se define de con dos par\u00e1metros, de forma que si solo se invoca con uno de ellos, se interpreta que el primero es <code>0</code>. Podemos ver con el ejemplo que el resultado incluye el valor de inicio pero excluye el de fin, por eso usamos <code>range( 1, 6)</code> para obtener del <code>1</code> al <code>5</code>.</p> <p>range() con dos par\u00e1metros</p> <pre><code>for i in range(1, 6):\n    print(\"N\u00famero:\", i)\n</code></pre> <p>Este bucle imprime los n\u00fameros del 1 al 5, uno por l\u00ednea</p> <p>pero <code>range()</code> tambi\u00e9n se puede invocar con 3 par\u00e1metros, siendo el tercer par\u00e1metro el incremento del rango:</p> <p><code>range()</code> con tres par\u00e1metros</p> <pre><code>for i in range(1, 11, 2):\n    print(\"N\u00famero:\", i)\n</code></pre> <p>Este bucle imprime los n\u00fameros impares del 1 al 10, uno por l\u00ednea</p> <p>y para acabar con <code>range()</code> veamos el ejemplo t\u00edpico de la tabla de multiplicar:</p> <p>Tabla de multiplicar con <code>for</code> y <code>range()</code> </p> <pre><code>tabla_del = 5\nfor i in range(1, 11):\n    print(f\"{tabla_del} x {i} = {tabla_del * i}\")\n</code></pre> <p>De nuevo vamos a utilizar una estructura que veremos en la siguiente sesi\u00f3n como son las listas, as\u00ed pues, siguiente ejemplo visualiza que podemos iterar por los elementos de una lista.</p> <p>Ejemplo de interacci\u00f3n sobre una lista</p> <pre><code>frutas = [\"manzana\", \"pl\u00e1tano\", \"cereza\"]\nfor fruta in frutas:\n    print(\"Me gusta la\", fruta)\n</code></pre> <p>Este bucle recorre cada elemento de la lista <code>frutas</code> y lo imprime.</p> <p>Y ya que estamos, existe la posibilidad de crear una lista utilizando la fuci\u00f3n <code>range()</code>, veamos el siguiente ejemplo: </p> <p>Crear una lista con <code>range()</code> </p> <pre><code>numeros = list(range(1, 6))\n    print(\"Lista:\", numeros)\n</code></pre> <p>Convierte el rango en una lista: <code>[ 1, 2, 3,4, 5]</code>.</p> <p>Se pueden colocar bucles dentro de otros bucles. Por supuesto, en Python podemos anidar bucle sin problemas. Veamos un ejemplo:</p> <p>Bucle anidado</p> <pre><code>for i in range(3):\n    for j in range(2):\n        print(f\"i={i}, j={j}\")\n</code></pre> <p>Este ejemplo muestra c\u00f3mo se combinan dos bucles <code>for</code> para recorrer pares de valores.</p> <p>Ejercicio propuesto con <code>for</code>:</p> <p>Crea un programa que pida al usuario un n\u00famero y muestre su tabla de multiplicar del 1 al 10 usando un bucle <code>for</code>.\"</p> Solucion <pre><code>numero = int(input(\"Introduce un n\u00famero: \"))\nfor i in range(1, 11):\n    print(f\"{numero} x {i} = {numero * i}\")\n</code></pre> <p>Variante: Consigue que la tabla multiplicar la imprima al rev\u00e9s, del 10 al 1</p>"},{"location":"2_2_ControlFlujo/#bucle-while","title":"Bucle <code>while</code>","text":"<p>El bucle <code>while</code> ejecuta su bloque de c\u00f3digo mientras una condici\u00f3n sea verdadera.</p> <p>Sintaxis</p> <pre><code>while condici\u00f3n:\n    # Bloque de c\u00f3digo\n</code></pre> <p>Contador simple con <code>while</code></p> <pre><code>contador = 0\nwhile contador &lt; 5:\n    print(\"Contador:\", contador)\n    contador += 1\n</code></pre> <p>Este bucle se repite mientras <code>contador</code> sea menor que 5.</p> <p>En generar podemos utilizar todos los operadores indicados anteriormente con el <code>if</code> as\u00ed que tenemos ejemplos con todo tipo de validaciones:</p> <p>Validaci\u00f3n de entrada</p> <pre><code>respuesta = \"\"\nwhile respuesta != \"s\u00ed\":\n    respuesta = input(\"\u00bfQuieres continuar? (s\u00ed/no): \")\n</code></pre> <p>Este bucle sigue preguntando hasta que el usuario responde \"s\u00ed\".</p> <p>Ejercicio sencillo con <code>while</code></p> <p>Repite de nuevo el bucle de la tabla de multiplicar, pero ahora con  <code>while</code>.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero: \"))\ni = 1  # Inicializamos el contador\nwhile i &lt;= 10:\n    print(f\"{numero} x {i} = {numero * i}\")\n    i += 1  # Incrementamos el contador\n</code></pre>"},{"location":"2_2_ControlFlujo/#control-de-bucles","title":"Control de bucles","text":"<p>Al igual que ocurre con otros lenguajes, tenemos dos comandos que permite alterar el control de los bucles, en este caso <code>break</code> para interrumpir la ejecuci\u00f3n del bucle, ya que provoca que el bucle finalice al pasar por esta funci\u00f3n y <code>continue</code> que provoca el salto del bucle a la siguiente iteracion, quedando las instrucciones siguiente a <code>continue</code> sin ejecuci\u00f3n en la iteraci\u00f3n correspondiente. </p> <p>Veamos dos ejemplos sencillos</p> <p><code>break</code></p> <p><code>break</code>: salir del bucle</p> <pre><code>for letra in \"Python\":\n    if letra == \"h\":\n        break\n    print(letra)\n</code></pre> <p>El bucle se detiene cuando encuentra la letra \"h\".</p> <p>y <code>continue</code></p> <p><code>continue</code>: saltar a la siguiente iteraci\u00f3n</p> <pre><code>for numero in range(5):\n    if numero == 2:\n        continue\n    print(\"N\u00famero:\", numero)\n</code></pre> <p>Cuando <code>numero</code> es 2, se omite esa iteraci\u00f3n.</p> <p>Buenas pr\u00e1cticas con los bucles</p> <ul> <li>Evita bucles infinitos: aseg\u00farate de que la condici\u00f3n del <code>while</code> se pueda cumplir.</li> <li>Usa nombres de variables descriptivos.</li> <li>Si puedes usar <code>for</code> en lugar de <code>while</code>, hazlo: suele ser m\u00e1s legible.</li> <li>No abuses de <code>break</code> y <code>continue</code>: pueden dificultar la comprensi\u00f3n del flujo.</li> </ul> <p>Ejercicio propuesto tablas de multiplicar</p> <p>Amplia el programa anterior de las tablas de multiplicar para que te pregunte de qu\u00e9 numero quiere hacer la tabla de multiplicar, genere la tabla de multiplicar y termine cuando le pidas la tabla del 0\"</p> Solucion <pre><code>while True:\n    numero = int(input(\"Introduce un n\u00famero (0 para salir): \"))\n\n    if numero == 0:\n        print(\"\u00a1Hasta luego!\")\n        break  # Sale del bucle si el n\u00famero es 0\n\n    print(f\"\\nTabla de multiplicar del {numero}:\")\n    for i in range(1, 11):\n        print(f\"{numero} x {i} = {numero * i}\")\n    print()  # L\u00ednea en blanco para separar tablas\n</code></pre> <p>Variante: si pides las tablas del 5 al 7, solo haga hasta el 5 y no hasta el 10</p>"},{"location":"2_2_ControlFlujo/#ejemplo-y-ejercicio-de-uso","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<pre><code># Mostrar si los n\u00fameros del 1 al 10 son pares o impares\nfor numero in range(1, 11):\n    if numero % 2 == 0:\n        print(f\"{numero} es par\")\n    else:\n        print(f\"{numero} es impar\")\n</code></pre> <p>Este ejemplo combina un bucle <code>for</code> con una estructura <code>if-else</code> para analizar cada n\u00famero y mostrar su tipo.</p> <p>Ejercicio: Contador de positivos y negativos</p> <p>Escribe un programa que:</p> <ol> <li>Pida al usuario 5 n\u00fameros (uno por uno).</li> <li>Use un bucle para recoger los datos.</li> <li>Use condiciones para contar cu\u00e1ntos son positivos y cu\u00e1ntos negativos.</li> <li>Al final, muestre los totales.</li> </ol> Soluci\u00f3n <pre><code>positivos = 0\nnegativos = 0\n\nfor i in range(5):\n    numero = int(input(\"Introduce un n\u00famero: \"))\n    if numero &gt; 0:\n        positivos += 1\n    elif numero &lt; 0:\n        negativos += 1\n\nprint(f\"N\u00fameros positivos: {positivos}\")\nprint(f\"N\u00fameros negativos: {negativos}\")\n</code></pre>"},{"location":"2_3_EstructurasDatos/","title":"Estructuras de datos o colecciones en Python","text":"<p>Python ofrece estructuras de datos vers\u00e1tiles que permiten organizar y manipular informaci\u00f3n de forma eficiente. En esta sesi\u00f3n trabajaremos con listas, diccionarios, tuplas y conjuntos, y aprenderemos a recorrerlos e incluso transformarlos con comprensiones de listas.</p>"},{"location":"2_3_EstructurasDatos/#tabla-resumen-de-estructuras-de-datos-o-colecciones","title":"Tabla resumen de estructuras de datos o colecciones","text":"<p>Sintetizando, estas son las estructuras que vamos a ver.</p> Tipo Nombre t\u00e9cnico Mutabilidad Orden Duplicados Ejemplo Lista <code>list</code> Mutable S\u00ed S\u00ed <code>[\"a\", \"b\", \"c\"]</code> Diccionario <code>dict</code> Mutable S\u00ed No (claves \u00fanicas) <code>{\"a\": 1, \"b\": 2}</code> Tupla <code>tuple</code> Inmutable S\u00ed S\u00ed <code>(\"a\", \"b\", \"c\")</code> Conjunto <code>set</code> Mutable No No <code>{\"a\", \"b\", \"c\"}</code> <p>Donde </p> <ul> <li>Mutabilidad: indica si una colecci\u00f3n puede modificarse despu\u00e9s de creada. Las listas, diccionarios y conjuntos son mutables; las tuplas no lo son.</li> <li>Orden: determina si los elementos mantienen el orden en que fueron a\u00f1adidos. Listas, tuplas y diccionarios (desde Python 3.7) conservan el orden; los conjuntos no.</li> <li>Duplicados: se\u00f1ala si se permiten elementos repetidos. Listas y tuplas s\u00ed los permiten; conjuntos y diccionarios no (las claves deben ser \u00fanicas).</li> </ul>"},{"location":"2_3_EstructurasDatos/#listas-en-python","title":"Listas en Python","text":"<p>Las listas son una de las estructuras de datos m\u00e1s utilizadas en Python. Permiten almacenar m\u00faltiples elementos en una sola variable, manteniendo el orden en que fueron a\u00f1adidos y ofreciendo gran flexibilidad para modificarlos, recorrerlos o aplicar operaciones sobre ellos.</p> <p>Una lista puede contener cualquier tipo de dato: n\u00fameros, cadenas, booleanos, e incluso otras listas o estructuras m\u00e1s complejas. Adem\u00e1s, se pueden mezclar tipos dentro de una misma lista, aunque no siempre es recomendable por cuestiones de claridad y mantenimiento.</p>"},{"location":"2_3_EstructurasDatos/#creacion-y-acceso-a-elementos","title":"Creaci\u00f3n y acceso a elementos","text":"<p>Las listas se definen entre corchetes <code>[]</code> y los elementos se separan por comas. El acceso se realiza mediante \u00edndices, empezando desde 0. Tambi\u00e9n se pueden usar \u00edndices negativos para contar desde el final.</p> <p>Ejemplo de creaci\u00f3n de listas</p> <pre><code># Creamos una lista con nombres de frutas\nfrutas = [\"manzana\", \"pl\u00e1tano\", \"naranja\"]\n\n# Accedemos al primer elemento (\u00edndice 0)\nprint(frutas[0])  # manzana\n\n# Accedemos al \u00faltimo elemento usando \u00edndice negativo\nprint(frutas[-1])  # naranja\n</code></pre>"},{"location":"2_3_EstructurasDatos/#modificacion-de-elementos","title":"Modificaci\u00f3n de elementos","text":"<p>Las listas son mutables, lo que significa que sus elementos pueden cambiar despu\u00e9s de haber sido creados. Esto permite actualizar valores f\u00e1cilmente sin tener que crear una nueva lista.</p> <p>Ejemplo de modificaci\u00f3n de listas</p> <pre><code># Cambiamos el segundo elemento\nfrutas[1] = \"pera\"\n\nprint(frutas)  # ['manzana', 'pera', 'naranja']\n</code></pre>"},{"location":"2_3_EstructurasDatos/#anadir-elementos","title":"A\u00f1adir elementos","text":"<p>El m\u00e9todo <code>append()</code> agrega un nuevo elemento al final de la lista. Es uno de los m\u00e9todos m\u00e1s utilizados cuando se construyen listas din\u00e1micamente, como al leer datos del usuario o procesar resultados.</p> <p>Ejemplo para a\u00f1adir elementos a listas</p> <pre><code># A\u00f1adimos una nueva fruta al final de la lista\nfrutas.append(\"kiwi\")\n\nprint(frutas)  # ['manzana', 'pera', 'naranja', 'kiwi']\n</code></pre>"},{"location":"2_3_EstructurasDatos/#insertar-en-una-posicion-especifica","title":"Insertar en una posici\u00f3n espec\u00edfica","text":"<p>El m\u00e9todo <code>insert()</code> permite colocar un elemento en una posici\u00f3n concreta, desplazando los dem\u00e1s hacia la derecha. Es \u00fatil cuando se quiere mantener un orden espec\u00edfico.</p> <p>Ejemplo de inserci\u00f3n en posici\u00f3n espec\u00edfica</p> <pre><code># Insertamos una fruta en la segunda posici\u00f3n (\u00edndice 1)\nfrutas.insert(1, \"mel\u00f3n\")\n\nprint(frutas)  # ['manzana', 'mel\u00f3n', 'pera', 'naranja', 'kiwi']\n</code></pre>"},{"location":"2_3_EstructurasDatos/#eliminar-elementos","title":"Eliminar elementos","text":"<p>Con <code>remove()</code> se elimina la primera aparici\u00f3n del valor indicado. Si el valor no existe, se genera un error. Para evitarlo, se puede comprobar antes con <code>in</code>.</p> <p>Ejemplo borrado de elementos</p> <pre><code># Eliminamos el elemento \"naranja\"\nfrutas.remove(\"naranja\")\n\nprint(frutas)  # ['manzana', 'mel\u00f3n', 'pera', 'kiwi']\n</code></pre> <p>Las listas ofrecen m\u00e9todos como <code>count()</code> para contar elementos, <code>sort()</code> para ordenarlos, y <code>reverse()</code> para invertir el orden. Estas operaciones son muy \u00fatiles en tareas de an\u00e1lisis y presentaci\u00f3n de datos.</p>"},{"location":"2_3_EstructurasDatos/#comprensiones-de-listas","title":"Comprensiones de listas","text":"<p>Las comprensiones de listas permiten crear nuevas listas de forma compacta y expresiva, aplicando condiciones o transformaciones.</p> <p>Ejemplo de generaci\u00f3n de listas de forma autom\u00e1tica</p> <pre><code># Creamos una lista de cuadrados del 1 al 5\ncuadrados = [x**2 for x in range(1, 6)]\nprint(cuadrados)  # [1, 4, 9, 16, 25]\n\n# Filtramos solo los pares\npares = [x for x in range(10) if x % 2 == 0]\nprint(pares)  # [0, 2, 4, 6, 8]\n</code></pre> <p>Esta t\u00e9cnica es \u00fatil para generar listas a partir de otras, aplicar filtros o realizar c\u00e1lculos en una sola l\u00ednea.</p>"},{"location":"2_3_EstructurasDatos/#resumen-de-operaciones-utiles","title":"Resumen de operaciones \u00fatiles","text":"<p>Las listas en Python no solo permiten almacenar m\u00faltiples elementos, sino que tambi\u00e9n ofrecen una serie de m\u00e9todos integrados que facilitan su manipulaci\u00f3n. Estos m\u00e9todos permiten a\u00f1adir, eliminar, ordenar, buscar y transformar los elementos de forma sencilla.</p> M\u00e9todo Descripci\u00f3n Ejemplo Resultado <code>append(x)</code> A\u00f1ade el elemento <code>x</code> al final de la lista <code>lista.append(\"uva\")</code> <code>[\"manzana\", \"pera\", \"uva\"]</code> <code>insert(i, x)</code> Inserta el elemento <code>x</code> en la posici\u00f3n <code>i</code> <code>lista.insert(1, \"mel\u00f3n\")</code> <code>[\"manzana\", \"mel\u00f3n\", \"pera\"]</code> <code>remove(x)</code> Elimina la primera aparici\u00f3n del elemento <code>x</code> <code>lista.remove(\"pera\")</code> <code>[\"manzana\", \"mel\u00f3n\"]</code> <code>pop()</code> Elimina y devuelve el \u00faltimo elemento <code>lista.pop()</code> <code>[\"manzana\", \"mel\u00f3n\"]</code> <code>pop(i)</code> Elimina y devuelve el elemento en la posici\u00f3n <code>i</code> <code>lista.pop(0)</code> <code>[\"mel\u00f3n\", \"pera\"]</code> <code>count(x)</code> Devuelve cu\u00e1ntas veces aparece el elemento <code>x</code> <code>lista.count(\"pera\")</code> <code>1</code> <code>index(x)</code> Devuelve el \u00edndice de la primera aparici\u00f3n del elemento <code>x</code> <code>lista.index(\"pera\")</code> <code>2</code> <code>sort()</code> Ordena la lista de forma ascendente (alfab\u00e9tica o num\u00e9rica) <code>lista.sort()</code> <code>[\"manzana\", \"pera\", \"uva\"]</code> <code>reverse()</code> Invierte el orden de los elementos <code>lista.reverse()</code> <code>[\"uva\", \"pera\", \"manzana\"]</code> <code>clear()</code> Elimina todos los elementos de la lista <code>lista.clear()</code> <code>[]</code> <code>copy()</code> Devuelve una copia superficial de la lista <code>nueva_lista = lista.copy()</code> <code>[\"manzana\", \"pera\", \"uva\"]</code> <p>Adem\u00e1s de los m\u00e9todos propios del tipo <code>list</code>, Python ofrece instrucciones y funciones integradas que permiten manipular listas desde fuera. Estas operaciones no se invocan con punto (<code>.</code>), pero son igualmente \u00fatiles para eliminar, consultar o transformar listas.</p> Instrucci\u00f3n / Funci\u00f3n Descripci\u00f3n Ejemplo Resultado <code>del lista[i]</code> Elimina el elemento en la posici\u00f3n <code>i</code> <code>del lista[1]</code> <code>[\"manzana\", \"uva\"]</code> <code>del lista[a:b]</code> Elimina un segmento de la lista entre las posiciones <code>a</code> y <code>b</code> <code>del lista[0:2]</code> <code>[\"uva\"]</code> <code>len(lista)</code> Devuelve el n\u00famero de elementos en la lista <code>len(lista)</code> <code>3</code> <code>sum(lista)</code> Devuelve la suma de los elementos num\u00e9ricos de la lista <code>sum([1, 2, 3])</code> <code>6</code> <code>max(lista)</code> Devuelve el valor m\u00e1ximo de la lista <code>max([1, 5, 3])</code> <code>5</code> <code>min(lista)</code> Devuelve el valor m\u00ednimo de la lista <code>min([1, 5, 3])</code> <code>1</code> <code>sorted(lista)</code> Devuelve una nueva lista ordenada sin modificar la original <code>sorted([\"pera\", \"manzana\", \"uva\"])</code> <code>[\"manzana\", \"pera\", \"uva\"]</code> <code>enumerate(lista)</code> Devuelve un objeto iterable con pares <code>(\u00edndice, valor)</code> <code>for i, v in enumerate(lista): ...</code> <code>(0, \"manzana\"), (1, \"pera\")...</code> <code>zip(lista1, lista2)</code> Combina dos listas en pares <code>(x, y)</code> <code>zip([\"a\", \"b\"], [1, 2])</code> <code>[(\"a\", 1), (\"b\", 2)]</code> <p>M\u00e1s info</p> <ul> <li>Documentaci\u00f3n oficial del tipo <code>list</code>   Explica los m\u00e9todos como <code>append()</code>, <code>insert()</code>, <code>remove()</code>, <code>pop()</code>, <code>sort()</code>, <code>reverse()</code>, <code>clear()</code>, <code>copy()</code>, etc.</li> <li> <p>Funciones integradas de Python (<code>built-in functions</code>)   Aqu\u00ed encontrar\u00e1s <code>len()</code>, <code>sum()</code>, <code>max()</code>, <code>min()</code>, <code>sorted()</code>, <code>enumerate()</code>, <code>zip()</code>, entre muchas otras.</p> </li> <li> <p>Referencia del lenguaje Python   Incluye instrucciones como <code>del</code>, estructuras de control, y detalles sobre c\u00f3mo funciona el lenguaje.</p> </li> </ul>"},{"location":"2_3_EstructurasDatos/#ejemplo-y-ejercicio-de-uso","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<p>Este ejemplo muestra c\u00f3mo combinar varios m\u00e9todos para construir y modificar una lista paso a paso. El resultado final ser\u00eda una lista ordenada con los elementos actualizados.</p> <p>Ejemplo combinado</p> <pre><code># Lista inicial\nfrutas = [\"manzana\", \"pera\", \"naranja\"]\n\n# A\u00f1adir una fruta\nfrutas.append(\"kiwi\")\n\n# Insertar en posici\u00f3n 1\nfrutas.insert(1, \"mel\u00f3n\")\n\n# Eliminar una fruta\nfrutas.remove(\"naranja\")\n\n# Ordenar la lista\nfrutas.sort()\n\n# Mostrar resultado final\nprint(frutas)\n</code></pre> <p>Para finalizar con las listas, vamos a realizar un ejercicio para practicar los m\u00e9todos <code>append()</code>, <code>insert()</code>, <code>pop()</code> y la modificaci\u00f3n por \u00edndice, consolidando el uso b\u00e1sico de listas en Python.</p> <p>Ejercicio b\u00e1sico de listas</p> <p>Crea una lista con tres colores. A\u00f1ade un cuarto color, cambia el segundo por otro, inserta uno en la primera posici\u00f3n, elimina el \u00faltimo y muestra la lista final por pantalla.</p> Solucion <pre><code># Lista inicial\ncolores = [\"rojo\", \"verde\", \"azul\"]\n\n# A\u00f1adir un cuarto color\ncolores.append(\"amarillo\")\n\n# Cambiar el segundo color\ncolores[1] = \"morado\"\n\n# Insertar en la primera posici\u00f3n\ncolores.insert(0, \"negro\")\n\n# Eliminar el \u00faltimo color\ncolores.pop()\n\n# Mostrar la lista final\nprint(colores)\n</code></pre>"},{"location":"2_3_EstructurasDatos/#diccionarios-en-python","title":"Diccionarios en Python","text":"<p>Los diccionarios son una estructura de datos fundamental en Python que permite almacenar informaci\u00f3n en forma de pares clave-valor. A diferencia de las listas, donde cada elemento tiene una posici\u00f3n num\u00e9rica (\u00edndice), en los diccionarios cada valor est\u00e1 asociado a una clave \u00fanica que act\u00faa como identificador.</p> <p>Esta estructura es especialmente \u00fatil cuando se necesita representar entidades con atributos, como un usuario con nombre, edad y correo, o un producto con precio, stock y categor\u00eda. En contextos de desarrollo modular o aplicaciones como Odoo, los diccionarios se asemejan a registros o modelos de datos, lo que los convierte en una herramienta clave para organizar y manipular informaci\u00f3n.</p> Diccionarios vs Listas"},{"location":"2_3_EstructurasDatos/#definicion-de-diccionarios","title":"Definici\u00f3n de Diccionarios","text":"<p>Un diccionario se define entre llaves <code>{}</code>, y cada par clave-valor se separa por dos puntos <code>:</code>. Las claves suelen ser cadenas de texto, aunque tambi\u00e9n pueden ser n\u00fameros o tuplas inmutables.</p> <p>Definici\u00f3n de diccionario</p> <pre><code># Diccionario que representa un usuario\nusuario = {\n    \"nombre\": \"Sergio\",\n    \"edad\": 25,\n    \"correo\": \"sergio@example.com\"\n}\n</code></pre> <p>En este ejemplo, <code>\"nombre\"</code>, <code>\"edad\"</code> y <code>\"correo\"</code> son claves, y sus valores son <code>\"Sergio\"</code>, <code>25</code> y <code>\"sergio@example.com\"</code> respectivamente.</p>"},{"location":"2_3_EstructurasDatos/#acceso-a-valores","title":"Acceso a valores","text":"<p>Para acceder a un valor, se utiliza la clave entre corchetes:</p> <pre><code>print(usuario[\"nombre\"])  # Sergio\n</code></pre> <p>Si se intenta acceder a una clave que no existe, se genera un error <code>KeyError</code>. Para evitarlo, se puede usar el m\u00e9todo <code>get()</code>.</p> <pre><code>print(usuario.get(\"poblaci\u00f3n\"))  # None\n</code></pre>"},{"location":"2_3_EstructurasDatos/#modificacion-y-ampliacion","title":"Modificaci\u00f3n y ampliaci\u00f3n","text":"<p>Los diccionarios son mutables, lo que significa que se pueden modificar, a\u00f1adir o eliminar elementos despu\u00e9s de su creaci\u00f3n.</p> <p>Ejemplo de modificaci\u00f3n y ampliaci\u00f3n de diccionario</p> <pre><code># Modificar un valor existente\nusuario[\"edad\"] = 26\n\n# A\u00f1adir una nueva clave\nusuario[\"poblaci\u00f3n\"] = \"Valencia\"\n</code></pre>"},{"location":"2_3_EstructurasDatos/#metodos-mas-importantes","title":"M\u00e9todos m\u00e1s importantes","text":"<p>A continuaci\u00f3n se presentan los m\u00e9todos m\u00e1s \u00fatiles para trabajar con diccionarios, junto con su prop\u00f3sito y ejemplos pr\u00e1cticos.</p> <ul> <li><code>get(clave)</code></li> </ul> <p>Devuelve el valor asociado a la clave indicada. Si no existe, devuelve <code>None</code> o un valor por defecto si se especifica.</p> <p>Ejemplo de uso de <code>get()</code></p> <pre><code>print(usuario.get(\"correo\"))         # sergio@example.com\nprint(usuario.get(\"tel\u00e9fono\", \"N/D\"))  # N/D\n</code></pre> <p>Ideal para acceder a claves opcionales sin provocar errores.</p> <ul> <li><code>keys()</code>, <code>values()</code>, <code>items()</code></li> </ul> <p>Estos tres m\u00e9todos devuelven vistas del contenido del diccionario, ya sean las claves, los valores o ambos:</p> <p>Ejemplo de usos de <code>keys()</code>, <code>values()</code>, <code>items()</code> </p> <pre><code>print(usuario.keys())    # dict_keys(['nombre', 'edad', 'correo', 'poblaci\u00f3n'])\nprint(usuario.values())  # dict_values(['Sergio', 26, 'sergio@example.com', 'Valencia'])\nprint(usuario.items())   # dict_items([('nombre', 'Sergio'), ('edad', 26), ...])\n</code></pre> <p>Son \u00fatiles para recorrer el diccionario con bucles <code>for</code>:</p> <p>Ejemplo de recuperaci\u00f3n de diccionario con un <code>for</code></p> <pre><code>for clave, valor in usuario.items():\n    print(f\"{clave}: {valor}\")\n</code></pre> <ul> <li><code>update()</code></li> </ul> <p>Permite a\u00f1adir o modificar m\u00faltiples claves a la vez, pasando otro diccionario como argumento.</p> <p>Ejemplo de actualizaci\u00f3n de varias claves a la vez</p> <pre><code>usuario.update({\n    \"edad\": 27,\n    \"tel\u00e9fono\": \"600123456\"\n})\n</code></pre> <p>Muy \u00fatil para fusionar informaci\u00f3n o actualizar registros.</p> <ul> <li><code>pop(clave)</code></li> </ul> <p>Elimina la clave indicada y devuelve su valor. Si no existe, lanza un error.</p> <p>Ejemplo de eliminaci\u00f3n de uso de <code>pop()</code></p> <pre><code>correo = usuario.pop(\"correo\")\nprint(correo)  # sergio@example.com\n</code></pre> <p>Se puede usar para extraer datos y limpiar el diccionario.</p> <ul> <li><code>clear()</code></li> </ul> <p>Elimina todos los elementos del diccionario, dej\u00e1ndolo vac\u00edo.</p> <p>Ejemplo de uso de <code>clear()</code></p> <pre><code>usuario.clear()\nprint(usuario)  # {}\n</code></pre> <ul> <li><code>copy()</code></li> </ul> <p>Devuelve una copia superficial del diccionario. Es \u00fatil para duplicar estructuras sin modificar el original.</p> <p>Ejemplo de uso de <code>copy()</code></p> <pre><code>usuario_copia = usuario.copy()\n</code></pre> <ul> <li>Tabla de m\u00e9todos</li> </ul> M\u00e9todo Descripci\u00f3n Ejemplo Resultado <code>get(clave)</code> Devuelve el valor asociado a la clave, o <code>None</code> si no existe <code>usuario.get(\"edad\")</code> <code>25</code> <code>keys()</code> Devuelve una vista con todas las claves <code>usuario.keys()</code> <code>dict_keys(['nombre', 'edad'])</code> <code>values()</code> Devuelve una vista con todos los valores <code>usuario.values()</code> <code>dict_values(['Sergio', 25])</code> <code>items()</code> Devuelve una vista con pares clave-valor <code>usuario.items()</code> <code>dict_items([('nombre', 'Sergio'), ...])</code> <code>update()</code> A\u00f1ade o modifica claves con nuevos valores <code>usuario.update({\"edad\": 26})</code> <code>{'nombre': 'Sergio', 'edad': 26}</code> <code>pop(clave)</code> Elimina la clave indicada y devuelve su valor <code>usuario.pop(\"edad\")</code> <code>25</code> <code>clear()</code> Elimina todos los elementos del diccionario <code>usuario.clear()</code> <code>{}</code> <code>copy()</code> Devuelve una copia superficial del diccionario <code>nuevo = usuario.copy()</code> <code>{'nombre': 'Sergio', 'edad': 25}</code>"},{"location":"2_3_EstructurasDatos/#ejemplo-y-ejercicio-de-uso_1","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<p>En el siguiente ejemplo se muestra c\u00f3mo consultar, modificar y eliminar informaci\u00f3n de un diccionario de forma segura y eficiente.</p> <p>Ejemplo combinado de operaciones con diccionarios</p> <pre><code>producto = {\n    \"nombre\": \"Teclado\",\n    \"precio\": 29.99,\n    \"stock\": 100\n}\n\n# Mostrar claves y valores\nfor clave, valor in producto.items():\n    print(f\"{clave}: {valor}\")\n\n# Actualizar precio\nproducto[\"precio\"] = 24.99\n\n# A\u00f1adir categor\u00eda\nproducto[\"categor\u00eda\"] = \"Perif\u00e9ricos\"\n\n# Eliminar stock\nproducto.pop(\"stock\")\n\nprint(producto)\n</code></pre> <p>Ahora intenta realizar el siguiente ejercicio sin mirar la soluc\u00ed\u00f3n. </p> <p>Ejercicio b\u00e1sico: Diccionario de producto</p> <p>Crea un diccionario llamado <code>producto</code> que contenga la siguiente informaci\u00f3n:</p> <ul> <li><code>\"nombre\"</code>: <code>\"Rat\u00f3n \u00f3ptico\"</code></li> <li><code>\"precio\"</code>: <code>19.95</code></li> <li><code>\"stock\"</code>: <code>50</code></li> </ul> <p>y a continuaci\u00f3n, realiza las siguientes operaciones:</p> <ol> <li>Muestra el nombre del producto por pantalla.</li> <li>Modifica el precio a <code>17.50</code>.</li> <li>A\u00f1ade una nueva clave <code>\"marca\"</code> con el valor <code>\"Logitech\"</code>.</li> <li>Elimina la clave <code>\"stock\"</code> del diccionario.</li> <li>Muestra el diccionario completo al final.</li> </ol> <p>Pistas   </p> <ul> <li>Usa corchetes <code>[]</code> para acceder y modificar valores.</li> <li>Usa <code>del</code> para eliminar una clave.</li> <li>Usa <code>print()</code> para mostrar resultados.</li> </ul> Soluci\u00f3n <pre><code># Paso 1: Crear el diccionario inicial\nproducto = {\n    \"nombre\": \"Rat\u00f3n \u00f3ptico\",\n    \"precio\": 19.95,\n    \"stock\": 50\n}\n\n# Paso 2: Mostrar el nombre del producto\nprint(producto[\"nombre\"])  # Rat\u00f3n \u00f3ptico\n\n# Paso 3: Modificar el precio\nproducto[\"precio\"] = 17.50\n\n# Paso 4: A\u00f1adir la clave \"marca\"\nproducto[\"marca\"] = \"Logitech\"\n\n# Paso 5: Eliminar la clave \"stock\"\ndel producto[\"stock\"]\n\n# Paso 6: Mostrar el diccionario completo\nprint(producto)\n</code></pre>"},{"location":"2_3_EstructurasDatos/#tuplas","title":"Tuplas","text":"<p>Las tuplas son colecciones ordenadas pero inmutables. Se usan cuando los datos no deben cambiar, como coordenadas o fechas.</p> <pre><code># Definimos una tupla con coordenadas\ncoordenada = (10.5, 20.3)\n\n# Accedemos a sus elementos por \u00edndice\nprint(coordenada[0])  # 10.5\n</code></pre> <p>Las tuplas se comportan como listas, pero no pueden modificarse. Esto las hace \u00fatiles para representar datos constantes.</p>"},{"location":"2_3_EstructurasDatos/#ejemplo-y-ejercicio-de-uso_2","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<p>En el siguiente ejemplo se muestra c\u00f3mo crear una tupla, acceder a sus elementos y utilizarla para representar datos que no deben modificarse.</p> <p>Ejemplo combinado de uso de tuplas</p> <pre><code># Tupla que representa una coordenada en el plano\ncoordenada = (10.5, 20.3)\n\n# Acceder a los elementos por \u00edndice\nx = coordenada[0]\ny = coordenada[1]\n\nprint(f\"La coordenada X es {x}\")\nprint(f\"La coordenada Y es {y}\")\n\n# Mostrar la tupla completa\nprint(\"Coordenada completa:\", coordenada)\n</code></pre> <p>Las tuplas son \u00fatiles cuando se necesita agrupar datos que no deben cambiar, como coordenadas, fechas o combinaciones fijas. A diferencia de las listas, no se pueden modificar ni a\u00f1adir elementos una vez creadas.</p> <p>Ahora intenta realizar el siguiente ejercicio sin mirar la soluci\u00f3n.</p> <p>Ejercicio b\u00e1sico: Tupla de datos personales</p> <p>Crea una tupla llamada <code>persona</code> que contenga la siguiente informaci\u00f3n:</p> <ul> <li>Nombre: <code>\"Sergio\"</code></li> <li>Edad: <code>25</code></li> <li>Ciudad: <code>\"Alberic\"</code></li> </ul> <p>y a continuaci\u00f3n, realiza las siguientes operaciones:</p> <ol> <li>Muestra el nombre por pantalla.</li> <li>Muestra la edad por pantalla.</li> <li>Muestra la ciudad por pantalla.</li> <li>Muestra la tupla completa.</li> </ol> <p>Pistas</p> <ul> <li>Usa \u00edndices para acceder a los elementos: <code>persona[0]</code>, <code>persona[1]</code>, etc.</li> <li>Usa <code>print()</code> para mostrar resultados.</li> </ul> Soluci\u00f3n <pre><code># Paso 1: Crear la tupla\npersona = (\"Sergio\", 25, \"Alberic\")\n\n# Paso 2: Mostrar el nombre\nprint(\"Nombre:\", persona[0])\n\n# Paso 3: Mostrar la edad\nprint(\"Edad:\", persona[1])\n\n# Paso 4: Mostrar la ciudad\nprint(\"Ciudad:\", persona[2])\n\n# Paso 5: Mostrar la tupla completa\nprint(\"Datos completos:\", persona)\n</code></pre>"},{"location":"2_3_EstructurasDatos/#sets-conjuntos","title":"Sets (Conjuntos)","text":"<p>Los conjuntos son colecciones no ordenadas y sin elementos duplicados. Se utilizan para eliminar duplicados o realizar operaciones de pertenencia.</p> <pre><code># Creamos un conjunto de colores\ncolores = {\"rojo\", \"verde\", \"azul\", \"rojo\"}\n\n# Mostramos el conjunto\nprint(colores)  # {'rojo', 'verde', 'azul'}\n\n# A\u00f1adimos un nuevo color\ncolores.add(\"amarillo\")\n</code></pre> <p>Los sets eliminan autom\u00e1ticamente los duplicados y permiten operaciones como uni\u00f3n, intersecci\u00f3n y diferencia.</p>"},{"location":"2_3_EstructurasDatos/#metodos-mas-importantes_1","title":"M\u00e9todos m\u00e1s importantes","text":"<p>A continuaci\u00f3n se presentan los m\u00e9todos m\u00e1s \u00fatiles para trabajar con conjuntos (<code>set</code>) en Python, junto con su prop\u00f3sito y ejemplos pr\u00e1cticos.</p> <ul> <li><code>add(elemento)</code></li> </ul> <p>A\u00f1ade un nuevo elemento al conjunto. Si el elemento ya existe, no se a\u00f1ade de nuevo (los sets no permiten duplicados).</p> <p>Ejemplo de uso de <code>add()</code></p> <pre><code>colores = {\"rojo\", \"verde\"}\ncolores.add(\"azul\")\nprint(colores)  # {'rojo', 'verde', 'azul'}\n</code></pre> <p>Ideal para construir conjuntos din\u00e1micamente sin preocuparse por duplicados.</p> <ul> <li><code>discard(elemento)</code></li> </ul> <p>Elimina el elemento indicado si existe. Si no est\u00e1 presente, no lanza error.</p> <p>Ejemplo de uso de <code>discard()</code></p> <pre><code>colores = {\"rojo\", \"verde\"}\ncolores.discard(\"rojo\")\ncolores.discard(\"amarillo\")  # No lanza error\nprint(colores)  # {'verde'}\n</code></pre> <p>\u00datil para eliminar elementos sin necesidad de comprobar si existen.</p> <ul> <li><code>remove(elemento)</code></li> </ul> <p>Elimina el elemento indicado. Si no existe, lanza un error <code>KeyError</code>.</p> <p>Ejemplo de uso de <code>remove()</code></p> <pre><code>colores = {\"rojo\", \"verde\"}\ncolores.remove(\"verde\")\nprint(colores)  # {'rojo'}\n</code></pre> <p>Se recomienda usar <code>discard()</code> si no se quiere gestionar errores manualmente.</p> <ul> <li><code>pop()</code></li> </ul> <p>Elimina y devuelve un elemento aleatorio del conjunto. Como los sets no est\u00e1n ordenados, no se puede predecir cu\u00e1l ser\u00e1 eliminado.</p> <p>Ejemplo de uso de <code>pop()</code></p> <pre><code>colores = {\"rojo\", \"verde\", \"azul\"}\neliminado = colores.pop()\nprint(\"Elemento eliminado:\", eliminado)\nprint(\"Conjunto restante:\", colores)\n</code></pre> <p>\u00datil para vaciar progresivamente un conjunto o extraer elementos sin orden espec\u00edfico.</p> <ul> <li><code>clear()</code></li> </ul> <p>Elimina todos los elementos del conjunto, dej\u00e1ndolo vac\u00edo.</p> <p>Ejemplo de uso de <code>clear()</code></p> <pre><code>colores = {\"rojo\", \"verde\"}\ncolores.clear()\nprint(colores)  # set()\n</code></pre> <p>Ideal para reiniciar la colecci\u00f3n sin crear una nueva variable.</p> <ul> <li><code>copy()</code></li> </ul> <p>Devuelve una copia superficial del conjunto. Es \u00fatil para duplicar conjuntos sin modificar el original.</p> <p>Ejemplo de uso de <code>copy()</code></p> <pre><code>colores = {\"rojo\", \"verde\"}\ncopia = colores.copy()\nprint(copia)  # {'rojo', 'verde'}\n</code></pre> <ul> <li><code>union(set2)</code></li> </ul> <p>Devuelve un nuevo conjunto con todos los elementos de ambos conjuntos, sin duplicados.</p> <p>Ejemplo de uso de <code>union()</code></p> <pre><code>a = {\"rojo\", \"verde\"}\nb = {\"azul\", \"verde\"}\nresultado = a.union(b)\nprint(resultado)  # {'rojo', 'verde', 'azul'}\n</code></pre> <ul> <li><code>intersection(set2)</code></li> </ul> <p>Devuelve un conjunto con los elementos comunes entre ambos conjuntos.</p> <p>Ejemplo de uso de <code>intersection()</code></p> <pre><code>a = {\"rojo\", \"verde\"}\nb = {\"verde\", \"azul\"}\ncomunes = a.intersection(b)\nprint(comunes)  # {'verde'}\n</code></pre> <ul> <li><code>difference(set2)</code></li> </ul> <p>Devuelve los elementos que est\u00e1n en el primer conjunto pero no en el segundo.</p> <p>Ejemplo de uso de <code>difference()</code></p> <pre><code>a = {\"rojo\", \"verde\", \"azul\"}\nb = {\"verde\", \"amarillo\"}\nexclusivos = a.difference(b)\nprint(exclusivos)  # {'rojo', 'azul'}\n</code></pre>"},{"location":"2_3_EstructurasDatos/#tabla-de-metodos","title":"Tabla de m\u00e9todos","text":"M\u00e9todo Descripci\u00f3n Ejemplo Resultado <code>add(x)</code> A\u00f1ade el elemento <code>x</code> al conjunto <code>s.add(\"azul\")</code> <code>{\"rojo\", \"verde\", \"azul\"}</code> <code>discard(x)</code> Elimina <code>x</code> si existe, sin error si no est\u00e1 <code>s.discard(\"rojo\")</code> <code>{\"verde\"}</code> <code>remove(x)</code> Elimina <code>x</code>; lanza error si no existe <code>s.remove(\"verde\")</code> <code>{\"rojo\"}</code> <code>pop()</code> Elimina y devuelve un elemento aleatorio <code>s.pop()</code> Elemento eliminado <code>clear()</code> Elimina todos los elementos del conjunto <code>s.clear()</code> <code>set()</code> <code>copy()</code> Devuelve una copia superficial del conjunto <code>nuevo = s.copy()</code> <code>{\"rojo\", \"verde\"}</code> <code>union(set2)</code> Devuelve un conjunto con todos los elementos de ambos conjuntos <code>a.union(b)</code> <code>{\"rojo\", \"verde\", \"azul\"}</code> <code>intersection(set2)</code> Devuelve los elementos comunes entre dos conjuntos <code>a.intersection(b)</code> <code>{\"verde\"}</code> <code>difference(set2)</code> Devuelve los elementos que est\u00e1n en el primero pero no en el segundo <code>a.difference(b)</code> <code>{\"rojo\", \"azul\"}</code>"},{"location":"2_3_EstructurasDatos/#ejemplo-y-ejercicio-de-uso_3","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<p>En el siguiente ejemplo se muestra c\u00f3mo crear un conjunto, a\u00f1adir y eliminar elementos, y realizar operaciones t\u00edpicas como uni\u00f3n, intersecci\u00f3n y diferencia entre conjuntos.</p> <p>Ejemplo combinado de operaciones con sets</p> <pre><code># Creamos dos conjuntos de colores\ncolores_a = {\"rojo\", \"verde\", \"azul\"}\ncolores_b = {\"azul\", \"amarillo\", \"negro\"}\n\n# A\u00f1adir un nuevo color\ncolores_a.add(\"blanco\")\n\n# Eliminar un color\ncolores_b.discard(\"negro\")\n\n# Uni\u00f3n de conjuntos\ntodos_colores = colores_a.union(colores_b)\n\n# Intersecci\u00f3n de conjuntos\ncomunes = colores_a.intersection(colores_b)\n\n# Diferencia de conjuntos\nexclusivos_a = colores_a.difference(colores_b)\n\nprint(\"Todos los colores:\", todos_colores)\nprint(\"Colores comunes:\", comunes)\nprint(\"Colores exclusivos de A:\", exclusivos_a)\n</code></pre> <p>Los sets son \u00fatiles cuando se necesita trabajar con colecciones sin duplicados y realizar operaciones de comparaci\u00f3n entre grupos de elementos. A diferencia de las listas, no mantienen el orden y no permiten elementos repetidos.</p> <p>Ahora intenta realizar el siguiente ejercicio sin mirar la soluci\u00f3n.</p> <p>Ejercicio b\u00e1sico: Conjunto de animales</p> <p>Crea un conjunto llamado <code>animales</code> con los siguientes elementos:</p> <ul> <li><code>\"perro\"</code></li> <li><code>\"gato\"</code></li> <li><code>\"loro\"</code></li> <li><code>\"gato\"</code> (duplicado intencionado)</li> </ul> <p>y a continuaci\u00f3n, realiza las siguientes operaciones:</p> <ol> <li>A\u00f1ade el animal <code>\"conejo\"</code> al conjunto.</li> <li>Elimina <code>\"perro\"</code> del conjunto.</li> <li>Crea otro conjunto llamado <code>animales_dom\u00e9sticos</code> con <code>\"gato\"</code>, <code>\"conejo\"</code> y <code>\"pez\"</code>.</li> <li>Muestra la intersecci\u00f3n entre ambos conjuntos.</li> <li>Muestra la diferencia entre <code>animales</code> y <code>animales_dom\u00e9sticos</code>.</li> </ol> <p>Pistas</p> <ul> <li>Usa <code>add()</code> para a\u00f1adir elementos.</li> <li>Usa <code>discard()</code> para eliminar sin error.</li> <li>Usa <code>intersection()</code> y <code>difference()</code> para comparar conjuntos.</li> </ul> Soluci\u00f3n <pre><code># Paso 1: Crear el conjunto inicial\nanimales = {\"perro\", \"gato\", \"loro\", \"gato\"}  # El duplicado se elimina autom\u00e1ticamente\n\n# Paso 2: A\u00f1adir \"conejo\"\nanimales.add(\"conejo\")\n\n# Paso 3: Eliminar \"perro\"\nanimales.discard(\"perro\")\n\n# Paso 4: Crear el segundo conjunto\nanimales_dom\u00e9sticos = {\"gato\", \"conejo\", \"pez\"}\n\n# Paso 5: Intersecci\u00f3n\ncomunes = animales.intersection(animales_dom\u00e9sticos)\nprint(\"Animales comunes:\", comunes)\n\n# Paso 6: Diferencia\nexclusivos = animales.difference(animales_dom\u00e9sticos)\nprint(\"Animales exclusivos:\", exclusivos)\n</code></pre>"},{"location":"2_3_EstructurasDatos/#apendice-sobre-estructuras","title":"Apendice sobre estructuras.","text":"<p>Una vez vistas las 4 estructuras podemos crear todo tipo de combinaciones entre ellas e incluso utilizar el concepto de iteraci\u00f3n que tiene python con <code>for</code> para ampliar su utilidad. </p> <p>Este campo es muy extenso y que da a vuestra curiosidad su ampliaci\u00f3n. </p> <p>Veamos tan solo un par de posibilidades.</p>"},{"location":"2_3_EstructurasDatos/#iteracion-sobre-colecciones","title":"Iteraci\u00f3n sobre colecciones","text":"<p>Tal y como hemos visto en las listas, todas estas estructuras pueden recorrerse con bucles <code>for</code>, lo que permite procesar sus elementos uno a uno.</p> <pre><code># Recorremos una lista de nombres\nnombres = [\"Ana\", \"Luis\", \"Marta\"]\n\nfor nombre in nombres:\n    print(f\"Hola, {nombre}\")\n</code></pre> <p>Recorrer una colecci\u00f3n permite aplicar l\u00f3gica sobre cada elemento, como mostrarlo, modificarlo o filtrarlo.</p>"},{"location":"2_3_EstructurasDatos/#listas-de-diccionarios","title":"Listas de diccionarios","text":"<p>Las listas de diccionarios en Python constituyen una estructura de datos especialmente \u00fatil cuando se necesita representar colecciones de elementos complejos, donde cada elemento tiene m\u00faltiples atributos. Esta combinaci\u00f3n permite organizar la informaci\u00f3n de forma clara, flexible y f\u00e1cilmente manipulable, tanto en programas sencillos como en aplicaciones m\u00e1s avanzadas.</p> <p>El resultado de utilizar listas de diccionarios es una estructura que se comporta como una tabla en memoria: cada diccionario representa una fila (una entidad), y cada clave dentro del diccionario representa una columna (un atributo). Esto facilita la lectura, modificaci\u00f3n, filtrado y an\u00e1lisis de datos de forma estructurada.</p> <p>Las razones por las que esta estructura es ampliamente utilizada son las siguientes:</p> <ul> <li>Permite agrupar m\u00faltiples objetos similares en una sola colecci\u00f3n.</li> <li>Cada objeto puede tener m\u00faltiples propiedades, accesibles por nombre.</li> <li>Es compatible con formatos externos como JSON, lo que facilita la exportaci\u00f3n e importaci\u00f3n de datos.</li> <li>Permite realizar b\u00fasquedas, filtrados y ordenaciones basadas en cualquier atributo.</li> <li>Es especialmente \u00fatil en contextos como gesti\u00f3n de usuarios, inventarios, registros acad\u00e9micos o cualquier sistema que maneje entidades con campos definidos.</li> </ul> <p>Lista de diccionarios</p> <pre><code>empleados = [\n    {\"nombre\": \"Ana\", \"sueldo\": 1800, \"a\u00f1os\": 12, \"activo\": True},\n    {\"nombre\": \"Luis\", \"sueldo\": 1500, \"a\u00f1os\": 5, \"activo\": True},\n    {\"nombre\": \"Mar\u00eda\", \"sueldo\": 2000, \"a\u00f1os\": 20, \"activo\": False}\n]\n</code></pre> <p>Esta estructura permite recorrer la lista para mostrar empleados activos, calcular la media de sueldos, a\u00f1adir nuevos registros o modificar campos espec\u00edficos. Por ejemplo, para mostrar solo los empleados activos:</p> <pre><code>for emp in empleados:\n    if emp[\"activo\"]:\n        print(emp[\"nombre\"], emp[\"sueldo\"])\n</code></pre> <p>Las listas de diccionarios son, por tanto, una herramienta fundamental para modelar datos estructurados en Python de forma clara y eficaz.</p>"},{"location":"2_4_FuncionesExcepciones/","title":"Funciones y manejo de excepciones","text":"<p>Una funci\u00f3n en Python es como una peque\u00f1a herramienta que realiza una tarea espec\u00edfica. En lugar de repetir el mismo bloque de c\u00f3digo varias veces, podemos escribirlo una sola vez dentro de una funci\u00f3n y luego llamarla cada vez que la necesitemos. Esto hace que el c\u00f3digo sea m\u00e1s limpio, m\u00e1s f\u00e1cil de entender y mucho m\u00e1s sencillo de mantener. Por ejemplo, si queremos saludar a varias personas, en lugar de escribir <code>print(\"Hola, Sergio\")</code>, <code>print(\"Hola, Luc\u00eda\")</code>, etc., podemos crear una funci\u00f3n que reciba el nombre como entrada y se encargue de mostrar el saludo. As\u00ed, cada vez que queramos saludar a alguien, solo tenemos que llamar a esa funci\u00f3n con el nombre correspondiente.</p> <p>Adem\u00e1s de aprender a crear funciones, en esta sesi\u00f3n aprovechamos para introducir el manejo de errores mediante excepciones. En muchos programas, pueden surgir situaciones inesperadas: por ejemplo, intentar dividir entre cero, acceder a un dato que no existe o introducir un valor no v\u00e1lido. Las excepciones permiten detectar esos errores y responder de forma controlada, evitando que el programa se detenga bruscamente. Aprender a usar <code>try</code>, <code>except</code> y <code>raise</code> nos ayuda a escribir c\u00f3digo m\u00e1s robusto y profesional, preparado para funcionar correctamente incluso cuando algo no sale como se esperaba.</p> <p>Asi pues, lo contenidos que vamos a abordar en esta secci\u00f3n son: </p> <ul> <li>Definici\u00f3n de funciones con <code>def</code>.</li> <li>Par\u00e1metros posicionales, nombrados y con valores por defecto.</li> <li>\u00c1mbito de variables: local y global.</li> <li>Uso de <code>return</code> para devolver resultados.</li> <li>Documentaci\u00f3n interna con docstrings (<code>\"\"\" \"\"\"</code>).</li> <li>Manejo de errores con <code>try</code>, <code>except</code>, <code>finally</code>, <code>raise</code>.</li> </ul>"},{"location":"2_4_FuncionesExcepciones/#definicion-basica-de-una-funcion","title":"Definici\u00f3n b\u00e1sica de una funci\u00f3n","text":"<p>Las funciones permiten dividir un programa en bloques l\u00f3gicos que realizan tareas espec\u00edficas. Esto mejora la legibilidad, facilita la reutilizaci\u00f3n del c\u00f3digo y permite detectar errores m\u00e1s f\u00e1cilmente. En proyectos reales, como los desarrollos en Odoo, la modularidad es clave para mantener el c\u00f3digo organizado y escalable.</p> <p>La sintaxis en la definici\u00f3n de una funci\u00f3n en Python viene determinada por <code>def</code></p> <p>Ejemplo de definici\u00f3n de una funci\u00f3n <code>saludar</code> con un par\u00e1metro</p> <pre><code>def saludar(nombre):\n    \"\"\"Muestra un saludo personalizado.\"\"\"\n    print(f\"Hola, {nombre}\")\n</code></pre> <p>Esta funci\u00f3n recibe un argumento (<code>nombre</code>) y muestra un mensaje. El docstring explica brevemente qu\u00e9 hace la funci\u00f3n.</p>"},{"location":"2_4_FuncionesExcepciones/#parametros-por-defecto-y-nombrados","title":"Par\u00e1metros por defecto y nombrados","text":"<p>Los par\u00e1metros por defecto permiten definir valores que se usar\u00e1n si no se especifican en la llamada. Para definir un par\u00e1metro por defecto, basta con asignar un valor mediante un <code>=</code> en la cabecera de la funci\u00f3n</p> <p>Ejemplo de funci\u00f3n con par\u00e1metro por defecto</p> <pre><code>def saludar(nombre=\"invitado\"):\n    print(f\"Hola, {nombre}\")\n\nsaludar(\"Sergio\")  # Hola, Sergio\nsaludar()          # Hola, invitado\n</code></pre> <p>Tambi\u00e9n se pueden usar argumentos nombrados para mayor claridad:</p> <pre><code>saludar(nombre=\"Luc\u00eda\")\n</code></pre> <p>Ejemplo de funci\u00f3n con argumentos nombrados (y con valores por defecto)</p> <pre><code>def saludar( nombre = \"Sergio\", apellido = \"Rey\" ):\n    print(f\"Hola, {nombre} {apellido}!\")\n\nsaludar()                                           # Hola, Sergio Rey\nsaludar( \"Carlos\", \"Alcaraz\")                       # Hola, Carlos Alcaraz\nsaludar( nombre = \"Carlos\", apellido = \"Alcaraz\")   # Hola, Carlos Alcaraz\nsaludar( nombre = \"Andr\u00e9s\")                         # Hola, Andr\u00e9s Rey\nsaludar( apellido = \"L\u00f3pez\")                        # Hola, Sergio L\u00f3pez\n</code></pre> <p>En Python, no puedes definir un valor por defecto para un par\u00e1metro si hay otro par\u00e1metro sin valor por defecto despu\u00e9s de \u00e9l. Es decir, los par\u00e1metros con valores por defecto deben ir al final de la lista de par\u00e1metros.</p> <p>Por ejemplo, esto no es v\u00e1lido:</p> <p>Incorrecto</p> <pre><code>def ejemplo(a=1, b, c=3):  # \u274c Error de sintaxis\n    pass\n</code></pre> <p>Python lanzar\u00e1 un <code>SyntaxError</code> porque <code>b</code> no tiene valor por defecto, pero est\u00e1 entre dos par\u00e1metros que s\u00ed lo tienen.</p> <p>En cambio, esto s\u00ed es v\u00e1lido:</p> <p>Correcto</p> <pre><code>def ejemplo(a, b=2, c=3):  # \u2705 Correcto\n    pass\n</code></pre> <p>Si necesitas flexibilidad en el orden, puedes usar argumentos nombrados al llamar a la funci\u00f3n, o bien reestructurar la definici\u00f3n para que los par\u00e1metros sin valor por defecto est\u00e9n primero. </p> <p>La palabra clave <code>pass</code></p> <p>En Python, la palabra clave <code>pass</code> se utiliza como una instrucci\u00f3n vac\u00eda. Sirve para indicar que no se va a ejecutar ninguna acci\u00f3n en ese lugar del c\u00f3digo, pero que la estructura est\u00e1 ah\u00ed por motivos de sintaxis o planificaci\u00f3n.</p> <p>Por ejemplo, si est\u00e1s definiendo una funci\u00f3n pero a\u00fan no has decidido qu\u00e9 va a hacer, puedes escribir:</p> <pre><code>def mi_funcion():\n    pass\n</code></pre> <p>Esto evita que el int\u00e9rprete lance un error por tener una funci\u00f3n sin contenido. Lo mismo ocurre con clases, bucles o condicionales. Es como decir: \u201caqu\u00ed ir\u00e1 algo m\u00e1s adelante, pero por ahora d\u00e9jalo en blanco\u201d.</p> <p>Tambi\u00e9n se usa cuando necesitas que el programa siga funcionando sin hacer nada en ciertos casos:</p> <pre><code>for letra in \"Python\":\n    if letra == \"h\":\n        pass  # No hacemos nada con la letra 'h'\n    else:\n        print(letra)\n</code></pre> <p>Es \u00fatil para mantener la estructura del c\u00f3digo mientras lo desarrollas o cuando quieres ignorar ciertos casos sin romper la l\u00f3gica del programa.</p>"},{"location":"2_4_FuncionesExcepciones/#funciones-con-numero-de-parametros-variables","title":"Funciones con n\u00famero de par\u00e1metros variables","text":"<p>En Python, a veces necesitamos definir funciones que puedan recibir una cantidad variable de argumentos, sin saber cu\u00e1ntos ser\u00e1n exactamente. Esto es \u00fatil cuando queremos que la funci\u00f3n sea flexible y se adapte a diferentes situaciones sin tener que modificar su definici\u00f3n.</p> <p>Para ello, Python ofrece dos mecanismos:</p> <ul> <li><code>*args</code>: permite recibir cualquier n\u00famero de argumentos posicionales.</li> <li><code>**kwargs</code>: permite recibir cualquier n\u00famero de argumentos nombrados (clave-valor).</li> </ul> <p>Tambi\u00e9n se pueden combinar ambos para crear funciones muy vers\u00e1tiles.</p>"},{"location":"2_4_FuncionesExcepciones/#uso-de-args-argumentos-posicionales-variables","title":"Uso de <code>*args</code> (argumentos posicionales variables)","text":"<p>Cuando usamos <code>*args</code> en la definici\u00f3n de una funci\u00f3n, estamos diciendo que esa funci\u00f3n puede recibir muchos valores sin nombre, que ser\u00e1n agrupados en una tupla. Esto es \u00fatil cuando queremos operar con una lista de n\u00fameros, textos u otros elementos sin saber cu\u00e1ntos ser\u00e1n.</p> <p>Se puede ver m\u00e1s claro en los siguientes ejemplos:</p> <p>Ejemplo 1: Sumar varios n\u00fameros pasados como par\u00e1metros</p> <pre><code>def sumar_todos(*numeros):\n    \"\"\"Suma todos los n\u00fameros que se pasen como argumentos.\"\"\"\n    return sum(numeros)\n\nprint(sumar_todos(2, 4, 6))       # 12\nprint(sumar_todos(1, 3, 5, 7, 9)) # 25\n</code></pre> <p>Ejemplo mostramos los par\u00e1metros pasados</p> <pre><code>def mostrar_nombres(*nombres):\n    print(\"Lista de nombres:\")\n    for nombre in nombres:\n        print(\"-\", nombre)\n\nmostrar_nombres(\"Luc\u00eda\", \"Carlos\", \"Marta\")\nmostrar_nombres(\"Sergio\")\n</code></pre> <p>En ambos casos, la funci\u00f3n puede recibir uno, tres o veinte argumentos sin cambiar su definici\u00f3n.</p>"},{"location":"2_4_FuncionesExcepciones/#uso-de-kwargs-argumentos-nombrados-variables","title":"Uso de <code>**kwargs</code> (argumentos nombrados variables)","text":"<p>Cuando usamos <code>**kwargs</code>, la funci\u00f3n puede recibir muchos argumentos con nombre, que ser\u00e1n agrupados en un diccionario. Esto es \u00fatil cuando queremos que el usuario pueda especificar informaci\u00f3n sin seguir un orden fijo.</p> <p>De nuevo comprenderemos mejor su uso con un par de ejemplos. Observar como los par\u00e1metros pasados deben tener formato de diccionario:</p> <p>Mostrar informaci\u00f3n de usuario</p> <pre><code>def mostrar_info(**datos):\n    for clave, valor in datos.items():\n        print(f\"{clave}: {valor}\")\n\nmostrar_info(nombre=\"Sergio\", edad=25, ciudad=\"Alberic\")\n</code></pre> <p>Observar c\u00f3mo se han recuperado tanto la clave como el valor de cada tupla del diccionario</p> <p>Veamos de nuevo otro ejemplo similar</p> <p>Ejemplo de lectura de configuraci\u00f3n</p> <pre><code>def configurar(**opciones):\n    print(\"Configuraci\u00f3n aplicada:\")\n    for clave, valor in opciones.items():\n        print(f\"{clave} = {valor}\")\n\nconfigurar(color=\"azul\", tama\u00f1o=\"mediano\", activo=True)\n</code></pre> <p>En estos ejemplos, los argumentos se pasan como pares clave-valor, y la funci\u00f3n los procesa como un diccionario.</p>"},{"location":"2_4_FuncionesExcepciones/#combinacion-de-parametros-fijos-args-y-kwargs","title":"Combinaci\u00f3n de par\u00e1metros fijos, <code>*args</code> y <code>**kwargs</code>","text":"<p>Tambi\u00e9n se pueden combinar par\u00e1metros normales con <code>*args</code> y <code>**kwargs</code> en una misma funci\u00f3n. El orden debe ser:</p> <ol> <li>Par\u00e1metros normales</li> <li><code>*args</code></li> <li><code>**kwargs</code></li> </ol> <p>Esto permite que la funci\u00f3n tenga una parte fija, una parte variable de datos, y una parte flexible de configuraci\u00f3n.</p> <p>De nuevo veamos un par de ejemplos:</p> <p>Procesar datos con nombre y valores</p> <pre><code>def procesar(nombre, *valores, **opciones):\n    print(\"Nombre:\", nombre)\n    print(\"Valores:\", valores)\n    print(\"Opciones:\", opciones)\n\nprocesar(\"Luc\u00eda\", 10, 20, activo=True, nivel=\"avanzado\")\n</code></pre> <p>Observar en este ejemplo como el primer par\u00e1metro de la invocaci\u00f3n de la funci\u00f3n pertenece al par\u00e1metro fijo y el resto de par\u00e1metros simple se convierten en una lista para los par\u00e1metros posicionales y los par\u00e1metros pasados como tuplas clave-valor se convierten en los par\u00e1metros finales en modo diccionario.</p> <p>Veamos otro ejemplo similar</p> <p>Enviar mensaje personalizado</p> <pre><code>def enviar_mensaje(destinatario, *lineas, **firma):\n    print(f\"Para: {destinatario}\")\n    for linea in lineas:\n        print(linea)\n    if \"nombre\" in firma:\n        print(f\"\\nAtentamente,\\n{firma['nombre']}\")\n\nenviar_mensaje(\"Carlos\", \"Hola,\", \"\u00bfC\u00f3mo est\u00e1s?\", nombre=\"Sergio\")\n</code></pre> <p>Estas funciones permiten construir estructuras muy flexibles, ideales para proyectos reales donde los datos pueden variar seg\u00fan el contexto.</p>"},{"location":"2_4_FuncionesExcepciones/#ejemplo-y-ejercicio-de-uso","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<p>En el siguiente ejemplo se muestra c\u00f3mo definir una funci\u00f3n que acepta una cantidad variable de argumentos posicionales (<code>*args</code>) y nombrados (<code>**kwargs</code>). La funci\u00f3n simula el registro de un pedido, donde se pueden a\u00f1adir productos sin l\u00edmite y configurar opciones adicionales como env\u00edo o m\u00e9todo de pago.</p> <p>Este ejemplo permite aplicar de forma conjunta los conceptos de funciones, <code>*args</code>, <code>**kwargs</code>, bucles, y acceso a diccionarios.</p> <pre><code>def registrar_pedido(cliente, *productos, **configuracion):\n    \"\"\"Registra un pedido con productos y opciones adicionales.\"\"\"\n    print(f\"Pedido de: {cliente}\")\n\n    if productos:\n        print(\"Productos solicitados:\")\n        for producto in productos:\n            print(\"-\", producto)\n    else:\n        print(\"No se han a\u00f1adido productos.\")\n\n    if configuracion:\n        print(\"Configuraci\u00f3n del pedido:\")\n        for clave, valor in configuracion.items():\n            print(f\"{clave}: {valor}\")\n    else:\n        print(\"Sin configuraci\u00f3n adicional.\")\n\n# Ejemplo de uso\nregistrar_pedido(\"Luc\u00eda\", \"Teclado\", \"Rat\u00f3n\", envio=\"urgente\", pago=\"tarjeta\")\nregistrar_pedido(\"Carlos\")\n</code></pre> <p>Este ejemplo muestra c\u00f3mo se pueden combinar argumentos fijos, m\u00faltiples valores y opciones flexibles en una sola funci\u00f3n.</p> <p>Ejercicio b\u00e1sico: Registro de usuario con par\u00e1metros variables</p> <p>Crea una funci\u00f3n llamada <code>registrar_usuario</code> que reciba:</p> <ul> <li>Un argumento obligatorio: <code>nombre</code></li> <li>Una cantidad variable de intereses (<code>*intereses</code>)</li> <li>Una cantidad variable de datos personales (<code>**datos</code>)</li> </ul> <p>La funci\u00f3n debe:</p> <ol> <li>Mostrar el nombre del usuario.</li> <li>Mostrar los intereses si se han indicado.</li> <li>Mostrar los datos personales como pares clave-valor si se han indicado.</li> </ol> <p>Prueba la funci\u00f3n con los siguientes casos:</p> <ul> <li><code>registrar_usuario(\"Sergio\", \"Python\", \"IA\", ciudad=\"Valencia\", edad=25)</code></li> <li><code>registrar_usuario(\"Luc\u00eda\")</code></li> </ul> <p>Pistas - Usa <code>*intereses</code> para recoger temas de inter\u00e9s. - Usa <code>**datos</code> para recoger informaci\u00f3n adicional. - Usa bucles para mostrar los contenidos.</p> Soluci\u00f3n <pre><code>def registrar_usuario(nombre, *intereses, **datos):\n    print(f\"Usuario registrado: {nombre}\")\n\n    if intereses:\n        print(\"Intereses:\")\n        for interes in intereses:\n            print(\"-\", interes)\n    else:\n        print(\"No se han indicado intereses.\")\n\n    if datos:\n        print(\"Datos personales:\")\n        for clave, valor in datos.items():\n            print(f\"{clave}: {valor}\")\n    else:\n        print(\"No se han indicado datos personales.\")\n\n# Pruebas\nregistrar_usuario(\"Sergio\", \"Python\", \"IA\", ciudad=\"Valencia\", edad=25)\nregistrar_usuario(\"Luc\u00eda\")\n</code></pre>"},{"location":"2_4_FuncionesExcepciones/#retorno-de-valores","title":"Retorno de valores","text":"<p>Una funci\u00f3n puede devolver un resultado con <code>return</code>, lo que permite usar ese valor en otras partes del programa.</p> <p>Ejemplo de funci\u00f3n con devoluci\u00f3n de resultado</p> <pre><code>def sumar(a, b):\n    return a + b\n\nresultado = sumar(3, 5)\nprint(\"Resultado:\", resultado)\n</code></pre>"},{"location":"2_4_FuncionesExcepciones/#ambito-de-variables","title":"\u00c1mbito de variables","text":"<p>Tal y como sucede en otros lenguajes, debemos diferenciar entre variables locales y globales. Las variables definidas dentro de una funci\u00f3n son locales y no afectan al resto del programa. Las variables globales pueden ser accedidas desde cualquier parte, pero deben usarse con cuidado para evitar conflictos.</p>"},{"location":"2_4_FuncionesExcepciones/#variables-locales","title":"Variables locales","text":"<p>Una variable local es aquella que se define dentro de una funci\u00f3n y solo existe mientras esa funci\u00f3n se est\u00e1 ejecutando. No puede ser accedida desde fuera.</p> <p>Error en uso de variable local</p> <pre><code>def saludar():\n    mensaje = \"Hola desde dentro de la funci\u00f3n\"\n    print(mensaje)\n\nsaludar()\nprint(mensaje)  # \u274c Esto da error: 'mensaje' no est\u00e1 definida fuera de la funci\u00f3n\n</code></pre> <p>En este ejemplo, <code>mensaje</code> solo existe dentro de <code>saludar()</code>. Al intentar usarla fuera, Python no la reconoce.</p>"},{"location":"2_4_FuncionesExcepciones/#variables-globales","title":"Variables globales","text":"<p>Una variable global se define fuera de cualquier funci\u00f3n y puede ser utilizada dentro de funciones, pero solo para leer su valor. Si se intenta modificarla directamente dentro de una funci\u00f3n, Python la tratar\u00e1 como una nueva variable local, a menos que se indique lo contrario.</p> <p>Uso correcto de variable global</p> <pre><code>contador = 0  # Variable global\n\ndef mostrar_contador():\n    print(\"Contador global:\", contador)\n\nmostrar_contador()  # \u2705 Se puede leer sin problema\n</code></pre> <p>Aqu\u00ed, <code>contador</code> es global y puede ser le\u00eddo desde dentro de la funci\u00f3n sin necesidad de hacer nada especial.</p>"},{"location":"2_4_FuncionesExcepciones/#variables-con-el-mismo-nombre-local-vs-global","title":"Variables con el mismo nombre: local vs. global","text":"<p>Si dentro de una funci\u00f3n se define una variable con el mismo nombre que una global, la versi\u00f3n local oculta la global dentro de ese \u00e1mbito.</p> <p>Ejemplo de \u00e1mbito de uso de variables local y global</p> <pre><code>mensaje = \"Hola desde fuera\"\n\ndef cambiar_mensaje():\n    mensaje = \"Hola desde dentro\"\n    print(\"Dentro de la funci\u00f3n:\", mensaje)\n\ncambiar_mensaje()\nprint(\"Fuera de la funci\u00f3n:\", mensaje)\n</code></pre> <p>En este caso, aunque ambas variables se llaman <code>mensaje</code>, son distintas. La funci\u00f3n usa su propia versi\u00f3n local y no modifica la global.</p>"},{"location":"2_4_FuncionesExcepciones/#modificar-una-variable-global-desde-una-funcion","title":"Modificar una variable global desde una funci\u00f3n","text":"<p>Si realmente se quiere modificar una variable global desde dentro de una funci\u00f3n, hay que usar la palabra clave <code>global</code>.</p> <p>Ejemplo de modificaci\u00f3n de variable global desde funci\u00f3n</p> <pre><code>contador = 0\n\ndef incrementar():\n    global contador\n    contador += 1\n\nincrementar()\nprint(\"Contador despu\u00e9s de la funci\u00f3n:\", contador)  # 1\n</code></pre> <p>Aqu\u00ed, al declarar <code>global contador</code>, le decimos a Python que queremos usar la variable global y no crear una nueva local. Esto permite modificar su valor desde dentro de la funci\u00f3n.</p>"},{"location":"2_4_FuncionesExcepciones/#manejo-de-excepciones-en-python","title":"Manejo de excepciones en Python","text":"<p>En Python, una excepci\u00f3n es un tipo de error que ocurre mientras el programa se est\u00e1 ejecutando. A diferencia de los errores de sintaxis, que impiden que el programa arranque, las excepciones aparecen cuando algo inesperado sucede durante la ejecuci\u00f3n: por ejemplo, dividir entre cero, acceder a una posici\u00f3n inexistente en una lista o convertir una cadena que no es un n\u00famero con <code>int()</code>.</p> <p>Cuando ocurre una excepci\u00f3n y no se gestiona, el programa se detiene y muestra un mensaje de error. Para evitar esto, Python permite capturar y manejar excepciones usando las instrucciones <code>try</code>, <code>except</code>, <code>finally</code> y <code>raise</code>. Esto permite que el programa contin\u00fae funcionando de forma controlada, incluso si algo falla.</p> <p>El manejo de excepciones es especialmente \u00fatil cuando se trabaja con entrada de datos, operaciones matem\u00e1ticas, acceso a archivos o cualquier situaci\u00f3n en la que el comportamiento del usuario o del entorno pueda provocar errores. Saber identificar y tratar estos errores es fundamental para escribir programas robustos y profesionales.</p>"},{"location":"2_4_FuncionesExcepciones/#uso-de-try-except","title":"Uso de <code>try</code> <code>except</code>","text":"<p>Veamos un ejemplo sencillo de captura de excepciones.</p> <p>Captura de excepci\u00f3n</p> <pre><code>try:\n    x = int(\"abc\")\nexcept:\n    print(\"Algo sali\u00f3 mal\")  # Captura cualquier excepci\u00f3n\n</code></pre> <p>En este ejemplo, se captura el error aunque no se especifique que es un . Sin embargo, si se quiere saber qu\u00e9 tipo de error ocurri\u00f3, se puede capturar el objeto de la excepci\u00f3n:</p> <p>Captura de excepci\u00f3n obteniendo el mensaje de la excepci\u00f3n</p> <pre><code>try:\n    x = int(\"abc\")\nexcept Exception as e:\n    print(\"Error:\", e)\n</code></pre> <p>Esto permite mostrar el mensaje del error sin detener el programa.</p> <p>Pero tambi\u00e9n podemos esperar capturar un excepci\u00f3n en concreto, por ejemplo la t\u00edpica de divisi\u00f3n por cero.</p> <p>Ejemplo de captura de excepci\u00f3n de divisi\u00f3n entre cero</p> <pre><code>def dividir(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        print(\"Error: No se puede dividir entre cero.\")\n        return None\n</code></pre> <p>Y podemos complicar mucho m\u00e1s la gest\u00f3n de excepciones. En el siguiente ejemplo se muestra c\u00f3mo capturar dos tipos distintos de errores: uno por divisi\u00f3n entre cero (<code>ZeroDivisionError</code>) y otro por conversi\u00f3n incorrecta de tipo (<code>ValueError</code>). Si ocurre cualquier otro tipo de error, se muestra un mensaje gen\u00e9rico indicando el tipo de excepci\u00f3n.</p> <p>Ejemplo de captura de varios tipos de excepciones</p> <pre><code>def procesar_datos():\n    try:\n        numero = int(input(\"Introduce un n\u00famero entero: \"))\n        resultado = 100 / numero\n        print(\"Resultado:\", resultado)\n    except ZeroDivisionError:\n        print(\"Error: No se puede dividir entre cero.\")\n    except ValueError:\n        print(\"Error: Debes introducir un n\u00famero v\u00e1lido.\")\n    except Exception as e:\n        print(\"Ha ocurrido una excepci\u00f3n no prevista:\", type(e).__name__)\n\nprocesar_datos()\n</code></pre> <p>Este ejemplo permite comprobar c\u00f3mo se pueden capturar errores espec\u00edficos y tambi\u00e9n c\u00f3mo se puede mostrar el tipo de error si no se ha previsto. El uso de <code>type(e).__name__</code> permite mostrar el nombre de la excepci\u00f3n que se ha producido.</p> <p>Son muchos los tipos de excepciones a captura, sin embargo, para simplificar a continuaci\u00f3n se muestra una tabla con algunas de las excepciones m\u00e1s habituales que pueden encontrarse al programar en Python:</p> Excepci\u00f3n Cu\u00e1ndo ocurre <code>ZeroDivisionError</code> Al dividir un n\u00famero entre cero <code>ValueError</code> Al pasar un valor incorrecto a una funci\u00f3n (por ejemplo, <code>int(\"abc\")</code>) <code>TypeError</code> Al operar con tipos incompatibles (por ejemplo, <code>5 + \"hola\"</code>) <code>IndexError</code> Al acceder a una posici\u00f3n inexistente en una lista <code>KeyError</code> Al acceder a una clave inexistente en un diccionario <code>FileNotFoundError</code> Al intentar abrir un archivo que no existe <code>ImportError</code> Al intentar importar un m\u00f3dulo que no se encuentra <code>AttributeError</code> Al intentar acceder a un atributo que no existe en un objeto <code>NameError</code> Al usar una variable que no ha sido definida <code>RuntimeError</code> Error gen\u00e9rico que ocurre durante la ejecuci\u00f3n <code>Exception</code> Clase base de todas las excepciones; se puede usar para capturar cualquier tipo"},{"location":"2_4_FuncionesExcepciones/#uso-de-finally","title":"Uso de <code>finally</code>","text":"<p>Tambi\u00e9n se puede usar <code>finally</code> para ejecutar c\u00f3digo siempre, ocurra o no una excepci\u00f3n:</p> <p>Ejemplo de uso de <code>finally</code></p> <pre><code>try:\n    print(\"Intentando operaci\u00f3n...\")\nfinally:\n    print(\"Fin del bloque\")\n</code></pre> <p>Por supuesto, este ejemplo puede ser mejorado con el uso de tantos <code>except</code> como queramos</p>"},{"location":"2_4_FuncionesExcepciones/#lanzar-excepciones-con-raise","title":"Lanzar excepciones con <code>raise</code>","text":"<p>Por \u00faltimo, veamos tambi\u00e9n un ejemplo de <code>raise</code> que nos permite lanzar una excepci\u00f3n manualmente:</p> <p>Uso de <code>raise</code></p> <pre><code>def validar_edad(edad):\n    if edad &lt; 0:\n        raise ValueError(\"La edad no puede ser negativa\")\n</code></pre> <p>En ocasiones, para la gesti\u00f3n de errores de nuestro aplicativo nos puede resultar conveniente el uso de esta estructura.</p>"},{"location":"2_4_FuncionesExcepciones/#ejemplo-y-ejercicio-de-uso_1","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<p>En el siguiente ejemplo se muestra c\u00f3mo definir una funci\u00f3n que realiza una operaci\u00f3n matem\u00e1tica, valida la entrada del usuario, y gestiona distintos tipos de errores mediante excepciones espec\u00edficas. Adem\u00e1s, se incluye un bloque gen\u00e9rico para capturar cualquier otro tipo de error no previsto.</p> <p>Este ejemplo permite aplicar de forma conjunta los conceptos de funciones, par\u00e1metros, retorno de valores, docstrings, y manejo de excepciones.</p> <pre><code>def calcular_division():\n    \"\"\"Solicita dos n\u00fameros al usuario y devuelve el resultado de dividirlos.\"\"\"\n    try:\n        a = int(input(\"Introduce el numerador: \"))\n        b = int(input(\"Introduce el denominador: \"))\n        resultado = a / b\n        print(f\"Resultado: {resultado}\")\n    except ZeroDivisionError:\n        print(\"Error: No se puede dividir entre cero.\")\n    except ValueError:\n        print(\"Error: Debes introducir n\u00fameros enteros v\u00e1lidos.\")\n    except Exception as e:\n        print(\"Ha ocurrido un error inesperado:\", type(e).__name__)\n\ncalcular_division()\n</code></pre> <p>Este ejemplo cubre tres tipos de errores: - Divisi\u00f3n entre cero (<code>ZeroDivisionError</code>) - Conversi\u00f3n fallida de texto a n\u00famero (<code>ValueError</code>) - Cualquier otro error no previsto (<code>Exception</code>)</p> <p>Ejercicio b\u00e1sico: Validaci\u00f3n de precio con funci\u00f3n y excepciones</p> <p>Crea una funci\u00f3n llamada <code>calcular_precio_final</code> que reciba dos argumentos:</p> <ul> <li><code>precio_base</code>: un n\u00famero que representa el precio sin impuestos.</li> <li><code>iva</code>: porcentaje de IVA aplicado (por defecto 21).</li> </ul> <p>La funci\u00f3n debe:</p> <ol> <li>Calcular el precio final aplicando el IVA.</li> <li>Lanzar una excepci\u00f3n <code>ValueError</code> si el precio base es negativo.</li> <li>Lanzar una excepci\u00f3n <code>TypeError</code> si alguno de los valores no es num\u00e9rico.</li> <li>Devolver el resultado con un mensaje formateado.</li> </ol> <p>Prueba la funci\u00f3n con los siguientes valores:</p> <ul> <li><code>calcular_precio_final(100)</code> </li> <li><code>calcular_precio_final(-50)</code> </li> <li><code>calcular_precio_final(\"cien\")</code></li> </ul> <p>Pistas - Usa <code>try</code>, <code>except</code> y <code>raise</code> dentro de la funci\u00f3n. - Usa <code>isinstance()</code> para comprobar si los valores son num\u00e9ricos. - Usa <code>return</code> para devolver el mensaje final.</p> Soluci\u00f3n <pre><code>def calcular_precio_final(precio_base, iva=21):\n    \"\"\"Calcula el precio final con IVA, validando los datos de entrada.\"\"\"\n    try:\n        if not isinstance(precio_base, (int, float)) or not isinstance(iva, (int, float)):\n            raise TypeError(\"Los valores deben ser num\u00e9ricos.\")\n        if precio_base &lt; 0:\n            raise ValueError(\"El precio base no puede ser negativo.\")\n        precio_final = precio_base * (1 + iva / 100)\n        return f\"Precio final: {round(precio_final, 2)} \u20ac\"\n    except ValueError as ve:\n        return f\"Error de valor: {ve}\"\n    except TypeError as te:\n        return f\"Error de tipo: {te}\"\n    except Exception as e:\n        return f\"Error inesperado: {type(e).__name__}\"\n\nprint(calcular_precio_final(100))     # Precio final: 121.0 \u20ac\nprint(calcular_precio_final(-50))     # Error de valor\nprint(calcular_precio_final(\"cien\"))  # Error de tipo\n</code></pre>"},{"location":"2_5_ModulosPaquetes/","title":"Gesti\u00f3n de m\u00f3dulos, paquetes y entornos virtuales","text":"<p>En este apartado nos centraremos en saber qu\u00e9 son los m\u00f3dulos en Python y c\u00f3mo se utilizan para organizar y reutilizar c\u00f3digo. Se explicar\u00e1 c\u00f3mo importar m\u00f3dulos est\u00e1ndar como <code>math</code> o <code>datetime</code>, as\u00ed como c\u00f3mo crear y utilizar m\u00f3dulos propios. El objetivo es que se comprenda la importancia de dividir el c\u00f3digo en partes funcionales y c\u00f3mo acceder a funciones, clases o variables definidas en otros archivos mediante distintas formas de importaci\u00f3n.</p> <p>Adem\u00e1s, se introducir\u00e1 el uso de paquetes externos mediante el gestor <code>pip</code>, que permite instalar librer\u00edas desarrolladas por terceros. Se aprender\u00e1 a instalar, listar y desinstalar paquetes, as\u00ed como a utilizar herramientas como <code>pip freeze</code> para capturar las dependencias de un proyecto. Se busca que el alumno sea capaz de incorporar nuevas funcionalidades a sus programas sin necesidad de desarrollarlas desde cero, aprovechando el ecosistema abierto de Python.</p> <p>Por \u00faltimo, se abordar\u00e1 la creaci\u00f3n y gesti\u00f3n de entornos virtuales con <code>venv</code>, una herramienta fundamental para trabajar en proyectos profesionales. Se aprender\u00e1 a crear un entorno aislado, activarlo, instalar paquetes dentro de \u00e9l y generar un archivo <code>requirements.txt</code> para compartir las dependencias. El objetivo es que comprenda c\u00f3mo evitar conflictos entre proyectos y c\u00f3mo mantener un entorno limpio y controlado para cada desarrollo.</p> <p>B\u00e1sicamente, los contenidos que vamos a abordar en esta secci\u00f3n son:</p> <ul> <li>Uso de <code>import</code>, <code>from ... import ...</code>, y alias con <code>as</code>.</li> <li>Instalaci\u00f3n de paquetes con <code>pip install</code>.</li> <li>Listado y desinstalaci\u00f3n de paquetes (<code>pip list</code>, <code>pip uninstall</code>).</li> <li>Creaci\u00f3n de entornos virtuales con <code>venv</code>.</li> <li>Activaci\u00f3n y uso de entornos virtuales.</li> <li>Archivo <code>requirements.txt</code> para compartir dependencias.</li> </ul>"},{"location":"2_5_ModulosPaquetes/#introduccion-a-los-modulos","title":"Introducci\u00f3n a los m\u00f3dulos","text":"<p>Un m\u00f3dulo en Python es simplemente un archivo <code>.py</code> que contiene funciones, clases o variables que pueden ser reutilizadas en otros programas. </p> <p>Python incluye muchos m\u00f3dulos est\u00e1ndar como <code>math</code>, <code>random</code> o <code>datetime</code>, y tambi\u00e9n permite crear los tuyos propios.</p> <p>Para poder trabajar con un m\u00f3dulo, en la cabecera del fichero de c\u00f3digo lo debemos importar mediante el comando <code>import</code>;</p> <p>Importaci\u00f3n de m\u00f3dulo <code>math</code></p> <pre><code>import math\nprint(math.sqrt(25))  # 5.0\n</code></pre> <p>Tambi\u00e9n se puede importar solo una parte del m\u00f3dulo mediante <code>from &lt;m\u00f3dulo&gt; import &lt;funcion&gt;</code>:</p> <p>Importaci\u00f3n de funci\u00f3n <code>pi</code> de m\u00f3dulo <code>math</code></p> <pre><code>from math import pi\nprint(pi)  # 3.141592...\n</code></pre> <p>Observar que en el primer caso para el uso de una funci\u00f3n concreta necesitamos indicar <code>modulo.funcion()</code> mientras que al importar una funci\u00f3n directamente, no es necesario indicar el m\u00f3dulo al que pertenece.</p> <p>Y tambi\u00e9n se puede usar alias para acortar nombres de los m\u00f3dulos:</p> <p>Ejemplo de uso de alias para identificar un m\u00f3dulo</p> <pre><code>import datetime as dt\nprint(dt.datetime.now())\n</code></pre> <p>Por supuestos, python dispone de una serie de m\u00f3dulos de todo tipo que podemos usar, a parte de los que podamos desarrollar o usar de otros desarrolladores.</p> <p>Informaci\u00f3n sobre los m\u00f3dulos en Python</p> <p>La fuente m\u00e1s fiable y completa. En ella puedes consultar todos los m\u00f3dulos est\u00e1ndar, sus funciones, clases y ejemplos de uso.</p> <p>https://docs.python.org/es/3/library/index.html</p> <p>Por ejemplo, si quieres saber qu\u00e9 ofrece el m\u00f3dulo <code>math</code>, puedes ir directamente a:</p> <p>https://docs.python.org/es/3/library/math.html</p>"},{"location":"2_5_ModulosPaquetes/#uso-de-modulos-propios-en-python","title":"Uso de m\u00f3dulos propios en Python","text":"<p>Como programadores, podemos crear m\u00f3dulos (archivos) donde definimos funciones que despu\u00e9s vamos a reutilizar en nuestro/s proyectos. </p> <p>Cuando tenemos funciones definidas en un archivo como <code>utils.py</code>, podemos reutilizarlas en otros archivos del mismo proyecto import\u00e1ndolas. No es necesario hacer nada especial para \u201cexportarlas\u201d: basta con que est\u00e9n definidas correctamente y que el archivo est\u00e9 en la misma carpeta (o en una ruta accesible).</p> <p>Por ejemplo, veamos el caso de si tenemos un fichero para m\u00f3dulos y otro principal</p> <p>Uso de m\u00f3dulos propios</p> <p>Supongamos que tenemos esta estructura:</p> <pre><code>mi_proyecto/\n\u251c\u2500\u2500 utils.py\n\u2514\u2500\u2500 main.py\n</code></pre> <p>Y en <code>utils.py</code> tenemos:</p> <pre><code>def saludar(nombre):\n    return f\"Hola, {nombre}!\"\n\ndef sumar(a, b):\n    return a + b\n</code></pre> <p>Entonces en <code>main.py</code> podemos importar estas funciones as\u00ed:</p> <pre><code>from utils import saludar, sumar\n\nprint(saludar(\"Sergio\"))\nprint(sumar(3, 5))\n</code></pre> <p>Tambi\u00e9n podemos importar todo el m\u00f3dulo completo:</p> <pre><code>import utils\n\nprint(utils.saludar(\"Luc\u00eda\"))\nprint(utils.sumar(10, 7))\n</code></pre> <p>Ambas formas son v\u00e1lidas. La primera importa funciones espec\u00edficas, la segunda importa el m\u00f3dulo completo.</p>"},{"location":"2_5_ModulosPaquetes/#ejemplo-y-ejercicio-de-uso","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<p>Veamos el siguiente ejemplo</p> <p>Ejemplo de uso de m\u00f3dulos propios</p> <p>Archivo <code>utils.py</code></p> <pre><code>def convertir_mayusculas(texto):\n    return texto.upper()\n\ndef obtener_longitud(texto):\n    return len(texto)\n</code></pre> <p>Archivo <code>main.py</code></p> <pre><code>from utils import convertir_mayusculas, obtener_longitud\n\nfrase = \"Hola desde Alberic\"\nprint(convertir_mayusculas(frase))       # HOLA DESDE ALBERIC\nprint(obtener_longitud(frase))           # 18\n</code></pre> <p>Este ejemplo muestra c\u00f3mo separar funciones en un m\u00f3dulo y usarlas desde otro archivo.</p> <p>Ejercicio: Crear m\u00f3dulo de utilidades y usarlo desde otro archivo</p> <p>Crea un archivo llamado <code>utils.py</code> que contenga las siguientes funciones:</p> <ul> <li><code>es_par(n)</code>: devuelve <code>True</code> si el n\u00famero es par.</li> <li><code>formatear_nombre(nombre)</code>: devuelve el nombre con la primera letra en may\u00fascula y el resto en min\u00fascula.</li> </ul> <p>Luego crea otro archivo llamado <code>main.py</code> que:</p> <ol> <li>Importe las funciones desde <code>utils.py</code>.</li> <li>Pida al usuario un n\u00famero y un nombre.</li> <li>Muestre si el n\u00famero es par.</li> <li>Muestre el nombre formateado.</li> </ol> <p>Pistas - Usa <code>input()</code> para recoger datos. - Usa <code>from utils import ...</code> para importar funciones. - Usa <code>int()</code> para convertir el n\u00famero. - Calcula el resto para saber si es por o no y utiliza la funcion <code>texto.capitaliza()</code> para pasar solo la primera letra a mayusculas  </p> Soluci\u00f3n <p>Archivo <code>utils.py</code></p> <pre><code>def es_par(n):\n    return n % 2 == 0\n\ndef formatear_nombre(nombre):\n    return nombre.capitalize()\n</code></pre> <p>Archivo <code>main.py</code></p> <pre><code>from utils import es_par, formatear_nombre\n\nnumero = int(input(\"Introduce un n\u00famero: \"))\nnombre = input(\"Introduce tu nombre: \")\n\nif es_par(numero):\n    print(\"El n\u00famero es par.\")\nelse:\n    print(\"El n\u00famero es impar.\")\n\nprint(\"Nombre formateado:\", formatear_nombre(nombre))\n</code></pre>"},{"location":"2_5_ModulosPaquetes/#instalacion-de-paquetes-con-pip","title":"Instalaci\u00f3n de paquetes con <code>pip</code>","text":"<p><code>pip</code> es el gestor de paquetes oficial de Python. Permite instalar librer\u00edas externas que no vienen incluidas por defecto. Por ejemplo, para instalar la librer\u00eda <code>requests</code>:</p> <pre><code>pip install requests\n</code></pre> <p>Una vez instalada, puedes usarla en tu c\u00f3digo:</p> <p>!!!example \"Ejemplo de uso de librer\u00eda <code>request</code></p> <pre><code>```python\nimport requests\nrespuesta = requests.get(\"https://www.google.com\")\nprint(respuesta.status_code)\n```\n</code></pre> <p>Si intentamos hacer el <code>import</code> de un paquete no instalado en el sistema, entonces tendremos un error.</p> Error por falta de librer\u00eda \"emoji\" <p>Para ver qu\u00e9 paquetes tienes instalados:</p> <pre><code>pip list\n</code></pre> <p>Para desinstalar uno:</p> <pre><code>pip uninstall &lt;&lt;nombre_paquete&gt;&gt;\n</code></pre>"},{"location":"2_5_ModulosPaquetes/#entornos-virtuales","title":"Entornos virtuales","text":"<p>Un entorno virtual es una carpeta aislada que contiene su propia instalaci\u00f3n de Python y sus propios paquetes. Esto evita conflictos entre proyectos y permite mantener cada uno con sus dependencias espec\u00edficas.</p> <p>Esto nos permite crear aplicaciones y tener instalados todos los paquetes de forma aislada, de forma que los paquetes de una aplicaci\u00f3n no interfieren con los de otra. Esto puede parecer trivial, pero no lo es, puesto que podemos usar diferentes versiones de paquetes en aplicaciones diferentes.</p> <p>Para crear un entorno virtual:</p> <pre><code>python -m venv mi_entorno\n</code></pre> <p>Esto crea una carpeta llamada <code>mi_entorno</code>. Para activarlo:</p> <ul> <li>En Windows:   <pre><code>mi_entorno\\Scripts\\activate\n</code></pre></li> <li>En macOS/Linux:   <pre><code>source mi_entorno/bin/activate\n</code></pre></li> </ul> <p>Una vez activado, puedes instalar paquetes con <code>pip</code> y quedar\u00e1n guardados solo en ese entorno.</p> <p>Para salir del entorno:</p> <pre><code>deactivate\n</code></pre> <p>Veamos un ejemplo que clarificar\u00e1 c\u00f3mo se aplica:</p> Entorno Virtual en Python <p>En el ejemplo anterior podemos ver los siguientes pasos:</p> <ol> <li>Se crea un entorno virtual <code>vsge</code> y se activa</li> <li>Se instala el paquete <code>emogi</code></li> <li>Se comprueba que el paquete esta instalado</li> <li>Se sale del entorno virtual</li> <li>Se comprueba que el paquete <code>emogi</code> no esta instalado, por lo que se demuestra que solo queda instalado si se utiliza con el entorno activo.</li> </ol>"},{"location":"2_5_ModulosPaquetes/#trabajando-con-entornos-virtuales-y-organizacion-de-modulos","title":"Trabajando con entornos virtuales y organizaci\u00f3n de m\u00f3dulos","text":"<p>La forma m\u00e1s aconsejable y profesional de organizar un proyecto con entorno virtual es trabajar en una carpeta base del proyecto y tener el entorno virtual como una subcarpeta dentro de ella. Esto permite mantener el c\u00f3digo fuente, los archivos de configuraci\u00f3n, los datos y el entorno virtual bien separados y estructurados, lo que facilita el mantenimiento, la colaboraci\u00f3n y el despliegue.</p> <p>Adem\u00e1s, cuando el proyecto crece, es habitual agrupar funciones propias en subcarpetas que act\u00faan como paquetes. Esto mejora la modularidad y permite importar funciones desde distintos archivos sin mezclar todo en un \u00fanico m\u00f3dulo. Para que una subcarpeta sea tratada como paquete, debe contener un archivo <code>__init__.py</code>, aunque est\u00e9 vac\u00edo.</p> <p>El fichero <code>__init__.py</code></p> <p>El archivo <code>__init__.py</code> indica que una carpeta debe ser tratada como un paquete de Python. Aunque en versiones modernas ya no es obligatorio, sigue siendo una buena pr\u00e1ctica incluirlo.</p> <p>Aunque el archivo <code>__init__.py</code> puede estar vac\u00edo, tambi\u00e9n puede incluir c\u00f3digo \u00fatil de inicializaci\u00f3n para el paquete. Esto permite controlar qu\u00e9 funciones, clases o subm\u00f3dulos se exponen al importar el paquete, definir constantes globales, o incluso agrupar accesos para simplificar el uso desde fuera.</p> <p>Por ejemplo, si tienes varios m\u00f3dulos en la carpeta <code>utilidades/</code>, puedes usar <code>__init__.py</code> para importar funciones clave y facilitar el acceso desde el exterior:</p> <pre><code># utilidades/__init__.py\nfrom .texto import formatear_mensaje\nfrom .numeros import es_par\n</code></pre> <p>Esto permite que desde <code>main.py</code> puedas hacer:</p> <pre><code>from utilidades import formatear_mensaje, es_par\n</code></pre> <p>En lugar de tener que importar cada m\u00f3dulo por separado. Tambi\u00e9n puedes definir constantes o funciones que se ejecuten al cargar el paquete:</p> <pre><code># utilidades/__init__.py\nVERSION = \"1.0\"\n\ndef iniciar():\n    print(\"Paquete utilidades cargado correctamente.\")\n</code></pre> <p>Este enfoque es \u00fatil cuando quieres que el paquete tenga un comportamiento inicial o una configuraci\u00f3n com\u00fan.</p> <p>De hecho, podemos decir que tenemos una estructura base t\u00edpica a la hora de crear un proyecto en Python que ser\u00eda similar a la mostrada en el siguiente ejemplo:</p> <p>Estructura recomendada</p> <pre><code>mi_proyecto/\n\u251c\u2500\u2500 venv/                     \u2190 entorno virtual (subcarpeta)\n\u251c\u2500\u2500 main.py                   \u2190 c\u00f3digo principal\n\u251c\u2500\u2500 utilidades/              \u2190 paquete con m\u00f3dulos propios\n\u2502   \u251c\u2500\u2500 __init__.py          \u2190 indica que es un paquete\n\u2502   \u2514\u2500\u2500 texto.py             \u2190 m\u00f3dulo con funciones de texto\n\u251c\u2500\u2500 requirements.txt         \u2190 dependencias del proyecto\n\u251c\u2500\u2500 README.md                \u2190 documentaci\u00f3n\n\u2514\u2500\u2500 datos/                   \u2190 archivos de entrada/salida\n</code></pre> <p>Esta estructura permite que el entorno virtual est\u00e9 contenido dentro del proyecto, pero no mezclado con el c\u00f3digo. Tambi\u00e9n facilita que puedas subir tu proyecto a GitHub o compartirlo sin incluir el entorno virtual (que suele a\u00f1adirse al <code>.gitignore</code>). Al mismo tiempo, el uso de paquetes como <code>utilidades/</code> permite mantener el c\u00f3digo organizado y reutilizable.</p> <p>Ejemplo de invocaci\u00f3n de funciones desde un m\u00f3dulo en subcarpeta</p> <p>Si tienes una funci\u00f3n <code>formatear_mensaje()</code> definida en <code>utilidades/texto.py</code>, puedes usarla desde <code>main.py</code> as\u00ed:</p> <pre><code>from utilidades.texto import formatear_mensaje\n\nprint(formatear_mensaje(\"hola desde Valencia\"))\n</code></pre> <p>Recuerda que la carpeta <code>utilidades</code> debe contener un archivo <code>__init__.py</code> para que Python la reconozca como paquete.</p> <p>En el siguiente apartado hablaremos el archivo <code>requirements.txt</code></p>"},{"location":"2_5_ModulosPaquetes/#usos-tipicos-de-los-entornos-virtuales","title":"Usos t\u00edpicos de los entornos virtuales","text":"<p>Un entorno virtual no es solo para instalar paquetes. Tambi\u00e9n te permite:</p> <ul> <li>Usar una versi\u00f3n espec\u00edfica de Python (si lo creas con <code>pyenv</code> o herramientas similares).</li> <li>Ejecutar scripts con dependencias aisladas, sin interferencias de otros proyectos.</li> <li>Probar diferentes versiones de librer\u00edas sin afectar tu sistema.</li> <li>Instalar herramientas de desarrollo como linters, formateadores o frameworks sin contaminar el entorno global.</li> </ul> <p>O sea, el entorno virtual es como una \u201cburbuja\u201d donde puedes trabajar con total libertad, sabiendo que todo lo que instales o configures queda dentro de esa carpeta.</p>"},{"location":"2_5_ModulosPaquetes/#archivo-requirementstxt","title":"Archivo <code>requirements.txt</code>","text":"<p>Este archivo contiene la lista de paquetes necesarios para un proyecto. Se puede generar autom\u00e1ticamente:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Y se puede usar para instalar todos los paquetes en otro entorno:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Esto es muy \u00fatil para compartir proyectos con otros desarrolladores o para desplegar en servidores. En vez de estar instalando manualmente todos los paquetes, mediante este fichero el servidor sabe qu\u00e9 paquetes debe instalar (autom\u00e1ticamente).</p> <p>Instalaci\u00f3n autom\u00e1tica en despliegues</p> <p>En ejecuci\u00f3n local, Python no instala autom\u00e1ticamente los paquetes aunque est\u00e9n en <code>requirements.txt</code>. Pero en entornos de despliegue s\u00ed se automatiza:</p> <ul> <li> <p>Docker </p><pre><code>COPY requirements.txt .\nRUN pip install -r requirements.txt\n</code></pre><p></p> </li> <li> <p>Plataformas como Heroku o GitHub Actions Detectan el fichero y ejecutan autom\u00e1ticamente: </p><pre><code>pip install -r requirements.txt\n</code></pre><p></p> </li> <li> <p>Script de arranque personalizado </p><pre><code>pip install -r requirements.txt &amp;&amp; python main.py\n</code></pre><p></p> </li> </ul>"},{"location":"2_5_ModulosPaquetes/#ejemplo-y-ejercicio-de-uso_1","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<p>El siguiente ejemplo permite crear un flujo que prepara un proyecto web con Flask sin afectar otros proyectos.</p> <p>Ejemplo de uso</p> <p>Los siguiente pasos crean en entorno virtual, lo activa, instala el paquete flask y genera el fichero requirements.txt</p> <pre><code># Crear entorno virtual\npython -m venv entorno_web\n\n# Activar entorno (Windows)\nentorno_web/Scripts/activate\n\n# Instalar Flask\npip install flask\n\n# Guardar dependencias\npip freeze &gt; requirements.txt\n\n# Desactivar entorno\ndeactivate\n</code></pre> <p>Ejercicio: Preparar entorno para proyecto de an\u00e1lisis de datos</p> <p>Imagina que vas a empezar un proyecto de an\u00e1lisis de datos en Python. Crea un entorno virtual llamado <code>analisis</code>, instala los paquetes <code>pandas</code> y <code>matplotlib</code>, y guarda las dependencias en un archivo <code>requirements.txt</code>.</p> <p>Pistas - Usa <code>python -m venv</code> para crear el entorno. - Activa el entorno antes de instalar los paquetes. - Usa <code>pip freeze</code> para generar el archivo.</p> Soluci\u00f3n <pre><code># Crear entorno virtual\npython -m venv analisis\n\n# Activar entorno (Windows)\nanalisis/Scripts/activate\n\n# Instalar paquetes\npip install pandas matplotlib\n\n# Guardar dependencias\npip freeze &gt; requirements.txt\n\n# Desactivar entorno\ndeactivate\n</code></pre> <p>Genial, Sergio. Aqu\u00ed tienes el listado de m\u00f3dulos t\u00edpicos instalables con <code>pip</code>, presentado como tarjetas visuales para MkDocs Material. Puedes integrarlo directamente en tu documentaci\u00f3n:</p>"},{"location":"2_5_ModulosPaquetes/#apendice-modulos-comunes","title":"Ap\u00e9ndice: M\u00f3dulos comunes","text":"<p>A continuaci\u00f3n se presentan algunos m\u00f3dulos externos populares en Python, con su utilidad y ejemplos de funciones clave. </p> <p>Lor primeros viene incluidos dentro de la propia instalacion de Python:</p> jsondatetimeossysrandommathtime <p>Utilidad: Trabajar con datos en formato JSON (muy usado en APIs y persistencia).</p> <p>Funciones destacadas:</p> <ul> <li><code>dump(obj, file)</code>: Guarda un objeto Python en un fichero <code>.json</code>.</li> <li><code>load(file)</code>: Carga datos desde un fichero <code>.json</code>.</li> <li><code>dumps(obj)</code>: Convierte un objeto Python a cadena JSON.</li> <li><code>loads(str)</code>: Convierte una cadena JSON a objeto Python.</li> </ul> <p>Ejemplo: </p><pre><code>import json\n\ndatos = {\"nombre\": \"Ana\", \"edad\": 30}\ncadena = json.dumps(datos)\nprint(cadena)\n</code></pre><p></p> <p>Utilidad: Gestionar fechas, horas y diferencias temporales.</p> <p>Funciones destacadas:</p> <ul> <li><code>datetime.now()</code>: Fecha y hora actual.</li> <li><code>datetime.strptime()</code>: Convertir cadena a fecha.</li> <li><code>timedelta</code>: Representa una duraci\u00f3n.</li> <li><code>date.today()</code>: Fecha actual sin hora.</li> </ul> <p>Ejemplo: </p><pre><code>from datetime import datetime\nahora = datetime.now()\nprint(ahora.strftime(\"%d/%m/%Y %H:%M\"))\n</code></pre><p></p> <p>Utilidad: Interactuar con el sistema operativo (rutas, entorno, procesos).</p> <p>Funciones destacadas:</p> <ul> <li><code>os.getcwd()</code>: Directorio actual.</li> <li><code>os.listdir()</code>: Archivos en una carpeta.</li> <li><code>os.path.join()</code>: Unir rutas.</li> <li><code>os.environ</code>: Variables de entorno.</li> </ul> <p>Ejemplo: </p><pre><code>import os\nprint(\"Carpeta actual:\", os.getcwd())\n</code></pre><p></p> <p>Utilidad: Acceder a par\u00e1metros del sistema y controlar la ejecuci\u00f3n.</p> <p>Funciones destacadas:</p> <ul> <li><code>sys.argv</code>: Argumentos pasados al script.</li> <li><code>sys.exit()</code>: Finaliza el programa.</li> <li><code>sys.path</code>: Rutas de b\u00fasqueda de m\u00f3dulos.</li> </ul> <p>Ejemplo: </p><pre><code>import sys\nprint(\"Argumentos:\", sys.argv)\n</code></pre><p></p> <p>Utilidad: Generar n\u00fameros aleatorios y seleccionar elementos.</p> <p>Funciones destacadas:</p> <ul> <li><code>random.randint(a, b)</code>: Entero aleatorio entre <code>a</code> y <code>b</code>.</li> <li><code>random.choice(lista)</code>: Elemento aleatorio.</li> <li><code>random.shuffle(lista)</code>: Mezcla la lista.</li> <li><code>random.random()</code>: N\u00famero decimal entre 0 y 1.</li> </ul> <p>Ejemplo: </p><pre><code>import random\nprint(\"N\u00famero aleatorio:\", random.randint(1, 10))\n</code></pre><p></p> <p>Utilidad: Operaciones matem\u00e1ticas b\u00e1sicas y avanzadas.</p> <p>Funciones destacadas:</p> <ul> <li><code>math.sqrt(x)</code>: Ra\u00edz cuadrada.</li> <li><code>math.pow(x, y)</code>: Potencia.</li> <li><code>math.floor(x)</code>: Redondeo hacia abajo.</li> <li><code>math.pi</code>: Constante \u03c0.</li> </ul> <p>Ejemplo: </p><pre><code>import math\nprint(\"Ra\u00edz de 25:\", math.sqrt(25))\n</code></pre><p></p> <p>Utilidad: Medir tiempos, pausas y temporizadores.</p> <p>Funciones destacadas:</p> <ul> <li><code>time.sleep(segundos)</code>: Pausa.</li> <li><code>time.time()</code>: Timestamp actual.</li> <li><code>time.strftime()</code>: Formatear fecha/hora.</li> </ul> <p>Ejemplo: </p><pre><code>import time\nprint(\"Inicio\")\ntime.sleep(2)\nprint(\"Fin tras 2 segundos\")\n</code></pre><p></p> <p>Y ahora otros que necesitan ser instalados usando <code>pip</code></p> <pre><code>pip install nombre_del_paquete\n</code></pre> requestspytestpandasmatplotlibnumpyflaskcoloramaemojibcryptpython-dotenv <p>Utilidad: Realiza peticiones HTTP.</p> <p>Funciones destacadas:</p> <ul> <li><code>get(url)</code>: Realiza una petici\u00f3n GET.</li> <li><code>post(url, data)</code>: Env\u00eda datos con POST.</li> <li><code>json()</code>: Convierte la respuesta en diccionario.</li> <li><code>status_code</code>: C\u00f3digo de estado HTTP.</li> </ul> <p>Ejemplo: </p><pre><code>import requests\nr = requests.get(\"https://api.github.com\")\nprint(r.status_code)\nprint(r.json())\n</code></pre><p></p> <p>Utilidad: Automatiza pruebas unitarias.</p> <p>Funciones destacadas:</p> <ul> <li><code>assert</code>: Verifica condiciones esperadas.</li> <li><code>raises</code>: Comprueba excepciones.</li> <li><code>fixture</code>: Prepara contexto de prueba.</li> <li><code>mark.parametrize</code>: Ejecuta con m\u00faltiples valores.</li> </ul> <p>Ejemplo: </p><pre><code>def suma(a, b): return a + b\n\ndef test_suma():\n    assert suma(2, 3) == 5\n</code></pre><p></p> <p>Utilidad: Manipula datos tabulares.</p> <p>Funciones destacadas:</p> <ul> <li><code>read_csv()</code>: Carga datos desde CSV.</li> <li><code>head()</code>: Primeras filas.</li> <li><code>describe()</code>: Estad\u00edsticas b\u00e1sicas.</li> <li><code>groupby()</code>: Agrupaci\u00f3n por columna.</li> </ul> <p>Ejemplo: </p><pre><code>import pandas as pd\ndf = pd.read_csv(\"datos.csv\")\nprint(df.describe())\n</code></pre><p></p> <p>Utilidad: Genera gr\u00e1ficos 2D.</p> <p>Funciones destacadas:</p> <ul> <li><code>plot()</code>: L\u00ednea simple.</li> <li><code>bar()</code>: Barras.</li> <li><code>scatter()</code>: Dispersi\u00f3n.</li> <li><code>hist()</code>: Histograma.</li> <li><code>show()</code>: Muestra el gr\u00e1fico.</li> </ul> <p>Ejemplo: </p><pre><code>import matplotlib.pyplot as plt\nplt.plot([1, 2, 3], [4, 1, 7])\nplt.title(\"Gr\u00e1fico de ejemplo\")\nplt.show()\n</code></pre><p></p> <p>Utilidad: C\u00e1lculo num\u00e9rico con arrays.</p> <p>Funciones destacadas:</p> <ul> <li><code>array()</code>: Crea un array.</li> <li><code>mean()</code>: Media.</li> <li><code>reshape()</code>: Cambia forma.</li> <li><code>dot()</code>: Producto matricial.</li> <li><code>random.rand()</code>: Array aleatorio.</li> </ul> <p>Ejemplo: </p><pre><code>import numpy as np\na = np.array([1, 2, 3])\nprint(np.mean(a))\n</code></pre><p></p> <p>Utilidad: Aplicaciones web ligeras.</p> <p>Funciones destacadas:</p> <ul> <li><code>Flask()</code>: Crea la app.</li> <li><code>route()</code>: Define rutas.</li> <li><code>render_template()</code>: Usa HTML.</li> <li><code>request</code>: Accede a datos enviados.</li> </ul> <p>Ejemplo: </p><pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef inicio():\n    return \"Hola desde Flask\"\n</code></pre><p></p> <p>Utilidad: Colorea texto en terminal.</p> <p>Funciones destacadas:</p> <ul> <li><code>Fore</code>: Colores de texto.</li> <li><code>Back</code>: Colores de fondo.</li> <li><code>Style</code>: Estilos como negrita.</li> <li><code>init()</code>: Inicializa colorama.</li> </ul> <p>Ejemplo: </p><pre><code>from colorama import Fore, Style\nprint(Fore.RED + Style.BRIGHT + \"Error cr\u00edtico\")\n</code></pre><p></p> <p>Utilidad: Muestra emojis en texto.</p> <p>Funciones destacadas:</p> <ul> <li><code>emojize()</code>: Convierte texto en emoji.</li> <li><code>demojize()</code>: Convierte emoji en texto.</li> <li><code>replace_emoji()</code>: Sustituye emojis.</li> </ul> <p>Ejemplo: </p><pre><code>import emoji\nprint(emoji.emojize(\"Python es divertido :snake:\"))\n</code></pre><p></p> <p>Utilidad: Cifrado seguro de contrase\u00f1as.</p> <p>Funciones destacadas:</p> <ul> <li><code>hashpw()</code>: Cifra una contrase\u00f1a.</li> <li><code>gensalt()</code>: Genera sal aleatoria.</li> <li><code>checkpw()</code>: Verifica contrase\u00f1a.</li> </ul> <p>Ejemplo: </p><pre><code>import bcrypt\nclave = b\"secreta123\"\nhashed = bcrypt.hashpw(clave, bcrypt.gensalt())\nprint(bcrypt.checkpw(clave, hashed))\n</code></pre><p></p> <p>Utilidad: Carga variables desde <code>.env</code>.</p> <p>Funciones destacadas:</p> <ul> <li><code>load_dotenv()</code>: Carga las variables.</li> <li><code>dotenv_values()</code>: Devuelve diccionario.</li> <li><code>find_dotenv()</code>: Localiza el fichero <code>.env</code>.</li> </ul> <p>Ejemplo: </p><pre><code>from dotenv import load_dotenv\nimport os\n\nload_dotenv()\nprint(os.getenv(\"API_KEY\"))\n</code></pre><p></p>"},{"location":"2_6_ProgramacionOrientadaObjetos/","title":"Programaci\u00f3n Orientada a Objetos (POO)","text":"<p>En esta \u00faltima sesi\u00f3n, nos familiarizaremos con los fundamentos de la programaci\u00f3n orientada a objetos en Python, un paradigma que permite modelar problemas del mundo real mediante clases y objetos. Se explicar\u00e1 c\u00f3mo definir clases, crear instancias, y utilizar atributos y m\u00e9todos para encapsular comportamiento. El objetivo es que se comprenda c\u00f3mo organizar el c\u00f3digo en estructuras m\u00e1s robustas y reutilizables.</p> <p>Tambi\u00e9n se abordar\u00e1n conceptos clave como el constructor <code>__init__</code>, el uso de <code>self</code>, y la distinci\u00f3n entre atributos de instancia y m\u00e9todos. Se aprender\u00e1 a crear objetos con estado propio y a manipularlos mediante funciones internas que definen su comportamiento. Se busca que se entienda c\u00f3mo se relacionan los objetos entre s\u00ed y c\u00f3mo se puede construir l\u00f3gica m\u00e1s compleja a partir de clases simples.</p> <p>Por \u00faltimo, se introducir\u00e1 el concepto de herencia, que permite crear nuevas clases a partir de otras ya existentes, reutilizando y extendiendo funcionalidades. Se explicar\u00e1 c\u00f3mo sobrescribir m\u00e9todos, c\u00f3mo usar <code>super()</code> y c\u00f3mo aplicar estos principios para evitar duplicaci\u00f3n de c\u00f3digo y mejorar la mantenibilidad de los programas.</p> <p>B\u00e1sicamente, los contenidos que vamos a abordar en esta secci\u00f3n son:</p> <ul> <li>Definici\u00f3n de clases y objetos</li> <li>Atributos de instancia y uso de <code>self</code></li> <li>M\u00e9todos internos y constructor <code>__init__</code></li> <li>Creaci\u00f3n y uso de instancias</li> <li>Herencia entre clases</li> <li>Sobrescritura de m\u00e9todos y uso de <code>super()</code></li> </ul>"},{"location":"2_6_ProgramacionOrientadaObjetos/#introduccion-a-la-poo-en-python","title":"Introducci\u00f3n a la POO en Python","text":"<p>La programaci\u00f3n orientada a objetos permite representar entidades como \u201cobjetos\u201d que tienen estado (atributos) y comportamiento (m\u00e9todos). En Python, se define una clase con la palabra clave <code>class</code>, y se crean objetos como instancias de esa clase.</p> <p>Ejemplo de Objerto Persona</p> <pre><code>class Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\n    def saludar(self):\n        print(f\"Hola, soy {self.nombre} y tengo {self.edad} a\u00f1os.\")\n</code></pre> <p>Aqu\u00ed, <code>__init__</code> es el constructor, que se ejecuta al crear el objeto. <code>self</code> representa la instancia actual, y permite acceder a sus atributos y m\u00e9todos.</p> <pre><code>p1 = Persona(\"Sergio\", 30)\np1.saludar()\n</code></pre>"},{"location":"2_6_ProgramacionOrientadaObjetos/#herencia-entre-clases","title":"Herencia entre clases","text":"<p>Una clase puede heredar de otra para reutilizar su comportamiento. Por ejemplo:</p> <p>Ejemplo de objeto Empleado, heredado de Persona</p> <pre><code>class Empleado(Persona):\n    def __init__(self, nombre, edad, puesto):\n        super().__init__(nombre, edad)\n        self.puesto = puesto\n\n    def saludar(self):\n        print(f\"Hola, soy {self.nombre}, trabajo como {self.puesto}.\")\n</code></pre> <p>La clase <code>Empleado</code> hereda de <code>Persona</code>, pero redefine el m\u00e9todo <code>saludar</code>. El uso de <code>super()</code> permite llamar al constructor de la clase base.</p>"},{"location":"2_6_ProgramacionOrientadaObjetos/#ejemplo-y-ejercicio-de-uso","title":"\ud83e\udde9 Ejemplo y ejercicio de uso","text":"<p>Veamos un ejemplo b\u00e1sico que muestra c\u00f3mo una clase hija puede sobrescribir el comportamiento de la clase padre. En este caso, redefinimos la clase Animal como Perro.</p> <p>Clase Perro redefina a Animal</p> <pre><code>class Animal:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\n    def hablar(self):\n        print(f\"{self.nombre} hace un sonido.\")\n\nclass Perro(Animal):\n    def hablar(self):\n        print(f\"{self.nombre} dice: \u00a1Guau!\")\n\nmascota = Perro(\"Toby\")\nmascota.hablar()  # Toby dice: \u00a1Guau!\n</code></pre> <p>Ejercicio: Crear clase <code>Coche</code> con atributos y m\u00e9todo</p> <p>Crea una clase llamada <code>Coche</code> que tenga los siguientes atributos:</p> <ul> <li><code>marca</code></li> <li><code>modelo</code></li> <li><code>a\u00f1o</code></li> </ul> <p>La clase debe tener:</p> <ol> <li>Un constructor que reciba esos tres valores.</li> <li>Un m\u00e9todo llamado <code>mostrar_info()</code> que imprima los datos del coche en una sola l\u00ednea.</li> </ol> <p>Luego crea una instancia de la clase y llama al m\u00e9todo para mostrar la informaci\u00f3n.</p> <p>Pistas - Usa <code>__init__</code> para inicializar los atributos. - Usa <code>self</code> para acceder a los atributos dentro del m\u00e9todo. - Usa <code>print()</code> para mostrar los datos formateados.</p> Soluci\u00f3n <pre><code>class Coche:\n    def __init__(self, marca, modelo, a\u00f1o):\n        self.marca = marca\n        self.modelo = modelo\n        self.a\u00f1o = a\u00f1o\n\n    def mostrar_info(self):\n        print(f\"{self.marca} {self.modelo} ({self.a\u00f1o})\")\n\nmi_coche = Coche(\"Toyota\", \"Corolla\", 2020)\nmi_coche.mostrar_info()  # Toyota Corolla (2020)\n</code></pre>"},{"location":"2_6_ProgramacionOrientadaObjetos/#encapsulamiento-y-visibilidad","title":"Encapsulamiento y visibilidad","text":"<p>En Python, no existe una protecci\u00f3n estricta de atributos como en otros lenguajes, pero se usan convenciones para indicar que un atributo no debe modificarse directamente.</p> <ul> <li><code>_atributo</code>: indica que es de uso interno (convenci\u00f3n).</li> <li><code>__atributo</code>: activa name mangling (ocultaci\u00f3n parcial).</li> <li><code>@property</code>: permite acceder a atributos como si fueran p\u00fablicos, pero controlando su lectura y escritura.</li> </ul> <p>Ejemplo de encapsulamiento con <code>@property</code></p> <pre><code>class Persona:\n    def __init__(self, nombre):\n        self._nombre = nombre\n\n    @property\n    def nombre(self):\n        return self._nombre\n\n    @nombre.setter\n    def nombre(self, nuevo):\n        if nuevo:\n            self._nombre = nuevo\n</code></pre> <p>Esto permite validar o controlar el acceso a los atributos sin exponerlos directamente.</p>"},{"location":"2_6_ProgramacionOrientadaObjetos/#relacion-entre-objetos","title":"Relaci\u00f3n entre objetos","text":"<p>Una clase puede contener instancias de otras clases como atributos. Esto permite modelar relaciones entre entidades.</p> <p>Ejemplo de composici\u00f3n: Coche con Motor</p> <pre><code>class Motor:\n    def __init__(self, tipo):\n        self.tipo = tipo\n\nclass Coche:\n    def __init__(self, marca, motor):\n        self.marca = marca\n        self.motor = motor\n\nm = Motor(\"el\u00e9ctrico\")\nc = Coche(\"Tesla\", m)\nprint(c.motor.tipo)  # el\u00e9ctrico\n</code></pre> <p>Este patr\u00f3n se llama composici\u00f3n y es clave para construir sistemas complejos a partir de componentes simples.</p>"},{"location":"2_6_ProgramacionOrientadaObjetos/#diagrama-conceptual-basico","title":"Diagrama conceptual b\u00e1sico","text":"<p>Esquema de clases con herencia</p> <pre><code>classDiagram\n    class Persona {\n        -nombre: str\n        -edad: int\n        +saludar(): void\n    }\n\n    class Empleado {\n        -puesto: str\n        +saludar(): void\n    }\n\n    Persona &lt;|-- Empleado\n</code></pre> <p>Este diagrama muestra c\u00f3mo <code>Empleado</code> hereda de <code>Persona</code> y a\u00f1ade nuevos atributos y m\u00e9todos.</p>"},{"location":"2_6_ProgramacionOrientadaObjetos/#actividad-de-refuerzo-biblioteca","title":"\ud83e\uddea Actividad de refuerzo: Biblioteca","text":"<p>Ejercicio: Composici\u00f3n y listas de objetos</p> <p>Crea una clase <code>Libro</code> con los siguientes atributos:</p> <ul> <li><code>titulo</code></li> <li><code>autor</code></li> <li><code>anio</code></li> </ul> <p>Luego crea una clase <code>Biblioteca</code> que contenga una lista de libros y un m\u00e9todo <code>mostrar_catalogo()</code> que imprima todos los t\u00edtulos disponibles.</p> <p>Pistas - Usa una lista como atributo interno (<code>self.libros = []</code>). - A\u00f1ade libros con un m\u00e9todo <code>agregar_libro(libro)</code>. - Recorre la lista con un bucle <code>for</code>.</p> Soluci\u00f3n <pre><code>class Libro:\n    def __init__(self, titulo, autor, anio):\n        self.titulo = titulo\n        self.autor = autor\n        self.anyo = anio\n\nclass Biblioteca:\n    def __init__(self):\n        self.libros = []\n\n    def agregar_libro(self, libro):\n        self.libros.append(libro)\n\n    def mostrar_catalogo(self):\n        for libro in self.libros:\n            print(f\"{libro.titulo} ({libro.anio}) - {libro.autor}\")\n\n# Ejemplo de uso\nbiblio = Biblioteca()\nbiblio.agregar_libro(Libro(\"1984\", \"George Orwell\", 1949))\nbiblio.agregar_libro(Libro(\"El Principito\", \"Antoine de Saint-Exup\u00e9ry\", 1943))\nbiblio.mostrar_catalogo()\n</code></pre>"},{"location":"3_1_introduccion/","title":"Introducci\u00f3n a Git","text":""},{"location":"3_1_introduccion/#sistemas-de-control-de-versiones","title":"Sistemas de control de versiones","text":"<p>Cuando trabajas en un proyecto (una aplicaci\u00f3n, un juego, un m\u00f3dulo, etc.), es normal que hagas muchos cambios: corregir errores, a\u00f1adir funciones, reorganizar archivos. El control de versiones (VCS, Version Control System) es una herramienta que te permite:</p> <ul> <li>Llevar un historial de cambios: saber qu\u00e9 se cambi\u00f3, cu\u00e1ndo y por qu\u00e9.</li> <li>Volver atr\u00e1s si algo sale mal (deshacer, recuperar versiones antiguas).</li> <li>Trabajar en equipo sin pisar el trabajo de otros.</li> <li>Tener copias de seguridad distribuidas (cada colaborador tiene el repositorio completo).</li> </ul> <p><code>Git</code> es un sistema de control de versiones muy popular, distribuido y eficiente.</p> <p>Nota: Distribuido</p> <p>Distribuido quiere decir que cada desarrollador tiene una copia completa del repositorio (historial, ramas, archivos). No dependes de un servidor central para trabajar localmente.</p>"},{"location":"3_1_introduccion/#git","title":"Git","text":"<p>Git es un sistema de control de versiones libre y distribuido dise\u00f1ado para gestionar proyectos peque\u00f1os y grandes con rapidez y eficiencia. El objetivo principal de Git es controlar y gestionar los cambios realizados en una gran cantidad de archivos de una forma f\u00e1cil y eficiente.</p> <p>Git fue dise\u00f1ado en 2005 por Linus Torvalds, creador del kernel del sistema operativo Linux, y desde entonces se ha convertido en una herramienta fundamental e imprescindible en la gesti\u00f3n de c\u00f3digo fuente en proyectos colaborativos.</p> <p>Git se basa en repositorios, que se inicializan en un directorio concreto y contienen toda la informaci\u00f3n de los cambios realizados en todo el \u00e1rbol de directorios y archivos a partir de ese directorio.</p> <p>Los principales objetivos y caracter\u00edsticas de Git son:</p> <ul> <li>Control de versiones: Git realiza un seguimiento de las modificaciones a los archivos a lo largo del tiempo,     lo que permite a los desarrolladores ver y recuperar versiones anteriores de su c\u00f3digo.     Esta caracter\u00edstica es esencial para trabajar en equipos y para solucionar problemas o errores.</li> <li>Distribuido: Cada copia de un repositorio Git contiene todo el historial de cambios y puede operar de manera independiente.     Esto facilita el trabajo sin conexi\u00f3n y la colaboraci\u00f3n en equipos distribuidos.</li> <li>Rama y fusi\u00f3n: Git facilita la creaci\u00f3n de ramas (branching) para desarrollar funcionalidades     o solucionar problemas sin afectar la rama principal.     Despu\u00e9s, puedes fusionar (merge) las ramas de nuevo en la rama principal cuando est\u00e9n listas.</li> <li>Gesti\u00f3n de conflictos: Git ofrece herramientas para gestionar conflictos en caso de que dos o m\u00e1s personas hayan realizado     cambios en la misma parte del c\u00f3digo.     Los desarrolladores pueden resolver estos conflictos manualmente.</li> <li>Colaboraci\u00f3n: Git facilita la colaboraci\u00f3n en proyectos de c\u00f3digo abierto o en equipos,     ya que permite a m\u00faltiples personas trabajar en el mismo proyecto de manera eficiente.     Plataformas como GitHub, GitLab y Bitbucket se utilizan com\u00fanmente para alojar repositorios Git en l\u00ednea y colaborar en proyectos.</li> <li>C\u00f3digo abierto y gratuito: Git es de c\u00f3digo abierto y gratuito, lo que significa que cualquiera puede usarlo sin coste y contribuir al desarrollo de la herramienta.</li> </ul>"},{"location":"3_1_introduccion/#usaremos-el-terminal","title":"Usaremos el terminal","text":"<p>En estos apuntes, utilizaremos la terminal para interactuar con Git, pero esto no significa que sea la \u00fanica manera de hacerlo. De hecho, pr\u00e1cticamente todos los entornos de desarrollo modernos tienen integraci\u00f3n con Git, lo que permite realizar las mismas operaciones que proporciona la terminal, pero de forma m\u00e1s visual e intuitiva.</p> <p>No obstante, es importante conocer c\u00f3mo funcionan los comandos de Git en la terminal, por distintas razones:</p> <ul> <li>Portabilidad: La terminal es un entorno com\u00fan en todos los sistemas operativos y en cualquier entorno de desarrollo.</li> <li>Flexibilidad: La terminal permite realizar operaciones m\u00e1s avanzadas y personalizadas que las interfaces gr\u00e1ficas.</li> <li>Comprensi\u00f3n: Permite entender c\u00f3mo funcionan los comandos de Git y los procesos que realiza en el sistema.</li> </ul>"},{"location":"3_1_introduccion/#trabajando-con-git","title":"Trabajando con <code>git</code>","text":"<p>A la hora de trabajar con git, debemos tener en cuenta una serie de conceptos previos</p>"},{"location":"3_1_introduccion/#tres-areas-dentro-de-un-repositorio","title":"Tres \u00e1reas dentro de un repositorio","text":"<p>Para entender c\u00f3mo trabaja Git, es \u00fatil saber que el repositorio (local) est\u00e1 dividido en tres estados o \u201c\u00e1reas\u201d:</p> <ol> <li> <p>Directorio de trabajo (working directory)    Es la copia de los archivos que ves y modificas en tu sistema. Por ejemplo, el c\u00f3digo fuente que editas.</p> </li> <li> <p>\u00c1rea de preparaci\u00f3n (staging area o \u00edndice / index)    Es una \u201czona intermedia\u201d donde marcas los cambios que quieres incluir en el pr\u00f3ximo commit. Aqu\u00ed decides qu\u00e9 cambios van o no van al commit.</p> </li> <li> <p>Repositorio local (.git)    Guarda los commits, el historial, las ramas, etc. Cuando haces <code>git commit</code>, los contenidos del \u00e1rea de preparaci\u00f3n se almacenan aqu\u00ed.</p> </li> </ol> <p>Visualmente:</p> \u00c1reas de un repositorio Git."},{"location":"3_1_introduccion/#flujo-basico-de-trabajo","title":"Flujo b\u00e1sico de trabajo","text":"<p>El flujo de trabajo que sigue la gesti\u00f3n de un repositorio local es: </p> <ol> <li>Modificar archivos en tu directorio de trabajo.</li> <li>Usar <code>git add</code> para moverlos al staging.</li> <li>Hacer <code>git commit</code> para registrar esos cambios como una versi\u00f3n nueva.</li> <li>Si trabajas con repositorio remoto, haces <code>git push</code> para subir esos commits al servidor.</li> <li>Puedes recuperar cambios de otros con <code>git pull</code> o <code>git fetch</code>.</li> </ol> Flujo de trabajo git + repositorio."},{"location":"3_1_introduccion/#instalacion-de-git","title":"instalaci\u00f3n de <code>git</code>","text":"<p>La instalaci\u00f3n de Git es un paso esencial para comenzar a trabajar con control de versiones en proyectos de desarrollo. En sistemas Ubuntu o derivados de Debian, el proceso es muy sencillo: basta con abrir una terminal y ejecutar el comando </p> <pre><code>sudo apt install git\n</code></pre> <p>Esto instalar\u00e1 la versi\u00f3n disponible en los repositorios oficiales. Una vez instalado, puedes verificarlo con </p> <p></p><pre><code>git --version\n</code></pre> Tambi\u00e9n es posible compilar Git desde el c\u00f3digo fuente si se requiere una versi\u00f3n m\u00e1s reciente, aunque esto implica pasos adicionales.<p></p> <p>En Windows, la forma m\u00e1s pr\u00e1ctica de instalar Git es descargando el instalador desde la p\u00e1gina oficial git-scm.com. El asistente de instalaci\u00f3n permite configurar opciones como el editor por defecto, la integraci\u00f3n con Git Bash y el comportamiento de l\u00ednea de comandos. Tras completar la instalaci\u00f3n, puedes abrir Git Bash o usar Git desde PowerShell o CMD. </p> <p>Para m\u00e1s detalles, instrucciones espec\u00edficas por sistema operativo y recomendaciones de configuraci\u00f3n, se recomienda consultar la documentaci\u00f3n oficial de Git.</p>"},{"location":"3_1_introduccion/#comandos-esenciales","title":"Comandos esenciales","text":"Comando Qu\u00e9 hace Nota / explicaci\u00f3n did\u00e1ctica <code>git init</code> Inicializa un repositorio Git en la carpeta actual Crea una carpeta oculta <code>.git</code> que gestionar\u00e1 todo el historial <code>git clone &lt;url&gt;</code> Crea una copia local de un repositorio remoto Clonas todo el historial desde otro repositorio <code>git add &lt;archivo&gt;</code> A\u00f1ade uno o varios archivos al \u00e1rea de preparaci\u00f3n Le dices a Git \u201ceste cambio lo quiero incluir en el pr\u00f3ximo commit\u201d <code>git commit -m \"mensaje\"</code> Crea un nuevo commit con los cambios del staging Cada commit tiene un mensaje que explica qu\u00e9 cambiaste <code>git status</code> Muestra el estado actual: archivos modificados, en staging, sin seguimiento Es muy \u00fatil para saber qu\u00e9 est\u00e1 listo para commit <code>git log</code> Muestra el historial de commits Puedes ver fechas, autor, mensaje <code>git diff</code> Muestra diferencias entre versiones Por ejemplo, lo que cambiaste desde el \u00faltimo commit Flojo de trabajo con git + comandos."},{"location":"3_1_introduccion/#inicializar-repositorio","title":"Inicializar repositorio","text":"<pre><code>git init\n</code></pre> Crea un nuevo repositorio local."},{"location":"3_1_introduccion/#clonar-repositorio","title":"Clonar repositorio","text":"<pre><code>git clone URL\n</code></pre> Descarga un repositorio remoto."},{"location":"3_1_introduccion/#estado-del-repositorio","title":"Estado del repositorio","text":"<pre><code>git status\n</code></pre> Muestra los archivos modificados y no rastreados."},{"location":"3_1_introduccion/#anadir-archivos","title":"A\u00f1adir archivos","text":"<pre><code>git add archivo.txt\n</code></pre> Agrega archivos al \u00e1rea de preparaci\u00f3n. Inicializaci\u00f3n de repositorio git. <p>En la figura anterior, se puede ver como hemos creado un repositorio y se han a\u00f1adido los ficheros nuevos creado al repositorio.</p> <p>A\u00f1adir archivos nuevos</p> <p>No necesitamos recordar todos los archivos nuevos cuando vamos a a\u00f1adirlos al repositorio. Podemos sustituir el nombre de todos los archivos por un <code>.</code> (punto):</p> <pre><code>git add .\n</code></pre> <p>Con esta orden nos incluir\u00e1 todos los archivos nuevos, incluidos los que se encuentren en las diferentes subcarpetas.</p>"},{"location":"3_1_introduccion/#confirmar-cambios","title":"Confirmar cambios","text":"<pre><code>git commit -m \"Descripci\u00f3n del cambio\"\n</code></pre> Guarda los cambios en el historial."},{"location":"3_1_introduccion/#ver-historial","title":"Ver historial","text":"<pre><code>git log\n</code></pre> Muestra los commits realizados. Guardando los cambios realizados. <p>En esta ilustraci\u00f3n guardamos los cambios mediante <code>commit</code> y podemos observar como esto cambios se han guardado correctamente.</p> <p>Si el historial es muy largo, podemos utilizar el par\u00e1metro <code>-n</code> para indicar la cantidad de commits que queremos ver, e incluso si utilizamos --oneline tenemos esta informaci\u00f3n en un \u00fanica l\u00edneas para que sea m\u00e1s sencillo buscar el cambio deseado</p> <pre><code>git log -n3 --oneline\n</code></pre>"},{"location":"3_1_introduccion/#revertir-cambios","title":"Revertir cambios","text":"<pre><code>git checkout -- archivo.txt\n</code></pre> Revierte cambios en un archivo desde el \u00faltimo commit"},{"location":"3_1_introduccion/#revertir-commit","title":"Revertir commit","text":"<pre><code>git revert ID_commit\n</code></pre> Crea un nuevo commit que revierte el anterior."},{"location":"3_1_introduccion/#resetear-a-un-commit-anterior","title":"Resetear a un commit anterior","text":"<pre><code>git reset --hard ID_commit\n</code></pre> Vuelve el repositorio al estado de un commit anterior. <p>La diferencia entre las dos \u00faltimas ordenes, es que la primera revierte creando un nuevo commit en el historial, mientras que la segunda elimina los commits desde el punto indicado.</p>"},{"location":"3_1_introduccion/#el-archivo-gitignore","title":"El archivo <code>.gitignore</code>","text":"<p>El archivo <code>.gitignore</code> es una herramienta fundamental en Git que permite excluir archivos o carpetas del control de versiones, evitando que se agreguen, rastreen o suban al repositorio. Aqu\u00ed tienes una explicaci\u00f3n clara y completa:</p> <ul> <li>Es un archivo de texto que contiene patrones de nombres de archivos o carpetas que Git debe ignorar.</li> <li>Se coloca normalmente en la ra\u00edz del repositorio, aunque tambi\u00e9n puede haber <code>.gitignore</code> en subdirectorios.</li> <li>Git lo consulta al decidir qu\u00e9 archivos no deben ser rastreados ni incluidos en commits.</li> </ul> <p>Las razones m\u00e1s importantes para usar <code>.gitignore</code> son :</p> <ul> <li>Para evitar subir archivos innecesarios o sensibles, como:</li> <li>Archivos temporales (<code>*.log</code>, <code>*.tmp</code>)</li> <li>Carpetas de dependencias (<code>node_modules/</code>, <code>venv/</code>)</li> <li>Archivos compilados (<code>*.class</code>, <code>*.pyc</code>, <code>*.o</code>)</li> <li>Configuraciones locales (<code>.env</code>, <code>.vscode/</code>, <code>.idea/</code>)</li> <li>Archivos del sistema (<code>Thumbs.db</code>, <code>.DS_Store</code>)</li> </ul> <p>Ejemplo de contenido de <code>.gitignore</code></p> <p>Contenido ejemplo de fichero <code>.gitignore</code>: </p><pre><code># Ignorar archivos de log\n*.log\n\n# Ignorar carpetas de dependencias\nnode_modules/\nvenv/\n\n# Ignorar archivos de configuraci\u00f3n local\n.env\n.vscode/\n\n# Ignorar archivos compilados\n*.class\n*.pyc\n*.o\n</code></pre><p></p> <p>Consideraciones importantes</p> <ul> <li>No afecta archivos ya rastreados: Si un archivo ya fue a\u00f1adido al repositorio, <code>.gitignore</code> no lo eliminar\u00e1. Debes usar <code>git rm --cached archivo</code> para dejar de rastrearlo.</li> <li>Puedes tener un <code>.gitignore</code> global para todos tus proyectos, configurado en <code>~/.config/git/ignore</code> o mediante:</li> </ul> <pre><code>git config --global core.excludesFile ~/.gitignore_global\n</code></pre> <p>Para m\u00e1s detalles t\u00e9cnicos</p> <ul> <li>documentaci\u00f3n oficial de Git</li> <li>gu\u00eda pr\u00e1ctica en espa\u00f1ol.</li> </ul> <p>Recuerda estas buenas pr\u00e1cticas iniciales</p> <ul> <li>Haz commits peque\u00f1os y coherentes (cada commit debe tener sentido por s\u00ed solo).</li> <li>Escribe mensajes de commit claros: \u201cCorrecci\u00f3n bug X\u201d, \u201cA\u00f1adida funcionalidad Y\u201d.</li> <li>Usa <code>.gitignore</code> para excluir archivos innecesarios (archivos temporales, binarios, claves, etc.).</li> <li>Practica el uso de <code>git status</code> frecuentemente para tener control del estado del repositorio.</li> </ul>"},{"location":"3_2_ramas/","title":"Ramas en Git","text":"<p>Trabajar con ramas es una de las ventajas m\u00e1s potentes de Git: te permite desarrollar funcionalidades, corregir errores o experimentar sin afectar la rama principal.</p>"},{"location":"3_2_ramas/#concepto-de-rama","title":"Concepto de rama","text":"<ul> <li>Una rama (branch) es simplemente un puntero que apunta a un commit.</li> <li>La rama principal suele llamarse <code>main</code> o <code>master</code> (aunque puedes cambiar el nombre).</li> <li>Cuando creas una rama nueva, Git crea un nuevo puntero que \u201cse mueve\u201d a medida que haces commits en esa rama.</li> </ul> <p>Imagina una l\u00ednea de tiempo:</p> Ramas locales en git. <p>En este gr\u00e1fico podemos ver que podemos tener varias ramas en nuestro proyecto que al mismo tiempo pueden volver a ramificarse en otras ramas y volver a unirse.</p> <p>Mostrar la rama actual de Git en el prompt de Linux</p> <p>Cuando trabajamos con varios proyectos y ramas, es muy \u00fatil que el prompt de la terminal muestre en qu\u00e9 rama de Git estamos. Puede ser muy interesante aplicar este truco antes de trabajar con ramas.</p> <p>Veamos los pasos para activar el prompt de Git</p> <ol> <li> <p>Abre tu archivo <code>~/.bashrc</code> y a\u00f1ade esta funci\u00f3n antes de definir el <code>PS1</code>:</p> <pre><code>parse_git_branch() {\n  git rev-parse --is-inside-work-tree &amp;&gt;/dev/null || return\n  branch=$(git symbolic-ref --short HEAD 2&gt;/dev/null)\n  [ -n \"$branch\" ] &amp;&amp; echo \"($branch)\"\n}\n</code></pre> </li> <li> <p>Modificar el prompt (<code>PS1</code>). Justo despu\u00e9s, modifica la l\u00ednea que define <code>PS1</code>. Por ejemplo:</p> <pre><code>PS1='\\u@\\h:\\w $(parse_git_branch)\\$ '\n</code></pre> </li> <li> <p>Guarda los cambios y recarga el archivo:</p> <pre><code>source ~/.bashrc\n</code></pre> </li> </ol> <p>Tendr\u00e1n un resultado similar al siguiente, donde ver\u00e1s entre parentesis en qu\u00e9 rama te encuentras.</p> <p></p> <p></p> <p>Ventajas de usar ramas</p> <ul> <li>Trabajo aislado: puedes trabajar en nuevas funcionalidades sin afectar el c\u00f3digo estable.</li> <li>Experimentaci\u00f3n: puedes probar ideas nuevas sin miedo.</li> <li>Colaboraci\u00f3n: cada desarrollador puede tener su rama y luego fusionar al proyecto principal.</li> </ul>"},{"location":"3_2_ramas/#comandos-de-ramas","title":"Comandos de ramas","text":"Comando Qu\u00e9 hace <code>git branch nombre_rama</code> Crea una rama llamada <code>nombre_rama</code> (no cambia a ella, solo la crea). <code>git switch nombre_rama</code> Cambia la rama activa a <code>nombre_rama</code> (antes era <code>git checkout nombre_rama</code>). <code>git switch -c nombre_rama</code> Crea y cambia a la rama nueva en un solo paso. <code>git branch</code> Muestra ramas de repositorio actual <code>git branch -d nombre_rama</code> Elimina la rama local <code>nombre_rama</code> si ya ha sido fusionada o no tiene cambios pendientes. <code>git merge</code> Combina cambios de otra rama en la actual <code>git diff</code> Muestra diferencias entre dos ramas Fast-forward merge Cuando la rama actual puede avanzar sin conflictos Commit de merge Se crea cuando hay l\u00edneas de desarrollo paralelas"},{"location":"3_2_ramas/#crear-y-cambiar-ramas","title":"Crear y cambiar ramas","text":"<pre><code>git branch nueva-rama\ngit switch nueva-rama\n</code></pre> o tambi\u00e9n en un \u00fanico paso <pre><code>git switch -c nueva-rama\n</code></pre> <p>git switch vs git checkout</p> <p>En Git, <code>git switch</code> es el comando moderno y recomendado para cambiar de rama, mientras que <code>git checkout</code> es el comando m\u00e1s antiguo que tambi\u00e9n permite hacerlo, pero con funciones adicionales que pueden generar confusi\u00f3n. </p>"},{"location":"3_2_ramas/#fusionar-ramas","title":"Fusionar ramas","text":"<pre><code>git merge rama-a-fusionar\n</code></pre>"},{"location":"3_2_ramas/#eliminar-ramas","title":"Eliminar ramas","text":"<pre><code>git branch -d nombre-rama\n</code></pre>"},{"location":"3_2_ramas/#ver-diferencias","title":"Ver diferencias","text":"<pre><code>git diff\n</code></pre> Muestra los cambios no confirmados."},{"location":"3_2_ramas/#ver-ramas","title":"Ver ramas","text":"<pre><code>git branch\n</code></pre> Muestra las ramas que tiene el repositorio."},{"location":"3_2_ramas/#flujo-tipico-con-ramas","title":"Flujo t\u00edpico con ramas","text":"<ol> <li>Est\u00e1s en la rama principal <code>main</code>.</li> <li>Creas una rama para tratar una nueva funcionalidad:    <pre><code>git switch -c feature-login\n</code></pre></li> <li>Trabajas, haces commits en <code>feature-login</code>.</li> <li>Cuando est\u00e9 lista la funcionalidad, cambias de nuevo a <code>main</code>:    <pre><code>git switch main\n</code></pre></li> <li>Fusionas (merge) la rama:    <pre><code>git merge feature-login\n</code></pre></li> <li>Si quieres, borras la rama <code>feature-login</code>:    <pre><code>git branch -d feature-login\n</code></pre></li> </ol> Ejemplo de trabajo con ramas."},{"location":"3_2_ramas/#fusiones-merge-y-conflictos","title":"Fusiones (<code>merge</code>) y conflictos","text":"<ul> <li><code>git merge rama_origen</code> fusiona los cambios de la rama indicada en la rama actual.</li> <li>Si los cambios no se solapan, el merge es autom\u00e1tico (fast-forward o commit de merge).</li> <li>Si hay conflictos, Git te avisar\u00e1 y tendr\u00e1s que resolverlos manualmente.</li> <li>Despu\u00e9s de resolver conflictos, haces <code>git add</code> de los archivos modificados y luego <code>git commit</code>.</li> </ul>"},{"location":"3_2_ramas/#ejemplo-practico-creacion-trabajo-y-fusion-de-ramas-en-git","title":"Ejemplo pr\u00e1ctico: creaci\u00f3n, trabajo y fusi\u00f3n de ramas en Git","text":"<p>Este ejemplo muestra paso a paso c\u00f3mo trabajar con ramas en Git utilizando un ejemplo sencillo. Incluye comandos, explicaciones y esquemas gr\u00e1ficos para visualizar la evoluci\u00f3n del repositorio.</p>"},{"location":"3_2_ramas/#crear-el-repositorio-inicial","title":"Crear el repositorio inicial","text":"<pre><code># Creamos una carpeta y entramos\nmkdir demo-git\ncd demo-git\n\n# Inicializamos el repositorio Git\ngit init\n\n# Creamos un archivo inicial\necho \"Proyecto base\" &gt; README.md\ngit add README.md\ngit commit -m \"Commit inicial con README\"\n</code></pre> <p>Estado del repositorio:</p> <pre><code>A \u2190 main\n</code></pre> <p>(Solo existe la rama <code>main</code>, con un \u00fanico commit \u201cA\u201d)</p>"},{"location":"3_2_ramas/#crear-la-rama-login-y-trabajar-en-ella","title":"Crear la rama <code>login</code> y trabajar en ella","text":"<pre><code># Crear y cambiar a la rama 'login'\ngit switch -c login\n\n# Simulamos una modificaci\u00f3n\necho \"Funcionalidad login\" &gt; login.py\ngit add login.py\ngit commit -m \"A\u00f1adido m\u00f3dulo login\"\n</code></pre> <p>Estructura actual:</p> <pre><code>A \u2190 main\n \\\n  B \u2190 login\n</code></pre>"},{"location":"3_2_ramas/#crear-otra-rama-perfil-desde-main","title":"Crear otra rama <code>perfil</code> desde <code>main</code>","text":"<p>Primero volvemos a la rama principal y creamos otra:</p> <pre><code>git switch main\ngit switch -c perfil\necho \"Funcionalidad perfil de usuario\" &gt; perfil.py\ngit add perfil.py\ngit commit -m \"A\u00f1adido m\u00f3dulo perfil de usuario\"\n</code></pre> <p>Estructura actual:</p> <pre><code>A \u2190 main\n \u251c\u2500\u2500 B \u2190 login\n \u2514\u2500\u2500 C \u2190 perfil\n</code></pre> <p>(Cada rama tiene un nuevo commit diferente partiendo del mismo punto A.)</p>"},{"location":"3_2_ramas/#fusionar-la-rama-login-en-main","title":"Fusionar la rama <code>login</code> en <code>main</code>","text":"<p>Volvemos a <code>main</code> y fusionamos los cambios de <code>login</code>:</p> <pre><code>git switch main\ngit merge login\n</code></pre> <p>Despu\u00e9s del merge:</p> <pre><code>A \u2014 B \u2190 main, login\n \\\n  C \u2190 perfil\n</code></pre> <ul> <li>La rama <code>main</code> ahora incluye los cambios de <code>login</code>.  </li> <li>Si no hay conflictos, Git hace un fast-forward merge (mueve el puntero <code>main</code> al commit B).  </li> </ul>"},{"location":"3_2_ramas/#fusionar-la-rama-perfil","title":"Fusionar la rama <code>perfil</code>","text":"<p>Ahora fusionamos la segunda rama:</p> <pre><code>git merge perfil\n</code></pre> <p>Resultado (merge normal):</p> <pre><code>      B \u2190 login\n     / \\\nA \u2014\u2014\u2524   M \u2190 main\n     \\ /\n      C \u2190 perfil\n</code></pre> <ul> <li><code>M</code> es un commit de merge que combina el trabajo de las dos ramas.  </li> <li>La historia se une en un punto com\u00fan.  </li> </ul>"},{"location":"3_2_ramas/#limpiar-ramas-ya-fusionadas","title":"Limpiar ramas ya fusionadas","text":"<pre><code>git branch -d login\ngit branch -d perfil\n</code></pre> <p>Resultado final:</p> <pre><code>A \u2014 B \u2014 M \u2190 main\n</code></pre> <p>(El proyecto tiene la funcionalidad de <code>login</code> y <code>perfil</code> integradas en la rama principal.)</p> <p>Buenas pr\u00e1cticas con ramas</p> <ul> <li>Usa nombres descriptivos (feature-login, bugfix-42, hotfix-crash).</li> <li>No dejes ramas locales sin usar por mucho tiempo.</li> <li>Antes de fusionar, aseg\u00farate de que est\u00e9n actualizadas con la rama principal.</li> <li>Haz pull o fetch en la rama principal antes de crear nuevas ramas, para partir de la versi\u00f3n m\u00e1s reciente.</li> </ul>"},{"location":"3_3_remotos/","title":"Repositorios remotos. Github.","text":"<p>Hasta ahora hemos trabajado localmente. Pero muchas veces querr\u00e1s compartir tu trabajo o colaborar con otros mediante repositorios remotos (GitHub, GitLab, Bitbucket\u2026).</p>"},{"location":"3_3_remotos/#conceptos-clave-en-git-remoto-remoto-tracking-branch-remoto","title":"Conceptos clave en Git remoto: remoto, tracking, branch remoto","text":"<ul> <li>Remoto (remote): copia del repositorio en un servidor. Generalmente se llama <code>origin</code>.</li> <li>Branch remoto: referencia local que apunta al estado conocido de una rama en el remoto, por ejemplo <code>origin/main</code>.</li> <li>Tracking branch: rama local enlazada con una rama remota, lo que permite usar <code>git pull</code> y <code>git push</code> sin par\u00e1metros adicionales.</li> </ul>"},{"location":"3_3_remotos/#1-remoto-remote","title":"1. Remoto (<code>remote</code>)","text":"<p>En Git, un \u201cremoto\u201d no es m\u00e1s que un alias para un repositorio alojado en otro lugar, normalmente en un servidor como GitHub. El nombre m\u00e1s habitual es <code>origin</code>, aunque puedes tener varios (por ejemplo, <code>upstream</code> si est\u00e1s colaborando con otro proyecto). Este alias permite que tu repositorio local sepa d\u00f3nde enviar y recibir cambios.</p> <ul> <li>Es una referencia a un repositorio alojado en un servidor, como GitHub, GitLab o Bitbucket.</li> <li>No es una copia completa, sino un v\u00ednculo que permite sincronizar cambios.</li> <li>El nombre por defecto es <code>origin</code>, pero puedes tener varios remotos (<code>upstream</code>, <code>backup</code>, etc.).</li> <li>Se configura con:</li> </ul> <p></p><pre><code>git remote add origin https://github.com/usuario/repositorio.git\n</code></pre> Este comando vincula tu proyecto local con el repositorio remoto. A partir de aqu\u00ed, puedes sincronizar tu trabajo con el servidor.<p></p>"},{"location":"3_3_remotos/#2-branch-remoto-remote-branch","title":"2. Branch remoto (<code>remote branch</code>)","text":"<p>Cuando haces <code>git fetch</code>, Git no descarga directamente los archivos, sino que actualiza referencias locales que apuntan al estado actual de las ramas en el remoto. Estas referencias se llaman ramas remotas y tienen nombres como <code>origin/main</code> o <code>origin/feature-x</code>.</p> <ul> <li>No puedes modificar directamente <code>origin/main</code>.</li> <li>Es una \u201cfoto\u201d del estado de la rama en el servidor.</li> <li>Se actualiza con <code>git fetch</code>, no con <code>git pull</code>.</li> </ul> <pre><code>git branch -r\n</code></pre> <p>Este comando te muestra todas las ramas remotas conocidas. Son \u00fatiles para saber qu\u00e9 hay en el servidor sin tocar tu copia local.</p>"},{"location":"3_3_remotos/#3-tracking-branch","title":"3. Tracking branch","text":"<p>Aqu\u00ed es donde Git se vuelve realmente c\u00f3modo. Una tracking branch es una rama local que est\u00e1 vinculada a una rama remota. Esto significa que puedes usar comandos como <code>git pull</code> o <code>git push</code> sin tener que especificar a qu\u00e9 rama te refieres: Git ya lo sabe.</p> <p>Por ejemplo, si creas una rama local basada en <code>origin/main</code> con:</p> <pre><code>git checkout --track origin/main\n</code></pre> <p>Git configura autom\u00e1ticamente el seguimiento. Ahora, cuando haces <code>git push</code>, Git sabe que debe enviar los cambios a <code>origin/main</code>. Y cuando haces <code>git pull</code>, sabe de d\u00f3nde traer las actualizaciones.</p> <p>Puedes verificar qu\u00e9 ramas est\u00e1n siguiendo a cu\u00e1les con:</p> <pre><code>git branch -vv\n</code></pre> <p>Comprender estos v\u00ednculos permite trabajar de forma m\u00e1s fluida y evitar errores comunes como \u201c\u00bfpor qu\u00e9 no se suben mis cambios?\u201d o \u201c\u00bfpor qu\u00e9 me dice que no encuentra la rama?\u201d. En entornos educativos, donde los estudiantes clonan repositorios, hacen pr\u00e1cticas y suben correcciones, tener bien configuradas las tracking branches evita confusiones y facilita la evaluaci\u00f3n.</p> Conceptos b\u00e1sico repositorios remotos. <p>Flechas verdes punteadas que indican las tracking branches, es decir, el v\u00ednculo entre la rama local y su correspondiente rama remota.</p>"},{"location":"3_3_remotos/#conectando-un-repositorio-remoto","title":"Conectando un repositorio remoto","text":"<p>Para vincular tu repositorio local con uno remoto (por ejemplo, en GitHub), usa el siguiente comando:</p> <pre><code>git remote add origin &lt;url-del-repositorio&gt;\n</code></pre> <p>Esto crea una referencia llamada <code>origin</code> que apunta a la URL del repositorio remoto. Es una convenci\u00f3n com\u00fan usar <code>origin</code> como nombre por defecto, aunque puedes usar cualquier otro identificador si lo necesitas.</p> <p>Para verificar que el remoto se ha configurado correctamente:</p> <p></p><pre><code>git remote -v\n</code></pre> Este comando muestra las URLs asociadas al remoto, tanto para <code>fetch</code> (descargar) como para <code>push</code> (subir).<p></p> <p>Para comprobar tanto ramas locales como remotas</p> <pre><code>git branch -a\n</code></pre>"},{"location":"3_3_remotos/#obtener-cambios-del-remoto","title":"Obtener cambios del remoto","text":"<p>Una vez conectado el remoto, puedes sincronizar tu repositorio local con los cambios que haya en el servidor:</p> <ul> <li> <p><code>git fetch origin</code>   Descarga los cambios del remoto pero no los fusiona con tu rama actual. Es \u00fatil para revisar antes de aplicar.</p> </li> <li> <p><code>git pull</code>   Realiza un <code>fetch</code> seguido de un <code>merge</code> (o <code>rebase</code>, si est\u00e1 configurado). Es el comando m\u00e1s com\u00fan para actualizar tu rama local con los \u00faltimos cambios del remoto.</p> </li> </ul>"},{"location":"3_3_remotos/#enviar-cambios-al-remoto","title":"Enviar cambios al remoto","text":"<p>Para subir tus commits locales al repositorio remoto:</p> <pre><code>git push origin nombre_rama\n</code></pre> <p>Esto env\u00eda los cambios de la rama especificada (<code>nombre_rama</code>) al remoto <code>origin</code>.</p> <p>Si es la primera vez que subes esa rama y no existe en el remoto, debes establecer una relaci\u00f3n de rastreo:</p> <pre><code>git push -u origin nombre_rama\n</code></pre> <p>El par\u00e1metro <code>-u</code> configura la rama local para que rastree autom\u00e1ticamente la rama remota, lo que permite usar simplemente <code>git push</code> o <code>git pull</code> en el futuro sin especificar el nombre del remoto ni de la rama.</p>"},{"location":"3_3_remotos/#crear-una-rama-local-desde-una-remota","title":"Crear una rama local desde una remota","text":"<pre><code>git fetch origin\ngit switch -c nueva_rama origin/rama_remota\n</code></pre>"},{"location":"3_3_remotos/#eliminar-una-rama-remota","title":"Eliminar una rama remota","text":"<pre><code>git push origin --delete nombre_rama\ngit remote prune origin\n</code></pre>"},{"location":"3_3_remotos/#ejemplo-paso-a-paso","title":"Ejemplo paso a paso","text":"<ol> <li>Crea una rama: <code>git switch -c feature-nueva</code></li> <li>Haz commits.</li> <li>Conecta el remoto: <code>git remote add origin https://github.com/usuario/mi-repo.git</code></li> <li>Sube: <code>git push -u origin feature-nueva</code></li> <li>Crea un pull request en GitHub.</li> <li>Si alguien actualiza <code>main</code>: <code>git pull</code></li> </ol> <p>Perfecto, Sergio. Aqu\u00ed tienes una documentaci\u00f3n clara, modular y lista para incluir en tus apuntes o como gu\u00eda institucional para estudiantes y docentes. Est\u00e1 pensada para un uso b\u00e1sico y efectivo de GitHub con Git desde l\u00ednea de comandos.</p>"},{"location":"3_3_remotos/#uso-de-github-con-git","title":"Uso de GitHub con Git","text":"<p>GitHub es una plataforma en l\u00ednea que permite alojar repositorios Git y colaborar en proyectos de software. Funciona como un \u201crepositorio remoto\u201d donde puedes subir tu c\u00f3digo, compartirlo con otros, gestionar versiones, reportar errores y trabajar en equipo. GitHub se basa en Git, el sistema de control de versiones distribuido que permite llevar un historial completo de los cambios realizados en un proyecto.</p>"},{"location":"3_3_remotos/#requisitos-previos","title":"Requisitos previos","text":"<p>Antes de comenzar a trabajar con GitHub desde tu equipo local, aseg\u00farate de tener lo siguiente:</p> <ul> <li>Git instalado y funcionando correctamente (<code>git --version</code>)</li> <li>Una cuenta activa en GitHub</li> <li>Un repositorio local creado con <code>git init</code> o clonado desde GitHub</li> </ul> <p>A continuaci\u00f3n crearemos un repositorio en Github y veremos c\u00f3mo podemos usarlo para almacenar el repositorio Git que tenemos en nuestra m\u00e1quina local.</p> <p>Para ello veremos </p> <ul> <li>C\u00f3mo crear el repositorio en https://github.com/.</li> <li>C\u00f3mo preparar la autentificaci\u00f3n para conectar el repositorio remoto con el local</li> <li>C\u00f3mo clonar o conectar los repositorios local y remoto.</li> </ul> Trabajando con GitHub. <p>Tutoriales recomendados para aprender a usar GitHub</p> <ul> <li>Documentaci\u00f3n oficial de GitHub (en espa\u00f1ol) \u2014 Precisa y actualizada.</li> <li>Video: Crear y clonar repositorio con GitHub Desktop \u2014 Ideal para principiantes.</li> <li>Chuck's Academy: Creaci\u00f3n y clonaci\u00f3n de repositorios \u2014 Explica tanto Git local como GitHub remoto.</li> <li>FreeCodeCamp en espa\u00f1ol \u2014 Incluye ejemplos y v\u00eddeos subtitulados.</li> </ul>"},{"location":"3_3_remotos/#crear-el-repositorio-en-github","title":"Crear el repositorio en GitHub","text":"<p>Para crear un nuevo, por supuesto debemos tener una cuenta en https://github.com/ y seguir los siguientes pasos:</p> <ol> <li>Accede a github.com e inicia sesi\u00f3n.</li> <li>Haz clic en el bot\u00f3n \"New\" o ve a https://github.com/new.</li> <li>Rellena los campos:</li> <li>Repository name: nombre del proyecto.</li> <li>Description (opcional).</li> <li>Elige Public o Private.</li> <li>Marca \u201cAdd a README file\u201d si quieres incluirlo.</li> <li>Opcional: a\u00f1ade <code>.gitignore</code> y licencia.</li> <li>Haz clic en \"Create repository\".</li> </ol>"},{"location":"3_3_remotos/#autenticacion-en-github","title":"Autenticaci\u00f3n en GitHub","text":"<p>Desde 2021, GitHub ya no permite autenticaci\u00f3n por contrase\u00f1a al usar Git desde la terminal. </p> <p>Debes autenticarte mediante uno de estos m\u00e9todos:</p>"},{"location":"3_3_remotos/#1-token-de-acceso-personal-pat","title":"1. Token de acceso personal (PAT)","text":"<ul> <li>Se genera desde tu cuenta de GitHub en Settings \u2192 Developer settings \u2192 Personal access tokens</li> <li>Al hacer <code>git push</code> o <code>git clone</code>, se te pedir\u00e1 usuario y contrase\u00f1a: usa tu usuario de GitHub y el token como contrase\u00f1a.</li> </ul> <p>C\u00f3mo generar un token cl\u00e1sico en GitHub</p> <ol> <li>Accede a la configuraci\u00f3n de tokens<ul> <li>Ve a:  https://github.com/settings/tokens</li> <li>Haz clic en \"Generate new token (classic)\"</li> </ul> </li> <li>Configura el token<ul> <li>Nombre: elige uno descriptivo (por ejemplo, \u201cToken para Git en SGE\u201d)</li> <li>Expiraci\u00f3n: puedes elegir 30 d\u00edas, 90 d\u00edas o sin expiraci\u00f3n</li> <li>Permisos m\u00ednimos necesarios:<ul> <li><code>repo</code> \u2192 acceso completo a tus repositorios (lectura, escritura, clonaci\u00f3n)</li> <li>(Opcional) <code>read:org</code> si trabajas con repositorios en organizaciones</li> </ul> </li> </ul> </li> <li>Generar y guardar el token<ul> <li>Haz clic en \"Generate token\". GitHub te mostrar\u00e1 el token una sola vez.  </li> <li>C\u00f3pialo y gu\u00e1rdalo en un lugar seguro (gestor de contrase\u00f1as o archivo <code>.token</code>).</li> </ul> </li> <li> <p>Usar el token al clonar por HTTPS</p> <p>Cuando hagas:</p> <pre><code>git clone https://github.com/usuario/repositorio.git\n</code></pre> <p>Git te pedir\u00e1:</p> <pre><code>Username for 'https://github.com': tu_usuario\nPassword for 'https://tu_usuario@github.com': pega_el_token\n</code></pre> <ul> <li>Usuario: tu nombre de usuario en GitHub (no tu correo)</li> <li>Contrase\u00f1a: el token generado</li> </ul> <p>Puedes guardar el token para no tener que escribirlo cada vez:</p> <pre><code>git config --global credential.helper store\n</code></pre> </li> </ol>"},{"location":"3_3_remotos/#2-clave-ssh","title":"2. Clave SSH","text":"<ul> <li>Genera una clave SSH con:   <pre><code>ssh-keygen -t ed25519 -C \"tuemail@example.com\"\n</code></pre></li> <li>A\u00f1ade la clave p\u00fablica (<code>~/.ssh/id_ed25519.pub</code>) en GitHub \u2192 Settings \u2192 SSH and GPG keys</li> <li>Usa la URL SSH del repositorio (por ejemplo: <code>git@github.com:usuario/repositorio.git</code>) en lugar de la URL HTTPS.</li> </ul> <p>Ambos m\u00e9todos son seguros y v\u00e1lidos. El uso de SSH es m\u00e1s c\u00f3modo si trabajas frecuentemente desde el mismo equipo.</p>"},{"location":"3_3_remotos/#clonar-un-repositorio-de-github","title":"Clonar un repositorio de GitHub","text":"<p>Esto crea una copia local completa del repositorio, incluyendo su historial de versiones.</p> <p>Los pasos para clonar un repositorio GitHub en local usando la l\u00ednea de comandos es la siguiente.</p> <ol> <li>Copia la URL del repositorio (bot\u00f3n verde \u201cCode\u201d \u2192 HTTPS).</li> <li>Abre la terminal y navega a la carpeta donde quieres clonar:    <pre><code>cd ~/Documentos/proyectos\n</code></pre></li> <li>Ejecuta el comando:    <pre><code>git clone https://github.com/usuario/nombre-del-repositorio.git\n</code></pre></li> <li>Accede a la carpeta clonada:    <pre><code>cd nombre-del-repositorio\n</code></pre></li> </ol> <p>Tambi\u00e9n es posible usar herramientas como GitHub Desktop, pero no vamos a usar este tipo de herramientas en nuestro curso.</p>"},{"location":"3_3_remotos/#conectar-un-repositorio-local-con-github","title":"Conectar un repositorio local con GitHub","text":"<p>Tambi\u00e9n podemos hacer el paso contrario, crear un repositorio local en el que ya tenemos un trabajo hecho y despu\u00e9s  vincularlo con tu repositorio local usando:</p> <pre><code>git remote add origin https://github.com/usuario/repositorio.git\n</code></pre> <p>Esto crea una referencia llamada <code>origin</code> que apunta al repositorio remoto. Para confirmar que la conexi\u00f3n se ha establecido correctamente:</p> <pre><code>git remote -v\n</code></pre> <p>Este comando muestra las URLs configuradas para subir (<code>push</code>) y descargar (<code>fetch</code>) cambios.</p>"},{"location":"3_3_remotos/#operaciones-basicas-para-gestion-de-repositorios-remotos-github","title":"Operaciones b\u00e1sicas para gesti\u00f3n de repositorios remotos GitHub","text":"Trabajando con GitHub."},{"location":"3_3_remotos/#subir-cambios-al-repositorio-remoto","title":"Subir cambios al repositorio remoto","text":"<p>Cuando hayas hecho commits en tu repositorio local, puedes subirlos a GitHub con:</p> <pre><code>git push origin nombre_rama\n</code></pre> <p>Si es la primera vez que subes esa rama, a\u00f1ade el par\u00e1metro <code>-u</code> para establecer una relaci\u00f3n de seguimiento:</p> <pre><code>git push -u origin nombre_rama\n</code></pre> <p>Esto permite que en el futuro puedas usar simplemente <code>git push</code> sin especificar el remoto ni la rama.</p>"},{"location":"3_3_remotos/#obtener-cambios-del-remoto_1","title":"Obtener cambios del remoto","text":"<p>Para mantener tu repositorio local actualizado con los cambios que se hagan en GitHub:</p> <ul> <li> <p><code>git fetch origin</code>   Descarga los cambios del remoto, pero no los aplica autom\u00e1ticamente. Es \u00fatil para revisar antes de fusionar.</p> </li> <li> <p><code>git pull</code>   Descarga y fusiona los cambios del remoto con tu rama actual. Es el comando m\u00e1s com\u00fan para sincronizar tu trabajo.</p> </li> </ul>"},{"location":"3_3_remotos/#el-archivo-gitignore-en-sistemas-de-control-de-versiones-con-git","title":"El archivo <code>.gitignore</code> en sistemas de control de versiones con Git","text":"<p>El archivo <code>.gitignore</code> constituye una herramienta esencial en la gesti\u00f3n de proyectos versionados con Git. Su funci\u00f3n principal es indicar al sistema qu\u00e9 archivos o directorios deben ser excluidos del seguimiento, evitando que se incluyan en los commits y, por tanto, en el historial del repositorio. Esta exclusi\u00f3n resulta especialmente \u00fatil para preservar la limpieza del repositorio, reducir el ruido t\u00e9cnico y evitar la incorporaci\u00f3n de archivos irrelevantes, temporales o espec\u00edficos del entorno local de desarrollo.</p> <p>En contextos educativos o institucionales, donde los proyectos pueden ser compartidos entre m\u00faltiples usuarios y entornos, el uso adecuado de <code>.gitignore</code> contribuye a mantener la coherencia del repositorio y a prevenir conflictos derivados de configuraciones locales o archivos generados autom\u00e1ticamente.</p>"},{"location":"3_3_remotos/#funcionamiento-y-sintaxis","title":"Funcionamiento y sintaxis","text":"<p>El archivo <code>.gitignore</code> se ubica habitualmente en la ra\u00edz del repositorio, aunque Git permite definir archivos <code>.gitignore</code> adicionales en subdirectorios para aplicar reglas espec\u00edficas a determinadas rutas. Su contenido consiste en una lista de patrones que describen los nombres de archivos o carpetas que deben ser ignorados por Git.</p> <p>Ejemplos de patrones comunes incluyen:</p> <ul> <li>Archivos temporales o de registro: <code>*.log</code>, <code>*.tmp</code></li> <li>Directorios de configuraci\u00f3n de editores: <code>.vscode/</code>, <code>.idea/</code></li> <li>Archivos compilados o generados: <code>*.class</code>, <code>*.pyc</code>, <code>dist/</code>, <code>build/</code></li> </ul> <p>Los patrones pueden incluir comodines (<code>*</code>, <code>?</code>) y rutas relativas. Los comentarios se indican con el s\u00edmbolo <code>#</code>.</p> <p>Ejemplo de fichero <code>.gitignore</code></p> <p>Fichero <code>.gitignore</code> en la ra\u00edz del proyecto git</p> <pre><code># Ignorar archivos temporales\n*.log\n*.tmp\n\n# Ignorar carpetas de configuraci\u00f3n local\n.vscode/\n.idea/\n\n# Ignorar archivos compilados\n*.class\n*.pyc\n</code></pre> <p>Git lee este archivo cada vez que eval\u00faa qu\u00e9 cambios hay en tu proyecto. Si un archivo coincide con alg\u00fan patr\u00f3n de .gitignore, simplemente lo ignora.</p>"},{"location":"3_3_remotos/#consideraciones-practicas","title":"Consideraciones pr\u00e1cticas","text":"<p>El uso de <code>.gitignore</code> debe guiarse por criterios t\u00e9cnicos y pedag\u00f3gicos que favorezcan la reproducibilidad del proyecto y la claridad del repositorio. Se recomienda:</p> <ul> <li>Excluir archivos que no aportan valor al c\u00f3digo fuente ni a la documentaci\u00f3n compartida.</li> <li>Evitar la exclusi\u00f3n de archivos necesarios para la ejecuci\u00f3n o comprensi\u00f3n del proyecto por parte de otros usuarios.</li> <li>Utilizar plantillas espec\u00edficas por lenguaje o entorno, disponibles en repositorios como github.com/github/gitignore, para facilitar la configuraci\u00f3n inicial.</li> <li>Revisar cuidadosamente los patrones amplios que podr\u00edan excluir archivos relevantes por error.</li> </ul>"},{"location":"3_3_remotos/#eliminacion-de-archivos-ya-versionados","title":"Eliminaci\u00f3n de archivos ya versionados","text":"<p>En caso de que un archivo haya sido a\u00f1adido al repositorio antes de ser incluido en <code>.gitignore</code>, Git continuar\u00e1 rastre\u00e1ndolo. Para que deje de hacerlo, es necesario eliminarlo del \u00edndice sin borrarlo del sistema de archivos:</p> <pre><code>git rm --cached nombre-del-archivo.ext\n</code></pre> <p>Una vez ejecutado este comando, Git respetar\u00e1 la regla definida en <code>.gitignore</code> y omitir\u00e1 dicho archivo en futuros commits.</p> <p>El uso correcto de <code>.gitignore</code> no solo mejora la calidad t\u00e9cnica del repositorio, sino que tambi\u00e9n facilita la colaboraci\u00f3n entre estudiantes y docentes, al evitar la propagaci\u00f3n de configuraciones locales, archivos innecesarios o elementos que dificulten la evaluaci\u00f3n y el mantenimiento del proyecto. En entornos de Formaci\u00f3n Profesional, donde los proyectos pueden ser reutilizados, compartidos o evaluados en distintas plataformas, esta pr\u00e1ctica adquiere especial relevancia.</p>"},{"location":"3_3_remotos/#actividad-practica","title":"Actividad pr\u00e1ctica","text":"<p>Version 1: </p> <ol> <li>Crear un nuevo repositorio en GitHub (sin README ni .gitignore)  </li> <li>En tu equipo local    <pre><code>mkdir mi-proyecto\ncd mi-proyecto\ngit clone  https://github.com/usuario/mi-proyecto.git\n</code></pre></li> </ol> <p>Versi\u00f3n 2: </p> <ol> <li>Crear un nuevo repositorio en GitHub (sin README ni .gitignore)</li> <li>En tu equipo local:    <pre><code>mkdir mi-proyecto\ncd mi-proyecto\ngit init\n</code></pre></li> <li>Crear un archivo <code>README.md</code> y hacer el primer commit:    <pre><code>echo \"# Mi Proyecto\" &gt; README.md\ngit add README.md\ngit commit -m \"Primer commit\"\n</code></pre></li> <li>Conectar con GitHub:    <pre><code>git remote add origin https://github.com/usuario/mi-proyecto.git\ngit pull --rebase origin main    # esto solo si hay algo en el repositorio\ngit push -u origin main\n</code></pre></li> <li>Verificar que el archivo aparece en GitHub</li> </ol> <p>Buenas pr\u00e1cticas con remotos</p> <ul> <li>Haz <code>git fetch</code> o <code>git pull</code> antes de trabajar.</li> <li>No hagas push directo a <code>main</code>.</li> <li>Usa ramas por funcionalidad.</li> <li>Limpia ramas remotas obsoletas.</li> </ul>"},{"location":"4_1_introduccion/","title":"Introducci\u00f3n","text":""},{"location":"4_1_introduccion/#introduccion-a-los-contenedores","title":"Introducci\u00f3n a los contenedores","text":"<p>La unidad comienza explicando el prop\u00f3sito de introducir el concepto de contenedores, centr\u00e1ndose especialmente en los contenedores Linux y en la tecnolog\u00eda Docker. Se plantea como una alternativa moderna a otras formas de virtualizaci\u00f3n, con ventajas espec\u00edficas para el desarrollo y despliegue de aplicaciones.</p>"},{"location":"4_1_introduccion/#fundamentos-de-la-virtualizacion","title":"Fundamentos de la virtualizaci\u00f3n","text":"<p>Se presenta la virtualizaci\u00f3n como una t\u00e9cnica que permite abstraer el hardware f\u00edsico, simulando recursos virtuales que se comportan como reales. Esta tecnolog\u00eda es ampliamente utilizada en entornos de desarrollo, pruebas, an\u00e1lisis de malware y despliegue de sistemas, por su capacidad de reducir costes y facilitar la gesti\u00f3n de recursos.</p> <p>Se describen cuatro enfoques principales:</p> <ul> <li>Las m\u00e1quinas virtuales de proceso permiten ejecutar software dise\u00f1ado para otra arquitectura como si fuera un proceso m\u00e1s del sistema anfitri\u00f3n. Ejemplos destacados son la JVM y la plataforma .NET.</li> <li>Los emuladores reproducen hardware o APIs espec\u00edficas, como los emuladores de consolas o Wine para ejecutar software Windows en otros sistemas.</li> <li>Los hipervisores permiten instalar sistemas operativos completos sobre hardware virtualizado. Herramientas como VirtualBox o VMWare son ejemplos comunes.</li> <li>Los contenedores, que se explican en profundidad m\u00e1s adelante, representan una forma m\u00e1s ligera de virtualizaci\u00f3n.</li> </ul>"},{"location":"4_1_introduccion/#contenedores-como-alternativa-ligera","title":"Contenedores como alternativa ligera","text":"<p>Los contenedores se definen como entornos privados que comparten el n\u00facleo del sistema anfitri\u00f3n, sin necesidad de virtualizar el hardware completo. Esto permite aislar procesos, memoria, red y sistema de archivos, manteniendo eficiencia y velocidad.</p> <p>Se utiliza una analog\u00eda con los contenedores mar\u00edtimos: mientras cumplan un est\u00e1ndar, pueden transportarse independientemente del contenido. De forma similar, los contenedores virtuales pueden ejecutarse en cualquier sistema compatible, sin importar qu\u00e9 software contienen.</p>"},{"location":"4_1_introduccion/#aplicaciones-practicas-de-los-contenedores","title":"Aplicaciones pr\u00e1cticas de los contenedores","text":"<p>Los contenedores son especialmente \u00fatiles en desarrollo y despliegue de aplicaciones. Permiten montar entornos de compilaci\u00f3n con versiones espec\u00edficas, realizar pruebas en configuraciones diversas y evitar problemas de compatibilidad al distribuir software.</p> <p>Tambi\u00e9n se emplean en el despliegue de servicios como servidores web, bases de datos o DNS. Facilitan la replicaci\u00f3n exacta de entornos locales en la nube, eliminando el cl\u00e1sico problema de \u201cfunciona en mi m\u00e1quina\u201d. Adem\u00e1s, permiten escalar horizontalmente servicios mediante orquestadores.</p>"},{"location":"4_1_introduccion/#ventajas-y-limitaciones","title":"Ventajas y limitaciones","text":"<p>Entre las ventajas destacan:</p> <ul> <li>Menor consumo de espacio al no replicar sistemas operativos.</li> <li>Ejecuci\u00f3n r\u00e1pida, cercana a la velocidad nativa.</li> <li>Amplio soporte por parte de empresas y disponibilidad de im\u00e1genes oficiales.</li> </ul> <p>Entre las limitaciones se se\u00f1alan:</p> <ul> <li>Rendimiento inferior al de ejecuci\u00f3n directa sobre hardware.</li> <li>Gesti\u00f3n m\u00e1s compleja de datos persistentes.</li> <li>Uso predominantemente por l\u00ednea de comandos, con entornos gr\u00e1ficos posibles pero poco pr\u00e1cticos.</li> </ul>"},{"location":"4_1_introduccion/#contextos-recomendados-para-su-uso","title":"Contextos recomendados para su uso","text":"<p>El uso de contenedores es adecuado en varios escenarios:</p> <ul> <li>Para usuarios que desean probar servicios sin complicaciones.</li> <li>Para desarrolladores que buscan entornos portables y reproducibles.</li> <li>Para realizar pruebas con distintas configuraciones y recursos.</li> <li>Para escalar servicios distribuidos en cl\u00fasteres.</li> </ul>"},{"location":"4_1_introduccion/#contenedores-en-sistemas-linux","title":"Contenedores en sistemas Linux","text":"<p>Se explica que el concepto de entornos privados no es nuevo en Unix. Herramientas como <code>chroot</code> y <code>jail</code> ya ofrec\u00edan aislamiento desde los a\u00f1os 80 y 90. Los contenedores modernos, como LXC y LXD, se basan en capacidades del kernel de Linux como los namespaces (para aislar procesos) y los cgroups (para limitar recursos).</p> <p>Tambi\u00e9n se menciona que es posible crear contenedores \u201ca mano\u201d usando scripts, y se recomiendan recursos como los de Julia Evans para entender mejor el funcionamiento interno.</p>"},{"location":"4_1_introduccion/#compatibilidad-con-otros-sistemas","title":"Compatibilidad con otros sistemas","text":"<p>Aunque los contenedores Linux est\u00e1n dise\u00f1ados para ejecutarse en sistemas Linux, pueden funcionar en Windows y MacOS mediante virtualizaci\u00f3n. En Windows se usa WSL2 o Hyper-V, y en MacOS, Docker Desktop o Hyperkit. Estas soluciones permiten ejecutar contenedores, aunque con menor rendimiento.</p>"},{"location":"4_1_introduccion/#introduccion-a-docker","title":"Introducci\u00f3n a Docker","text":"<p>Docker se presenta como una soluci\u00f3n de contenedores Linux que aprovecha las capacidades del kernel para facilitar el desarrollo y despliegue. Existen dos versiones: Docker CE (Community Edition) y Docker EE (Enterprise Edition), ambas compatibles con servicios en la nube como AWS, Azure y Google Cloud.</p> <p>La arquitectura de Docker se divide en tres componentes:</p> <ul> <li>El cliente, que env\u00eda \u00f3rdenes.</li> <li>El servidor (Docker Host), que gestiona contenedores e im\u00e1genes.</li> <li>El registro (Registry), que almacena im\u00e1genes, siendo Docker Hub el m\u00e1s popular.</li> </ul>"},{"location":"4_1_introduccion/#docker-en-windows-y-macos","title":"Docker en Windows y MacOS","text":"<p>Docker puede ejecutarse en sistemas no Linux mediante Docker Desktop, que instala todo lo necesario para lanzar contenedores. En Windows se apoya en WSL2 o Hyper-V, y en MacOS en Hyperkit. Aunque el rendimiento no es nativo, estas soluciones permiten trabajar con contenedores de forma pr\u00e1ctica.</p>"},{"location":"4_1_introduccion/#contenedores-no-linux-con-docker","title":"Contenedores no Linux con Docker","text":"<p>Adem\u00e1s de contenedores Linux, Docker puede lanzar contenedores con Windows Server Core en sistemas Windows, y contenedores MacOS en sistemas Linux mediante KVM. Aunque no son los casos m\u00e1s comunes, ampl\u00edan las posibilidades de uso en entornos espec\u00edficos.</p> <p>Perfecto, Sergio. Aqu\u00ed tienes la documentaci\u00f3n t\u00e9cnica de instalaci\u00f3n de Docker, redactada como continuaci\u00f3n directa de los apuntes anteriores. He eliminado cualquier introducci\u00f3n redundante sobre qu\u00e9 es Docker y he reforzado que en el entorno de clase se trabajar\u00e1 con WSL y Ubuntu desde la l\u00ednea de comandos.</p>"},{"location":"4_1_introduccion/#instalacion-de-docker-en-entornos-educativos-con-wsl-y-ubuntu","title":"Instalaci\u00f3n de Docker en entornos educativos con WSL y Ubuntu","text":"<p>Durante el curso, utilizaremos Docker sobre Ubuntu instalado en WSL (Windows Subsystem for Linux). Esta configuraci\u00f3n permite trabajar con contenedores Linux desde sistemas Windows, manteniendo compatibilidad con el kernel y acceso a herramientas CLI. Todas las instrucciones que siguen est\u00e1n verificadas para distribuciones basadas en Ubuntu 22.04 o 24.04, y se ejecutar\u00e1n desde la terminal de WSL.</p>"},{"location":"4_1_introduccion/#eliminacion-de-versiones-anteriores","title":"Eliminaci\u00f3n de versiones anteriores","text":"<p>Antes de instalar Docker, es recomendable eliminar cualquier versi\u00f3n previa que pueda generar conflictos. Ejecuta el siguiente comando en tu terminal WSL:</p> <pre><code>for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done\n</code></pre> <p>Este paso garantiza que no haya interferencias con versiones obsoletas o instaladas desde repositorios no oficiales.</p>"},{"location":"4_1_introduccion/#configuracion-del-repositorio-oficial-de-docker","title":"Configuraci\u00f3n del repositorio oficial de Docker","text":"<p>Docker CE debe instalarse desde su repositorio oficial para garantizar acceso a versiones actualizadas y soporte completo.</p> <ol> <li>Actualiza el \u00edndice de paquetes e instala dependencias necesarias:</li> </ol> <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl\n</code></pre> <ol> <li>A\u00f1ade la clave GPG del repositorio:</li> </ol> <pre><code>sudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc &gt; /dev/null\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre> <ol> <li>A\u00f1ade el repositorio de Docker CE. En Ubuntu puro, puedes usar:</li> </ol> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> <p>\u26a0\ufe0f En distribuciones derivadas como Linux Mint, <code>lsb_release -cs</code> puede devolver un nombre no reconocido por Docker. En ese caso, sustituye manualmente por el nombre de la versi\u00f3n base de Ubuntu (por ejemplo, <code>noble</code> para Ubuntu 24.04).</p>"},{"location":"4_1_introduccion/#instalacion-del-motor-docker","title":"Instalaci\u00f3n del motor Docker","text":"<p>Una vez a\u00f1adido el repositorio, instala Docker Engine CE y sus componentes:</p> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <p>Verifica la instalaci\u00f3n con:</p> <pre><code>docker version\n</code></pre> <p>Este comando debe mostrar tanto la versi\u00f3n del cliente como del servidor Docker. Si aparece un error de permisos, consulta el apartado siguiente.</p>"},{"location":"4_1_introduccion/#uso-sin-privilegios-de-superusuario","title":"Uso sin privilegios de superusuario","text":"<p>Por defecto, Docker requiere permisos de root para ejecutarse. En entornos educativos, es \u00fatil permitir que los alumnos usen Docker sin <code>sudo</code>. Para ello:</p> <ol> <li>Crea el grupo <code>docker</code> (si no existe):</li> </ol> <pre><code>sudo groupadd docker\n</code></pre> <ol> <li>A\u00f1ade el usuario actual al grupo:</li> </ol> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <ol> <li>Cierra y vuelve a iniciar sesi\u00f3n en WSL para que los cambios surtan efecto.</li> </ol> <p>Si aparecen errores relacionados con <code>~/.docker/config.json</code>, puedes solucionarlo con:</p> <pre><code>sudo rm -rf ~/.docker/\n</code></pre> <p>O bien:</p> <pre><code>sudo chown \"$USER\":\"$USER\" ~/.docker -R\nsudo chmod g+rwx ~/.docker -R\n</code></pre>"},{"location":"4_1_introduccion/#control-del-arranque-automatico","title":"Control del arranque autom\u00e1tico","text":"<p>Aunque en WSL el arranque autom\u00e1tico no siempre es relevante, en sistemas Linux completos puedes configurar el servicio Docker para que se inicie al arrancar:</p> <pre><code>sudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n</code></pre> <p>Para desactivarlo:</p> <pre><code>sudo systemctl disable docker.service\nsudo systemctl disable containerd.service\n</code></pre> <p>Para gestionar manualmente el servicio:</p> <pre><code>sudo systemctl start docker.service\nsudo systemctl stop docker.service\nsudo systemctl restart docker.service\n</code></pre>"},{"location":"4_1_introduccion/#desinstalacion-completa","title":"Desinstalaci\u00f3n completa","text":"<p>Si necesitas eliminar Docker por completo:</p> <pre><code>sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n</code></pre> <p>Y para eliminar contenedores, im\u00e1genes y configuraciones:</p> <pre><code>sudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\nsudo rm /etc/apt/sources.list.d/docker.list\nsudo rm /etc/apt/keyrings/docker.asc\n</code></pre>"},{"location":"4_2_docker_basico/","title":"Docker b\u00e1sico","text":""},{"location":"4_2_docker_basico/#operaciones-fundamentales-con-docker-desde-terminal","title":"Operaciones fundamentales con Docker desde terminal","text":"<p>Una vez instalado Docker y verificada su correcta ejecuci\u00f3n, se puede comenzar a trabajar con contenedores e im\u00e1genes utilizando exclusivamente la l\u00ednea de comandos. Esta unidad recoge las acciones m\u00e1s habituales que se realizar\u00e1n durante el curso, con ejemplos reproducibles y enlaces a documentaci\u00f3n oficial.</p>"},{"location":"4_2_docker_basico/#imagenes-y-contenedores","title":"Im\u00e1genes y contenedores","text":"<p>Una imagen de Docker es una plantilla de solo lectura que contiene el sistema de archivos y las instrucciones necesarias para crear un contenedor. Las im\u00e1genes pueden derivarse unas de otras mediante capas, lo que permite reutilizar configuraciones y construir nuevas versiones de forma incremental.</p> <p>Un contenedor es una instancia en ejecuci\u00f3n (o parada) de una imagen. Cada contenedor tiene un identificador \u00fanico (64 caracteres) y puede referenciarse por su nombre o por una versi\u00f3n abreviada del ID, siempre que sea un\u00edvoca.</p> <p>Ejemplo de analog\u00eda: si una imagen es el DVD de instalaci\u00f3n de una distribuci\u00f3n Linux, el contenedor ser\u00eda el sistema operativo instalado y funcionando.</p>"},{"location":"4_2_docker_basico/#almacenamiento-interno-de-docker","title":"Almacenamiento interno de Docker","text":"<p>Docker almacena sus datos en el directorio <code>/var/lib/docker</code>, incluyendo im\u00e1genes, contenedores y configuraciones. El driver de almacenamiento m\u00e1s habitual en sistemas Ubuntu es <code>overlay2</code>, que organiza las capas de las im\u00e1genes en subdirectorios.</p> <p>Para consultar esta informaci\u00f3n:</p> <pre><code>docker info\n</code></pre> <p>M\u00e1s detalles sobre drivers de almacenamiento: Docker: Select a storage driver </p>"},{"location":"4_2_docker_basico/#registro-de-imagenes-docker-hub","title":"Registro de im\u00e1genes: Docker Hub","text":"<p>Docker Hub es el registro p\u00fablico por defecto utilizado por Docker. Permite buscar, descargar y publicar im\u00e1genes, tanto oficiales como de terceros. La mayor\u00eda de im\u00e1genes utilizadas en el curso se obtendr\u00e1n desde este repositorio.</p> <p>Buscador de im\u00e1genes: https://hub.docker.com/search?q=&amp;type=image</p> <p>Tambi\u00e9n es posible configurar registros privados o alternativos si se requiere.</p> <p>Gu\u00eda para crear un registro privado: DigitalOcean: C\u00f3mo configurar un registro de Docker privado en Ubuntu </p>"},{"location":"4_2_docker_basico/#creacion-y-ejecucion-de-contenedores","title":"Creaci\u00f3n y ejecuci\u00f3n de contenedores","text":"<p>El comando m\u00e1s utilizado es <code>docker run</code>, que crea un contenedor a partir de una imagen y lo arranca:</p> <pre><code>docker run hello-world\n</code></pre> <p>Este ejemplo descarga la imagen <code>hello-world</code> (si no est\u00e1 presente), crea un contenedor y ejecuta un programa que verifica el funcionamiento de Docker. La imagen se almacena localmente tras la primera ejecuci\u00f3n.</p> <p>Para crear un contenedor sin arrancarlo:</p> <pre><code>docker create ubuntu\n</code></pre> <p>Documentaci\u00f3n oficial: - <code>docker run</code> - <code>docker create</code></p>"},{"location":"4_2_docker_basico/#listado-de-contenedores","title":"Listado de contenedores","text":"<p>Para ver los contenedores en ejecuci\u00f3n:</p> <pre><code>docker ps\n</code></pre> <p>Para ver todos los contenedores, incluidos los detenidos:</p> <pre><code>docker ps -a\n</code></pre> <p>Este listado incluye informaci\u00f3n como el ID, la imagen base, el comando de arranque, el estado, los puertos expuestos y el nombre asignado.</p> <p>Documentaci\u00f3n: docker container ls </p>"},{"location":"4_2_docker_basico/#gestion-del-ciclo-de-vida-de-contenedores","title":"Gesti\u00f3n del ciclo de vida de contenedores","text":"<p>Para arrancar un contenedor ya creado:</p> <pre><code>docker start nombre_o_id\n</code></pre> <p>Para detenerlo:</p> <pre><code>docker stop nombre_o_id\n</code></pre> <p>Para reiniciarlo:</p> <pre><code>docker restart nombre_o_id\n</code></pre> <p>Documentaci\u00f3n: - <code>start</code> - <code>stop</code> - <code>restart</code></p>"},{"location":"4_2_docker_basico/#inspeccion-de-contenedores","title":"Inspecci\u00f3n de contenedores","text":"<p>Para obtener informaci\u00f3n detallada de un contenedor:</p> <pre><code>docker inspect nombre_o_id\n</code></pre> <p>Este comando devuelve un objeto JSON con detalles sobre configuraci\u00f3n, red, vol\u00famenes, imagen base, etc.</p> <p>Documentaci\u00f3n: docker inspect </p>"},{"location":"4_2_docker_basico/#ejecucion-de-comandos-en-contenedores","title":"Ejecuci\u00f3n de comandos en contenedores","text":"<p>Para ejecutar comandos dentro de un contenedor en ejecuci\u00f3n:</p> <pre><code>docker exec -it nombre_o_id bash\n</code></pre> <p>Tambi\u00e9n se pueden establecer variables de entorno:</p> <pre><code>docker exec -it -e VAR1=valor nombre_o_id bash\n</code></pre> <p>Ejemplo en segundo plano:</p> <pre><code>docker exec -d nombre_o_id touch /tmp/prueba\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker container exec</code> </p>"},{"location":"4_2_docker_basico/#transferencia-de-archivos","title":"Transferencia de archivos","text":"<p>Para copiar archivos entre el sistema anfitri\u00f3n y un contenedor:</p> <pre><code>docker cp contenedor:/ruta/origen ./destino_local\ndocker cp ./archivo_local contenedor:/ruta/destino\n</code></pre> <p>No se permite la copia directa entre contenedores.</p> <p>Mas documentaci\u00f3n: <code>docker container cp</code> </p>"},{"location":"4_2_docker_basico/#acceso-a-procesos-en-ejecucion","title":"Acceso a procesos en ejecuci\u00f3n","text":"<p>Para enlazar la entrada/salida est\u00e1ndar de un contenedor en ejecuci\u00f3n:</p> <pre><code>docker attach nombre_o_id\n</code></pre> <p>Este comando permite observar directamente lo que est\u00e1 generando el proceso activo.</p> <p>M\u00e1s documentaci\u00f3n: <code>docker container attach</code> </p>"},{"location":"4_2_docker_basico/#consulta-de-logs","title":"Consulta de logs","text":"<p>Para obtener los logs generados por un contenedor:</p> <pre><code>docker logs nombre_o_id\n</code></pre> <p>Ejemplo con seguimiento en tiempo real:</p> <pre><code>docker logs -f --until=2s nombre_o_id\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker container logs</code> </p>"},{"location":"4_2_docker_basico/#renombrar-contenedores","title":"Renombrar contenedores","text":"<p>Para cambiar el nombre de un contenedor:</p> <pre><code>docker rename antiguo_nombre nuevo_nombre\n</code></pre> <p>M\u00e1s Documentaci\u00f3n: <code>docker container rename</code> </p>"},{"location":"4_2_docker_basico/#tabla-resumen-de-comandos-basicos-de-docker","title":"Tabla resumen de comandos b\u00e1sicos de Docker","text":"Comando Descripci\u00f3n <code>docker run -d --name=cont1 ubuntu tail -f /dev/null</code> Crea un contenedor llamado <code>cont1</code> con la imagen <code>ubuntu</code> y ejecuta un proceso que no termina. <code>docker run -d -p 1200:80 nginx</code> Crea un contenedor con la imagen <code>nginx</code> y expone el puerto 80 del contenedor en el puerto 1200 del anfitri\u00f3n. <code>docker run -it -e MENSAJE=HOLA ubuntu:24.04 bash</code> Crea un contenedor interactivo con Ubuntu 24.04 y define la variable de entorno <code>MENSAJE</code>. <code>docker ps</code> Muestra los contenedores en ejecuci\u00f3n. <code>docker ps -a</code> Muestra todos los contenedores, incluidos los detenidos. <code>docker start micontenedor</code> Arranca un contenedor detenido. <code>docker start -ai micontenedor</code> Arranca un contenedor y enlaza su entrada/salida a la terminal. <code>docker exec -it idcont bash</code> Ejecuta una shell interactiva dentro del contenedor <code>idcont</code>. <code>docker exec -it -e FICHERO=prueba cont bash</code> Ejecuta una shell en <code>cont</code> con la variable de entorno <code>FICHERO=prueba</code>. <code>docker exec -d cont touch /tmp/prueba</code> Ejecuta en segundo plano la creaci\u00f3n de un archivo dentro del contenedor. <code>docker attach idcontainer</code> Enlaza la terminal al proceso principal del contenedor. <code>docker logs -n 10 idcontainer</code> Muestra las \u00faltimas 10 l\u00edneas del log del contenedor. <code>docker cp idcontainer:/tmp/prueba ./</code> Copia un archivo del contenedor al anfitri\u00f3n. <code>docker cp ./miFichero idcontainer:/tmp</code> Copia un archivo del anfitri\u00f3n al contenedor."},{"location":"4_2_docker_basico/#ejemplo-guiado-de-uso","title":"\ud83e\udde9 Ejemplo guiado de uso","text":"<p>Pr\u00e1ctica guiada: primeros pasos con contenedores</p> <ol> <li> <p>Crear un contenedor persistente</p> <pre><code>docker run -d --name=cont1 ubuntu tail -f /dev/null\n</code></pre> <ul> <li>Comprueba que el contenedor est\u00e1 en ejecuci\u00f3n con <code>docker ps</code>.</li> <li>Este contenedor permanecer\u00e1 activo sin hacer nada, \u00fatil para pruebas.</li> </ul> </li> <li> <p>Crear un contenedor con puerto expuesto</p> <pre><code>docker run -d -p 1200:80 nginx\n</code></pre> <ul> <li>Abre un navegador en Windows y accede a <code>http://localhost:1200</code> para ver la p\u00e1gina de bienvenida de Nginx.</li> </ul> </li> <li> <p>Crear un contenedor con variable de entorno</p> <pre><code>docker run -it -e MENSAJE=HOLA ubuntu:24.04 bash\n</code></pre> <ul> <li>Dentro del contenedor, ejecuta <code>echo $MENSAJE</code> para comprobar el valor.</li> </ul> </li> <li> <p>Listar contenedores</p> <pre><code>docker ps        # Solo los activos\ndocker ps -a     # Todos, incluidos los detenidos\n</code></pre> </li> <li> <p>Detener y volver a arrancar un contenedor</p> <pre><code>docker stop cont1\ndocker start -ai cont1\n</code></pre> <ul> <li>Observa c\u00f3mo se enlaza la terminal al proceso activo.</li> </ul> </li> <li> <p>Ejecutar comandos dentro de un contenedor</p> <pre><code>docker exec -it cont1 bash\n</code></pre> <ul> <li>Accede a una shell dentro del contenedor <code>cont1</code>.</li> </ul> <pre><code>docker exec -it -e FICHERO=prueba cont1 bash\n</code></pre> <ul> <li>Comprueba que la variable <code>FICHERO</code> est\u00e1 disponible con <code>echo $FICHERO</code>.</li> </ul> <pre><code>docker exec -d cont1 touch /tmp/prueba\n</code></pre> <ul> <li>Verifica que el archivo se ha creado con <code>ls /tmp</code>.</li> </ul> </li> <li> <p>Adjuntar y consultar logs</p> <pre><code>docker attach cont1\n</code></pre> <ul> <li>Sal de la sesi\u00f3n con <code>Ctrl+P</code> seguido de <code>Ctrl+Q</code>.</li> </ul> <pre><code>docker logs -n 10 cont1\n</code></pre> <ul> <li>Muestra las \u00faltimas l\u00edneas del log del contenedor.</li> </ul> </li> <li> <p>Copiar archivos entre anfitri\u00f3n y contenedor</p> <pre><code>docker cp cont1:/tmp/prueba ./\ndocker cp ./miFichero cont1:/tmp\n</code></pre> <ul> <li>Verifica los archivos copiados dentro del contenedor con <code>ls /tmp</code>.</li> </ul> </li> </ol>"},{"location":"4_3_imagenes_docker/","title":"Im\u00e1genes Docker","text":""},{"location":"4_3_imagenes_docker/#gestion-de-imagenes-en-docker","title":"Gesti\u00f3n de im\u00e1genes en Docker","text":"<p>Docker permite gestionar im\u00e1genes de forma flexible: listarlas, descargarlas, eliminarlas, exportarlas, versionarlas y construirlas desde cero. Esta unidad recoge los comandos esenciales para trabajar con im\u00e1genes locales y remotas, as\u00ed como para crear im\u00e1genes propias mediante <code>commit</code> o <code>Dockerfile</code>.</p>"},{"location":"4_3_imagenes_docker/#listado-de-imagenes-locales","title":"Listado de im\u00e1genes locales","text":"<p>Para consultar las im\u00e1genes almacenadas en el sistema:</p> <pre><code>docker images\n</code></pre> <p>Se puede filtrar por repositorio y etiqueta:</p> <pre><code>docker images ubuntu:22.04\n</code></pre> <p>Tambi\u00e9n es posible aplicar filtros avanzados:</p> <pre><code>docker images -f=reference=\"u*:*04\"\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker images</code></p>"},{"location":"4_3_imagenes_docker/#busqueda-de-imagenes-en-docker-hub","title":"B\u00fasqueda de im\u00e1genes en Docker Hub","text":"<p>Para buscar im\u00e1genes disponibles en el registro por defecto (Docker Hub):</p> <pre><code>docker search ubuntu\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker search</code></p>"},{"location":"4_3_imagenes_docker/#descarga-de-imagenes","title":"Descarga de im\u00e1genes","text":"<p>Para descargar una imagen sin necesidad de ejecutarla:</p> <pre><code>docker pull alpine:3.10\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker pull</code></p>"},{"location":"4_3_imagenes_docker/#historial-de-una-imagen","title":"Historial de una imagen","text":"<p>Para consultar las capas que componen una imagen:</p> <pre><code>docker history nginx\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker history</code></p>"},{"location":"4_3_imagenes_docker/#eliminacion-de-imagenes","title":"Eliminaci\u00f3n de im\u00e1genes","text":"<p>Para eliminar una imagen concreta:</p> <pre><code>docker rmi ubuntu:22.04\n</code></pre> <p>Para eliminar todas las im\u00e1genes no utilizadas por contenedores:</p> <pre><code>docker rmi $(docker images -q)\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker rmi</code></p>"},{"location":"4_3_imagenes_docker/#eliminacion-de-contenedores","title":"Eliminaci\u00f3n de contenedores","text":"<p>Para eliminar un contenedor detenido:</p> <pre><code>docker rm nombre_o_id\n</code></pre> <p>Para detener y eliminar todos los contenedores:</p> <pre><code>docker stop $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker rm</code></p>"},{"location":"4_3_imagenes_docker/#limpieza-completa-del-sistema","title":"Limpieza completa del sistema","text":"<p>Para eliminar im\u00e1genes, contenedores detenidos, redes no utilizadas y cach\u00e9 de construcci\u00f3n:</p> <pre><code>docker system prune -a\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker system prune</code></p>"},{"location":"4_3_imagenes_docker/#crear-una-imagen-a-partir-de-un-contenedor","title":"Crear una imagen a partir de un contenedor","text":"<p>Es posible guardar el estado de un contenedor como una nueva imagen:</p> <pre><code>docker commit -a \"Autor\" -m \"Comentario\" nombre_o_id usuariodockerhub/imagen:2025\n</code></pre> <p>Para a\u00f1adir una etiqueta adicional:</p> <pre><code>docker tag usuariodockerhub/imagen:2025 usuariodockerhub/imagen:latest\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker commit</code> <code>docker tag</code></p>"},{"location":"4_3_imagenes_docker/#exportar-e-importar-imagenes","title":"Exportar e importar im\u00e1genes","text":"<p>Para guardar una imagen en un archivo:</p> <pre><code>docker save -o copia.tar usuariodockerhub/imagen\n</code></pre> <p>O bien:</p> <pre><code>docker save usuariodockerhub/imagen &gt; copia.tar\n</code></pre> <p>Para importar una imagen desde archivo:</p> <pre><code>docker load -i copia.tar\n</code></pre> <p>O bien:</p> <pre><code>docker load &lt; copia.tar\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker save</code> <code>docker load</code></p>"},{"location":"4_3_imagenes_docker/#subida-de-imagenes-a-docker-hub","title":"Subida de im\u00e1genes a <code>Docker Hub</code>","text":"<ol> <li> <p>Iniciar sesi\u00f3n:</p> <pre><code>docker login\n</code></pre> </li> <li> <p>Crear el repositorio en https://hub.docker.com  </p> </li> <li> <p>Etiquetar la imagen si es necesario:</p> <pre><code>docker tag imagen_local usuariodockerhub/nombre_repo\n</code></pre> </li> <li> <p>Subir la imagen:</p> <pre><code>docker push usuariodockerhub/nombre_repo\n</code></pre> </li> </ol> <p>M\u00e1s documentaci\u00f3n: <code>docker login</code> <code>docker push</code></p>"},{"location":"4_3_imagenes_docker/#creacion-de-contenedores-personalizados","title":"Creaci\u00f3n de contenedores personalizados","text":"<p>Docker permite construir im\u00e1genes propias a partir de instrucciones declarativas contenidas en un fichero llamado <code>Dockerfile</code>. Estas im\u00e1genes pueden incluir software preinstalado, configuraciones espec\u00edficas, scripts de arranque, usuarios personalizados, variables de entorno, puertos expuestos y cualquier otra personalizaci\u00f3n que se desee aplicar al entorno de ejecuci\u00f3n.</p> <p>Este enfoque es especialmente \u00fatil en contextos educativos, ya que permite preparar entornos reproducibles para pr\u00e1cticas, simulaciones o despliegues controlados.</p>"},{"location":"4_3_imagenes_docker/#fundamentos-del-dockerfile","title":"Fundamentos del Dockerfile","text":"<p>Un <code>Dockerfile</code> es un archivo de texto plano que define, paso a paso, c\u00f3mo debe construirse una imagen. Cada l\u00ednea representa una instrucci\u00f3n que Docker ejecutar\u00e1 durante el proceso de construcci\u00f3n (<code>docker build</code>). Las instrucciones m\u00e1s comunes son:</p> <ul> <li><code>FROM</code>: define la imagen base sobre la que se construye. Puede ser una distribuci\u00f3n Linux (<code>ubuntu</code>, <code>alpine</code>) o una imagen especializada (<code>python</code>, <code>node</code>, etc.).</li> <li><code>LABEL</code>: a\u00f1ade metadatos como el autor o el prop\u00f3sito de la imagen.</li> <li><code>RUN</code>: ejecuta comandos en la imagen durante la construcci\u00f3n. Se utiliza para instalar paquetes, modificar archivos, crear usuarios, etc.</li> <li><code>COPY</code> o <code>ADD</code>: copia archivos locales al contenedor o descarga recursos externos.</li> <li><code>WORKDIR</code>: establece el directorio de trabajo dentro del contenedor.</li> <li><code>ENV</code>: define variables de entorno persistentes.</li> <li><code>EXPOSE</code>: declara puertos que el contenedor utilizar\u00e1 (no los publica en el host).</li> <li><code>CMD</code>: indica el comando que se ejecutar\u00e1 por defecto al lanzar el contenedor.</li> <li><code>ENTRYPOINT</code>: define el proceso principal del contenedor, \u00fatil para im\u00e1genes que deben comportarse como ejecutables.</li> </ul> <p>M\u00e1s documentaci\u00f3n: <code>Dockerfile reference</code></p> <p>Buenas pr\u00e1cticas en la construcci\u00f3n de im\u00e1genes</p> <ul> <li>Utilizar im\u00e1genes base ligeras (<code>alpine</code>, <code>slim</code>) cuando sea posible.</li> <li>Agrupar comandos en un solo <code>RUN</code> para reducir el n\u00famero de capas.</li> <li>Evitar copiar archivos innecesarios al contenedor.</li> <li>Usar <code>CMD</code> para definir el comportamiento por defecto y <code>ENTRYPOINT</code> si se requiere control total del proceso.</li> <li>A\u00f1adir etiquetas (<code>docker tag</code>) para versionar las im\u00e1genes y facilitar su gesti\u00f3n.</li> <li>Documentar el prop\u00f3sito de cada instrucci\u00f3n dentro del Dockerfile.</li> </ul>"},{"location":"4_3_imagenes_docker/#flujo-de-trabajo-tipico","title":"Flujo de trabajo t\u00edpico","text":"<ol> <li>Crear un directorio de trabajo con los archivos necesarios (scripts, configuraciones, etc.).</li> <li>Escribir el <code>Dockerfile</code> con las instrucciones deseadas.</li> <li>Construir la imagen:</li> </ol> <pre><code>docker build -t nombreimagen .\n</code></pre> <ol> <li>Verificar que la imagen se ha creado:</li> </ol> <pre><code>docker images\n</code></pre> <ol> <li>Lanzar un contenedor basado en la imagen:</li> </ol> <pre><code>docker run -it nombreimagen\n</code></pre> <ol> <li>(Opcional) Subir la imagen a Docker Hub:</li> </ol> <pre><code>docker login\ndocker push usuario/nombreimagen\n</code></pre>"},{"location":"4_3_imagenes_docker/#ejemplos-de-contenedores-personalizados","title":"Ejemplos de contenedores personalizados","text":"<p>Los siguientes ejemplos ilustran distintos enfoques de personalizaci\u00f3n:</p> <ul> <li>Servidor web con Apache y PHP sobre Alpine: imagen ligera con entorno gr\u00e1fico m\u00ednimo y configuraci\u00f3n web b\u00e1sica.</li> <li>Aplicaci\u00f3n Flask en Python: entorno de desarrollo web con dependencias gestionadas por <code>pip</code>.</li> <li>Contenedor de diagn\u00f3stico de red en Ubuntu: imagen con herramientas CLI para pr\u00e1cticas de redes.</li> </ul> <p>1 Servidor web con Apache y PHP sobre Alpine</p> <p>El siguiente contenedor est\u00e1 pensado para servir una p\u00e1gina PHP b\u00e1sica mediante Apache, con configuraci\u00f3n m\u00ednima y sin entorno gr\u00e1fico.</p> <p></p><pre><code>FROM alpine\nLABEL maintainer=\"email@gmail.com\"\nRUN apk update &amp;&amp; apk add apache2 php php-apache2 openrc tar\nADD ./start.sh /start.sh\nADD https://gist.githubusercontent.com/SyntaxC4/5648247/raw/info.php /var/www/localhost/htdocs/index.php\nRUN adduser -u 82 -D -S -G www-data www-data\nRUN chown -R www-data:www-data /var/www/ &amp;&amp; chmod -R 775 /var/www/ &amp;&amp; chmod 755 /start.sh\nEXPOSE 80\nCMD /start.sh\n</code></pre> Explicaci\u00f3n<p></p> <ul> <li>FROM alpine: usa como base la imagen Alpine Linux, una distribuci\u00f3n ligera ideal para contenedores.</li> <li>LABEL maintainer: a\u00f1ade metadatos indicando el responsable de la imagen.</li> <li>RUN apk update &amp;&amp; apk add ...: actualiza el \u00edndice de paquetes e instala Apache2, PHP y herramientas necesarias.</li> <li>ADD ./start.sh /start.sh: copia un script local al contenedor. Este script se usar\u00e1 para iniciar Apache.</li> <li>ADD https://.../info.php ...: descarga un archivo PHP de ejemplo y lo coloca como p\u00e1gina principal.</li> <li>RUN adduser ...: crea un usuario <code>www-data</code> con UID 82 y lo asocia al grupo del mismo nombre.</li> <li>RUN chown/chmod: asigna propiedad y permisos adecuados al directorio web y al script de arranque.</li> <li>EXPOSE 80: declara el puerto 80 como expuesto para otros contenedores (no lo publica en el host).</li> <li>CMD /start.sh: define el comando que se ejecutar\u00e1 por defecto al lanzar el contenedor.</li> </ul> <p>2: Contenedor con Python y Flask</p> <p>Este contenedor es ideal para ense\u00f1ar desarrollo web b\u00e1sico con Flask o para montar APIs REST en pr\u00e1cticas.</p> <pre><code>FROM python:3.11-slim\nLABEL maintainer=\"docente@centro.edu\"\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY app.py .\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]\n</code></pre> <ul> <li>Usa una imagen ligera de Python 3.11.</li> <li>Instala dependencias desde <code>requirements.txt</code> (por ejemplo, Flask).</li> <li>Copia el archivo principal <code>app.py</code> al contenedor.</li> <li>Expone el puerto 5000 (por defecto en Flask).</li> <li>Lanza la aplicaci\u00f3n con <code>python app.py</code>.</li> </ul> <p>3: Contenedor de Ubuntu con herramientas de red</p> <p>Este contenedor puede utilizarse en pr\u00e1cticas de redes, para ense\u00f1ar comandos b\u00e1sicos o simular entornos de prueba.</p> <pre><code>FROM ubuntu:24.04\nLABEL maintainer=\"admin@fp.edu\"\nRUN apt update &amp;&amp; apt install -y net-tools iputils-ping curl dnsutils\nCMD [\"/bin/bash\"]\n</code></pre> <ul> <li>Usa Ubuntu 24.04 como base.</li> <li>Instala herramientas de red \u00fatiles para diagn\u00f3stico (<code>ping</code>, <code>netstat</code>, <code>dig</code>, <code>curl</code>, etc.).</li> <li>Lanza una shell interactiva por defecto.</li> </ul>"},{"location":"4_3_imagenes_docker/#tabla-resumen-de-comandos","title":"Tabla resumen de comandos","text":""},{"location":"4_3_imagenes_docker/#gestion-de-imagenes","title":"Gesti\u00f3n de im\u00e1genes","text":"Comando Descripci\u00f3n Ejemplo <code>docker images</code> Lista las im\u00e1genes locales disponibles. <code>docker images</code> <code>docker search &lt;nombre&gt;</code> Busca im\u00e1genes en Docker Hub. <code>docker search ubuntu</code> <code>docker pull &lt;imagen&gt;</code> Descarga una imagen desde el registro. <code>docker pull alpine</code> <code>docker history &lt;imagen&gt;</code> Muestra el historial de capas de una imagen. <code>docker history alpine</code> <code>docker rmi &lt;imagen:tag&gt;</code> Elimina una imagen local. <code>docker rmi ubuntu:14.04</code> <code>docker rmi $(docker images -q)</code> Elimina todas las im\u00e1genes no utilizadas. <code>docker rmi $(docker images -q)</code> <code>docker rm &lt;id&gt;</code> Elimina un contenedor detenido. <code>docker rm 3fb53852ce99</code> <code>docker stop $(docker ps -a -q)</code> Detiene todos los contenedores. <code>docker stop $(docker ps -a -q)</code> <code>docker rm $(docker ps -a -q)</code> Elimina todos los contenedores detenidos. <code>docker rm $(docker ps -a -q)</code> <code>docker system prune -a</code> Elimina im\u00e1genes, contenedores y redes no utilizados. <code>docker system prune -a</code>"},{"location":"4_3_imagenes_docker/#creacion-y-exportacion-de-imagenes","title":"Creaci\u00f3n y exportaci\u00f3n de im\u00e1genes","text":"Comando Descripci\u00f3n Ejemplo <code>docker commit -m \"&lt;comentario&gt;\" &lt;id&gt; &lt;usuario/imagen:tag&gt;</code> Crea una imagen a partir de un contenedor. <code>docker commit -m \"Ubuntu modificado\" 3fb5 usuario/ubuntu:mod</code> <code>docker save -o &lt;archivo&gt;.tar &lt;imagen&gt;</code> Exporta una imagen a un archivo <code>.tar</code>. <code>docker save -o copiaSeguridad.tar alpine</code> <code>docker load -i &lt;archivo&gt;.tar</code> Importa una imagen desde un archivo <code>.tar</code>. <code>docker load -i copiaSeguridad.tar</code>"},{"location":"4_3_imagenes_docker/#docker-hub","title":"Docker Hub","text":"Comando Descripci\u00f3n Ejemplo <code>docker login</code> Inicia sesi\u00f3n en Docker Hub. <code>docker login</code> <code>docker push &lt;usuario/imagen:tag&gt;</code> Sube una imagen al repositorio. <code>docker push usuario/ubuntu:mod</code>"},{"location":"4_3_imagenes_docker/#ejemplo-guiado-de-uso","title":"\ud83e\udde9 Ejemplo guiado de uso","text":"<p>Pr\u00e1ctica guiada: gesti\u00f3n de im\u00e1genes en Docker</p> <p>Aprender a listar, descargar, eliminar, exportar, importar y versionar im\u00e1genes en Docker, utilizando exclusivamente la l\u00ednea de comandos en entornos WSL con Ubuntu.</p> <ol> <li> <p>Listar im\u00e1genes locales</p> <pre><code>docker images\n</code></pre> <p>Consulta todas las im\u00e1genes disponibles en tu sistema. Para filtrar por nombre y versi\u00f3n:</p> <pre><code>docker images ubuntu:22.04\n</code></pre> </li> <li> <p>Buscar im\u00e1genes en Docker Hub</p> <pre><code>docker search alpine\n</code></pre> <p>Muestra im\u00e1genes disponibles en el registro remoto.</p> </li> <li> <p>Descargar una imagen</p> <pre><code>docker pull alpine:3.10\n</code></pre> <p>Descarga la imagen <code>alpine</code> con la etiqueta <code>3.10</code>.</p> </li> <li> <p>Consultar el historial de una imagen</p> <pre><code>docker history alpine\n</code></pre> <p>Muestra las capas que componen la imagen.</p> </li> <li> <p>Eliminar im\u00e1genes</p> <p>Eliminar una imagen concreta:</p> <pre><code>docker rmi ubuntu:22.04\n</code></pre> <p>Eliminar todas las im\u00e1genes no utilizadas:</p> <pre><code>docker rmi $(docker images -q)\n</code></pre> </li> <li> <p>Eliminar contenedores</p> <p>Eliminar un contenedor por ID:</p> <pre><code>docker rm 3fb53852ce99\n</code></pre> <p>Detener y eliminar todos los contenedores:</p> <pre><code>docker stop $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\n</code></pre> </li> <li> <p>Limpieza completa del sistema</p> <pre><code>docker system prune -a\n</code></pre> <p>Elimina contenedores detenidos, im\u00e1genes sin uso, redes no utilizadas y cach\u00e9 de construcci\u00f3n.</p> </li> <li> <p>Crear una imagen a partir de un contenedor</p> <pre><code>docker commit -m \"Ubuntu modificado\" 3fb5 usuario/ubuntu:mod\n</code></pre> </li> <li> <p>Exportar e importar im\u00e1genes</p> <p>Guardar una imagen en archivo <code>.tar</code>:</p> <pre><code>docker save -o copiaSeguridad.tar alpine\n</code></pre> <p>Importar una imagen desde archivo:</p> <pre><code>docker load -i copiaSeguridad.tar\n</code></pre> </li> <li> <p>Subir im\u00e1genes a Docker Hub</p> <p>Iniciar sesi\u00f3n:</p> <pre><code>docker login\n</code></pre> <p>Subir imagen:</p> <pre><code>docker push usuario/ubuntu:mod\n</code></pre> </li> </ol>"},{"location":"4_4_redes_volumenes_docker/","title":"Redes y Vol\u00famenes","text":"<p>Docker permite configurar redes virtuales entre contenedores y gestionar la persistencia de datos mediante distintos tipos de vol\u00famenes. Estas capacidades son fundamentales para construir entornos distribuidos, simular arquitecturas reales y garantizar que los datos sobrevivan al ciclo de vida de los contenedores.</p>"},{"location":"4_4_redes_volumenes_docker/#redes-en-docker","title":"Redes en Docker","text":""},{"location":"4_4_redes_volumenes_docker/#redes-predefinidas","title":"Redes predefinidas","text":"<p>Al instalar Docker, se crean tres redes internas:</p> <ul> <li><code>bridge</code>: red por defecto. Asigna una IP privada al contenedor y lo conecta mediante la interfaz virtual <code>docker0</code>.</li> <li><code>host</code>: el contenedor comparte la pila de red del anfitri\u00f3n. No hay aislamiento.</li> <li><code>none</code>: el contenedor no tiene acceso a ninguna red externa, solo loopback.</li> </ul> <p>Para inspeccionar la red <code>docker0</code>:</p> <pre><code>ip a show docker0\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker network</code></p>"},{"location":"4_4_redes_volumenes_docker/#creacion-de-redes-personalizadas","title":"Creaci\u00f3n de redes personalizadas","text":"<p>Docker permite crear redes aisladas para agrupar contenedores:</p> <pre><code>docker network create redtest\n</code></pre> <p>Opciones adicionales:</p> <ul> <li><code>--internal</code>: red sin acceso externo.</li> <li><code>--subnet</code>: define la subred en formato CIDR.</li> <li><code>--gateway</code>: especifica la puerta de enlace.</li> <li><code>--ip-range</code>: delimita el rango de IPs asignables.</li> </ul> <p>M\u00e1s documentaci\u00f3n: <code>docker network create</code></p>"},{"location":"4_4_redes_volumenes_docker/#inspeccion-y-eliminacion-de-redes","title":"Inspecci\u00f3n y eliminaci\u00f3n de redes","text":"<p>Listar redes:</p> <pre><code>docker network ls\n</code></pre> <p>Inspeccionar una red:</p> <pre><code>docker network inspect redtest\n</code></pre> <p>Eliminar una red (solo si no hay contenedores conectados):</p> <pre><code>docker network rm redtest\n</code></pre>"},{"location":"4_4_redes_volumenes_docker/#asignacion-de-redes-a-contenedores","title":"Asignaci\u00f3n de redes a contenedores","text":"<p>Al crear un contenedor, se puede especificar la red:</p> <pre><code>docker run -it --network redtest ubuntu /bin/bash\n</code></pre> <p>Tambi\u00e9n se puede asignar un alias DNS:</p> <pre><code>docker run -it --network redtest --network-alias miservidor --name prueba3 alpine\n</code></pre> <p>Esto permite que otros contenedores en la misma red accedan a <code>prueba3</code> usando el nombre <code>miservidor</code>.</p>"},{"location":"4_4_redes_volumenes_docker/#conexion-y-desconexion-dinamica","title":"Conexi\u00f3n y desconexi\u00f3n din\u00e1mica","text":"<p>Conectar un contenedor a una red existente:</p> <pre><code>docker network connect redtest prueba1\n</code></pre> <p>Opciones \u00fatiles:</p> <ul> <li><code>--alias</code>: asigna un nombre DNS adicional.</li> <li><code>--ip</code>: asigna una IP fija.</li> </ul> <p>Desconectar un contenedor:</p> <pre><code>docker network disconnect redtest prueba1\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>docker network connect</code></p>"},{"location":"4_4_redes_volumenes_docker/#persistencia-de-datos","title":"Persistencia de datos","text":"<p>La persistencia de datos en Docker permite conservar informaci\u00f3n m\u00e1s all\u00e1 del ciclo de vida de los contenedores, asegurando que los archivos, configuraciones o resultados generados no se pierdan al detener o eliminar un contenedor. Esta funcionalidad es esencial cuando se trabaja con servicios que requieren almacenamiento duradero, como bases de datos, servidores web o aplicaciones que gestionan archivos. Docker ofrece varias estrategias para lograr esta persistencia, cada una con caracter\u00edsticas t\u00e9cnicas y casos de uso espec\u00edficos: los montajes directos desde el sistema anfitri\u00f3n (binding mounts), los vol\u00famenes gestionados por Docker y los vol\u00famenes temporales en memoria (<code>tmpfs</code>). </p> <p>A continuaci\u00f3n revisamos estas 3 formas:</p> <ul> <li>Binding mount: monta un directorio del anfitri\u00f3n en el contenedor.</li> <li>Vol\u00famenes gestionados por Docker: abstraen la ubicaci\u00f3n f\u00edsica del almacenamiento.</li> <li>Vol\u00famenes <code>tmpfs</code>: almacenan datos en memoria, sin persistencia.</li> </ul> <p>M\u00e1s documentaci\u00f3n: <code>Docker storage</code></p>"},{"location":"4_4_redes_volumenes_docker/#binding-mount","title":"Binding mount","text":"<p>Montaje directo de un directorio del anfitri\u00f3n:</p> <pre><code>docker run -d -it --name appcontainer -v /home/alumno/target:/app nginx:latest\n</code></pre> <p>O con sintaxis expl\u00edcita:</p> <pre><code>docker run -d -it --name appcontainer --mount type=bind,source=/home/alumno/target,target=/app nginx:latest\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>bind mounts</code></p>"},{"location":"4_4_redes_volumenes_docker/#volumenes-docker","title":"Vol\u00famenes Docker","text":"<p>Montaje de un volumen gestionado por Docker:</p> <pre><code>docker run -d -it --name appcontainer -v mivolumen:/app nginx:latest\n</code></pre> <p>O con sintaxis expl\u00edcita:</p> <pre><code>docker run -d -it --name appcontainer --mount source=mivolumen,target=/app nginx:latest\n</code></pre> <p>Gesti\u00f3n de vol\u00famenes:</p> <pre><code>docker volume create mivolumen\ndocker volume ls\ndocker volume rm mivolumen\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>volumes</code></p>"},{"location":"4_4_redes_volumenes_docker/#volumenes-tmpfs","title":"Vol\u00famenes <code>tmpfs</code>","text":"<p>Montaje en memoria (sin persistencia):</p> <pre><code>docker run -d -it --tmpfs /app nginx\n</code></pre> <p>O con sintaxis expl\u00edcita:</p> <pre><code>docker run -d -it --mount type=tmpfs,destination=/app nginx\n</code></pre> <p>M\u00e1s documentaci\u00f3n: <code>tmpfs</code></p>"},{"location":"4_4_redes_volumenes_docker/#copia-de-seguridad-de-volumenes","title":"Copia de seguridad de vol\u00famenes","text":"<p>Seguimos Ejemplo para copiar el contenido de un volumen a un archivo <code>.tar</code>:</p> <pre><code>docker stop contenedor1\ndocker run --rm --volumes-from contenedor1 -v /home/alumno/backup:/backup ubuntu bash -c \"cd /datos &amp;&amp; tar cvf /backup/copiaseguridad.tar .\"\n</code></pre> <p>Este comando lanza un contenedor temporal que accede al volumen montado en <code>/datos</code> y guarda su contenido en <code>/home/alumno/backup</code>.</p>"},{"location":"4_4_redes_volumenes_docker/#tabla-de-comandos","title":"Tabla de comandos","text":""},{"location":"4_4_redes_volumenes_docker/#redes","title":"Redes","text":"Comando Descripci\u00f3n Ejemplo <code>docker network create redtest</code> Crea una red personalizada llamada <code>redtest</code>. <code>docker network create redtest</code> <code>docker network ls</code> Lista todas las redes disponibles en el sistema. <code>docker network ls</code> <code>docker network rm redtest</code> Elimina la red <code>redtest</code> (si no est\u00e1 en uso). <code>docker network rm redtest</code> <code>docker run -it --network redtest ubuntu /bin/bash</code> Crea un contenedor conectado a la red <code>redtest</code>. <code>docker run -it --network redtest ubuntu /bin/bash</code> <code>docker network connect redtest prueba1</code> Conecta el contenedor <code>prueba1</code> a la red <code>redtest</code>. <code>docker network connect redtest prueba1</code> <code>docker network disconnect redtest prueba1</code> Desconecta el contenedor <code>prueba1</code> de la red <code>redtest</code>. <code>docker network disconnect redtest prueba1</code>"},{"location":"4_4_redes_volumenes_docker/#volumenes","title":"Vol\u00famenes","text":"Comando Descripci\u00f3n Ejemplo <code>docker run -d -it --name appcontainer -v /home/alumno/target:/app nginx:latest</code> Crea un contenedor con volumen tipo binding mount. <code>docker run -d -it --name appcontainer -v /home/alumno/target:/app nginx:latest</code> <code>docker run -d -it --name appcontainer -v micontenedor:/app nginx:latest</code> Crea un contenedor con volumen gestionado por Docker. <code>docker run -d -it --name appcontainer -v micontenedor:/app nginx:latest</code> <code>docker volume create mivolumen</code> Crea un volumen vac\u00edo llamado <code>mivolumen</code>. <code>docker volume create mivolumen</code> <code>docker volume ls</code> Lista todos los vol\u00famenes existentes. <code>docker volume ls</code> <code>docker volume rm mivolumen</code> Elimina el volumen <code>mivolumen</code> (si no est\u00e1 en uso). <code>docker volume rm mivolumen</code> <code>docker volume rm $(docker volume ls -q)</code> Elimina todos los vol\u00famenes del sistema. <code>docker volume rm $(docker volume ls -q)</code> <code>docker run -d -it --tmpfs /app nginx</code> Crea un contenedor con volumen temporal en memoria (<code>tmpfs</code>). <code>docker run -d -it --tmpfs /app nginx</code> <code>docker run --rm --volumes-from contenedor1 -v /home/alumno/backup:/backup ubuntu bash -c \"cd /datos &amp;&amp; tar cvf /backup/copiaseguridad.tar .\"</code> Realiza una copia de seguridad del volumen montado en <code>/datos</code> del contenedor <code>contenedor1</code>. Ver comando completo a la izquierda"},{"location":"4_4_redes_volumenes_docker/#ejemplo-de-uso-guiado","title":"\ud83e\udde9 Ejemplo de uso guiado","text":"<p>Pr\u00e1ctica guiada: redes y vol\u00famenes en Docker</p> <p>Configurar redes personalizadas entre contenedores y aplicar distintos tipos de vol\u00famenes para gestionar la persistencia de datos. Esta pr\u00e1ctica se realiza \u00edntegramente desde la terminal en entornos WSL con Ubuntu.</p> <ol> <li> <p>Crear una red personalizada</p> <pre><code>docker network create redtest\n</code></pre> <p>Verifica que se ha creado:</p> <pre><code>docker network ls\n</code></pre> </li> <li> <p>Crear dos contenedores en la misma red</p> <pre><code>docker run -it --network redtest --name prueba1 alpine\n</code></pre> <p>Dentro del contenedor, sal con <code>exit</code> y vuelve a iniciarlo:</p> <pre><code>docker start prueba1\n</code></pre> <p>Lanza el segundo contenedor:</p> <pre><code>docker run -it --network redtest --name prueba2 alpine\n</code></pre> <p>Desde <code>prueba2</code>, comprueba la conectividad con <code>prueba1</code>:</p> <pre><code>ping prueba1\n</code></pre> </li> <li> <p>Asignar alias DNS a un contenedor</p> <pre><code>docker run -it --network redtest --network-alias miservidor --name prueba3 alpine\n</code></pre> <p>Desde otro contenedor en la misma red, prueba:</p> <pre><code>ping miservidor\n</code></pre> </li> <li> <p>Conectar y desconectar contenedores de redes</p> <p>Conectar un contenedor a otra red:</p> <pre><code>docker network connect redtest prueba1\n</code></pre> <p>Desconectarlo:</p> <pre><code>docker network disconnect redtest prueba1\n</code></pre> </li> <li> <p>Crear un volumen tipo binding mount</p> <pre><code>docker run -d -it --name appcontainer -v /home/alumno/target:/app nginx:latest\n</code></pre> <p>Verifica que el contenido de <code>/home/alumno/target</code> est\u00e1 accesible en <code>/app</code> dentro del contenedor.</p> </li> <li> <p>Crear un volumen gestionado por Docker</p> <pre><code>docker volume create mivolumen\ndocker run -d -it --name appcontainer2 -v mivolumen:/app nginx:latest\n</code></pre> <p>Verifica que el volumen aparece en la lista:</p> <pre><code>docker volume ls\n</code></pre> </li> <li> <p>Crear un volumen temporal en memoria (<code>tmpfs</code>)</p> <pre><code>docker run -d -it --tmpfs /app nginx\n</code></pre> <p>Este volumen no se guarda en disco y desaparece al detener el contenedor.</p> </li> <li> <p>Realizar copia de seguridad de un volumen</p> <pre><code>docker stop contenedor1\ndocker run --rm --volumes-from contenedor1 -v /home/alumno/backup:/backup ubuntu bash -c \"cd /datos &amp;&amp; tar cvf /backup/copiaseguridad.tar .\"\n</code></pre> <p>Verifica que el archivo <code>copiaseguridad.tar</code> se ha creado en <code>/home/alumno/backup</code>.</p> </li> </ol>"},{"location":"4_5_docker_compose/","title":"Orquestaci\u00f3n de contenedores con Docker Compose","text":"<p>Docker Compose es una herramienta que permite definir y gestionar m\u00faltiples contenedores como una \u00fanica aplicaci\u00f3n. Utiliza un fichero de configuraci\u00f3n en formato YAML (<code>docker-compose.yml</code>) para describir los servicios, redes, vol\u00famenes y dependencias que conforman el entorno. Esta funcionalidad resulta especialmente \u00fatil en entornos educativos y de desarrollo, donde se requiere levantar arquitecturas completas de forma reproducible y automatizada.</p>"},{"location":"4_5_docker_compose/#ventajas-de-docker-compose","title":"Ventajas de Docker Compose","text":"<ul> <li>Permite definir m\u00faltiples servicios en un solo archivo.</li> <li>Automatiza la creaci\u00f3n, conexi\u00f3n y configuraci\u00f3n de contenedores.</li> <li>Facilita la gesti\u00f3n de redes, vol\u00famenes y variables de entorno.</li> <li>Admite escalado local de servicios mediante m\u00faltiples instancias.</li> <li>Simplifica la puesta en marcha de entornos complejos como WordPress, bases de datos, APIs, etc.</li> </ul> <p>M\u00e1s documentaci\u00f3n: <code>Docker Compose</code></p>"},{"location":"4_5_docker_compose/#estructura-del-fichero-docker-composeyml","title":"Estructura del fichero <code>docker-compose.yml</code>","text":"<p>El fichero <code>docker-compose.yml</code> se escribe en formato YAML y puede incluir:</p> <ul> <li><code>services</code>: definici\u00f3n de cada contenedor.</li> <li><code>volumes</code>: vol\u00famenes compartidos entre servicios.</li> <li><code>networks</code>: redes personalizadas.</li> <li><code>environment</code>: variables de entorno.</li> <li><code>depends_on</code>: orden de arranque entre servicios.</li> <li><code>build</code>: ruta al Dockerfile si se desea construir una imagen personalizada.</li> <li><code>ports</code>: mapeo de puertos entre contenedor y anfitri\u00f3n.</li> <li><code>restart</code>: pol\u00edtica de reinicio autom\u00e1tico.</li> <li><code>command</code>: sobreescritura del comando por defecto.</li> </ul> <p>M\u00e1s documentaci\u00f3n: <code>Compose file reference</code></p>"},{"location":"4_5_docker_compose/#ejemplo-completo-wordpress-mariadb","title":"Ejemplo completo: WordPress + MariaDB","text":"<p>El siguiente fichero <code>docker-compose.yml</code> define dos servicios: una base de datos MariaDB y una instancia de WordPress conectada a ella. Incluye vol\u00famenes persistentes, variables de entorno y mapeo de puertos.</p> <pre><code>version: \"3.9\"\n\nservices:\n  db:\n    image: mariadb:10.11.2\n    container_name: wordpress-db\n    volumes:\n      - db_data:/var/lib/mysql\n      - db_config:/etc/mysql/conf.d\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    networks:\n      backend:\n        aliases:\n          - mariadb\n\n  wordpress:\n    image: wordpress:latest\n    container_name: wordpress-app\n    depends_on:\n      - db\n    ports:\n      - \"8000:80\"\n    volumes:\n      - wp_data:/var/www/html\n      - wp_plugins:/var/www/html/wp-content/plugins\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: mariadb:3306\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\n    networks:\n      frontend:\n      backend:\n\nvolumes:\n  db_data:\n  db_config:\n  wp_data:\n  wp_plugins:\n\nnetworks:\n  frontend:\n    driver: bridge\n  backend:\n    driver: bridge\n</code></pre> <p>Aspectos a tener en cuenta</p> <ul> <li> <p>Redes</p> <ul> <li>frontend: conecta WordPress con el exterior (puerto 8000).</li> <li>backend: conecta WordPress con la base de datos MariaDB.</li> <li>Separar redes mejora la seguridad y el aislamiento l\u00f3gico.</li> </ul> </li> <li> <p>Vol\u00famenes</p> <ul> <li><code>db_data</code>: almacena los datos persistentes de MariaDB.</li> <li><code>db_config</code>: permite a\u00f1adir configuraciones personalizadas a MariaDB.</li> <li><code>wp_data</code>: guarda el contenido principal de WordPress.</li> <li><code>wp_plugins</code>: separa los plugins para facilitar su gesti\u00f3n y copia.</li> </ul> </li> <li> <p>Alias de red</p> <p>Se define <code>mariadb</code> como alias en la red <code>backend</code>, lo que permite que WordPress se conecte usando <code>mariadb:3306</code> como host.</p> </li> <li> <p>Contenedores nombrados</p> <p>Se asignan nombres expl\u00edcitos (<code>wordpress-db</code>, <code>wordpress-app</code>) para facilitar la inspecci\u00f3n y depuraci\u00f3n.</p> </li> </ul> <p>Para lanzar el entorno:</p> <pre><code>docker compose up -d\n</code></pre> <p>Para detenerlo:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"4_5_docker_compose/#comandos-principales-de-docker-compose","title":"Comandos principales de Docker Compose","text":"Comando Descripci\u00f3n <code>docker compose up -d</code> Lanza los servicios en segundo plano. <code>docker compose down</code> Detiene y elimina los servicios. <code>docker compose build</code> Construye las im\u00e1genes definidas en el fichero. <code>docker compose pull</code> Descarga las im\u00e1genes necesarias. <code>docker compose start</code> / <code>stop</code> Inicia o detiene servicios espec\u00edficos. <code>docker compose exec &lt;servicio&gt; &lt;comando&gt;</code> Ejecuta un comando dentro de un contenedor. <code>docker compose ps</code> Lista los contenedores activos del proyecto. <code>docker compose rm</code> Elimina contenedores detenidos. Comando Descripci\u00f3n Uso de ejemplo <code>docker-compose up</code> Crea y inicia contenedores <code>docker-compose up</code> <code>docker-compose up -d</code> Ejecutar en segundo plano <code>docker-compose up -d</code> <code>docker-compose exec</code> Ejecutar un comando en un contenedor en ejecuci\u00f3n <code>docker-compose exec web bash</code> <code>docker-compose build</code> Construir/reconstruir im\u00e1genes <code>docker-compose build</code> <code>docker-compose down</code> Detener y eliminar contenedores, redes, vol\u00famenes e im\u00e1genes <code>docker-compose down</code> <code>docker-compose logs -f</code> Ver y seguir los registros <code>docker-compose logs -f</code> <code>docker-compose ps</code> Listar contenedores en ejecuci\u00f3n <code>docker-compose ps</code> <code>docker-compose run</code> Ejecutar comandos de una sola vez (ignora el comando en el archivo Compose) <code>docker-compose run web python manage.py migrate</code> <code>docker-compose stop</code> Detener contenedores en ejecuci\u00f3n (se pueden reiniciar con start) <code>docker-compose stop</code> <code>docker-compose restart</code> Reiniciar servicios <code>docker-compose restart web</code> <code>docker-compose pull</code> Descargar im\u00e1genes de servicio <code>docker-compose pull</code> <code>docker-compose rm</code> Eliminar contenedores detenidos de servicios <code>docker-compose rm web</code> <code>docker-compose config</code> Validar y ver el archivo Compose <code>docker-compose config</code> <code>docker-compose up --scale web=3</code> Iniciar m\u00faltiples instancias de un servicio <code>docker-compose up --scale web=3</code> <p>M\u00e1s documentaci\u00f3n: <code>Compose CLI</code></p>"},{"location":"4_5_docker_compose/#ejemplos-con-redes-personalizadas-y-volumenes","title":"Ejemplos con redes personalizadas y vol\u00famenes","text":"<p>Ejemplo 1: NGINX + Redis con red personalizada y vol\u00famenes</p> <pre><code>version: '3.8'\n\nservices:\n  nginx:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./nginx/html:/usr/share/nginx/html\n    networks:\n      - appnet\n\n  redis:\n    image: redis:7\n    volumes:\n      - redis_data:/data\n    networks:\n      - appnet\n\nvolumes:\n  redis_data:\n\nnetworks:\n  appnet:\n    driver: bridge\n</code></pre> <ul> <li>nginx: sirve archivos est\u00e1ticos desde <code>./nginx/html</code> en el host.</li> <li>redis: almacena datos persistentes en el volumen <code>redis_data</code>.</li> <li>Ambos servicios est\u00e1n en la red <code>appnet</code>, lo que permite que se comuniquen por nombre de servicio (<code>redis</code>, <code>nginx</code>).</li> </ul> <p>Ejemplo 2: PostgreSQL + Adminer con vol\u00famenes y red</p> <pre><code>version: '3.8'\n\nservices:\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_USER: admin\n      POSTGRES_PASSWORD: secret\n      POSTGRES_DB: demo\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  adminer:\n    image: adminer\n    ports:\n      - \"8081:8080\"\n    networks:\n      - backend\n\nvolumes:\n  pgdata:\n\nnetworks:\n  backend:\n</code></pre> <ul> <li>PostgreSQL: base de datos con credenciales configuradas.</li> <li>Adminer: interfaz web para gestionar la base de datos.</li> <li>Ambos comparten la red <code>backend</code> y el volumen <code>pgdata</code> mantiene los datos persistentes.</li> </ul> <p>Ejemplo 3 Simulaci\u00f3n de XAMPP con Apache + PHP + MySQL</p> <pre><code>version: '3.8'\n\nservices:\n  apache:\n    image: webdevops/php-apache:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./htdocs:/app\n    networks:\n      - xamppnet\n    depends_on:\n      - mysql\n\n  mysql:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpass\n      MYSQL_DATABASE: xamppdb\n      MYSQL_USER: xamppuser\n      MYSQL_PASSWORD: xampppass\n    volumes:\n      - mysql_data:/var/lib/mysql\n    networks:\n      - xamppnet\n\nvolumes:\n  mysql_data:\n\nnetworks:\n  xamppnet:\n</code></pre> <ul> <li>Apache + PHP: sirve archivos PHP desde <code>./htdocs</code>.</li> <li>MySQL: base de datos con credenciales configuradas.</li> <li>Ambos servicios est\u00e1n conectados por la red <code>xamppnet</code> y usan vol\u00famenes para persistencia.</li> </ul> <p>Ejemplo 4: node.js con postgre</p> <pre><code>version: '3.8'\nservices:\n  app:\n    image: node:14\n    volumes:\n      - ./app:/usr/src/app\n    networks:\n      - red-backend\n    working_dir: /usr/src/app\n    command: node index.js\n\n  db:\n    image: postgres\n    environment:\n      POSTGRES_PASSWORD: ejemplo123\n    volumes:\n      - datos-db:/var/lib/postgresql/data\n    networks:\n      - red-backend\n\nvolumes:\n  datos-db:\n\nnetworks:\n  red-backend:\n    driver: bridge\n</code></pre> <p>Explicaci\u00f3n del ejemplo - app: Servicio que ejecuta una aplicaci\u00f3n Node.js, montando el c\u00f3digo fuente desde el host. - db: Servicio de base de datos PostgreSQL con persistencia de datos usando vol\u00famenes. - volumes: Define un volumen llamado <code>datos-db</code> para guardar los datos de PostgreSQL. - networks: Crea una red personalizada <code>red-backend</code> para que los servicios se comuniquen de forma aislada.</p>"},{"location":"4_5_docker_compose/#repositorios-utiles-con-ejemplos","title":"Repositorios \u00fatiles con ejemplos","text":"<ul> <li>Ejemplos variados de docker-compose.yml</li> <li>Gu\u00eda r\u00e1pida con ejemplos anotados</li> <li>Uso de vol\u00famenes en Docker Compose</li> </ul>"},{"location":"5_1_InstalarOdoo/","title":"5.1. Odoo. Introducci\u00f3n e instalaci\u00f3n.","text":""},{"location":"5_1_InstalarOdoo/#introduccion-a-odoo","title":"Introducci\u00f3n a Odoo","text":"<p>Odoo es una plataforma de gesti\u00f3n empresarial todo-en-uno que ofrece una amplia gama de aplicaciones integradas para cubrir pr\u00e1cticamente todas las necesidades de una empresa moderna. Desde contabilidad, ventas y compras, hasta gesti\u00f3n de inventario, recursos humanos, marketing y desarrollo web, Odoo permite centralizar procesos en un entorno flexible y escalable.</p> <p>Una de sus principales ventajas es su arquitectura modular: puedes empezar con unas pocas aplicaciones y a\u00f1adir m\u00e1s seg\u00fan crezcan tus necesidades. Adem\u00e1s, al ser de c\u00f3digo abierto, Odoo cuenta con una comunidad activa que contribuye constantemente a su mejora, lo que lo convierte en una soluci\u00f3n potente tanto para peque\u00f1as empresas como para grandes corporaciones.</p> <p>Su interfaz intuitiva, junto con la posibilidad de personalizaci\u00f3n y automatizaci\u00f3n de flujos de trabajo, hacen de Odoo una herramienta muy valorada por empresas que buscan eficiencia y control en sus operaciones.</p> <p>Odoo es un ERP completo hecho en software libre. Adem\u00e1s, es un framework de programaci\u00f3n RAD, puede ser considerado un framework web full stack con un prop\u00f3sito empresarial, pero con la posibilidad de hacer cualquier aplicaci\u00f3n web. El ERP que encontramos cuando lo instalamos aprovecha este framework para mostrar un backoffice listo para ser utilizado en cualquier empresa de cualquier tama\u00f1o. Al tener coste 0 (la versi\u00f3n community) no hay coste inicial de implantaci\u00f3n.</p> <p>Por estos motivos es ideal para la ense\u00f1anza y muchas empresas lo han adoptado frente a las famosas soluciones privativas y muy caras.</p> <p>Para m\u00e1s informaci\u00f3n, puedes visitar la p\u00e1gina oficial: https://www.odoo.com</p>"},{"location":"5_1_InstalarOdoo/#instalar-odoo","title":"Instalar <code>Odoo</code>","text":"<p><code>Odoo</code> puede instalarse en cualquier sistema operativo. Sin embargo, se desarrolla pensando en Ubuntu o Debian y es el sistema en el que vamos a trabajar.</p> <p><code>Odoo</code>, en esencia, es un servidor web hecho en Python que se conecta con una base de datos PostgreSQL. Hay muchas maneras de instalar <code>Odoo</code>, desde las m\u00e1s avanzadas, que son descargar por git el repositorio y hacer que arranque al inicio, hasta las m\u00e1s simples, que son desplegar un docker con todo funcionando.</p>"},{"location":"5_1_InstalarOdoo/#opciones-para-la-instalacion-de-odoo","title":"Opciones para la instalaci\u00f3n de <code>Odoo</code>","text":"<p>Cada empresa tiene unas necesidades y cada necesidad se puede cubrir de diferente forma.</p> <p>Para el caso de Odoo tenemos diferentes formas de instalarlo, o en un servidor dedicado o mediante virtualizaci\u00f3n o utilizando las diferentes opciones que nos encontramos en la nube.</p> <p>Vamos a hacer una comparativa no rigurosa de las distintas opciones:</p> Lugar Tecnolog\u00eda Prop\u00f3sito Servidor local Directamente instalado en Ubuntu Server En funci\u00f3n de la potencia, capacidad y seguridad del servidor, puede servir para cualquier empresa. Instalar directamente da menos flexibilidad, pero aprovecha toda la potencia de la m\u00e1quina y la compatibilidad con todo. La empresa tiene control total de los datos y es responsable de la seguridad. Tambi\u00e9n controla los gastos. Es poco escalable y migrable. Servidor local En Docker, Proxmox o VirtualBox Igual que la opci\u00f3n anterior, pero con m\u00e1s posibilidades de ser escalable y migrable. Permite compartir mejor los recursos de la m\u00e1quina con otros servicios. En la nube VPS No es necesario pensar en la seguridad f\u00edsica, pero s\u00ed en la l\u00f3gica. Es escalable si el proveedor permite ampliar la m\u00e1quina. El precio suele estar predeterminado, pero a la larga es m\u00e1s caro que los servidores propios. En el caso de proveedores principales como AWS, Azure, Google Cloud... el precio es por uso y es peligroso no controlarlo. En la nube SAAS (Odoo.sh) Ya no es necesario preocuparse tanto por la seguridad l\u00f3gica, solo por los usuarios de Odoo. Es escalable, pero mucho m\u00e1s caro. No es personalizable. En la nube PAAS (Render, Railway, Fly.io...) Cada servicio tiene sus caracter\u00edsticas, pero combinan las ventajas de Docker en cuanto a personalizaci\u00f3n con una interfaz muy c\u00f3moda para DevOps y CI/CD. El despliegue se trata como si fuera c\u00f3digo. <p>La respuesta sigue sin ser clara. Cada empresa tiene sus posibilidades y necesidades. </p> <p>Una microempresa con pocos ordenadores y solo necesidad de intranet puede instalar en un Docker en un servidor de bajo consumo con copias de seguridad peri\u00f3dicas. Una empresa peque\u00f1a puede desplegar en VPS o PAAS con precios predefinidos y controlados e ir aumentando seg\u00fan lo necesite. </p> <p>Una empresa m\u00e1s grande puede optar por nubes m\u00e1s de bajo nivel (IAAS) o por una instalaci\u00f3n on-premise m\u00e1s seria con alta disponibilidad en la propia empresa. </p> <p>Un SAAS puede ser \u00fatil para empresas que no necesitan ninguna personalizaci\u00f3n. </p> <p>Si el negocio es ofrecer el propio servicio de Odoo, se puede optar por contratar un IAAS y, sobre \u00e9l, dar un servicio SAAS con personalizaciones a medida y cobrar por el servicio y por las personalizaciones.</p> <p>Si estamos en una empresa que no puede depender de tener o no red por el sistema productivo, entonces eliminaremos todas las opciones de la nube.</p>"},{"location":"5_1_InstalarOdoo/#enlaces","title":"Enlaces","text":"<ul> <li>Manual technical training Odoo</li> <li>V\u00eddeo de instalar Odoo manualmente</li> <li>V\u00eddeo de configurar Odoo como servicio</li> <li>V\u00eddeo de Copias de seguridad</li> </ul>"},{"location":"5_2_InstalarDocker/","title":"5.2. Instalaci\u00f3n con docker","text":""},{"location":"5_2_InstalarDocker/#instalar-con-docker","title":"Instalar con Docker","text":"<p>Revisa siempre la documentaci\u00f3n oficial, ah\u00ed tendr\u00e1s los \u00faltimos cambios</p> <p>Documentaci\u00f3n oficial de Odoo funcionando bajo docker</p> <p>Desplegar <code>Odoo</code> con Docker permite instalar y gestionar el sistema de manera m\u00e1s sencilla, sin necesidad de configurar manualmente dependencias o bases de datos. Docker encapsula <code>Odoo</code> en un contenedor, que es como una caja autosuficiente con todo lo necesario para funcionar, haciendo que sea m\u00e1s f\u00e1cil de ejecutar en cualquier servidor u ordenador sin problemas de compatibilidad. Esto tambi\u00e9n facilita la creaci\u00f3n de entornos de desarrollo y producci\u00f3n consistentes, permite actualizaciones y pruebas sin riesgo de afectar el sistema principal y optimiza el uso de recursos. Adem\u00e1s, con Docker es posible desplegar <code>Odoo</code> junto con otros servicios necesarios, como PostgreSQL, con un solo archivo de configuraci\u00f3n.</p> <p>Nota</p> <p>En clase trabajaremos finalmente con Docker Compose, el texto siguiente sirve para entender la configuraci\u00f3n final, pero no es necesario hacerlos en el trabajo diario. La configuraci\u00f3n definitiva la haremos con Docker Compose.</p>"},{"location":"5_2_InstalarDocker/#instalacion-de-docker","title":"Instalaci\u00f3n de docker","text":"<p>https://docs.docker.com/engine/install/ubuntu/</p> <p>Si queremos GUI, podemos utilizar Docker Desktop para contenedores locales o Portainer para gestionar tambi\u00e9n contenedores remotos.</p> <p>Se puede instalar Docker de muchas maneras, pero vamos a hacerlo de la manera m\u00e1s recomendable para nuestro caso, que es la de la web oficial:</p> <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n\n# Instalaci\u00f3n\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Probar docker\nsudo docker run hello-world\n\n# Gestionar docker sin ser root:\nsudo usermod -aG docker $USER\n</code></pre>"},{"location":"5_2_InstalarDocker/#instalar-un-docker-con-odoo","title":"Instalar un docker con <code>Odoo</code>","text":"<p>En Docker es muy sencillo desplegar <code>Odoo</code>, aunque debemos tener en cuenta que para que Odoo funcione necesitamos tener instada la base de datos PostgreSQL. As\u00ed pues debemos:</p> <ol> <li>Instalamos PosggreSQL y la ponemos en marcha</li> <li>Instalamos *Odoo, le dicemos quien es la base de datos y lo ponemos en marcha.</li> </ol> <p>Para hacer esto,  tan solo hace falta estos comandos:</p> <p>Primero, se inicia un docker que contenga que inicie un servicio de la base de datos PostgreSQL</p> <pre><code>docker run -d -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo -e POSTGRES_DB=postgres --name db postgres:15\n</code></pre> <p>Donde: </p> <ul> <li> <p><code>docker run</code>: Inicia un nuevo contenedor.</p> </li> <li> <p><code>-d</code>: Ejecuta el contenedor en segundo plano (modo detached).</p> </li> <li> <p><code>-e POSTGRES_USER=odoo</code>: Define la variable de entorno <code>POSTGRES_USER</code>, que crea un usuario llamado <code>odoo</code>.</p> </li> <li> <p><code>-e POSTGRES_PASSWORD=odoo</code>: Define la contrase\u00f1a del usuario <code>odoo</code>.</p> </li> <li> <p><code>-e POSTGRES_DB=postgres</code>: Crea una base de datos llamada <code>postgres</code>.</p> </li> <li> <p><code>--name db</code>: Asigna el nombre <code>db</code> al contenedor, lo que facilita su referencia desde otros contenedores (como el de Odoo).</p> </li> <li> <p><code>postgres:15</code>: Especifica la imagen de PostgreSQL versi\u00f3n 15.</p> </li> </ul> <p>Despu\u00e9s se inicia una instancia de Odoo utilizando la base de datos anterior</p> <pre><code>docker run -p 8069:8069 --name odoo --link db:db -t odoo\n</code></pre> <p>Donde:</p> <ul> <li> <p><code>docker run</code>: Inicia un nuevo contenedor a partir de una imagen.</p> </li> <li> <p><code>-p 8069:8069</code>: Mapea el puerto 8069 del contenedor al puerto 8069 del host. Esto permite acceder a Odoo desde el navegador en http://localhost:8069.</p> </li> <li> <p><code>--name odoo</code>: Asigna el nombre odoo al contenedor. Esto facilita su referencia en otros comandos.</p> </li> <li> <p><code>--link db:db</code>: Crea un enlace entre este contenedor (odoo) y otro contenedor llamado db. El alias db:db significa que dentro del contenedor de Odoo, podr\u00e1 acceder al contenedor de base de datos usando el nombre db. Observar que el alias <code>db</code> hace referencia a la base de datos iniciada anteriormente.</p> </li> <li> <p><code>-t</code>: Asigna un pseudo-TTY, \u00fatil para ver la salida del contenedor en la terminal. A menudo se combina con -i (-it) para interacci\u00f3n.</p> </li> <li> <p><code>odoo</code>: Es el nombre de la imagen de Docker que se usar\u00e1 para crear el contenedor. Puede ser una imagen oficial de Odoo o una personalizada</p> </li> </ul> <p>Tip</p> <p>Se podr\u00eda iniciar tantos Odoo como se quiera cambiando el nombre del contenedor. Dos contenedores no pueden tener el mismo nombre.</p> <p>Por ejemplo</p> <pre><code>docker run -d -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo -e POSTGRES_DB=postgres --name db-demo postgres:latest\ndocker run -p 8069:8069 --name odoo-demo --link db-demo:db -t odoo\n</code></pre> <p>Con estos comandos iniciamos contenedores llamados db-demo y odoo-demo respectivamente</p> <p>Y para finalizar e iniciar la instancia de Odoo, si estamos dentro de la ejecuci\u00f3n del comando que inici\u00f3 el docker, entonces pulsamos <code>Ctrl+X</code>, y si no estamos acoplados a la ejecuci\u00f3n: </p> <pre><code>docker stop odoo\n</code></pre> <p>Si no estamos acoplasdos o attached podemos hacer </p> <pre><code>docker attach odoo\n</code></pre> <p>y veremos la salida de la ejecuci\u00f3n del docker </p> <p>Y para iniciar de nuevo el contenedor hacemos </p> <pre><code>docker start -a odoo\n</code></pre> <p>Si no queremos estar attached con la ejecuci\u00f3n del contenedor, no ponemos la <code>-a</code></p> <p>Recordar tambien, que podemos ejecutar haciendo </p> <pre><code>docker run -d\n</code></pre> <p>pero en este caso, el <code>run</code> reinicializa todo frente al <code>start</code> que mantiene el estado de la \u00faltima ejecuci\u00f3n. </p> <p>Para acceder solo hay que ir a la direcci\u00f3n del anfitri\u00f3n:8069 (http://localhost:8069/), o sea, que el servicio de Odoo es accesible a trav\u00e9s del puerto 8069. En el comando se puede ver como se han redireccionado los puertos con <code>-p 8069:8069</code></p> Primera imagen al acceder al Odoo."},{"location":"5_2_InstalarDocker/#creacion-de-modulos-de-odoo-usando-docker","title":"Creaci\u00f3n de m\u00f3dulos de Odoo usando Docker","text":"<p>Nuestro objetivo final, ser\u00e1 el de crear m\u00f3dulos nuevos o heredados de los ya existente con nuestra propias necesidades.</p> <p>El problema de esta ejecuci\u00f3n es que si perdemos el contenedor, perdemos todo lo que hemos hecho en el. Por lo tanto la soluci\u00f3n ser\u00e1 enlazar carpeta locales con carpetas (o vol\u00famenes) del contenedor, de forma que la informaci\u00f3n no se encontrar\u00e1 f\u00edsicamente en el contenedor, si no en la carpeta que elijamos.</p> <p>As\u00ed pues, para crear nuestros m\u00f3dulos podemos generarlos en un directorio fuera del contenedor y ejecutarlo de esta manera:</p> <pre><code>docker run -v odoo-data:/var/lib/odoo -d -p 8069:8069 --name odoo --link db:db -t odoo\n</code></pre> <p>y lo mismo deber\u00edamos haber hecho con el contenedor de PostgreSQL:</p> <pre><code>docker run -d -v odoo-db:/var/lib/postgresql/data -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo -e POSTGRES_DB=postgres --name db postgres:15\n</code></pre> <p>Mientras estamos desarrollando nuevos m\u00f3dulos, necesitaremos reiniciar el servicio y arrancarlo actualizando un m\u00f3dulo. Primero debemos parar el contenedor, despu\u00e9s iniciarlo indicando que queremos entrar a la consola y finalmente actualizar el m\u00f3dulo.</p> <pre><code>docker stop odoo\ndocker start -a odoo\ndocker exec odoo odoo --config /etc/odoo/odoo.conf -u nombremodulo -d nombasededatos -r odoo -w odoo --db_host 172.17.0.2 --db_port 5432\n</code></pre>"},{"location":"5_2_InstalarDocker/#mejorando-la-creacion-de-modulos","title":"Mejorando la creaci\u00f3n de m\u00f3dulos","text":"<p>Como se puede ver, el \u00faltimo comando es un poco complicado. Por tanto, vamos a hacerlo de forma m\u00e1s ordenada. Para ello necesitamos un archivo propio de configuraci\u00f3n de <code>Odoo</code> al que llamaremos odoo.conf. Podemos utilizar esta plantilla:</p> <pre><code>docker exec odoo cat /etc/odoo/odoo.conf &gt; odoo.conf\n</code></pre> <p>Lo que hemos hecho es copiar el archivo que tiene el contenedor por defecto. Si lo analizamos, no indica correctamente d\u00f3nde est\u00e1 la base de datos, ya que esa informaci\u00f3n la pasamos con el par\u00e1metro --link del docker run. Nosotros tenemos que crear un directorio, poner dentro el archivo, editarlo y a\u00f1adir esta informaci\u00f3n:</p> <pre><code>db_user = odoo\ndb_password = odoo\ndb_host = 172.17.0.2\ndb_port = 5432\n</code></pre> <p>Ahora ya podemos arrancar el contenedor con todo:</p> <pre><code>docker stop odoo\ndocker run --volumes-from odoo -v /home/jose/modules/:/mnt/extra-addons -v /home/jose/config/:/etc/odoo -p 8069:8069 --name odoo2 --link db:db -t odoo\n</code></pre> <p>Observamos que tenemos un directorio para nuestros m\u00f3dulos, otro con el archivo de configuraci\u00f3n, la redirecci\u00f3n del puerto, el nombre del nuevo m\u00f3dulo, el enlace a la base de datos y el tipo de contenedor.</p> <p>Por \u00faltimo, mientras tenemos en marcha el servicio, en otra terminal podemos ejecutar:</p> <pre><code>docker exec odoo odoo -u nombremodulo -d nombasededatos\n</code></pre> <p>Aun con esta mejora, no va a ser una tarea sencilla la gesti\u00f3n de nuestro sistema, por lo que se antoja imprescindible buscar nuevas soluciones</p>"},{"location":"5_2_InstalarDocker/#usando-docker-compose","title":"Usando <code>Docker Compose</code>","text":"<p>El m\u00e9todo anterior supone la ejecuci\u00f3n de un docker run/start muy complejo por el motivo de que se debe ejecutar cada contenedor con una \u00fanica l\u00ednea, y adem\u00e1s tenemos que iniciar los servicios de uno en uno en orden. Esto es un trabajo tedioso, que se puede automatizar y adem\u00e1s es propenso a que tengamos errores. </p> <p>Para evitar errores, podemos usar un docker compose que tiene una configuraci\u00f3n como la que sigue:</p> <pre><code>services:\n  odoo:\n    container_name: odoo\n    image: odoo:18.0\n    depends_on:\n      - db\n    ports:\n      - \"8069:8069\"\n    volumes:\n      - odoo-web-data:/var/lib/odoo\n      - ./config:/etc/odoo\n      - ./addons:/mnt/extra-addons\n    environment:\n      - HOST=db\n      - USER=odoo\n      - PASSWORD=odoo\n    command: --dev=all\n    tty: true\n\n  db:\n    container_name: postgresql\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=odoo\n      - POSTGRES_PASSWORD=odoo\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - odoo-db-data:/var/lib/postgresql/data\n\nvolumes:\n  odoo-web-data:\n  odoo-db-data:\n</code></pre> <p>Observamos que declaramos dos servicios y que odoo depende de db. Tambi\u00e9n hay que indicar qu\u00e9 red utilizan y el resto de datos que normalmente ponemos en el run.</p> <p>Tambi\u00e9n podemos ver que hay unas secciones de volumes donde por ejemplo, para <code>odoo</code> tenemos 3 vol\u00famenes o carpetas que el contenedor tiene redireccionadas a carpetas locales:</p> <ul> <li><code>odoo-web-data</code> ser\u00e1 un volumen en nuestra m\u00e1quina que se crea de forma autom\u00e1tica y que reemplaza la carpeta del contenedor <code>/var/lib/odoo</code></li> <li><code>./config</code> que quiere decir tendremos una subcarpeta donde estar\u00e1 la configuraci\u00f3n de odoo, en vez de estar dentro del contenedor en <code>/etc/odoo</code></li> <li><code>./addons</code> que contienen los m\u00f3dulos (oficiales y los que crearemos) y lo tendremos en local en vez de en el contenedor en <code>/mnt/extra-addons</code></li> </ul> <p>Por otra parte, dentro de esta configuraci\u00f3n tambi\u00e9n es interesante que hemos preparado Odoo para poder trabajar en modo desarrollador, esto es gracias al comando <code>--dev=all</code> que veremos posteriormente con m\u00e1s detalle. Una vez vistas estas puntualizaciones, para montar el sistema: </p> <ol> <li>Creamos una carpeta con el nombre que queramos, por ejemplo <code>odoo-compose</code>.</li> <li>Dentro de esta carpeta creamos un archivo llamado docker-compose.yml con el contenido descrito anteriormente.</li> <li>Desde el terminal, nos ubicamos en la carpeta comentada y solo hay que ejecutar cada vez:</li> </ol> <pre><code>docker compose up -d\n</code></pre> <p>En el caso definido en el fichero de configuraci\u00f3n docker-compose.yml, necesitamos un archivo <code>odoo.conf</code> que podemos extraer de un contenedor sin el volumen de <code>./config</code>.</p> <p>Este fichero de configuraci\u00f3n por defecto, lo podemos obtener por internet, o seguimos los siguientes pasos donde creamos un docker con odoo, le extraemos el fichero de configuraci\u00f3n y lo paramos y eliminamos:</p> <pre><code>docker run -d --name odoo-temp odoo:18.0\ndocker cp odoo-temp:/etc/odoo/odoo.conf ./config/odoo.conf\ndocker rm -f odoo-temp\n</code></pre> <p>Veamos la secuencia de creaci\u00f3n del sistema y copia del fichero de configuraci\u00f3n por defecto:</p> Obtenci\u00f3n de fichero de configuraci\u00f3n odoo.conf. <p>Hemos asociado un volumen a las carpetas de los dos contenedores y por otra parte tenemos en la carpeta del docker compose los directorios <code>config</code> y <code>addons</code>. Esto permite compartir el c\u00f3digo y la configuraci\u00f3n de Odoo sin compartir demasiados archivos o los datos privados de la base de datos. Para compartir solo hay que comprimir o subir a <code>Git</code> la carpeta contenedora de los archivos y carpetas que estamos creando.</p> <p>Si queremos entrar en la base de datos PostgreSQL para hacer cosas manualmente, podemos ejecutar:</p> <pre><code>docker exec -ti postgresql psql -U odoo -d postgres\n</code></pre> <p>Ejecutamos el comando psql de forma interactiva en la base de datos <code>postgres</code> y con el usuario <code>odoo</code>.</p> Verificando que la base de datos esta en marcha. <p>En ocasiones es interesante revisar logs por si tenemos alg\u00fan problema. Para ver los logs podemos hacer si no estamos attached con la ejecuci\u00f3n del docker, tambi\u00e9n podemos hacer :</p> <pre><code>docker logs odoo -f\n</code></pre> <p>Con este comando filtramos solo los mensajes de logs de odoo. </p> <p>Tip</p> <p>Los logs se ven en color gracias a poner <code>tty:true</code> en el archivo de configuraci\u00f3n.</p>"},{"location":"5_2_InstalarDocker/#activando-odoo-en-modo-desarrollador","title":"Activando <code>Odoo</code> en Modo desarrollador","text":"<p>Como se puede ver, hemos configurado un directorio para los m\u00f3dulos en <code>./addons</code>. En este directorio haremos los <code>scaffold</code>. </p> <p>Nota</p> <p>Un scaffold es una herramienta que te permite generar autom\u00e1ticamente la estructura b\u00e1sica de un m\u00f3dulo personalizado. Es como un \"esqueleto\" inicial que incluye todos los archivos y carpetas necesarios para empezar a desarrollar un m\u00f3dulo</p> <p>Adem\u00e1s, hemos a\u00f1adido al comando <code>--dev=all</code> a la ejecuci\u00f3n de <code>docker</code>. Esto simplifica mucho el desarrollo, ya que muchos de los cambios provocan un reinicio del servidor y actualizaci\u00f3n de algunas partes de los m\u00f3dulos.</p> <p>La opci\u00f3n <code>--dev &lt;feature,feature,...,feature&gt;</code> en Odoo permite activar varias caracter\u00edsticas \u00fatiles para el desarrollo. Esta opci\u00f3n no debe usarse en producci\u00f3n, ya que est\u00e1 pensada exclusivamente para facilitar la tarea de los desarrolladores. A continuaci\u00f3n, se explican las opciones disponibles:</p> <ul> <li>all: Activa todas las funcionalidades de desarrollo descritas a continuaci\u00f3n.</li> <li>xml: Carga las plantillas QWeb directamente desde los archivos XML en lugar de la base de datos. Si una plantilla se modifica en la base de datos, no se volver\u00e1 a cargar desde el archivo XML hasta la pr\u00f3xima actualizaci\u00f3n o reinicio. Adem\u00e1s, las plantillas no se traducen cuando se usa esta opci\u00f3n.</li> <li>reload: Reinicia el servidor autom\u00e1ticamente cuando se detecta un cambio en un archivo Python.</li> <li>qweb: Permite interrumpir la ejecuci\u00f3n de una plantilla QWeb si un nodo contiene <code>t-debug=\"debugger\"</code>, lo que facilita la depuraci\u00f3n.</li> <li>(i)p(u)db: Activa un depurador de Python (como <code>pdb</code>, <code>ipdb</code> o <code>pudb</code>) cuando se produce un error inesperado, antes de registrarlo en los logs y devolverlo.</li> <li>werkzeug: Muestra la traza completa del error en la p\u00e1gina web cuando se produce una excepci\u00f3n, algo muy \u00fatil para identificar problemas en el c\u00f3digo.</li> </ul> <p>Esta opci\u00f3n es muy \u00fatil durante el desarrollo, ya que facilita la depuraci\u00f3n de c\u00f3digo, la recarga en caliente de archivos y la revisi\u00f3n de errores de manera m\u00e1s visual. </p> <p>Sin embargo, est\u00e1 limitada en ciertos aspectos. Por ejemplo, vuelve a ejecutar el Python pero no crea nuevos modelos o campos. Tampoco actualiza todos los XML, solo el contenido de las vistas en <code>ir.ui.view</code> que ya se han registrado actualizando el m\u00f3dulo. Por tanto, no siempre sirve y menos en las etapas iniciales de la creaci\u00f3n de m\u00f3dulos.</p> <p>Como el comando con <code>--dev=all</code> no actualiza la base de datos, la creaci\u00f3n de nuevas vistas, nuevos modelos o campos no se actualizar\u00e1 y dar\u00e1 errores. Una soluci\u00f3n es a\u00f1adir al comando:</p> <pre><code>command: [\"--dev=all\", \"-u\", \"modulo\", \"-d\", \"basededatos\"]\n</code></pre> <p>Pero solo cuando ya existe la base de datos y el m\u00f3dulo est\u00e1 instalado. En caso de arrancar docker con este comando por primera vez, se crear\u00e1 la base de datos con una configuraci\u00f3n est\u00e1ndar que no nos interesa, en ingl\u00e9s, sin datos de demo y con usuario/contrase\u00f1a admin/admin.</p> <p>Adem\u00e1s, solo se ejecutar\u00e1 cuando arranquemos Docker, por lo tanto, hay que hacer un <code>docker-compose down</code> y volver a arrancar los contenedores de nuevo. </p> <p>Configuraci\u00f3n de VSCode</p> <p>Para no tener que estar reiniciando <code>docker</code> desde la l\u00ednea de comando, podemos a\u00f1adir a <code>Visual Studio Code</code> una extensi\u00f3n como VS Code Action Buttons. Una vez instalada esta extensi\u00f3n, vamos la configuraci\u00f3n de la extensi\u00f3n y completamos el <code>json</code>  de configuraci\u00f3n as\u00ed:</p> <pre><code>\"commands\": [\n{\n     \"name\": \"$(triangle-right) Run Odoo\",\n     \"color\": \"purple\",\n     \"singleInstance\": true,\n     \"command\": \"docker-compose down &amp;&amp; docker-compose up -d &amp;&amp; docker logs odoo -f\"\n},\n{\n     \"name\": \"$(triangle-right) Rerun Odoo\",\n     \"color\": \"purple\",\n     \"singleInstance\": true,\n     \"command\": \"docker-compose restart odoo &amp;&amp; docker logs odoo -f\"\n}\n],\n</code></pre> <p>El primer comando lo reinicia todo, tanto la base de datos como Odoo y elimina los contenedores para recrearlos. </p> <p>Esto puede solucionar algunos problemas. Pero en principio, el segundo reinicia solo el contenedor Odoo sin recrearlo. Es m\u00e1s r\u00e1pido y tambi\u00e9n actualiza la base de datos. El comando se puede utilizar en una terminal si no queremos hacer los botones o estamos en un entorno sin interfaz gr\u00e1fica.</p>"},{"location":"5_2_InstalarDocker/#creacion-de-un-nuevo-modulo","title":"Creaci\u00f3n de un nuevo m\u00f3dulo","text":"<p>Uno de nuestros objetivos en el curso ser\u00e1 el de dotar de nuevas funcionalidades personalizadas a el ERP base que ofrece Odoo, por lo tanto deberemos aprender a crear nuevos m\u00f3dulos.</p> <p>Veamos de forma sencilla c\u00f3mo crear m\u00f3dulos nuevos y posteriormente profundizaremos durante el curso:</p> <p>Para crear un m\u00f3udulo ejecutamos hacemos un scaffold que hemos comentado antes, damos un nombre al m\u00f3dulo (en este caso pruebas) y le decimos que los vamos a ubicar en la carpeta <code>extra-addons</code> del contenedor que se encuentra redireccionada a la carpeta <code>./addons</code> que tenemos en la uticaci\u00f3n del docker-compose</p> <pre><code>docker exec -ti odoo odoo scaffold pruebas /mnt/extra-addons\n</code></pre> <p>Posteriormente es aconsejable dar permisos para poder acceder a esta carpeta. Debemos tener en cuenta siempre los permisos para que tanto el proceso docker que se ejecuta como <code>root</code> como nosotros con nuestro usuario podemos acceder a la carpeta.</p> <pre><code>docker exec -ti odoo chmod 777 -R /mnt/extra-addons/pruebas\n</code></pre> <p>y podemos comprobar como se ha creado una carpeta <code>pruebas</code> que contiene la estructura de nuestro nuevo m\u00f3dulo</p> Creaci\u00f3n de m\u00f3dulo de pruebas. <p>Tip</p> <p>Si queremos ejecutar el <code>shell</code> de Odoo podemos ejecutar el comando:</p> <pre><code>docker compose exec odoo odoo shell -d pruebas --db_host db --db_password odoo\n</code></pre> <p>Aqu\u00ed estamos diciendo que ejecute en el contenedor odoo el comando odoo especificando la base de datos y el host y password de postgres. Es necesario especificar la base de datos porque Docker Compose crea m\u00faltiples contenedores Docker bas\u00e1ndose en la configuraci\u00f3n del archivo <code>docker-compose.yml</code>. En este caso, hay varios contenedores en ejecuci\u00f3n, uno que corre Odoo, otro que corre PostgreSQL, y posiblemente otros m\u00e1s.</p> <p>Por \u00faltimo, debemos tener en cuenta que cada contenedor es una m\u00e1quina virtual separada con su propia direcci\u00f3n IP, por lo que si ejecutas este comando:</p> <pre><code>docker exec -it odoo_odoo_1 bash -c \"odoo shell -d postgres\"\n</code></pre> <p>Odoo intentar\u00e1 conectarse a la base de datos usando <code>localhost</code>, pero en este contexto, <code>localhost</code> se refiere al propio contenedor de Odoo, no al de PostgreSQL.</p> <p>Para solucionarlo, debes indicar expl\u00edcitamente el host de la base de datos y la contrase\u00f1a en el comando.</p> <p>Para ello, podemos ejecutar el siguiente comando docker que nos lista las IP de los contenedores que tenemos activos.</p> <pre><code>docker ps -q | xargs -n 1 docker inspect --format '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'\n</code></pre> Listando IPs de contenedores activos."},{"location":"5_2_InstalarDocker/#poner-en-produccion-con-docker","title":"Poner en producci\u00f3n con Docker","text":"<p>Si podemos dejar corriendo un Docker en un servidor con conexi\u00f3n a Internet y los puertos expuestos, ya estar\u00eda en producci\u00f3n. Sin embargo, esto supone varios problemas de seguridad y rendimiento.</p>"},{"location":"5_2_InstalarDocker/#docker-de-nginx","title":"Docker de Nginx","text":"<p>Podemos a\u00f1adir al archivo de Docker Compose la configuraci\u00f3n de un contenedor Nginx. Este implementar\u00e1 HTTPS y har\u00e1 de proxy a Odoo.</p> <p>Nginx</p> <p>Un servidor Nginx (pronunciado \"engine-x\") es un software de servidor web de alto rendimiento que tambi\u00e9n puede funcionar como:</p> <ul> <li>Servidor proxy inverso</li> <li>Balanceador de carga</li> <li>Servidor de correo (limitado)</li> <li>Proxy para protocolos como HTTP, HTTPS, SMTP, POP3 y IMAP</li> </ul> <p>Usaremos un archivo Dockerfile basado en la imagen oficial de Nginx, pero adaptada a nuestras necesidades. Los certificados se generan de manera autom\u00e1tica y est\u00e1n autofirmados.</p> <p>Aunque los navegadores muestran un aviso de error, la informaci\u00f3n sigue viajando de forma segura. Lo que ocurre es que no hay ninguna autoridad certificadora que haya validado el certificado (no es lo mismo un certificado autofirmado que ninguna protecci\u00f3n).</p> <p>Se podr\u00eda hacer un script con CertBot para utilizar Let's Encrypt y renovar el certificado cada tres meses.</p> <p>En Nginx, definimos la misma carpeta para HTTP y HTTPS, intentando simplificar al m\u00e1ximo la configuraci\u00f3n y automatizar la creaci\u00f3n tanto de la imagen como del contenedor con scripts.</p> <p>El primer paso es crear nuestra clave y certificado autofirmado dentro de un directorio nginx junto al resto de archivos de los dockers:</p> <pre><code>mkdir nginx\ncd nginx\nopenssl req -x509 -sha256 -nodes -newkey rsa:2048 -keyout ser.key -out ser.pem\n</code></pre> <p>Despu\u00e9s creamos un <code>Dockerfile</code> dentro de la misma carpeta. Este archivo servir\u00e1 para ejecutar ciertos comandos cada vez que se lance el docker:</p> <pre><code>FROM nginx\n\nRUN rm -f /etc/nginx/conf.d/default.conf\nCOPY nginx.conf /etc/nginx/conf.d/\nCOPY ser.key /etc/nginx/\nCOPY ser.pem /etc/nginx/\n\nEXPOSE 80 443\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre> <p>A\u00f1adiremos al <code>docker-compose.yml</code>:</p> <pre><code>  nginx:\n    build:\n      context: ./nginx\n      dockerfile: Dockerfile  # este campo es opcional si el archivo se llama as\u00ed\n    container_name: nginx\n    depends_on:\n      - odoo\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n</code></pre> <p>Falta crear el <code>nginx.conf</code> que ser\u00e1 la configuraci\u00f3n:</p> <pre><code># odoo server\nupstream odoo {\n  server odoo:8069;\n}\nupstream odoochat {\n  server odoo:8072;\n}\n# Se han definido los upstream a localhost y a los puertos determinados\n\n# http -&gt; https (todas las peticiones por HTTP se redirigen a HTTPS)\nserver {\n   listen 80;\n   server_name _;\n   # Si tuvi\u00e9ramos nombre de dominio lo pondr\u00edamos, en otro caso: _\n   rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n  listen 443 ssl;\n  server_name _;\n  # La _ porque en el ejemplo no tenemos dominio, como arriba\n  proxy_read_timeout 720s;\n  proxy_connect_timeout 720s;\n  proxy_send_timeout 720s;\n\n  # Add Headers for odoo proxy mode\n  proxy_set_header X-Forwarded-Host $host;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header X-Forwarded-Proto $scheme;\n  proxy_set_header X-Real-IP $remote_addr;\n\n  # SSL parameters\n  ssl_certificate /etc/nginx/ser.pem;\n  ssl_certificate_key /etc/nginx/ser.key;\n  # IMPORTANTE: poner bien las rutas de los certificados\n  ssl_session_timeout 30m;\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n  ssl_prefer_server_ciphers on;\n\n  # log\n  access_log /var/log/nginx/odoo.access.log;\n  error_log /var/log/nginx/odoo.error.log;\n\n  # Redirect requests to odoo backend server\n  location / {\n    proxy_redirect off;\n    proxy_pass http://odoo;\n  }\n  location /longpolling {\n      proxy_pass http://odoochat;\n  }\n\n  # common gzip\n  gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;\n  gzip on;\n}\n</code></pre>"},{"location":"5_2_InstalarDocker/#workers","title":"Workers","text":"<p>Por defecto, Odoo es <code>multithread</code>. Esto significa que puede mantener varios hilos de ejecuci\u00f3n. Sin embargo, es algo ineficiente en producci\u00f3n si tienes muchos usuarios. Es mejor, adem\u00e1s, que sea <code>multi-processing</code> para poder distribuir la carga entre distintos procesadores o n\u00facleos (no disponible en Windows).</p> <p>Para conseguirlo, solo hay que indicar en el archivo de configuraci\u00f3n odoo.conf</p> Edici\u00f3n del fichero de configuraci\u00f3n de Odoo. <p>A\u00f1adiremos al final la cantidad de <code>workers</code> que queremos, adem\u00e1s de otros par\u00e1metros:</p> <pre><code>[options]\nlimit_memory_hard = 1677721600\nlimit_memory_soft = 629145600\nlimit_request = 8192\nlimit_time_cpu = 600\nlimit_time_real = 1200\nmax_cron_threads = 1\nworkers = 8\n</code></pre> <p>Como regla aproximada, se pueden calcular los workers \u00f3ptimos como 1 worker por cada 6 usuarios simult\u00e1neos y el doble + 1 de workers por CPU. As\u00ed, si tenemos un servidor con 4 n\u00facleos, 8 threads y unos 60 usuarios simult\u00e1neos:</p> <ul> <li>60/6 \u2248 10 workers</li> <li>4*2+1 = 9 workers que soporta la m\u00e1quina</li> <li>En este caso, se pueden utilizar 8 workers + 1 para el cron</li> <li>La RAM, de forma simple, se puede estimar en 1GB por worker. Sin embargo, hay peticiones que no necesitan m\u00e1s de 150MB. Seg\u00fan la documentaci\u00f3n de Odoo, para 9 workers: 9 * ((0.8150) + (0.21024)) \u2248 3GB de RAM m\u00ednimo.</li> </ul>"},{"location":"5_3_InstalarUbuntu/","title":"5.3. Instalaci\u00f3n en Ubuntu","text":""},{"location":"5_3_InstalarUbuntu/#instalar-en-debian-y-ubuntu","title":"Instalar en Debian y Ubuntu","text":"<p>Antes de nada, hay que preparar un poco el sistema:</p> <p>En el caso de Ubuntu o Debian, que es el que nos interesa, Odoo proporciona unos repositorios llamados Nightly, que pueden ser a\u00f1adidos al sources.list para instalar de manera autom\u00e1tica todo. Estos repositorios se actualizan cada noche, por lo que es posible que, con el tiempo, algunas funciones o archivos cambien si actualizamos.</p> <p>En principio, todo deber\u00eda funcionar como indican los manuales, pero si necesitamos utilizar utf-8 por el idioma, hay que hacer algunos pasos previos.</p> <p>Es posible que Debian o Ubuntu no tenga bien configurados los locales. Se puede hacer con:</p> <pre><code>dpkg-reconfigure locales\n</code></pre> <p>Y seleccionar los de es_ES y el de UTF8 por defecto. Es necesario cerrar la sesi\u00f3n y volver a entrar.</p> <p>Si <code>dpkg-reconfigure</code> no muestra un asistente, puedes hacer:</p> <pre><code>locale-gen \"es_ES.UTF-8\"\ndpkg-reconfigure locales\n</code></pre> <p>Enlace a los repositorios: https://nightly.odoo.com/</p> <p>Y como indica el propio manual, se puede hacer todo con estos comandos (el primero si estamos en Debian):</p> <pre><code>sudo apt-get install ca-certificates\nwget -O - https://nightly.odoo.com/odoo.key | sudo gpg --dearmor -o /usr/share/keyrings/odoo-archive-keyring.gpg\necho 'deb [signed-by=/usr/share/keyrings/odoo-archive-keyring.gpg] https://nightly.odoo.com/16.0/nightly/deb/ ./' | sudo tee /etc/apt/sources.list.d/odoo.list\nsudo apt-get update &amp;&amp; sudo apt-get install odoo\n</code></pre> <p>Estos comandos instalan los certificados que los navegadores o, en este caso, <code>wget</code> necesitan para admitir HTTPS, despu\u00e9s descargan la clave, a\u00f1aden el repositorio e instalan Odoo.</p> <p>A continuaci\u00f3n, hay que ir a la direcci\u00f3n en el navegador:</p> <pre><code>http://&lt;ip o url&gt;:8069\n</code></pre> <p>Asciinema. Video del proceso.</p>"},{"location":"5_3_InstalarUbuntu/#configuracion-de-la-ruta-de-los-modulos","title":"Configuraci\u00f3n de la ruta de los m\u00f3dulos","text":"<p>Como la instalaci\u00f3n de Odoo crea el usuario odoo, que es el que debemos utilizar para el desarrollo, vamos a asignarle una contrase\u00f1a y le pondremos como shell <code>bash</code>:</p> <pre><code>sudo passwd odoo\nsudo usermod -s /bin/bash odoo\n</code></pre> <p>Warning</p> <p>A partir de este momento, todos los comandos deben ejecutarse con el usuario odoo.  O nos logeamos como usuario odoo o mejor hacemos <code>su odoo</code></p> <p>La configuraci\u00f3n del servidor Odoo tiene una opci\u00f3n llamada addons-path. Podemos a\u00f1adir m\u00e1s rutas para nuestros addons personalizados. Se puede dejar de forma definitiva en el archivo de configuraci\u00f3n o iniciar el servidor indicando la ruta de los addons:</p> <pre><code>odoo -d demodb --addons-path=\"&lt;ruta&gt;\"\n</code></pre> <p>Si queremos que quede guardado de forma definitiva, hay que a\u00f1adir --save al comando. Los comandos ser\u00edan, por tanto:</p> <pre><code>mkdir /var/lib/odoo/modules\nodoo scaffold pruebas /var/lib/odoo/modules\nodoo --addons-path=\"/var/lib/odoo/modules,/usr/lib/python3/dist-packages/odoo/addons\" --save\n</code></pre> <p>Tip</p> <p>La opci\u00f3n --save guarda la configuraci\u00f3n en <code>$HOME/.odoorc</code>, que es un archivo para el usuario odoo. Si queremos que sea para todos los usuarios que puedan ejecutar el servidor odoo, se puede poner en el archivo de <code>/etc/odoo</code>.</p>"},{"location":"5_3_InstalarUbuntu/#depurar-odoo","title":"Depurar Odoo","text":"<p>Para crear m\u00f3dulos o ver los problemas que est\u00e1n ocurriendo, es necesario leer los archivos de log, pero existe una manera m\u00e1s eficiente de hacerlo. Si observamos el comando que realmente est\u00e1 ejecutando Odoo:</p> <pre><code>python3 /usr/bin/odoo --config /etc/odoo/odoo.conf --logfile /var/log/odoo/odoo-server.log\n</code></pre> <p>Podemos ver que la opci\u00f3n <code>--logfile</code> env\u00eda la salida a un archivo. Si detenemos el servicio con:</p> <p></p><pre><code>systemctl stop odoo\n</code></pre> o <pre><code>/etc/init.d/odoo stop\n</code></pre><p></p> <p>Podemos iniciar sesi\u00f3n con el usuario <code>odoo</code> (es necesario que pueda iniciar sesi\u00f3n en Linux) y ejecutar:</p> <pre><code>odoo --config /etc/odoo/odoo.conf\n</code></pre> <p>De esta manera, los mensajes del servidor aparecen en tiempo real en la consola.</p> <p>Si adem\u00e1s queremos actualizar un m\u00f3dulo al arrancar, podemos especificar la base de datos y el m\u00f3dulo a actualizar:</p> <pre><code>odoo --config /etc/odoo/odoo.conf -u modulo -d empresa\n</code></pre> <p>Puede que nuestro usuario <code>odoo</code> tenga una configuraci\u00f3n personalizada. En ese caso, habr\u00eda que hacer, por ejemplo:</p> <pre><code>odoo --config /var/lib/odoo/.odoorc -d empresa -u modulo\n</code></pre> <p>De hecho, una vez hecho el <code>--save</code>, cada vez que ejecutamos el comando odoo, busca el archivo <code>.odoorc</code> en el directorio personal del usuario. Por tanto, solo hay que hacer:</p> <pre><code>odoo -d empresa -u modulo\n</code></pre> <p>Adem\u00e1s, podemos modificar el nivel de log con la opci\u00f3n <code>--log-level</code>, por ejemplo: <code>--log-level=debug</code>.</p> <p>Asciinema con todos los pasos para depurar.</p> <p>Para saber m\u00e1s, puedes consultar la ayuda:</p> <pre><code>odoo --help\n</code></pre> <p>O la documentaci\u00f3n oficial: https://www.odoo.com/documentation/12.0/reference/cmdline.html</p>"},{"location":"5_3_InstalarUbuntu/#mejorar-la-salida-de-log","title":"Mejorar la salida de Log","text":"<p>Para a\u00f1adir salida de log en nuestros m\u00e9todos y facilitar la depuraci\u00f3n, se puede utilizar la API de Odoo:</p> <p>Al principio del archivo <code>.py</code>:</p> <pre><code>from openerp import models, fields, api\nimport logging\n\n_logger = logging.getLogger(__name__)\n</code></pre> <p>Dentro de las funciones:</p> <pre><code>_logger.debug(\"Usa _logger.debug para depuraci\u00f3n, solo para este prop\u00f3sito.\")\n_logger.info(\"Usa _logger.info para mensajes informativos. Se utiliza para notificar algo importante.\")\n_logger.warning(\"Usa _logger.warning para problemas menores, que no har\u00e1n fallar tu m\u00f3dulo.\")\n_logger.error(\"Usa _logger.error para informar de una operaci\u00f3n fallida.\")\n_logger.critical(\"Usa _logger.critical para mensajes cr\u00edticos: si esto aparece, el m\u00f3dulo dejar\u00e1 de funcionar.\")\n# \u00bfQuieres incluir datos de tu campo? P\u00e1salos en el contexto, obt\u00e9nlos del pool o del diccionario.\n_logger.critical(\"El nombre '\" + str(record.get('name')) + \"' no es v\u00e1lido para nosotros.\")\n</code></pre>"},{"location":"5_3_InstalarUbuntu/#opciones-de-log","title":"Opciones de log","text":"<p>Por defecto, Odoo env\u00eda su log a un archivo en /var/log/odoo/, pero se puede redirigir a otro archivo con --log-file=LOGFILE.</p> <p>Si queremos m\u00e1s detalle en determinadas acciones de Odoo, podemos a\u00f1adir al comando las siguientes opciones:</p> <ul> <li>--log-request: Muestra las peticiones RPC (remote procedure call) hechas por http desde el cliente.</li> <li>--log-response: Muestra el contenido de la respuesta que da el servidor a las peticiones anteriores. Muy \u00fatil para saber qu\u00e9 est\u00e1 enviando y c\u00f3mo lo interpreta el cliente.</li> <li>--log-web: Da m\u00e1s detalles de todas las peticiones GET o POST que se hacen a la web.</li> <li>--log-sql: Muestra el SQL que lanza al servidor PostgreSQL. Esta opci\u00f3n ayuda a entender c\u00f3mo funciona el ORM.</li> <li>--log-level=LOG_LEVEL</li> </ul> <pre><code>['info', 'debug_rpc', 'warn', 'test', 'critical', 'debug_sql', 'error', 'debug', 'debug_rpc_answer', 'notset']\n</code></pre>"},{"location":"5_3_InstalarUbuntu/#modo-debug","title":"Modo debug","text":"<p>Odoo permite entrar en modo debug con --debug.</p> <p>Tambi\u00e9n se puede importar la biblioteca pdb y colocar un trace en el c\u00f3digo que nos interesa:</p> <pre><code>import pdb\n...\npdb.set_trace()\n</code></pre> <p>Una vez dentro, se pueden utilizar los comandos de pdb: https://docs.python.org/3/library/pdb.html</p>"},{"location":"5_3_InstalarUbuntu/#poner-en-produccion-en-ubuntu","title":"Poner en producci\u00f3n en Ubuntu","text":"<p>https://www.odoo.com/documentation/17.0/administration/install/deploy.html?highlight=workers</p>"},{"location":"5_3_InstalarUbuntu/#odoo-por-https","title":"Odoo por HTTPS","text":"<p>El servidor Odoo, por defecto, ofrece su web en el puerto 8069 y en HTTP, es decir, sin capa de seguridad SSL.</p> <p>Para dotarlo de esa seguridad, necesitamos utilizar un servidor web que act\u00fae como proxy y proporcione la conectividad por HTTPS.</p> <p>Situaci\u00f3n inicial:</p> <pre><code> ------------               -----------\n|            |        8069|            |\n|  Cliente   |&lt;----------&gt;|  Servidor  |\n|            |            |   Odoo     |\n ------------              ------------\n</code></pre> <p>Situaci\u00f3n que buscamos:</p> <pre><code> ------------              -------------------\n|            |        443 |                   |\n|  Cliente   |&lt;----------&gt;|   Nginx &lt;---\u2510     |\n|            |            |              |    |\n ------------             |              |8069|\n                          |              v    |\n                          |            ------ |\n                          |            |Odoo| |\n                          |            ------ |\n                           -------------------\n</code></pre> <p>Todos los servicios que utilizan SSL necesitan un certificado. En una situaci\u00f3n ideal, disponemos de un certificado firmado por una entidad certificadora. Si no es as\u00ed, debemos crear uno autosignado.</p> <p>Tutorial para crear el certificado</p> <pre><code>    # openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/odoo-selfsigned.key -out /etc/ssl/certs/odoo-selfsigned.crt\n    Generating a 2048 bit RSA private key\n    ...........................................................................................................+++\n    ...........................................................................................+++\n    writing new private key to '/etc/ssl/private/odoo-selfsigned.key'\n    -----\n    You are about to be asked to enter information that will be incorporated\n    into your certificate request.\n    What you are about to enter is what is called a Distinguished Name or a DN.\n    There are quite a few fields but you can leave some blank\n    For some fields there will be a default value,\n    If you enter '.', the field will be left blank.\n    -----\n    Country Name (2 letter code) [AU]:ES\n    State or Province Name (full name) [Some-State]:Valencia\n    Locality Name (eg, city) []: X\u00e0tiva\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:\n    Organizational Unit Name (eg, section) []:\n    Common Name (e.g. server FQDN or YOUR name) []: nom o domini\n    Email Address []: correu@servidor.com\n</code></pre> <p>A continuaci\u00f3n se debe configurar el https en Nginx para hacer el proxy en Odoo. manual oficial</p> <p>En /etc/odoo.conf:</p> <p></p><pre><code>proxy_mode = True \n</code></pre> En /etc/nginx/sites-enabled/odoo.conf:<p></p> <pre><code>    #odoo server\n    upstream odoo {\n     server 127.0.0.1:8069;\n    }\n    upstream odoochat {\n     server 127.0.0.1:8072;\n    }\n    # S'han definit els upstream a localhost i als port determinats\n\n    # http -&gt; https (totes les peticions per HTTP se reformulen a HTTPS)\n    server {\n       listen 80;\n       server_name _;                            \n       # Si tinguerem nom de domini el ficariem, en altre cas: _\n       rewrite ^(.*) https://$host$1 permanent;\n    }\n\n    server {\n     listen 443;\n     server_name _;\n     # La _ perqu\u00e8 en l'exemple no tenim domini, com dalt\n     proxy_read_timeout 720s;\n     proxy_connect_timeout 720s;\n     proxy_send_timeout 720s;\n\n     # Add Headers for odoo proxy mode\n     proxy_set_header X-Forwarded-Host $host;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;\n     proxy_set_header X-Real-IP $remote_addr;\n\n     # SSL parameters\n     ssl on;\n     ssl_certificate /etc/ssl/certs/odoo-selfsigned.crt;\n     ssl_certificate_key /etc/ssl/private/odoo-selfsigned.key ;\n     # IMPORTANT: ficar b\u00e9 les rutes dels certificats\n     ssl_session_timeout 30m;\n     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n     ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n     ssl_prefer_server_ciphers on;\n\n     # log\n     access_log /var/log/nginx/odoo.access.log;\n     error_log /var/log/nginx/odoo.error.log;\n\n     # Redirect requests to odoo backend server\n     location / {\n       proxy_redirect off;\n       proxy_pass http://odoo;\n     }\n     location /longpolling {\n         proxy_pass http://odoochat;\n     }\n\n     # common gzip\n     gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;\n     gzip on;\n    }\n</code></pre> <p>Tambi\u00e9n es necesario borrar el default de sites-enabled de nginx o modificarlo para que no afecte al puerto 80 de Odoo.</p> <p>Ahora se reinician tanto Odoo como nginx.</p>"},{"location":"5_3_InstalarUbuntu/#seguridad-en-odoo","title":"Seguridad en Odoo","text":"<p>Cuando hablamos de seguridad en Odoo nos referimos tanto a cuestiones generales que afectan a cualquier aplicaci\u00f3n web como a aspectos espec\u00edficos de Odoo. En general, cualquier aplicaci\u00f3n web debe cumplir unos m\u00ednimos de seguridad, como ofrecer el servicio solo por HTTPS, controlar los puertos, evitar ataques DDOS, utilizar contrase\u00f1as seguras, etc.</p> <p>En cuanto al HTTPS, en los apartados correspondientes se explica c\u00f3mo configurarlo, aunque lo ideal ser\u00eda contratar un certificado v\u00e1lido. La seguridad y alta disponibilidad del servidor es un tema complejo que excede el alcance de este m\u00f3dulo y puede ser tarea del ciclo de ASIX. Sin embargo, s\u00ed podemos realizar acciones espec\u00edficas en Odoo para evitar problemas o recuperarnos r\u00e1pidamente de ellos.</p>"},{"location":"5_3_InstalarUbuntu/#persistencia-de-los-datos","title":"Persistencia de los datos","text":"<p>Una empresa no puede permitirse perder datos. Existen m\u00faltiples formas de evitar la p\u00e9rdida de datos en Odoo. Si tenemos una instalaci\u00f3n on-premise, debemos controlar todos los factores, tanto f\u00edsicos como l\u00f3gicos. Esto implica varias tareas imprescindibles:</p>"},{"location":"5_3_InstalarUbuntu/#copias-de-seguridad","title":"Copias de seguridad","text":"<p>Odoo, en su interfaz gr\u00e1fica, permite exportar tablas y realizar copias de seguridad manuales de tablas individuales. Esto, por supuesto, solo es recomendable para exportaciones o importaciones puntuales.</p> <p>En la interfaz gr\u00e1fica tambi\u00e9n se puede acceder al gestor de bases de datos y exportar o importar el backup. Ser\u00eda recomendable hacerlo peri\u00f3dicamente. Si queremos que sea autom\u00e1tico, se puede programar externamente un servicio que, cada cierto tiempo, se conecte de forma remota por XML-RPC:</p> <pre><code>import requests\n\n# Datos de conexi\u00f3n\nodoo_host = 'https://tuservidorodoo.com'  # o http://localhost:8069 si es local\ndatabase = 'tu_basededatos'\nadmin_password = 'tu_contrase\u00f1a_admin'\n\n# URL para hacer backup\nurl = f'{odoo_host}/web/database/backup'\n\n# Datos para la solicitud POST\npayload = {\n    'master_pwd': admin_password,\n    'name': database,\n    'backup_format': 'zip'  # o 'dump'\n}\n\n# Realizar la solicitud POST\nresponse = requests.post(url, data=payload)\n\n# Verificar la respuesta y guardar el archivo si es v\u00e1lida\nif response.status_code == 200:\n    filename = f\"{database}_backup.zip\"\n    with open(filename, 'wb') as f:\n        f.write(response.content)\n    print(f\"Backup guardado como {filename}\")\nelse:\n    print(f\"Error al hacer backup: {response.status_code} - {response.text}\")\n</code></pre> <p>Tambi\u00e9n podemos hacerlo a nivel de la l\u00ednea de comandos de la base de datos:</p> <pre><code>pg_dump db_name\n</code></pre> <p>La copia de seguridad de la base de datos no incluye los archivos y fotos. Ser\u00e1 necesario copiar el directorio <code>filestore</code> si realizamos la copia a nivel de base de datos.</p> <p>A un nivel m\u00e1s bajo, se puede hacer una copia de seguridad del sistema de archivos o incluso de las particiones.</p> <p>Es importante destacar que dicha copia de seguridad no debe almacenarse en el mismo disco duro que la base de datos original ni en la misma ubicaci\u00f3n f\u00edsica.</p>"},{"location":"5_3_InstalarUbuntu/#alta-disponibilidad","title":"Alta disponibilidad","text":"<p>Un sistema empresarial debe estar alojado en un servidor seguro a nivel f\u00edsico. Esto implica el uso de SAIs y RAIDs o sistemas similares. Si estamos utilizando un VPS en la nube, normalmente no tendremos que preocuparnos de esto. En caso contrario, necesitaremos un CPD, aunque sea sencillo, con seguridad f\u00edsica, sistemas de alimentaci\u00f3n ininterrumpida y discos redundantes, adem\u00e1s de sistemas de copias de seguridad remotas. El sistema deber\u00eda poder recuperarse de un fallo sin interrumpir el servicio.</p>"},{"location":"5_3_InstalarUbuntu/#usuarios-y-permisos","title":"Usuarios y permisos","text":"<p>Odoo cuenta con un sistema complejo de usuarios, grupos, roles y permisos. Un administrador de Odoo debe gestionar de forma precisa estos permisos. Adem\u00e1s, debemos distinguir los diferentes tipos de usuarios que hay que gestionar, de mayor a menor nivel de privilegio:</p> <ul> <li>Root del sistema operativo: Usuario con control total sobre el sistema operativo; deber\u00eda ser un administrador de sistemas.</li> <li>Administrador de PostgreSQL: Tiene control total sobre los datos de toda la empresa y posiblemente de varias empresas. Si PostgreSQL se utiliza para otros fines adem\u00e1s de Odoo, tambi\u00e9n tiene poder sobre ellos.</li> <li>Administrador de bases de datos de Odoo: Su contrase\u00f1a est\u00e1 en <code>odoo.conf</code> y puede crear, borrar y hacer copias de todas las bases de datos. Accede normalmente v\u00eda web. Es posible que los programadores no necesiten este nivel de acceso.</li> <li>Administrador t\u00e9cnico de una base de datos: Puede administrar m\u00f3dulos y cambiar la interfaz. Los programadores suelen necesitar este nivel de permisos.</li> <li>Administrador de la empresa: Puede administrar todo lo relativo al negocio, pero no puede instalar m\u00f3dulos ni programar. Normalmente son los propietarios o responsables de la empresa. No es recomendable que una persona sin experiencia en programaci\u00f3n tenga m\u00e1s permisos.</li> <li>Usuarios normales: Vendedores, administrativos, etc. Pueden acceder a ciertas partes del backend. Sus permisos dependen del grupo o rol al que pertenezcan.</li> <li>Clientes y proveedores: Normalmente tienen acceso a la p\u00e1gina web, que puede estar hecha con Odoo. Tambi\u00e9n pueden tener acceso a una API desarrollada por nosotros si queremos automatizar las relaciones comerciales con ellos.</li> </ul>"},{"location":"5_3_InstalarUbuntu/#creacion-de-una-base-de-datos","title":"Creaci\u00f3n de una base de datos","text":"<p>Tip</p> <p>En general no cal fer aquest pas i \u00e9s recomanable fer la base de dades per la interf\u00edcie web.</p> <p>En el usuario de odoo, creamos una base de datos y le aplicamos el esquema de datos de Odoo:</p> <pre><code>createdb --encoding=UTF-8 --template=template0 testdb\nodoo -d testdb\n</code></pre> <p>Esto crea una base de datos con los datos de prueba para empezar a trabajar.</p> <p>Por defecto, el usuario ser\u00e1 admin con contrase\u00f1a admin.</p> <p>Comandos b\u00e1sicos de postgreSQL</p>"},{"location":"5_3_InstalarUbuntu/#errores-documentados","title":"Errores documentados","text":"<p>Tip</p> <p>Importante Antes de ejecutar estos comandos, consulta el final del archivo de log, generalmente en /var/log/odoo/odoo-server.log</p>"},{"location":"5_3_InstalarUbuntu/#error-con-el-rol-odoo","title":"Error con el rol Odoo","text":"<p>Si aparece un error similar a:</p> <p><code>OperationalError: FATAL:  no existe el rol \u00abodoo\u00bb</code> <code>OperationalError: FATAL:  role \"odoo\" does not exist</code></p> <p>Hay que ejecutar el comando:</p> <pre><code>su - postgres -c \"createuser -s odoo\"\n</code></pre> <p>Esto crea el usuario odoo con permiso de superusuario (-s).</p>"},{"location":"5_3_InstalarUbuntu/#error-con-utf-8","title":"Error con UTF-8","text":"<p>Muchas veces, al instalar, no se configura el template0 de la base de datos en utf-8. 1</p> <p>Se soluciona borrando y volviendo a crear la base de datos template1 utilizando la codificaci\u00f3n UTF8. 2</p> <pre><code># su postgres\npsql\npostgres=# update pg_database set datallowconn = TRUE where datname = 'template0';\npostgres=# \\c template0\ntemplate0=# update pg_database set datistemplate = FALSE where datname = 'template1';\ntemplate0=# drop database template1;\ntemplate0=# create database template1 with template = template0 encoding = 'UTF8';\ntemplate0=# update pg_database set datistemplate = TRUE where datname = 'template1';\ntemplate0=# \\c template1\ntemplate1=# update pg_database set datallowconn = FALSE where datname = 'template0';\n</code></pre> <p>Puede que no se cree el cl\u00faster de postgresql. Primero hay que reconfigurar los locales y despu\u00e9s:</p> <pre><code>pg_createcluster 9.4 main --start\n</code></pre>"},{"location":"5_3_InstalarUbuntu/#recuperar-la-contrasena-del-administrador","title":"Recuperar la contrase\u00f1a del administrador","text":"<p>Del administrador de una base de datos: Dentro de la base de datos:</p> <pre><code>update res_users set password='test' where login='admin';\n</code></pre> <p>Del administrador de Odoo</p> <p>Si no puedes administrar o crear nuevas bases de datos, hay que modificar la l\u00ednea admin_passwd de /etc/odoo/odoo.conf o .odoorc, dependiendo de qu\u00e9 archivo de configuraci\u00f3n est\u00e9s usando.</p>"},{"location":"5_3_InstalarUbuntu/#problemas-en-los-repositorios-oficiales-de-ubuntu","title":"Problemas en los repositorios oficiales de ubuntu","text":"<p>En el caso del IES, los repositorios oficiales no funcionan bien por alguna interferencia con los de Lliurex. Hay que cambiarlos, por ejemplo, por los de Caliu. Una manera es entrar en vim y ejecutar este comando:</p> <pre><code>:%s_http://archive.ubuntu.com/ubuntu_http://ftp.udc.es/ubuntu/_\n</code></pre> <p>(Usamos _ en lugar de / en la sustituci\u00f3n porque la / ya est\u00e1 en las URL.)</p>"},{"location":"5_3_InstalarUbuntu/#no-conecta-con-postgresql","title":"No conecta con PostgreSQL","text":"<p>Puede ser porque el servicio no est\u00e1 en funcionamiento.</p> <pre><code>service postgresql [restart,start,stop,status]\n</code></pre> <p>En caso de que falle, podemos ver el log:</p> <pre><code>cat /var/log/postgresql/(version)...\n</code></pre> <p>A veces la base de datos queda corrupta. Se puede intentar recuperar con:</p> <pre><code>su - postgres -c '/usr/lib/postgresql/12/bin/pg_resetwal -f /var/lib/postgresql/12/main'\n</code></pre> <p>Si se han perdido datos, no son muy importantes o tenemos copia de seguridad, tal vez hay que eliminar la base de datos de la empresa que no funciona:</p> <pre><code>postgres$ psql\npsql&gt; drop database &lt;nombre_base_de_datos&gt;;\n</code></pre>"},{"location":"6_1_ArquitecturaOdoo/","title":"6.1. Arquitectura de Odoo","text":"<p>Antes de comenzar ha desarrollar en Odoo necesitamos conocer un poco de su arquitectura para comprender c\u00f3mo trabaja y la forma en la que debemos programar y c\u00f3mo poder utilizar el framework que nos facilitar para poder implementar nuestros propios m\u00f3dulos</p>"},{"location":"6_1_ArquitecturaOdoo/#arquitectura","title":"Arquitectura","text":"<p>Odoo es un ERP con una arquitectura de Tenencia M\u00faltiple. Es decir, tiene una base de datos y un servidor com\u00fan para todos los clientes. Lo contrario ser\u00eda tener un servidor o base de datos por cliente o virtualizar.</p> <p>El framework de Odoo facilita diversos componentes que permiten construir la aplicaci\u00f3n:</p> <ul> <li>La capa ORM (Object Relational Mapping) entre los objetos Python y la base de datos PostgreSQL. El dise\u00f1ador-programador no realiza el dise\u00f1o de la base de datos; \u00fanicamente dise\u00f1a clases, y la capa ORM de Odoo se encarga de mapearlas sobre el SGBD PostgreSQL. Mas info en An overview of ORM Methods in Odoo</li> </ul> Diagrama ***Odoo*** ORM (Object Relational Mapping) <ul> <li>Una arquitectura MVC (modelo-vista-controlador), en la que el modelo reside en los datos de las clases dise\u00f1adas con Python, la vista reside en los formularios, listas, calendarios, gr\u00e1ficos... definidos en archivos XML, y el controlador reside en los m\u00e9todos definidos en las clases que proporcionan la l\u00f3gica de negocio.</li> </ul> Diagrama Modelo - Vista - Controlador. <ul> <li>Dise\u00f1adores de informes.</li> <li>Facilidades para la traducci\u00f3n de la aplicaci\u00f3n a varios idiomas.</li> </ul> <p>El servidor Odoo proporciona acceso a la base de datos mediante ORM. El servidor necesita tener instalados m\u00f3dulos, ya que comienza vac\u00edo.</p> <p>Por otro lado, el cliente se comunica con el servidor mediante XML-RPC, y los clientes web por JSON-RPC. El cliente solo tiene que mostrar lo que proporciona el servidor o solicitar correctamente los datos. Por tanto, un cliente puede ser muy simple y desarrollarse en cualquier lenguaje de programaci\u00f3n. Odoo proporciona un cliente web, aunque se puede crear un cliente en cualquier plataforma.</p> <p>Los datos est\u00e1n almacenados en una base de datos relacional como es PostgreSQL y gracias al ORM, no es necesario realizar consultas SQL directamente. El ORM proporciona una serie de m\u00e9todos para trabajar de manera m\u00e1s r\u00e1pida y segura. En lugar de hablar de tablas, se habla de modelos. Estos son \"mapeados\" por el ORM en tablas. Sin embargo, un modelo es m\u00e1s que datos en una tabla. Un modelo se comporta como un objeto al tener campos funcionales, restricciones y campos relacionales que dejan la normalizaci\u00f3n de la base de datos en manos de Odoo.</p> <p>El acceso del cliente a los datos se realiza mediante un servicio. Este puede ser WSGI. WSGI es una soluci\u00f3n est\u00e1ndar para crear servidores y clientes HTTP en Python. En el caso de Odoo, este utiliza <code>Werkzeug</code>, que interpreta las peticiones y las transforma en funciones que Odoo puede entender.</p> <p>Otro concepto dentro de Odoo son los Business Objects. Se implementan con <code>models</code> y contienen tanto datos como l\u00f3gica de negocio.</p> <p>Odoo tambi\u00e9n proporciona los llamados Wizards, que funcionan como asistentes para introducir datos de una manera m\u00e1s sencilla para el usuario.</p> <p>El cliente web es f\u00e1cil de desarrollar gracias a los Widgets o Window GaDGETS. Estos proporcionan un comportamiento y visualizaci\u00f3n adecuados para cada tipo de dato. Por ejemplo, si el campo es para definir una fecha, mostrar\u00e1 un calendario. Algunos tienen diferentes visualizaciones seg\u00fan el tipo de vista y se pueden definir Widgets personalizados. Los Widgets y dem\u00e1s interfaz web funcionan gracias a <code>OWL</code>, un framework de cliente web desarrollado en el proyecto <code>Odoo</code> y similar a <code>React</code>.</p> <p>Resumiendo todos estos conceptos: </p> Componente Descripci\u00f3n Base de Datos (PostgreSQL) Donde se almacenan los datos de forma relacional. ORM Traduce modelos Python a tablas SQL, gestionando relaciones y l\u00f3gica. Business Objects Modelos que contienen datos y l\u00f3gica de negocio. WSGI/Werkzeug Intermediario que convierte peticiones HTTP en funciones de Odoo. Wizards Asistentes que facilitan la introducci\u00f3n de datos. Cliente Web (OWL + Widgets) Interfaz interactiva que adapta la visualizaci\u00f3n seg\u00fan el tipo de dato."},{"location":"6_1_ArquitecturaOdoo/#la-base-de-datos-de-odoo","title":"La base de datos de Odoo","text":"<p>En Odoo no existe un dise\u00f1o expl\u00edcito de la base de datos, si no que la base de datos de una empresa en Odoo es el resultado del mapeo del dise\u00f1o de clases del ERP hacia el SGBD PostgreSQL, que es el que proporciona la persistencia necesaria para los objetos. Esto es el ORM.</p> <p>En consecuencia, Odoo no facilita ning\u00fan dise\u00f1o entidad-relaci\u00f3n sobre la base de datos de una empresa ni tampoco ning\u00fan diagrama del modelo relacional.</p> <p>Odoo permite, mediante el cliente web, recuperar el nombre de la clase Python que define la informaci\u00f3n que se introduce a trav\u00e9s de un formulario y el nombre del dato miembro de la clase correspondiente a cada campo del formulario. Esta informaci\u00f3n permite llegar a la tabla y columna afectadas, teniendo en cuenta dos cuestiones:</p> <ul> <li> <p>El nombre de las clases Python de Odoo siempre est\u00e1 en min\u00fasculas (se utiliza el guion bajo para hacer legibles las palabras compuestas) y sigue la nomenclatura <code>nombre_del_modulo.nom1.nom2.nom3...</code> en la cual se utiliza el punto para indicar un cierto nivel de jerarqu\u00eda. Cada clase Python de Odoo se mapea en una tabla de PostgreSQL con muchas posibilidades de que su nombre coincida con el de la clase, sustituyendo los puntos por guiones bajos.</p> </li> <li> <p>Los nombres de los atributos de una clase Python tambi\u00e9n est\u00e1n siempre en min\u00fasculas (se utiliza el guion bajo para hacer legibles las palabras compuestas). Cada dato miembro de una clase Python de Odoo que sea persistente (una clase puede tener datos miembros calculados no persistentes) se mapea como un atributo en la correspondiente tabla de PostgreSQL con el mismo nombre.</p> </li> </ul> <p>Ejemplo</p> <p>La clase Python <code>sale.order</code> de Odoo est\u00e1 pensada para describir la cabecera de los pedidos de venta y la correspondiente tabla en PostgreSQL es <code>sale_order</code>.</p> <p>De esta manera, conociendo el nombre de la clase y el nombre del dato miembro, es muy posible conocer el nombre de la tabla y de la columna correspondientes. Se puede configurar el cliente web para que informe del nombre de la clase y del dato miembro al situar el rat\u00f3n sobre las etiquetas de los campos de los formularios.</p>"},{"location":"6_1_ArquitecturaOdoo/#estructura-de-carpetas-de-odoo","title":"Estructura de carpetas de Odoo","text":"<p>La estructura de carpetas est\u00e1 organizada para facilitar el desarrollo, mantenimiento y extensi\u00f3n de funcionalidades. </p> <p>De esta forma, a continuaci\u00f3n tenemos el listado de las carpetas m\u00e1s importantes dentro del c\u00f3digo fuente de Odoo:</p> <ul> <li> <p><code>addons/</code> : Contiene todos los m\u00f3dulos est\u00e1ndar y personalizados de Odoo. Cada m\u00f3dulo tiene su propia carpeta con modelos, vistas, controladores, datos, etc. Ejemplos: <code>sale</code>, <code>account</code>, <code>crm</code>, <code>inventory</code>.</p> </li> <li> <p><code>config/</code>: Contiene archivos de configuraci\u00f3n del servidor Odoo, como <code>odoo.conf</code>. Es esencial para iniciar Odoo correctamente en entornos de producci\u00f3n o desarrollo.</p> </li> <li> <p><code>data/</code>: Carpeta opcional usada para almacenar datos persistentes o archivos cargados por el usuario. Aunque no es parte del core, es com\u00fan en despliegues personalizados o cuando se configura <code>filestore</code> fuera de la base de datos.</p> </li> <li> <p><code>odoo/</code>:  N\u00facleo del framework. Aqu\u00ed se encuentran los componentes esenciales como el ORM, controladores, herramientas de seguridad, y utilidades. Subcarpetas importantes:</p> <ul> <li><code>odoo/models/</code>: Definici\u00f3n del ORM y clases base.</li> <li><code>odoo/addons/</code>: M\u00f3dulos integrados directamente en el core.</li> <li><code>odoo/tools/</code>: Funciones auxiliares (utilidades, validaciones, etc.).</li> <li><code>odoo/http.py</code>: Manejo de peticiones HTTP y controladores web.</li> </ul> </li> <li> <p><code>setup/</code>: Archivos de configuraci\u00f3n para la instalaci\u00f3n del entorno de desarrollo y despliegue.</p> </li> <li> <p><code>tests/</code>: Pruebas automatizadas para asegurar la calidad del c\u00f3digo. Incluye pruebas unitarias y de integraci\u00f3n.</p> </li> <li> <p><code>doc/</code>: Documentaci\u00f3n t\u00e9cnica del framework y sus componentes.</p> </li> <li> <p><code>static/</code>:  Archivos est\u00e1ticos como CSS, JS e im\u00e1genes utilizados por la interfaz web.</p> </li> <li> <p><code>web/</code>: M\u00f3dulo base para la interfaz web de Odoo. Incluye componentes JavaScript, vistas web, y widgets.</p> </li> <li> <p><code>custom_addons/</code> (opcional): Carpeta com\u00fanmente usada para m\u00f3dulos personalizados fuera del core. Se configura en el archivo de inicio (<code>odoo.conf</code>).</p> </li> </ul> <p>Si observamos, las tres primera carpetas son las que hemos definido en el <code>docker-compose.yml</code> del punto anterior, por lo que ahora ya conocemos su cometido: </p> <pre><code>services:\n  odoo:\n    container_name: odoo\n    image: odoo:18.0\n    depends_on:\n      - db\n    ports:\n      - \"8069:8069\"\n    volumes:\n      - odoo-web-data:/var/lib/odoo\n      - ./config:/etc/odoo\n      - ./addons:/mnt/extra-addons\n    environment:\n      - HOST=db\n      - USER=odoo\n      - PASSWORD=odoo\n    command: --dev=all\n    tty: true\n</code></pre>"},{"location":"6_1_ArquitecturaOdoo/#modulos","title":"M\u00f3dulos","text":"<p>Tanto el servidor como los clientes son m\u00f3dulos. Todos est\u00e1n guardados en una base de datos. Todo lo que se pueda hacer para modificar Odoo se hace en m\u00f3dulos.</p>"},{"location":"6_1_ArquitecturaOdoo/#composicion-de-un-modulo","title":"Composici\u00f3n de un m\u00f3dulo","text":"<p>Los m\u00f3dulos de Odoo ampl\u00edan o modifican partes del Modelo-Vista-Controlador. De esta manera, un m\u00f3dulo puede tener:</p> <ul> <li>Objetos de negocio: Son la parte del modelo, definidos en clases de Python seg\u00fan una sintaxis propia del ORM de Odoo.</li> <li>Archivos de datos: Son archivos XML que pueden definir datos, vistas o configuraciones.</li> <li>Controladores web: Gestionan las peticiones de los navegadores web.</li> <li>Datos est\u00e1ticos: Im\u00e1genes, CSS o JavaScript utilizados por la interfaz web. Es necesario que los datos est\u00e1ticos se guarden en el directorio static. Por ejemplo, el icono del m\u00f3dulo va en <code>static/description/icon.png</code>.</li> </ul>"},{"location":"6_1_ArquitecturaOdoo/#estructura-de-archivos-de-un-modulo","title":"Estructura de archivos de un m\u00f3dulo","text":"<ul> <li>Todos los m\u00f3dulos est\u00e1n en un directorio definido en la opci\u00f3n --addons-path o en el archivo de configuraci\u00f3n, normalmente <code>addons</code>. Cada m\u00f3dulo esta un un subdirectorio dentro de esta carpeta y por lo que puede haber m\u00e1s de un directorio.</li> <li>Un m\u00f3dulo de Python se declara en un archivo de manifest que da informaci\u00f3n sobre el m\u00f3dulo, lo que hace, los m\u00f3dulos de los que depende y c\u00f3mo se debe instalar o actualizar. Manifest in Odoo</li> <li>Un m\u00f3dulo es un paquete de Python que necesita un archivo __init__.py para instanciar todos los archivos Python.</li> </ul>"},{"location":"6_1_ArquitecturaOdoo/#creacion-de-modulos","title":"Creaci\u00f3n de m\u00f3dulos","text":"<p>Para ayudar al programador, Odoo contiene un comando para crear m\u00f3dulos vac\u00edos. Este crea la estructura de archivos necesaria para empezar a trabajar:</p> <pre><code>     $ odoo scaffold &lt;nombre_del_m\u00f3dulo&gt; &lt;d\u00f3nde_crearlo&gt;\n</code></pre> <p>Posteriormente veremos m\u00e1s sobre <code>scaffold</code>, pero si quieres m\u00e1s informaci\u00f3n puedes recurrir al Manual oficial Scaffolding</p> <p>El par\u00e1metro scaffold puede tener la opci\u00f3n -t para indicar el directorio de la plantilla. Esta est\u00e1 hecha utilizando jinja2, que es un motor de plantillas para Python.</p> <p>Las plantillas est\u00e1n en el directorio de instalaci\u00f3n de Odoo, en el directorio cli. En nuestro caso: cli/templates/ dentro del directorio de instalaci\u00f3n de Odoo.</p> <p>Podemos crear una plantilla copiando el directorio default o theme y modificando los archivos. Esto puede ser \u00fatil si siempre hacemos m\u00f3dulos con la misma plantilla. Por ejemplo, para poner nuestro logo, copyright, etc.</p>"},{"location":"6_1_ArquitecturaOdoo/#orm","title":"ORM","text":"<p>Odoo mapea sus objetos en una base de datos mediante ORM, evitando al programador la mayor\u00eda de consultas SQL. De esta manera, el desarrollo de los m\u00f3dulos es muy r\u00e1pido y se evitan errores de programaci\u00f3n.</p> <p>Los modelos se crean como clases de Python que extienden la clase models.Model, que contiene los campos y m\u00e9todos \u00fatiles para trabajar con el ORM.</p> <p>Nota</p> <p>Los modelos, al heredar de models.Model, necesitan obligatoriamente asignar valores a algunas variables, como por ejemplo _name.</p> <p>Odoo considera que un modelo es la referencia a una o m\u00e1s tablas en la base de datos. Un modelo no es una fila en la tabla, es toda la tabla.</p> <p>En programaci\u00f3n, el Modelo es una forma de relacionar el programa con la base de datos. Es de m\u00e1s alto nivel que las consultas directas a la base de datos y que las clases y objetos respecto a la programaci\u00f3n orientada a objetos. El modelo une en un \u00fanico concepto las estructuras de datos, las restricciones de integridad y las opciones de manipulaci\u00f3n de los datos.</p> <p>Los modelos en Odoo pueden</p> <ul> <li>Heredar de models.Model y ser los normales, mapeados y permanentes en la base de datos. </li> <li>Pueden ser models.TransientModel, que son iguales pero no tienen persistencia definitiva en la base de datos. Estos son los recomendados para crear <code>wizards</code>. </li> <li>Tambi\u00e9n pueden ser models.AbstractModel para definir modelos abstractos que luego ser\u00e1n heredados.</li> </ul> <p>En Odoo, existen tres tipos principales de modelos que heredan de clases base diferentes seg\u00fan su prop\u00f3sito, se trata de <code>models.Model</code>, <code>models.TransientModel</code> y <code>models.AbstractModel</code>:</p> <ul> <li><code>models.Model</code> se trata de Modelos persistentes. Representa una tabla real en la base de datos. Los datos almacenados en este modelo son permanentes. Por ejemplo Clientes, productos, facturas, etc.</li> <li><code>models.TransientModel</code> son datos temporales (como asistentes o formularios r\u00e1pidos), por lo tanto es un modelo no persistente. Los registros se eliminan autom\u00e1ticamente despu\u00e9s de un tiempo (por defecto, 7 d\u00edas). Se utilizan para Wizards, asistentes de importaci\u00f3n/exportaci\u00f3n, formularios temporales.</li> <li><code>models.AbstractModel</code> que son modelos base reutilizables, o sea, se trata de modelos abstractos que no crea una tabla en la base de datos. Se utiliza para definir funcionalidades comunes que pueden ser heredadas por otros modelos.</li> </ul> <p>Comparativa r\u00e1pida</p> Caracter\u00edstica <code>models.Model</code> <code>models.TransientModel</code> <code>models.AbstractModel</code> Persistencia S\u00ed No (temporal) No Crea tabla en BD S\u00ed S\u00ed No Uso t\u00edpico Datos reales Formularios/Wizards Funcionalidad com\u00fan Eliminaci\u00f3n autom\u00e1tica No S\u00ed No <p>Documentaci\u00f3n oficial: Odoo ORM Reference</p>"},{"location":"6_2_PrimerModulo/","title":"6.2. Primer m\u00f3dulo en Odoo","text":"<p>Una vez instalado y comprendida la arquitectura de de Odoo, el siguiente objetivos ser\u00e1 desarrollar nuestro primer m\u00f3dulo, el t\u00edpico \"Hola Mundo\".</p> <p>En este caso, vamos a desarrollar hasta 3 versiones diferentes del m\u00f3dulo, de forma que iremos profundizando en los elementos b\u00e1sicos de un m\u00f3dulo en Odoo. </p>"},{"location":"6_2_PrimerModulo/#hola-mundo-version-1","title":"Hola Mundo. Versi\u00f3n 1.","text":"<p>Esta primera version, como tal, no tendr\u00e1 ninguna utilidad mas all\u00e1 de comprobar que somos capaces de crear e instalar un m\u00f3dulo (que no hace nada)</p> <p>El primer paso siempre va a ser la creaci\u00f3n de una carpeta en el directorio de <code>addons/</code>, a la que llamaremos igual que el nombre del m\u00f3dulo:</p> <pre><code>mkdir ./addons/HolaMundo_V1\n</code></pre> <p>Dentro de esta carpeta vamos a crear solo dos archivos <code>__init__.py</code> y <code>__manifest__.py</code> es una excelente forma de comenzar a entender la estructura de los m\u00f3dulos en Odoo. Aqu\u00ed te muestro c\u00f3mo hacerlo paso a paso:</p>"},{"location":"6_2_PrimerModulo/#estructura","title":"Estructura","text":"<p>Los ficheros necesarios para esta primera versi\u00f3n ser\u00e1n: <code>__init__.py</code> y <code>__manifest__.py</code> y la estructura (m\u00ednima) ser\u00eda:</p> <pre><code>addons/HolaMundo_V1/\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 __manifest__.py\n</code></pre> <p>Donde: </p>"},{"location":"6_2_PrimerModulo/#paso-1-__init__py","title":"Paso 1. <code>__init__.py</code>","text":"<p>B\u00e1sicamente le dice a Python que esa carpeta es un paquete, y adem\u00e1s tambi\u00e9n sirve para indicar a Odoo los modelos que tiene que cargar y que est\u00e1n ubicado en la carpeta <code>models</code></p> <p>En nuestro caso, como no vamos a incluir ning\u00fan modelo o controlador en la carpeta <code>models</code> este archivo va a estar vac\u00edo. Solo sirve para indicar que este directorio es un paquete de Python.</p> <pre><code># HolaMundo_V1/__init__.py\n</code></pre>"},{"location":"6_2_PrimerModulo/#paso-2-__manifest__py","title":"Paso 2. <code>__manifest__.py</code>","text":"<p>Este archivo contiene la descripci\u00f3n del m\u00f3dulo. Es como la ficha t\u00e9cnica del m\u00f3dulo. Ah\u00ed se le indica a Odoo c\u00f3mo se llama, qu\u00e9 hace, qu\u00e9 necesita para funcionar y qu\u00e9 archivos debe cargar Aqu\u00ed tienes un ejemplo b\u00e1sico:</p> <pre><code># HolaMundo_V1/__manifest__.py\n\n{\n    'name': 'Hola Mundo V1',\n    'version': '1.0',\n    'summary': 'M\u00f3dulo b\u00e1sico de ejemplo',\n    'description': 'Este es un m\u00f3dulo de ejemplo que no hace nada, solo sirve como plantilla.',\n    'author': 'Sergio Rey',\n    'category': 'Tools',\n    'depends': [],\n    'data': [],\n    'installable': True,\n    'application': False,\n    'auto_install': False,\n}\n</code></pre> <p>Como se puede observar, es un diccionario en formato Python que incluye varios campos clave. No es necesario poner todos, aunque para este ejemplo se han puesto lo m\u00e1s comunes:</p> <ul> <li><code>name</code>: el nombre del m\u00f3dulo tal como aparecer\u00e1 en la interfaz de Odoo.</li> <li><code>version</code>: la versi\u00f3n del m\u00f3dulo, \u00fatil para actualizaciones.</li> <li><code>summary</code>: una descripci\u00f3n corta que aparece en la lista de aplicaciones.</li> <li><code>description</code>: una descripci\u00f3n m\u00e1s larga y detallada del m\u00f3dulo.</li> <li><code>author</code>: qui\u00e9n lo ha creado.</li> <li><code>category</code>: en qu\u00e9 secci\u00f3n de Odoo se clasifica (por ejemplo, \"Tools\", \"Sales\", \"Inventory\").</li> <li><code>depends</code>: una lista de otros m\u00f3dulos que este necesita para funcionar. Por ejemplo, casi todos dependen de <code>base</code>.</li> <li><code>data</code>: archivos XML, CSV, etc., que deben cargarse al instalar el m\u00f3dulo (vistas, men\u00fas, reglas de acceso\u2026).</li> <li><code>demo</code>: archivos que se cargan solo en modo demo.</li> <li><code>installable</code>: si est\u00e1 en <code>True</code>, el m\u00f3dulo se puede instalar.</li> <li><code>application</code>: si es <code>True</code>, se muestra como una aplicaci\u00f3n en el panel principal.</li> <li><code>auto_install</code>: si es <code>True</code>, se instala autom\u00e1ticamente si sus dependencias est\u00e1n presentes.</li> </ul> <p>Hay m\u00e1s campos opcionales, pero con estos tienes lo b\u00e1sico para que el m\u00f3dulo funcione y se vea correctamente en Odoo.</p>"},{"location":"6_2_PrimerModulo/#paso-3-reinicio-del-servidor","title":"Paso 3. Reinicio del servidor","text":"<p>Para que el servidor reconozca el nuevo m\u00f3dulo, debemos reiniciar:</p> <pre><code>docker compose restart odoo\n</code></pre> <p>o pulsamos sobre el bot\u00f3n que hemos a\u00f1adido en en VSCode mediante **VS Code Action Buttons\" en la secci\u00f3n anterior.</p> <p>En estos momentos, tambi\u00e9n es aconsejable ver los logs que va generando Ddoo, por lo que en un terminal es aconsejable ejecutar:</p> <pre><code>docker logs odoo -f\n</code></pre>"},{"location":"6_2_PrimerModulo/#paso-4-odoo-en-modo-desarrollo","title":"Paso 4. Odoo en modo desarrollo","text":"<p>Debemos tener Odoo en modo desarrollo, para que el siguiente paso nos permita buscar el nuevo m\u00f3dulo.</p> <p>Hay diferentes formas de hacerlo:</p>"},{"location":"6_2_PrimerModulo/#activando-desde-menu-de-ajustes","title":"Activando desde men\u00fa de Ajustes","text":"<p>Desde el men\u00fa de ajustes, podemos activar el modo desarrollador directamente:</p> Activar modo desarrollador por ajustes"},{"location":"6_2_PrimerModulo/#usando-la-url-directamente","title":"Usando la URL directamente","text":"<p>Puedes a\u00f1adir <code>?debug=1</code> al final de la URL de Odoo para activar el modo desarrollador. Realmente, si observamos qu\u00e9 ha pasado en el m\u00e9todo anterior, precisamente es lo que hace, a\u00f1adir esto al final de la URL</p> <p>Ejemplo:</p> <pre><code>http://localhost:8069/odoo?debug=1\n</code></pre> Entrar en modo desarrollo desde la URL <p>Tambi\u00e9n se puede usar:</p> <ul> <li><code>?debug=assets</code> para ver los archivos fuente (\u00fatil para desarrolladores).</li> <li><code>?debug=tests</code> para pruebas automatizadas.</li> </ul>"},{"location":"6_2_PrimerModulo/#usando-extensiones-o-herramientas-del-navegador","title":"Usando extensiones o herramientas del navegador","text":"<p>Aunque no es necesario, puedes usar herramientas como <code>Odoo Debug</code> (extensi\u00f3n para Firefox o Chrome) que te permite activar el modo desarrollador con un clic.</p> Entrar en modo desarrollo con Add-on <p>Hay otras formas, pero de momento con esta tenemos suficiente para comenzar a trabajar.</p> <p>Una vez entras en modo desarrollo, ver\u00e1s que aparecen nuevas opciones, por ejemplo al entrar en Aplicaciones</p> Nuevas opciones al entrar en Desarrollo. <p>Como puedes ver en esta imagen, han aparecido nuevas opciones y tenemos un nuevo men\u00fa con la forma de una cucaracha que nos permite realizar funcionalidades de desarrollador.</p>"},{"location":"6_2_PrimerModulo/#paso-5-actualizar-buscar-e-instalar","title":"Paso 5. Actualizar, buscar e instalar.","text":"<p>Una vez llegado a este punto, entonces debemos:</p> <ol> <li>Actualizar e listado de m\u00f3dulos que nos aparece en pantalla pulsando el bot\u00f3n de Actualizar lista de aplicaciones que podemos ver en la figura anterior.</li> <li>Buscamos el m\u00f3dulo que queremos instalar, utilizando la herramientas de b\u00fasqueda. Si ponemos \"Hola\" no nos encontrar\u00e1 nada, a no ser que le quitemos el filtro para que haga b\u00fasquedas solo de aplicaciones.</li> <li>Instalamos Una vez, hemos encontrado el m\u00f3dulo, pulsamos el bot\u00f3n de instalar y aparecer\u00e1 como que se ha instalado. Si hay alg\u00fan problema no se instalar\u00e1 correctamente y debemos recurrir a los logs de Odoo para investigar qu\u00e9 es lo que ha pasado.</li> </ol> M\u00f3dulo buscado y encontrado. <p>Con estos pasos, si todo ha funcionado correctamente, ya tenemos el m\u00f3dulo instalado y listo para ser usado. En nuestro caso, como no lo hemos dotado de funcionalidad, no aparecer\u00e1 en ning\u00fan sitio, pero entrando en la Informaci\u00f3n del m\u00f3dulo podemos ver que esta instalado y que por tanto podemos Actualizar o Desinstalar el m\u00f3dulo.</p> Informaci\u00f3n del m\u00f3dulo."},{"location":"6_2_PrimerModulo/#resumen-de-todos-los-pasos","title":"Resumen de todos los pasos","text":"<p>Estos pasos los debemos tener muy claros, puesto que siempre van a ser los mismos a la hora de a\u00f1adir un nuevo m\u00f3dulo:</p> <p>Resumen pasos para instalaci\u00f3n</p> <ol> <li>Creamos o modificamos los ficheros necesarios de nuestro m\u00f3dulo</li> <li>Reinicia el servidor de Odoo.</li> <li>Activa el modo desarrollador (si no lo tienes activado).</li> <li>Ve a Aplicaciones, actualiza la lista y busca el nuevo m\u00f3dulo.</li> <li>Inst\u00e1lalo y comprueba en los logs que no ha habido errores.</li> </ol>"},{"location":"6_2_PrimerModulo/#hola-mundo-version-2","title":"Hola Mundo. Versi\u00f3n 2","text":"<p>La versi\u00f3n anterior ha sido demasiado b\u00e1sica, auqnue ha sido de gran utilidad porque hemos podido comprobar de forma muy simplificada c\u00f3mo se puede implementar un m\u00f3dulo en Odoo.</p> <p>Ahora vamos a realizar de nuevo los mismo pasos con una nueva versi\u00f3n de nuestro m\u00f3dulo, pero vamos a a\u00f1adir nuevos elementos de forma que podamos ver y utilizar esta nueva versi\u00f3n.</p> <p>O sea, vamos a crear una versi\u00f3n que tras instalarla, nos aparecer\u00e1 en el men\u00fa de aplicaciones y podremos entrar en el m\u00f3dulo, aunque de nuevo no tendr\u00e1 funcionalidad alguna, aparte de aprender los pasos a realizar y comprobar que todo funciona correctamente.</p> <p>Aqu\u00ed tienes una gu\u00eda paso a paso para crear un m\u00f3dulo b\u00e1sico de \"Hola Mundo\" en Odoo. Este m\u00f3dulo mostrar\u00e1 un mensaje simple en el backend, ideal para comenzar a familiarizarte con el desarrollo en Odoo.</p>"},{"location":"6_2_PrimerModulo/#estructura-del-modulo","title":"Estructura del m\u00f3dulo","text":"<p>Para esta nueva versi\u00f3n, la estructura m\u00ednima ser\u00e1:</p> <pre><code>HolaMundo_V2/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __manifest__.py\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 hola.py\n\u251c\u2500\u2500 views/\n\u2502   \u2514\u2500\u2500 hola_view.xml\n\u251c\u2500\u2500 security/\n\u2502   \u2514\u2500\u2500 ir.model.access.csv\n</code></pre> <p>Como podemos comprobar, por supuesto seguimos teniendo los fichero <code>__init__.py</code> y <code>__manifest__.py</code> y adem\u00e1s a\u00f1adimos nuevas carpetas y en ellas nuevos ficheros. </p> <p>Obviamente, en este punto, podemos deducir que vamos a incluir nuevos modelos, vistas para poder visualizar los datos del modelo y seguridad necesaria para otorgar permisos y poder utilizar las vistas y modelos definidos.</p> <p>Veamos c\u00f3mo quedar\u00edan cada uno de los ficheros</p>"},{"location":"6_2_PrimerModulo/#archivo-__init__py","title":"Archivo <code>__init__.py</code>","text":"<p>Este archivo le dice a Python (y a Odoo) que esta carpeta es un paquete. </p> <pre><code># HolaMundo_V2/__init__.py\n\nfrom . import models\n</code></pre> <p>A diferencia de la primera versi\u00f3n, ahora si vamos a utilizar alg\u00fan modelo, por lo que debemos importar desde el m\u00f3dulo base para ser utilizado posteriormente.</p>"},{"location":"6_2_PrimerModulo/#archivo-__manifest__py","title":"Archivo <code>__manifest__.py</code>","text":"<p>Este archivo es el coraz\u00f3n del m\u00f3dulo. Le dice a Odoo c\u00f3mo se llama el m\u00f3dulo, qu\u00e9 hace, qu\u00e9 necesita y qu\u00e9 archivos debe cargar.</p> <pre><code># HolaMundo_V2/__manifest__.py\n\n{\n  'name': 'Hola Mundo V2',\n  'version': '2.0',\n  'summary': 'M\u00f3dulo de ejemplo Hola Mundo V2',\n  'description': 'Este m\u00f3dulo muestra un mensaje b\u00e1sico en Odoo.',\n  'author': 'Sergio Rey',\n  'category': 'Tools',\n  'depends': ['base'],\n  'data': [\n    'security/ir.model.access.csv',\n    'views/hola_view.xml',\n  ],\n\n  'installable': True,\n  'application': True,\n}\n</code></pre> <p>Respecto a la primera versi\u00f3n, tenemos un cambio en la clave <code>data</code> donde ahora a\u00f1adimos los archivos que van a cargar al iniciar.</p>"},{"location":"6_2_PrimerModulo/#archivo-models__init__py","title":"Archivo <code>models/__init__.py</code>","text":"<p>El archivo <code>__init__.py</code> dentro de la carpeta <code>models</code> es necesario para que Python reconozca esa carpeta como un paquete. </p> <p>El contenido ser\u00e1 el siguiente:</p> <pre><code># HolaMundo_V2/models/__init__.py\n\nfrom . import hola\n</code></pre> <p>Esto permite que Odoo pueda importar correctamente los archivos que hay dentro, como <code>hola.py</code>. </p> <p>Se trata pues de un archivo obligatorio para que Odoo pueda encontrar y cargar correctamente los modelos definidos en esa carpeta</p> <p>Nota</p> <p>En concreto, cuando en el archivo principal <code>__init__.py</code> del m\u00f3dulo escribes:</p> <pre><code># HolaMundo_V2/__init__.py\n\nfrom . import models\n</code></pre> <p>Python busca un archivo <code>__init__.py</code> dentro de la carpeta <code>models</code>. Y dentro de ese archivo, normalmente se importa cada archivo de modelo, por ejemplo:</p> <pre><code># HolaMundo_V2/models/__init__.py\n\nfrom . import hola\n</code></pre> <p>Esto le dice a Odoo: \u201ccarga el modelo definido en <code>models/hola.py</code>\u201d.</p> <p>Si no estuviera ese <code>__init__.py</code>, Python no sabr\u00eda que debe tratar la carpeta <code>models</code> como un paquete, y no se cargar\u00edan los modelos al instalar el m\u00f3dulo.</p>"},{"location":"6_2_PrimerModulo/#archivo-modelsholapy","title":"Archivo <code>models/hola.py</code>","text":"<p>Aqu\u00ed se define el modelo de datos. Es como crear una tabla en la base de datos con un campo llamado name.</p> <pre><code># HolaMundo_V2/models/hola.py\n\nfrom odoo import models, fields\n\nclass HolaMundo(models.Model):\n    _name = 'hola.mundo.v2'\n    _description = 'Modelo Hola Mundo V2'\n\n    mensaje = fields.Char(string='Mensaje', default='\u00a1Hola Mundo V2 desde Odoo!')\n</code></pre> <p>Nos detendremos m\u00e1s adelante en la estructura de este fichero, pero tenemos campos privados obligatorios (<code>_name</code>) que indica el nombre del modelo y que sirve a Odoo para elegir el nombre de la tabla en la que se almacenan los datos definidos en este modelo.</p> <p>Despu\u00e9s tenemos un \u00fanico campo mensaje de tipo texto, que posteriormente se mostrar\u00e1 en la vista y al que se asigna un valor por defecto.</p>"},{"location":"6_2_PrimerModulo/#archivo-viewshola_viewxml","title":"Archivo <code>views/hola_view.xml</code>","text":"<p>Este archivo define la interfaz de usuario: c\u00f3mo se ven los datos, c\u00f3mo se accede a ellos y c\u00f3mo se navega.</p> <pre><code>&lt;!-- HolaMundo_V2/views/view.xml --&gt;\n\n&lt;odoo&gt;\n    &lt;record id=\"view_hola_mundo_v2_list\" model=\"ir.ui.view\"&gt;\n        &lt;field name=\"name\"&gt;hola.mundo.v2.list&lt;/field&gt;\n        &lt;field name=\"model\"&gt;hola.mundo.v2&lt;/field&gt;\n        &lt;field name=\"type\"&gt;list&lt;/field&gt;\n        &lt;field name=\"arch\" type=\"xml\"&gt;\n            &lt;list&gt;\n                &lt;field name=\"mensaje\"/&gt;\n            &lt;/list&gt;\n        &lt;/field&gt;\n    &lt;/record&gt;\n\n    &lt;record id=\"view_hola_mundo_v2_form\" model=\"ir.ui.view\"&gt;\n        &lt;field name=\"name\"&gt;hola.mundo.v2.form&lt;/field&gt;\n        &lt;field name=\"model\"&gt;hola.mundo.v2&lt;/field&gt;\n        &lt;field name=\"type\"&gt;form&lt;/field&gt;\n        &lt;field name=\"arch\" type=\"xml\"&gt;\n            &lt;form&gt;\n                &lt;sheet&gt;\n                    &lt;field name=\"mensaje\"/&gt;\n                &lt;/sheet&gt;\n            &lt;/form&gt;\n        &lt;/field&gt;\n    &lt;/record&gt;\n\n    &lt;record id=\"action_hola_mundo_v2\" model=\"ir.actions.act_window\"&gt;\n        &lt;field name=\"name\"&gt;Hola Mundo V2&lt;/field&gt;\n        &lt;field name=\"res_model\"&gt;hola.mundo.v2&lt;/field&gt;\n        &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n    &lt;/record&gt;\n\n    &lt;menuitem id=\"menu_hola_mundo_v2_root\" name=\"Hola Mundo V2\"/&gt;\n    &lt;menuitem id=\"menu_hola_mundo_v2\" name=\"Mensajes\" parent=\"menu_hola_mundo_v2_root\"/&gt;\n    &lt;menuitem id=\"menu_hola_mundo_v2_items\" name=\"Ver Mensajes\" parent=\"menu_hola_mundo_v2\" action=\"action_hola_mundo_v2\"/&gt;\n&lt;/odoo&gt;\n</code></pre> <p>Warning</p> <p>En Odoo 18.0, el tipo de vista que antes se llamaba <code>tree</code> ahora se llama <code>list</code> tanto en el campo <code>type</code> como en el nombre de la etiqueta XML</p> <p>Esto quiere decir que si se utiliza este c\u00f3digo en una versi\u00f3n anterior de Odoo, entonces se debe sustituir el tipo <code>list</code> por <code>tree</code></p> <p>Como se puede ver define las Vistas tipo <code>list</code> y <code>form</code> para el modelo <code>hola.mundo.v2</code>, as\u00ed como los men\u00fas y acciones para acceder al modelo desde el backend. Sin esto, el usuario no podr\u00eda ver ni editar los datos del modelo desde la interfaz de Odoo.</p>"},{"location":"6_2_PrimerModulo/#archivo-securityirmodelaccesscsv","title":"Archivo <code>security/ir.model.access.csv</code>","text":"<p>Este archivo define los permisos de acceso al modelo</p> <pre><code>id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_hola_mundo_v2,hola.mundo.v2,model_hola_mundo_v2,,1,1,1,1\n</code></pre> <p>El contenido son las reglas que indican qui\u00e9n puede leer, escribir, crear o borrar registros del modelo. Este archivo es fundamental ya que sin este archivo, los usuarios no ver\u00e1n el men\u00fa ni podr\u00e1n acceder al modelo, aunque est\u00e9 instalado simplemente porque carecen de permisos.</p>"},{"location":"6_2_PrimerModulo/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para la instalaci\u00f3n se siguen los mismos pasos que en la primera versi\u00f3n.</p> <ol> <li>Crea todos los fichero en las ubicaciones indicadas.</li> <li>Reinicia el servidor de Odoo.</li> <li>Activa el modo desarrollador si no lo esta.</li> <li>Ve a Aplicaciones, actualiza la lista y busca Hola Mundo V2.</li> <li>Inst\u00e1lalo y ver\u00e1s el men\u00fa en la barra superior.</li> </ol> <p>Tip</p> <p>Observa que al hacer la b\u00fasqueda del m\u00f3dulo, si no le quitas el filtro de Aplicaci\u00f3n solo ver\u00e1s el m\u00f3dulo V2, mientras que si quitas este filtro ver\u00e1s el V1 y el V2. Esto es debido a que el el <code>__manifest__.py</code> le hemos dicho que es una aplicaci\u00f3n y antes no.</p>"},{"location":"6_2_PrimerModulo/#hola-mundo-version-3-scaffold","title":"Hola Mundo. Version 3. <code>scaffold</code>","text":"<p>Un scaffold es una herramienta que te permite generar autom\u00e1ticamente la estructura b\u00e1sica de un m\u00f3dulo personalizado. Es como un \"esqueleto\" inicial que incluye todos los archivos y carpetas necesarios para empezar a desarrollar un m\u00f3dulo.</p> <p>En otras palabras, nos crea las carpetas y clases b\u00e1sicas de nuestro modelo, simplemente indicando el nombre.</p> <p>Para crear un m\u00f3udulo ejecutamos hacemos un scaffold que hemos comentado antes, damos un nombre al m\u00f3dulo (en este caso pruebas) y le decimos que los vamos a ubicar en la carpeta <code>extra-addons</code> del contenedor que se encuentra redireccionada a la carpeta <code>./addons</code> que tenemos en la uticaci\u00f3n del docker-compose</p> <pre><code>docker exec -ti odoo odoo scaffold HolaMundo_V3 /mnt/extra-addons\n</code></pre> <p>Podemos comprobar que efectivamente se ha creado todo la estructura del modelo:</p> Carpetas y fichero creados por comando scaffold <p>Posteriormente es aconsejable dar permisos para poder acceder a esta carpeta. Debemos tener en cuenta siempre los permisos para que tanto el proceso docker que se ejecuta como <code>root</code> como nosotros con nuestro usuario podemos acceder a la carpeta.</p> <pre><code>docker exec -ti odoo chmod 777 -R /mnt/extra-addons/HolaMundo\n</code></pre> <p>De hecho, con estos cambios tan simples, podemos volver a hacer todos los pasos que hemos hecho anteriormente e instalar nuestro nuevo m\u00f3dulo:</p> <ul> <li>Reinicia Servidor</li> <li>Actualiza lista de aplicaciones</li> <li>Haz la b\u00fasqueda</li> <li>Instala....</li> </ul> <p>Esta primera versi\u00f3n no tiene nada, por lo tanto es muy similar a la versi\u00f3n 1, simplemente se instala sin mas.</p> <p>Ahora es momento de ir revisando cada uno de los fichero que tenemos e ir descomentando todo el c\u00f3digo comentado, con esto, volvemos a rehacer todo el proceso, y ya tenemos una aplicaci\u00f3n con varias vistas.</p> <p>Los ficheros a revisar y descomentar ser\u00e1n:</p> <ul> <li><code>__manyfest__py</code>: en este lo que se debe hacer es actualizar la informaci\u00f3n. Observar que los datos no son los mismos que nosotros hemos a\u00f1adidos en nuestros anteriores versiones, de hecho es posible que sea interesante a\u00f1adir alguna l\u00ednea extra</li> <li><code>models/models.py</code></li> <li><code>views/views.xml</code></li> <li><code>controllers/controllers.py</code> : este es nuevo...</li> <li><code>demo/demo.xml</code>: estos son datos de demostraci\u00f3n que se pueden cargar inicialmente. Es opcional, incluso desaconsejable en este caso</li> </ul> <p>Observa que el fichero de seguridad no se hace nada, o m\u00e1s bien se indica en <code>__manifest__.py</code> que se debe cargar.</p> <p>Por \u00faltimo, realiza todo el proceso y actualiza el m\u00f3delo, podr\u00e1s ver las vistas que se han definido.</p> Hola Mundo V3 funcionando <p>Hasta aqu\u00ed la creaci\u00f3n de modelos sencillos, ahora que hemos visto como crearlo y somos capaces de identificar estructuras y procesos para crear y actualizar m\u00f3dulos, vamos a profundizar en las caracter\u00edsticas que los definen en las siguientes secciones.</p>"},{"location":"7_1_EjemploCreacionModeloBasico/","title":"7.1. Creaci\u00f3n de un modelo b\u00e1sico, vistas, men\u00fas y actions.","text":""},{"location":"7_1_EjemploCreacionModeloBasico/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta secci\u00f3n vamos a realizar de forma guiada un ejemplo de desarrollo de un m\u00f3dulo que nos permitir\u00e1 gestionar la realizaci\u00f3n de proyectos de desarrollo inform\u00e1tico. </p> <p>B\u00e1sicamente, los elementos que vamos a tener en cuenta para nuestro m\u00f3dulo b\u00e1sicamente son los siguientes:</p> <ul> <li>Proyectos: Cada desarrollo de una aplicaci\u00f3n diferente, ser\u00e1 un proyecto</li> <li>Tareas: El desarrollo se basa en la realizaci\u00f3n de tareas</li> <li>Sprints: Dividimos la fase de desarrollo en sprints temporales que agrupan una serie de tareas a realizar</li> <li>Desarrolladores: son las personas que realizan cada una de las tareas del proyecto </li> </ul>"},{"location":"7_1_EjemploCreacionModeloBasico/#creacion-de-la-aplicacion","title":"Creaci\u00f3n de la aplicaci\u00f3n","text":"<p>Para comenzar, puesto que ya tenemos el sistema configurado, procedemos a la creaci\u00f3n de la estructura de la aplicaci\u00f3n mediante scaffold.</p> <p>Debemos tener claro el nombre de nuestra aplicaci\u00f3n que ser\u00e1 Gestion_Tareas_Sergio en mi caso.</p> <pre><code>docker exec -ti odoo odoo scaffold GestionTareasSergio /mnt/extra-addons\n</code></pre> <p>Comprobamos que se ha generado toda la estructura</p> Creaci\u00f3n de la estructura del m\u00f3dulo <p>Tip</p> <p>En caso de tener problemas de permisos, recordad a\u00f1adir permisos a todos los elementos</p> <pre><code>sudo chmod -R 777 ./gestion_tareas_sergio/\n</code></pre> <p>y ahora configuramos el manifest.py para dar descripci\u00f3n de nuestra aplicaci\u00f3n lo vamos a instalar para comprobar que todo funciona correctamente.</p> Comprobamos que la aplicaci\u00f3n esta instalada correctamente <p>Estar\u00eda bonito, crear un logotipo para nuestra aplicaci\u00f3n y as\u00ed identificarla r\u00e1pidamente.</p> <p>\u00bfReiniciar o reinstalar?</p> <p>Debes reiniciar el servidor de Odoo cuando:</p> <ul> <li>Modificas modelos Python (<code>models/*.py</code>), ya que el c\u00f3digo se carga al iniciar el servidor.</li> <li>Cambias el archivo <code>__manifest__.py</code>, porque Odoo lo lee al cargar los m\u00f3dulos.</li> </ul> <p>Puedes actualizar el m\u00f3dulo sin reiniciar el servidor si:</p> <ul> <li>Solo modificas vistas XML (como formularios, listas, etc.).</li> <li>Cambias archivos de datos est\u00e1ticos (como <code>views/*.xml</code>, <code>security/*.xml</code>, etc.).</li> <li>Ajustas controladores web (<code>controllers/*.py</code>), aunque en este caso, si el c\u00f3digo ya est\u00e1 cargado en memoria, puede requerir reinicio dependiendo del entorno (por ejemplo, en producci\u00f3n).</li> </ul> <p>En ocasiones si los cambios realizados en los m\u00f3dulos es muy grande, la aplicaci\u00f3n puede fallar y es mejor desinstalar y volver a instalar la aplicaci\u00f3n, aunque esto conlleve a la perdida de datos.</p>"},{"location":"7_1_EjemploCreacionModeloBasico/#creacion-de-modulo-basico-de-tareas","title":"Creaci\u00f3n de m\u00f3dulo b\u00e1sico de Tareas","text":"<p>Comenzaremos creando un m\u00f3dulo b\u00e1sico que contendr\u00e1 informaci\u00f3n de las tareas en las que se dividir\u00e1 nuestro desarrollo completa.</p>"},{"location":"7_1_EjemploCreacionModeloBasico/#anadir-el-modelo","title":"A\u00f1adir el modelo","text":"<p>Lo primer de todo ser\u00e1 ir al fichero <code>models/models.py</code> y comenzar a modificar el fichero existente para crear el modelo seg\u00fan nuestras necesidades. </p> <p>Recordad que tenemos por una parte <code>__init__.py</code> donde se importan los modelos que hay en <code>./models</code>, y que aqu\u00ed tenemos otro <code>models/__init__.py</code> que nos indica los ficheros modelos concretos a importar, en este caso <code>models/models.py</code>.</p> Comprobamos que la aplicaci\u00f3n esta instalada correctamente <p>En principio, los campos que vamos a necesitar van a ser los siguientes:</p> <ul> <li>nombre de tareas, de tipo texto corto (<code>fields.Char()</code>)</li> <li>descripci\u00f3n, de tipo texto largo (<code>fields.Text()</code>)</li> </ul> <p>As\u00ed pues, comencemos modificando el modelo, para lo cual damos un nombre a la clase de la tarea y le asignamos un nombre y una descripci\u00f3n.</p> <p>El nombre que le vamos a dar a la clase es <code>tareas_sergio</code> en mi caso, que me llamo as\u00ed, y despu\u00e9s en el nombre debemos especificar de nuevo este nombre precedido de forma correcta por el nombre de la aplicaci\u00f3n.</p> models.py <pre><code>from odoo import models, fields, api\n\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    _description = 'gestion_tareas_sergio.tareas_sergio'\n\n    nombre = fields.Char()\n    descripcion = fields.Text()\n</code></pre> <p>Intenta hacer esta parte sin mirar la soluci\u00f3n....</p> <p>Vamos a comenzar poco a poco, de forma que tras cada modificaci\u00f3n vamos a reinstalar la aplicaci\u00f3n para comprobar que todo funciona correctamente. Si hacemos muchos cambios a la vez sin reinstalar ni verificar nos encontraremos con problemas errores arrastrados que ser\u00e1n muy dif\u00edciles de solucionar. </p>"},{"location":"7_1_EjemploCreacionModeloBasico/#revision-de-la-base-de-datos","title":"Revisi\u00f3n de la base de datos","text":"<p>En Odoo, la estructura de las tablas creadas depende del modelo (model) definido en el sistema. Odoo utiliza el ORM (Object-Relational Mapping) de Python para mapear clases a tablas en la base de datos PostgreSQL.</p> <p>As\u00ed pues, Una vez instalada, si no hemos tenido ning\u00fan problema, podemos comprobar c\u00f3mo ha trabajado este ORM y c\u00f3mo debe haberse creado el modelo y por tanto deben haber cambios en la base de datos. </p> <p>Vamos a revisar estos cambios y comprobar que todo cambio en el modelo repercute en un cambio en las tablas.</p> <p>Para comprobar los cambios realizados en la base de datos, tenemos tres opciones: </p> <ul> <li>desde el propio interfaz de odoo en modo desarrollo</li> <li>desde la l\u00ednea de comandos usando el interfaz de PostgreSQL</li> <li>o desde una herramienta de administraci\u00f3n de base de datos con interfaz gr\u00e1fico como puede ser dbeaver</li> </ul>"},{"location":"7_1_EjemploCreacionModeloBasico/#desde-el-interfaz-de-odoo","title":"Desde el interfaz de odoo","text":"<p>Para revisar los modelos desde el interfaz de Odoo, una vez en modo desarrollo, accedemos a Ajustes -&gt; T\u00e9cnico y ah\u00ed tenemos una secci\u00f3n dedicada a la Estructura de la base de datos:</p> Revisi\u00f3n de base de datos desde odoo <p>Aqu\u00ed podemos ver un listado de todas las tablas tanto del propio sistema Odoo como de todas las aplicaciones que tenemos instaladas. </p> <p>En Odoo, el nombre de la tabla que se crea en la base de datos se determina principalmente por el atributo <code>_name</code> del modelo:</p> <ul> <li>Si defines <code>_name = 'mi.modelo'</code>, la tabla se llamar\u00e1 <code>mi_modelo</code>.</li> <li>Odoo reemplaza los puntos (.) por guiones bajos (_) para formar el nombre de la tabla.</li> </ul> <p>Si buscamos el modelo que hemos creado, en mi caso tareas_sergio, clicamos sobre el y podemos ver sus caracter\u00edsticas as\u00ed como los campos que tiene: </p> Revisi\u00f3n de base de datos desde odoo. Campos modelo <p>Como se puede ver en la anterior figura, adem\u00e1s de los dos campos que hemos creado para el modelo, Odoo crea una serie de campos para llevar control de versiones y a\u00f1adir sus propios \u00edndices.</p>"},{"location":"7_1_EjemploCreacionModeloBasico/#desde-la-linea-de-comandos","title":"Desde la l\u00ednea de comandos.","text":"<p>Como somos unos apasionados de los sistemas, nos gusta comprobar que todo funciona sin entorno gr\u00e1fico, por lo que podemos por una parte entrar en la interfaz de PostgreSQL y desde ah\u00ed, revisar tanto la existencia de la tabla asociada al modelo, como de sus campos.</p> <p>Para ello, entramos en el terminal del contenedor:</p> <pre><code>docker exec -it postgresql bash\n</code></pre> <p>Accedemos al interfaz de comando de PostgreSQL</p> <pre><code>psql -U odoo\n</code></pre> <p>Una vez en el interfaz, comprobamos las bases de datos existentes y cambiamos a la correspondiente</p> <pre><code>\\l\n\\c odoo\n</code></pre> <p>buscamos la tabla con una de las siguientes opciones</p> <p></p><pre><code>\\dt *sergio*\n\nSELECT * FROM pg_tables WHERE tablename LIKE '%sergio%';\n</code></pre> En el primer caso, el * (asterisco) sirve como comod\u00edn. <p></p> <p>y finalmente, listamos los campos de la tabla:</p> <pre><code>\\d \\d gestion_tareas_sergio_tareas_sergio\n\nSELECT column_name, data_type \nFROM information_schema.columns \nWHERE table_name = 'gestion_tareas_sergio_tareas_sergio';\n</code></pre> <p>y para salir del interfaz de PosgreSQL:</p> <pre><code>\\q\n</code></pre> Revisi\u00f3n de base de datos desde odoo. Campos modelo desde interfaz PosgreSQL"},{"location":"7_1_EjemploCreacionModeloBasico/#desde-dbeaver","title":"Desde dbeaver","text":"<p>Tamb\u00ed\u00e9n podemos utilizar esta aplicaci\u00f3n de gesti\u00f3n de base de datos para acceder y comprobar las tablas y campos de nuestro modelo:</p> <p>Para ello, tras instalar la aplicaci\u00f3n, creamos una nueva conexi\u00f3n a la base de datos; como hemos abierto el puerto del contenedor en la definici\u00f3n del <code>docker-compose.yml</code>, podemos acceder como si se tratara de una base de datos en local.</p> <p>Creamos y configuramos una conexi\u00f3n: </p> Configuraci\u00f3n conexi\u00f3n en dbeaver <p>Si todo funciona bien podemos ver tambi\u00e9n la tabla y su estructura.</p> Tabla y su estructura"},{"location":"7_1_EjemploCreacionModeloBasico/#vistas-menu-y-action","title":"Vistas, men\u00fa y action","text":"<p>Ahora que ya tenemos el modelo definido, lo hemos revisado en la base de datos, es momento de continuar trabajando con nuestra m\u00f3dulo y hacer que sea visible desde el men\u00fa de Odoo.</p> <p>Para ello, tal y como hemos visto en el ejemplo de \"Hola Mundo 3\" tenemos que definir las vistas que queremos publicar, tenemos que mostrar una opci\u00f3n en el men\u00fa para poder ver estas vistas y activar las acciones para dar funcionalidad al men\u00fa.</p>"},{"location":"7_1_EjemploCreacionModeloBasico/#configurando-vistas","title":"Configurando vistas","text":"<p>De momento, este modelo no es accesible desde ning\u00fan sitio: no tenemos ninguna vista. Por defecto, Odoo crea unas vistas b\u00e1sicas si no haces nada, pero vamos a ver d\u00f3nde est\u00e1n y c\u00f3mo personalizarlas.</p> <p>Las vistas est\u00e1n en el directorio <code>views</code>, en un documento XML. </p> <p>En este fichero comentado tenemos algunos bloques que van a ser: </p> <ul> <li>uno de vista, </li> <li>uno de action (que veremos m\u00e1s adelante), </li> <li>uno de server action y </li> <li>uno de men\u00fas. </li> </ul> <p>Vamos a ir vi\u00e9ndolos poco a poco, porque se trata de ir definiendo cada uno de esos bloques</p> <p>Realmente, un bloque <code>&lt;record&gt;</code> implica que va a ser un registro en la base de datos. Este registro necesita saber d\u00f3nde se va a guardar, en el primer caso en el modelo <code>ir.ui.view</code> (las vistas tambi\u00e9n son modelos en Odoo).</p> <p>As\u00ed pues comenzamos descomentando el primer bloque y ponemos un <code>id</code> \u00fanico, en mi caso, por ejemplo <code>gestion_tareas_sergio.list</code>, que ser\u00e1 la vista en modo lista (anteriormente Tree) de las tareas.</p> <p>Establecemos un nombre (no es lo m\u00e1s importante, pero hay que establecerlo), por ejemplo <code>Gestion Tareas Sergio list</code>. El modelo sobre el que va a actuar esta vista ser\u00e1 el de tareas. </p> <p>Despu\u00e9s establecemos el modelo que debe coincidir con el nombre del modelo que hemos establecido al definir el modelo, en mi caso \"gestion_tareas_sergio.tareas_sergio\". Esto si es fundamental</p> <p>A continuaci\u00f3n, a\u00f1adimos el listado de campos que mostrar\u00e1 la vista. En este caso, solo tenemos dos campos creado, <code>nombre</code> y <code>descripcion</code>. De nuevo son los mismos que hemos establecido en el modelo.</p> Definiendo la vista de un modelo <p>Este XML indica que es una vista de tipo List y que mostrar\u00e1 el campo <code>name</code> del modelo. Este campo debe existir en el fichero Python, como hemos visto antes.</p> <p>Revisando la vista definida</p> <p>Una vez definida la vista, ahora deber\u00edamos poder encontrar la vista si consultamos desde la aplicaci\u00f3n el listado de vistas. Recordamos que nuestra vista se llama <code>manage_task_list</code>. Si actualizamos el m\u00f3dulo, la podremos encontrar. En este caso, no hemos tenido que reiniciar el servicio. </p> <p></p> Listado de vistas <p></p>"},{"location":"7_1_EjemploCreacionModeloBasico/#actions","title":"Actions","text":"<p>La vista a\u00fan es inaccesible porque no hay ning\u00fan men\u00fa que permita acceder a ella. Para relacionarlo y ver una lista de tareas, vamos a activar el action correspondiente.</p> <p>Un action permite abrir, cuando se relacione con una opci\u00f3n de men\u00fa, la vista correspondiente. Ser\u00e1 un registro del modelo de acciones de ventana (<code>ir.actions.act_window</code>).</p> <p>Continuamos pues descomentando el siguiente bloque de c\u00f3digo y asignado un <code>id</code> \u00fanico por ejemplo <code>GestionTareasSergio window</code>. Le ponemos un nombre, importante el modelo sobre el que act\u00faa y el orden en el que queremos que se muestren las vistas (primero la list que acabamos de crear y despu\u00e9s la form, que Odoo generar\u00e1 autom\u00e1ticamente si no la hemos definido).</p> ir.actions.act_window <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_window\"&gt;\n  &lt;field name=\"name\"&gt;GestionTareasSergio window&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;gestion_tareas_sergio.tareas_sergio&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Una acci\u00f3n relaciona un men\u00fa o bot\u00f3n con una acci\u00f3n que se desencadena en el cliente y se convierte en una petici\u00f3n al servidor. En este caso, el action se transforma en una petici\u00f3n que demanda al servidor las vistas list y torm del modelo de tareas, y el servidor devolver\u00e1 la vista list creada y una vista form generada autom\u00e1ticamente.</p>"},{"location":"7_1_EjemploCreacionModeloBasico/#menus","title":"Men\u00fas","text":"<p>Para que este action funcione, el cliente debe tener un men\u00fa. </p> <p>As\u00ed que seguimos descomentando el bloque de c\u00f3digo de men\u00fa y vamos a crear una opci\u00f3n de men\u00fa principal, por ejemplo <code>Tareas Sergio</code>, y de ah\u00ed colgar\u00e1 un submen\u00fa llamado <code>Gesti\u00f3n</code>, y finalmente otro llamado <code>Tareas</code>. El action del men\u00fa <code>Tareas</code> ser\u00e1 el que hemos definido antes, para que al pulsar se cargue la vista de tareas, o sea la <code>action</code> de este men\u00fa, ser\u00e1 el <code>id</code> del <code>ir.action.act_window</code> que hemos definido antes</p> <p>Por una parte tenemos el c\u00f3digo </p> Bloques de men\u00fa <pre><code>&lt;!-- Top menu item --&gt;\n&lt;menuitem name=\"Gesti\u00f3n Tareas Sergio\" id=\"gestion_tareas_sergio.menu_root\"/&gt;\n\n&lt;!-- menu categories --&gt;\n&lt;menuitem name=\"Gesti\u00f3n\" id=\"gestion_tareas_sergio.gestion\" parent=\"gestion_tareas_sergio.menu_root\"/&gt;\n\n&lt;!-- actions --&gt;\n&lt;menuitem name=\"Tareas\" id=\"gestion_tareas_sergio.gestion_tareas\" parent=\"gestion_tareas_sergio.gestion\"\n          action=\"gestion_tareas_sergio.action_window\"/&gt;\n</code></pre> <p>y por otra tenemos el esquema de c\u00f3mo debe estar todo conectado:</p> Estructura de la configuraci\u00f3n del men\u00fa <p>Ahora ya tenemos definido el men\u00fa y antes de seguir ser\u00eda aconsejable volver a reinstalar el m\u00f3dulo para asegurarnos que no tenemos ning\u00fan error y comprobar si sale o no el men\u00fa.</p> <p>Si revisamos, sigue sin salir nuestra aplicaci\u00f3n en el men\u00fa tras haberlo definido. Esto es debido a un tema de permisos que abordamos en el siguiente punto.</p>"},{"location":"7_1_EjemploCreacionModeloBasico/#permisos","title":"Permisos","text":"<p>En Odoo, para que un usuario pueda ver un men\u00fa y acceder a listas o formularios de un modelo, se deben cumplir ciertos requisitos de permisos y configuraciones. </p> <p>Se debe definir un archivo XML o CSV con los permisos para el modelo. Esto se hace en un archivo como <code>ir.model.access.csv</code>.</p> <p>Cada l\u00ednea define:</p> <ul> <li>Modelo, </li> <li>Grupo</li> <li>Permisos: leer (<code>read</code>), escribir (<code>write</code>), crear (<code>create</code>), borrar (<code>unlink</code>)</li> </ul> <p>Ejemplo:</p> <pre><code>id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_gestion_tareas_sergio_tareas_sergio,acceso_tareas_sergio,model_gestion_tareas_sergio_tareas_sergio,base.group_user,1,1,1,1\n</code></pre> <p>donde cada l\u00ednea representa un conjunto de permisos para un grupo sobre un modelo. Los campos son:</p> <ul> <li>id: Identificador \u00fanico del registro (puede ser cualquier nombre \u00fanico).</li> <li>name: Nombre legible del permiso, puede ser cualquiera</li> <li>model_id:id:  hace referencia al modelo al que se aplican los permisos. La forma est\u00e1ndar de referenciarlo es <code>model_&lt;nombre_del_modelo&gt;</code>, donde <code>&lt;nombre_del_modelo&gt;</code> es el valor de <code>_name</code> del modelo, sustituyendo los puntos (<code>.</code>) por guiones bajos (<code>_</code>). Puede parecer poco intuitivo, pero es el formato que exige Odoo.</li> <li>group_id:id: Grupo de usuarios al que se le asignan los permisos (puede ser base.group_user, base.group_system, etc.). Si se deja vac\u00edo, aplica a todos los usuarios.</li> <li>perm_read: 1 si puede leer, 0 si no.</li> <li>perm_write: 1 si puede modificar, 0 si no.</li> <li>perm_create: 1 si puede crear, 0 si no.</li> <li>perm_unlink: 1 si puede borrar, 0 si no.</li> </ul> <p>De esta forma, para que un men\u00fa sea visible:</p> <ul> <li>El usuario debe tener acceso al grupo asignado al men\u00fa. Para simplificar de momento van a ser todos los usuarios: <code>base.group_user</code></li> <li>El men\u00fa debe estar vinculado a una acci\u00f3n, aspecto que en nuestro caso ya hemos hecho</li> <li>Se debe tener al menos una vista de tipo <code>list</code> o <code>form</code> para que la acci\u00f3n funcione correctamente.</li> </ul>"},{"location":"7_1_EjemploCreacionModeloBasico/#manifest","title":"Manifest","text":"<p>En el fichero <code>__manifest__.py</code> hay que habilitar estos permisos para que se carguen. Esta l\u00ednea suele venir comentada por defecto y hay que descomentarla.</p> <pre><code>'security/ir.model.access.csv',\n</code></pre> <p>Ahora ya deber\u00edamos verlo todo: reiniciamos Docker o el servicio, actualizamos el m\u00f3dulo y ya aparece la opci\u00f3n de men\u00fa principal <code>Manage</code>. Si la cargamos, tenemos <code>Gesti\u00f3n</code> y <code>Tareas</code>. Al pulsar en <code>Tareas</code> aparece la vista con el campo <code>name</code>. Si pulsamos en \"Nuevo\", podemos crear tareas (esto es una vista formulario generada por defecto).</p>"},{"location":"7_1_EjemploCreacionModeloBasico/#verificacion-rapida","title":"Verificaci\u00f3n r\u00e1pida","text":"<p>Para comprobar si todo est\u00e1 bien configurado:</p> <ol> <li>Activa el modo desarrollador.</li> <li>Ve a Ajustes &gt; T\u00e9cnico &gt; Seguridad &gt; Reglas de acceso y Reglas de registro.</li> <li>Aseg\u00farate de que el usuario pertenece al grupo correcto.</li> <li>Verifica que el men\u00fa tiene una acci\u00f3n v\u00e1lida y que el modelo tiene permisos definidos.</li> </ol> <p>o directamente, podemos ver que ya aparece en el men\u00fa de aplicacion todos los elementos que hemos definido</p> Vsita de men\u00fa y aplicaci\u00f3n <p>En esta imagen estamos viendo la vista tipo listado con los dos campos, y adem\u00e1s se ha accedido al men\u00fa y se puede ver los 3 niveles de men\u00fa que hemos definido: Gesti\u00f3n Tareas Sergio -&gt; Gesti\u00f3n -&gt; Tareas</p> <p>De esta manera, hemos visto c\u00f3mo crear un m\u00f3dulo b\u00e1sico con funcionalidad b\u00e1sica: un modelo, vistas, permisos, opciones de men\u00fa y c\u00f3mo relacionarlo todo.</p>"},{"location":"7_2_EjemploCamposBasicos/","title":"7.2. Campos b\u00e1sicos y relacionales","text":"<p>Seguimos con el ejemplo creado en la secci\u00f3n anterior y en este apartado veremos c\u00f3mo a\u00f1adir distintos campos b\u00e1sicos y relaciones a nuestros modelos en Odoo:. No nos centraremos en vistas avanzadas, sino en ver la relaci\u00f3n entre modelos y c\u00f3mo Odoo toma vistas por defecto, adem\u00e1s de c\u00f3mo podemos modificarlas un poquito.</p> <p>Tenemos un modelo <code>tareas_sergio</code> con dos campos propios y dos campos de tipo car\u00e1cter llamado <code>name</code> y <code>descripcion</code>. </p> <p>Documentaci\u00f3n de desarrollo ORM</p> <p>Puedes consultar la documentaci\u00f3n de desarrollo de Odoo para m\u00e1s informaci\u00f3n sobre el ORM y los campos disponibles.</p>"},{"location":"7_2_EjemploCamposBasicos/#campos-basicos-y-parametros","title":"Campos b\u00e1sicos y par\u00e1metros","text":"<p>Al crear un campo de tipo car\u00e1cter, puedes a\u00f1adir par\u00e1metros como:</p> <ul> <li>label: Si no se indica, la etiqueta ser\u00e1 el nombre del campo.</li> <li>readonly: Para hacerlo de solo lectura.</li> <li>required: Para hacerlo obligatorio.</li> <li>help: Mensaje de ayuda, por ejemplo: \"Introduzca el nombre\".</li> </ul> <p>Cuando modificas el modelo, debes reiniciar Docker y actualizar el m\u00f3dulo para aplicar los cambios.</p>"},{"location":"7_2_EjemploCamposBasicos/#ejemplo-de-campos-basicos","title":"Ejemplo de campos b\u00e1sicos","text":"<p>Supongamos que a\u00f1adimos los siguientes campos al modelo <code>tareas_sergio</code>, pero a\u00f1adiendo etiquetas, ayuda y haciendo que alg\u00fan campo sea requerido:</p> <ul> <li><code>creation_date</code>: tipo <code>Date</code></li> <li><code>start_date</code>: tipo <code>Datetime</code></li> <li><code>end_date</code>: tipo <code>Datetime</code></li> <li><code>is_done</code>: tipo <code>Boolean</code></li> </ul> <p>Vamos a a\u00f1adir estos campos, si es necesario revisando la documentaci\u00f3n de Odoo sobre los tipos de campos. A\u00f1adimos tambi\u00e9n caracter\u00edsticas indicadas y modificamos los campos ya existente con estos par\u00e1metros</p> models.py <pre><code>from odoo import models, fields, api\n\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    _description = 'gestion_tareas_sergio.tareas_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre\")\n    descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n de la tarea\")\n    fecha_creacion = fields.Date(string=\"Fecha Creaci\u00f3n Tarea\", readonly=False, required=True, help=\"Fecha en la que se di\u00f3 de alta la tarea\")\n    fecha_ini = fields.Datetime(string=\"Fecha Inicio\", readonly=False, required=True, help=\"Fecha en la que se inicia la tarea\")\n    fecha_fin = fields.Datetime(string=\"Fecha Final\", readonly=False, required=False, help=\"Fecha en la que se finaliza la tarea\")\n    finalizado = fields.Boolean(string=\"Finalizado\", readonly=False, required=False, help=\"Indica si la tarea ha sido finalizada o no\")\n</code></pre> <p>Una vez a\u00f1adidos, comprobamos que todo funciona bien reinstalando el m\u00f3dulo. Recuerda reiniciar el servicio y actualizar el m\u00f3dulo tras modificar los modelos.</p> <p>Actualizamos y comprobamos que tenemos los nuevos campos. Comprobamos que sale la ayuda y que los campos requeridos funcionan como tal.</p>"},{"location":"7_2_EjemploCamposBasicos/#actualizando-la-vista-en-odoo","title":"Actualizando la vista en Odoo","text":"<p>Por defecto, Odoo crea una vista de tipo formulario con todos los campos. </p> <p>Si entramos en esta vista, veremos que es muy pobre y que normalmente no esta ajustada de forma coherente. Para personalizar la vista, vamos a editar el archivo de vistas XML y a\u00f1ade los campos dentro de una etiqueta <code>&lt;group&gt;</code>.</p> <p>As\u00ed pues, para crear la vista, vamos a copiar y pegar la vista que ya tenemos en formato <code>list</code> y la vamos a renombrar como tipo <code>form</code> y donde tenemos las etiquetas <code>&lt;list&gt;</code> vamos a tener <code>&lt;form&gt;</code>, <code>&lt;sheet&gt;</code> y <code>&lt;group&gt;</code> </p> <p>Observa el siguiente c\u00f3digo y ver\u00e1s que no todos los campos aparecen en las definiciones. Si todo esta correcto, este ejemplo en el formato listado, aparecer\u00e1n 3 campos y en el formato formulario aparecer\u00e1n 5 campos.</p> <p>Como siempre el nombre del modelo puede ser el que quieras, pero se recomienda seguir una misma nomenclatura durante todo el proyecto y el modelo, debemos indicar correctamente el nombre del modelo definido. Si nos equivocamos en el nombre del modelo, mostrar\u00e1 los formularios por defecto</p> <pre><code>&lt;!-- explicit list view definition --&gt;\n  &lt;record model=\"ir.ui.view\" id=\"tareas_list\"&gt;\n  &lt;field name=\"name\"&gt;gestion_tareas_sergio.tareas_sergio.list&lt;/field&gt;\n  &lt;field name=\"model\"&gt;gestion_tareas_sergio.tareas_sergio&lt;/field&gt;\n  &lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;list&gt;\n      &lt;field name=\"name\"/&gt;\n      &lt;field name=\"descripcion\"/&gt;\n      &lt;field name=\"finalizado\"/&gt;\n    &lt;/list&gt;\n  &lt;/field&gt;\n&lt;/record&gt;\n\n&lt;!-- explicit FORM view definition --&gt;\n&lt;record model=\"ir.ui.view\" id=\"tareas_form\"&gt;\n  &lt;field name=\"name\"&gt;gestion_tareas_sergio.tareas_sergio.form&lt;/field&gt;\n  &lt;field name=\"model\"&gt;gestion_tareas_sergio.tareas_sergio&lt;/field&gt;\n  &lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;form&gt;\n      &lt;sheet&gt;\n        &lt;group&gt;\n          &lt;field name=\"name\"/&gt;\n          &lt;field name=\"descripcion\"/&gt;\n          &lt;field name=\"fecha_creacion\"/&gt;\n          &lt;field name=\"fecha_ini\"/&gt;\n          &lt;!-- &lt;field name=\"fecha_fin\"/&gt; --&gt;\n          &lt;field name=\"finalizado\"/&gt;\n        &lt;/group&gt;\n      &lt;/sheet&gt;\n    &lt;/form&gt;\n  &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Comprueba que todo funciona correctamente y que puedes introducir valores en todos los campos.</p>"},{"location":"7_2_EjemploCamposBasicos/#relaciones","title":"Relaciones","text":"<p>Las relaciones entre los modelos (en definitiva, entre las tablas de la base de datos) tambi\u00e9n se simplifican gracias al ORM. De esta manera, las relaciones uno a muchos se implementan en Odoo mediante el campo <code>Many2one</code> y las relaciones muchos a muchos mediante <code>Many2many</code>. Las relaciones muchos a muchos, en una base de datos relacional, implican una tercera tabla intermedia, pero en Odoo no tenemos que preocuparnos por estos detalles si no queremos, ya que el mapeo de objetos lo detectar\u00e1 y crear\u00e1 las tablas, claves y restricciones de integridad necesarias. </p>"},{"location":"7_2_EjemploCamposBasicos/#campos-relacionales-many2one","title":"Campos relacionales: Many2one","text":"<p>Vamos a comprobar c\u00f3mo podemos establecer una relaci\u00f3n <code>Many2one</code>, para ello vamos a crear un nuevo modelo llamado sprint que despu\u00e9s relacionaremos con las tareas.</p> <p>Sprints y tareas</p> <p>Un sprint es un ciclo de trabajo corto y repetitivo, t\u00edpicamente de 1 a 4 semanas, en el que:</p> <ul> <li>Se planifican tareas espec\u00edficas (historias de usuario, bugs, mejoras).</li> <li>Se ejecutan esas tareas con un objetivo claro.</li> <li>Se revisa el trabajo realizado al final del sprint.</li> <li>Se reflexiona sobre c\u00f3mo mejorar en el siguiente sprint (retrospectiva).</li> </ul> <p>Un sprint contiene varias tareas (tambi\u00e9n llamadas issues, tickets o historias de usuario) que son las  unidades de trabajo que deben completarse dentro del sprint.</p> <p>As\u00ed pues, vamos a crear un nuevo modelo <code>sprint</code> con los siguientes campos:</p> <ul> <li>nombre</li> <li>descripci\u00f3n</li> <li>fecha_inicio</li> <li>fecha_fin</li> </ul> <p>Intenta generar el c\u00f3digo, es muy sencillo, puesto que la mayor\u00eda de los campos los tenemos en el modelo de tareas, y antes de introducir la relaci\u00f3n, asegura que todo es correcto reiniciando y reinstalando.</p> modelo sprint en models.py <pre><code>class spints_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.sprints_sergio'\n    _description = 'gestion_tareas_sergio.sprints_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre\")\n    descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n de la tarea\")\n    fecha_ini = fields.Datetime(string=\"Fecha Inicio\", readonly=False, required=True, help=\"Fecha en la que se inicia la tarea\")\n    fecha_fin = fields.Datetime(string=\"Fecha Final\", readonly=False, required=False, help=\"Fecha en la que se finaliza la tarea\")\n</code></pre> <p>Una vez tenemos el nuevo modelo, para relacionar tareas con sprints, a\u00f1adimos un campo <code>sprint_id</code> en el modelo <code>tareas_sergio</code> de tipo <code>Many2one</code> de la siguiente forma:</p> <pre><code>sprint = fields.Many2one('gestion_tareas_sergio.sprints_sergio', string='Sprint relacionado', ondelete='set null', help='Sprint relacionado')\n</code></pre> <p>Este nuevo campo significa:</p> <ul> <li><code>sprint</code>: es el nombre del campo en el modelo actual (<code>tareas_sergio</code>).</li> <li><code>fields.Many2one(...)</code>: define una relaci\u00f3n de muchos a uno con otro modelo.</li> <li><code>'gestion_tareas_sergio.sprints_sergio'</code>: indica el modelo destino de la relaci\u00f3n (en este caso, el modelo de sprints).</li> <li><code>string='Sprint relacionado'</code>: etiqueta que se mostrar\u00e1 en la interfaz de usuario para este campo.</li> <li><code>ondelete='set null'</code>: si se elimina el sprint relacionado, este campo se establecer\u00e1 a <code>null</code> (la tarea no se elimina, solo pierde la relaci\u00f3n). Otros valores podr\u00edan ser: <code>cascade</code>, <code>restrict</code> (Impide eliminar el registro relacionado si hay registros que lo usan), <code>set default</code> y <code>no action</code>  (No hace nada autom\u00e1ticamente. Puede causar errores si hay restricciones SQL). </li> <li><code>help='Sprint relacionado'</code>: texto de ayuda que aparece al pasar el cursor sobre el campo.</li> </ul> <p>De esta manera, con esta simple l\u00edneas por medio de ORM le estamos informado a Odoo de la relaci\u00f3n entre ambos modelos.</p> <p>Es el momento de probar que todo funciona bien aunque para ello como m\u00ednimo debemos:</p> <ul> <li>A\u00f1adir el nuevo campo en la vista formulario, por ejemplo</li> <li>A\u00f1adir nnuevos permisos correspondientes en el archivo de seguridad para poder acceder al nuevo modelo sprints</li> </ul> ir.model.access.csv <pre><code>id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_gestion_tareas_sergio_tareas_sergio,acceso_tareas_sergio,model_gestion_tareas_sergio_tareas_sergio,base.group_user,1,1,1,1\naccess_gestion_tareas_sergio_sprints_sergio,acceso_sprints_sergio,model_gestion_tareas_sergio_sprints_sergio,base.group_user,1,1,1,1\n</code></pre> <p>Probamos y observamos que ya tenemos el nuevo campo, ya podemos seleccionar e incluso crear nuevos sprints desde aqui aunque no tenemos vistas del modelo.</p> <p>Vamos a configurar para que aparezca en el men\u00fa el nuevo modelo al igual que lo hace el modelo de tareas observaremos que si no definimos vistas entonces Odoo mostrar\u00e1 las vistas por defecto, y si quieremos cambiar algo en estas vistas, simplemetne las definimos..</p>"},{"location":"7_2_EjemploCamposBasicos/#campos-relacionales-one2many","title":"Campos relacionales: One2many","text":"<p>La relaci\u00f3n One2many (uno a muchos) es un concepto fundamental en bases de datos y frameworks como Odoo. Este tipo de relaci\u00f3n indica que un registro de un modelo puede estar vinculado a m\u00faltiples registros de otro modelo. Por ejemplo, una factura (modelo padre) puede tener varias l\u00edneas de factura (modelo hijo). En la pr\u00e1ctica, esto nos permite a partir de un registro detalle, obtener todos los registros que apunta a este., o sea, que se crea un un campo especial que permite asociar una lista de registros hijos al registro padre.</p> <p>En Odoo, el campo <code>One2many</code> se define especificando el modelo relacionado y el campo inverso que conecta ambos modelos. Esto facilita la navegaci\u00f3n y gesti\u00f3n de datos relacionados, permitiendo mostrar, agregar o eliminar registros hijos directamente desde el formulario del registro padre. Esta relaci\u00f3n es clave para estructurar datos complejos y mantener la integridad referencial dentro de la aplicaci\u00f3n.</p> <p>Vamos a crear la relaci\u00f3n inversa a la creada anteriormente, mediante la creaci\u00f3n de un nuevo campo en el modelo <code>sprint</code> que se llame por ejemplo <code>tareas</code> que ser\u00e1 de tipo  <code>One2many</code> como sigue:</p> <pre><code>tareas = fields.One2many('gestion_tareas_sergio.tareas_sergio', 'sprins', string='Tareas')\n</code></pre> <p>La l\u00ednea anterior define un campo llamado <code>tareas</code>  de tipo <code>One2many</code>, lo que significa que permite asociar m\u00faltiples registros del modelo <code>'gestion_tareas_sergio.tareas_sergio'</code>, utilizando el campo inverso <code>'sprins'</code> en el modelo de tareas para establecer la relaci\u00f3n. El campo inverso es necesario e imprescidible y es el campo que ha creado la relaci\u00f3n <code>Many2one</code> en el modelo indicado.</p> <p>El par\u00e1metro <code>string='Tareas'</code> especifica la etiqueta que se mostrar\u00e1 en la interfaz de usuario para este campo. </p> <p>Gracias a esta definici\u00f3n, desde el formulario del modelo principal (por ejemplo, un sprint), se pueden visualizar y gestionar todas las tareas relacionadas, facilitando la administraci\u00f3n de la informaci\u00f3n y la navegaci\u00f3n entre registros vinculados.</p> <p>Veamos a continuaci\u00f3n un ejemplo de uso de esta relaci\u00f3n: </p> Ejemplo de relaci\u00f3n One2many"},{"location":"7_2_EjemploCamposBasicos/#campos-relacionales-many2many","title":"Campos relacionales: Many2many","text":"<p>Los campos relacionales Many2many permiten establecer una relaci\u00f3n de muchos a muchos entre dos modelos en una base de datos o framework como Odoo. Esto significa que un registro de un modelo puede estar vinculado a varios registros de otro modelo, y viceversa. Por ejemplo, un estudiante puede estar inscrito en varios cursos, y cada curso puede tener varios estudiantes asociados.</p> <p>En Odoo, el campo <code>Many2many</code> se utiliza para crear este tipo de relaci\u00f3n, facilitando la gesti\u00f3n y visualizaci\u00f3n de datos complejos donde la asociaci\u00f3n entre registros es m\u00faltiple en ambos sentidos. Este campo suele representarse en la interfaz de usuario mediante listas o tablas donde se pueden seleccionar y gestionar f\u00e1cilmente los registros relacionados.</p> <p>Para nuestro utilizar este tipo de relaciones en nuestro ejemplo, supongamos que definimos un modelo que sea Tecnolog\u00edas de forma que podamos establecer un listado de las diferentes tecnolog\u00edas que pueden aplicarse a un proyecto, por ejemplo python, java, javascript, etc... De esta forma un proyecto puede implementarse usando muchas tecnolog\u00edas y cada tecnolog\u00eda puede ser usada en muchos proyectos.</p> <p>Vamos pues a crar un modelo \"Tecnolog\u00eda\" que tenga los siguientes campos:</p> <ul> <li>nombre</li> <li>descripci\u00f3n</li> <li>logo: donde incluiremos el logotipo de la tecnolog\u00eda, y as\u00ed comprobamos como funciona un tampo de tipo imagen. Busca informaci\u00f3n y crea un campo imagen de 200x200 pixel m\u00e1ximo.</li> </ul> nuevo modelo tecnolog\u00eda en models.py <pre><code>class tecnologias_sergio(models.Model):\n  _name = 'gestion_tareas_sergio.tecnologias_sergio'\n  _description = 'gestion_tareas_sergio.tecnologias_sergio'\n\n  name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre de la tecnolog\u00eda\")\n  descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n de la tecnolog\u00eda\")\n  logo = fields.image(string=\"Logo\", help=\"Logo de la tecnolog\u00eda\", max_width=256, max_height=256)\n</code></pre> <p>y ahora creamos campos en tareas y tecnolog\u00edas para generar la relaci\u00f3n muchos a muchos.</p> <p>Para asociar tareas y tecnolog\u00edas, a\u00f1adiimos en <code>tareas</code>:</p> <pre><code>    rel_tecnologias = fields.Many2many( \n        comodel_name='gestion_tareas_sergio.tecnologias_sergio',\n        relation='relacion_tareas_tecnologias',\n        column1='rel_tareas',\n        column2='rel_tecnologias',\n        string='Tecnolog\u00edas')\n</code></pre> <p>donde se define un campo llamado <code>rel_tecnologias</code> utilizando el tipo de campo <code>Many2many</code> siendo los parametros utilizados los siguientes:</p> <ul> <li>comodel_name: indica el modelo con el que se realiza la relaci\u00f3n muchos a muchos, en nuestro caso <code>'gestion_tareas_sergio.tecnologias_sergio'</code> .</li> <li>relation, <code>'relacion_tareas_tecnologias'</code>, indica el nombre de la tabla intermedia que se utilizar\u00e1 en la base de datos para gestionar la relaci\u00f3n entre tareas y tecnolog\u00edas. </li> <li>column1 y column1: <code>'rel_tareas'</code> y <code>'rel_tecnologias'</code>, especifican los nombres de las columnas en la tabla intermedia que referencian a cada uno de los modelos relacionados.</li> <li>El par\u00e1metro <code>string='Tecnolog\u00edas'</code> define la etiqueta que se mostrar\u00e1 en la interfaz de usuario para este campo. </li> </ul> <p>Para comprobar que funciona, realizamos los pasos de siempre:</p> <ul> <li>Incluimos el nuevo modelo en el fichero de seguridad</li> <li>A\u00f1adimos el nuevo campo en la vista</li> <li>A\u00f1adimos un men\u00fa y un action para poder acceder directamente. </li> <li>Reiniciamos y actualizamos.</li> </ul> <p>widgets</p> <p>Al a\u00f1adir el campo en la vista, podemos hacerlo de forma habitual</p> <pre><code>&lt;field name=\"rel_tecnologias\"/&gt;\n</code></pre> <p>o podemos indicar que queremos un widget especifico de visualizaci\u00f3n, en este uno que nos permite ver cada tecnolog\u00eda como un tag</p> <pre><code>&lt;field name=\"rel_tecnologias\" widget=\"many2many_tags\"/&gt;\n</code></pre> <p>Comprueba la diferencia entre ambos</p> <p>PONER ENLACE DE WIDGETS A LOS APUNTES DE CASTILLO QUE EXPLICAN MUY BIEN LOS WIDGETS</p> <p>Y en <code>tecnolog\u00edas</code> hacemos exactamente lo mismo, pero apuntanto a tareas:</p> <pre><code>    rel_tareas = fields.Many2many( \n        comodel_name='gestion_tareas_sergio.tareas_sergio',\n        relation_name='relacion_tareas_tecnologias',\n        column1='rel_tecnologias',\n        column2='rel_tareas',\n        string='Tareas')\n</code></pre> <p>Gracias a esta configuraci\u00f3n, es posible seleccionar y gestionar f\u00e1cilmente las tecnolog\u00edas asociadas a una tarea desde el formulario correspondiente, permitiendo una administraci\u00f3n flexible y eficiente de las relaciones entre tareas y tecnolog\u00edas.</p>"},{"location":"7_3_EjemploCamposComputados/","title":"7.3. Campos b\u00e1sicos computados.","text":"<p>En esta secci\u00f3n se abordar\u00e1 la creaci\u00f3n de campos computados en Odoo, es decir, aquellos campos cuyo valor no es introducido manualmente por el usuario, sino que se determina autom\u00e1ticamente en funci\u00f3n de otros atributos del modelo. Este tipo de campos resulta fundamental para mantener la integridad y coherencia de los datos, as\u00ed como para automatizar procesos dentro del sistema.</p>"},{"location":"7_3_EjemploCamposComputados/#creacion-de-un-campo-computado-sin-almacenamiento-en-la-base-de-datos","title":"Creaci\u00f3n de un campo computado sin almacenamiento en la base de datos","text":"<p>Como primer ejemplo, se proceder\u00e1 a la definici\u00f3n de un campo computado denominado <code>codigo</code>, de tipo <code>char</code>. Por defecto, un campo de este tipo ser\u00eda editable por el usuario, pero en este caso se configurar\u00e1 para que su valor sea calculado mediante una funci\u00f3n espec\u00edfica, por ejemplo, <code>get_codigo</code>.</p> <p>La funci\u00f3n encargada del c\u00e1lculo debe implementarse dentro del mismo modelo. Por convenci\u00f3n, esta funci\u00f3n recibe una colecci\u00f3n de registros (instancias del modelo), lo que permite operar sobre m\u00faltiples elementos de manera eficiente.</p> <p>A continuaci\u00f3n se muestra un ejemplo de implementaci\u00f3n:</p> <pre><code># nuevo campo con el c\u00f3digo de tarea (computado)\ncodigo = fields.Char(compute=\"_get_codigo\") \n\n# Funci\u00f3n del calculo de c\u00f3digo de la tarea\ndef _get_codigo(self):\n    for tarea in self:\n        # Si la tarea no tiene un sprint asignado le asignamos como nombre TSK_ mas nombre tarea\n        if len(tarea.sprint) == 0:\n            tarea.code = \"TSK_\"+str(tarea.id)\n        else:\n            # si no, le generamos un nombre tarea a partir del nombre del sprint\n            tarea.code = str(tarea.sprint.name).upper()+\"_\"+str(tarea.id)\n</code></pre> <p>En este fragmento de c\u00f3digo, se genera un valor \u00fanico para el campo <code>codigo</code> utilizando la clave primaria (<code>id</code>) del registro. Si la tarea no tiene un sprint asociado, el c\u00f3digo generado ser\u00e1 de la forma <code>TSK_&lt;id&gt;</code>. En caso contrario, se utilizar\u00e1 el nombre del sprint en may\u00fasculas seguido del identificador.</p> <p>Nota</p> <p>El campo <code>id</code> es la clave primaria generada autom\u00e1ticamente en todos los modelos de Odoo tal y como se puede ver si revisamos la tablas creadas en PostgreSQL de cada modelo</p> <p>Este campo computado no se almacena en la base de datos; su valor se recalcula din\u00e1micamente cada vez que se visualiza el registro y para visualizar el campo en el formulario, debe a\u00f1adirse expl\u00edcitamente en la vista.</p> <p>Un buen ejercicio ser\u00eda revisar la tabla asociada al modelo en la base de datos para comprobar estos datos.</p> <p>De esta forma, una vez funcione, al crear una nueva tarea sin sprint, el sistema generar\u00e1 autom\u00e1ticamente el c\u00f3digo. Si posteriormente se asigna un sprint y se guarda el registro, el c\u00f3digo se actualizar\u00e1 en funci\u00f3n del nuevo valor.</p>"},{"location":"7_3_EjemploCamposComputados/#campo-calculado-con-almacenamiento-y-dependencias","title":"Campo calculado con almacenamiento y dependencias","text":"<p>En situaciones m\u00e1s complejas, puede ser necesario definir campos computados cuyo valor se almacene en la base de datos y que dependan de otros atributos. Este enfoque es \u00fatil cuando el c\u00e1lculo es costoso o cuando se requiere que el valor est\u00e9 disponible para b\u00fasquedas o filtrados.</p> <p>Supongamos que en el modelo <code>Sprint</code> lo definimos de forma diferente y que tenemos los campos <code>fecha_ini</code> y <code>duracion</code> pero no el <code>fecha_fin</code>. Podr\u00edamos a\u00f1adir como un campo adicional <code>fecha_fin</code>, de tipo <code>Datetime</code>, cuyo valor se calcular\u00e1 autom\u00e1ticamente en funci\u00f3n de la fecha de inicio y la duraci\u00f3n del sprint. Adem\u00e1s, este valor se almacenar\u00e1 en la base de datos y solo se recalcular\u00e1 cuando cambien los campos de los que depende.</p> <p>La implementaci\u00f3n ser\u00eda la siguiente:</p> <pre><code>from datetime import timedelta\n\nclass spints_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.sprints_sergio'\n\n    name = fields.Char()\n    fecha_ini = fields.Datetime()\n    duracion = fields.Integer(string=\"Duracion\", help=\"Cantidad de d\u00edas que tiene asignado el sprint\")\n    fecha_fin = fields.Datetime(compute='_compute_fecha_fin', store=True)\n\n    @api.depends('fecha_fin', 'duracion')\n    def _compute_fecha_fin(self):\n        for sprint in self:\n            if sprint.fecha_ini and sprint.duracion &gt; 0:\n                sprint.fecha_fin = sprint.fecha_ini + timedelta(days=sprint.duracion)\n            else:\n                sprint.fecha_fin = sprint.fecha_ini\n</code></pre> <p>Aspectos clave de la implementaci\u00f3n: </p> <ul> <li>El decorador <code>@api.depends('fecha_ini', 'duracion')</code> indica que el campo <code>fecha_fin</code> se recalcular\u00e1 \u00fanicamente cuando se modifiquen los campos <code>fecha_ini</code> o <code>duracion</code>.</li> <li>El par\u00e1metro <code>store=True</code> en la definici\u00f3n del campo permite que el valor calculado se almacene en la base de datos, facilitando su uso en b\u00fasquedas y vistas.</li> <li>Si alguno de los campos requeridos no est\u00e1 definido, el campo <code>fecha_fin</code> tomar\u00e1 el valor de <code>fecha_ini</code> como valor por defecto.</li> <li>En el c\u00f3digo anterior se han omitido l\u00edneas por simplicidad</li> <li>Puesto que se utiliza la funi\u00f3n <code>timedelta</code> de python se ha importado el m\u00f3dulo que la contiene.</li> </ul> <p>Tras actualizar el m\u00f3dulo y la vista correspondiente, al crear un sprint y asignar una duraci\u00f3n y una fecha de inicio, la fecha de fin se calcular\u00e1 autom\u00e1ticamente y quedar\u00e1 almacenada en la base de datos.</p> <p>Cuidado si se obtienen errores extra\u00f1os</p> <p>Hay ocasiones en que los cambios en los modelos afectan a la base de datos y al reiniciar el servicio, el ORM no se refresca bien debido a inconsistencias en la base de datos, por lo que la \u00fanica soluci\u00f3n es eliminar toda la base de datos, con lo que perdemos los datos. </p> <p>Para eliminar la base de datos, lo hacemos eliminando datos desde docker</p> <pre><code>docker compose down -v\n</code></pre> Ejemplo funcionamiento de campo calculado <p>Importante</p> <p>El uso de campos computados almacenados es recomendable cuando el c\u00e1lculo es costoso o cuando se requiere que el valor est\u00e9 disponible para operaciones de filtrado o agrupamiento en las vistas de Odoo.</p>"},{"location":"7_4_EjemploExcepcionesMensajes/","title":"7.4. Lanzar excepciones y a\u00f1adir mensajes de log.","text":"<p>En este apartado se aborda el manejo de excepciones y la gesti\u00f3n de mensajes de log en Odoo, aspectos fundamentales para garantizar la robustez y mantenibilidad del c\u00f3digo. Se explicar\u00e1 c\u00f3mo lanzar excepciones de manera controlada y c\u00f3mo registrar informaci\u00f3n relevante en el log, utilizando los distintos niveles de severidad que ofrece el framework.</p>"},{"location":"7_4_EjemploExcepcionesMensajes/#manejo-de-excepciones-en-odoo","title":"Manejo de excepciones en Odoo","text":"<p>Odoo proporciona un conjunto de excepciones espec\u00edficas que permiten gestionar errores de forma estructurada. Para profundizar en este tema, se recomienda consultar la documentaci\u00f3n oficial de Odoo sobre gesti\u00f3n de errores.</p> <p>Siguiendo con nuestro ejemplo, supongamos que sobre el campo calculado <code>codigo</code> que genera un identificador \u00fanico para cada tarea, dependiendo del valor del atributo <code>sprint</code>. Es posible que durante la generaci\u00f3n de este c\u00f3digo se produzca un error, por lo que resulta conveniente capturar la excepci\u00f3n y notificar al usuario de manera adecuada.</p> <p>Primero, es necesario importar la excepci\u00f3n correspondiente en el fichero de modelos <code>models.py</code>:</p> <pre><code>from odoo.exceptions import ValidationError\n</code></pre> <p>A continuaci\u00f3n, se recomienda envolver la l\u00f3gica de generaci\u00f3n del c\u00f3digo en un bloque <code>try-except</code>, lanzando una excepci\u00f3n de validaci\u00f3n en caso de error:</p> <pre><code># L\u00f3gica para generar el campo code con excepciones\ntry:\n    # Si no tiene sprint asignado, directamente generamos un error\n    if not self.sprint:\n        raise ValueError(\"El campo 'sprint' es obligatorio para generar el c\u00f3digo.\")\n    # si no, le generamos un nombre tarea a partir del nombre del sprint\n    tarea.codigo = str(tarea.sprint.name).upper()+\"_\"+str(tarea.id)\n\nexcept Exception as e:\n    raise ValidationError(f\"Error al generar el c\u00f3digo: {str(e)}\")\n</code></pre> <p>Nota</p> <p>El uso de excepciones espec\u00edficas, como <code>ValidationError</code>, permite mostrar mensajes claros al usuario y facilita la depuraci\u00f3n del c\u00f3digo.</p> Mensaje de excepci\u00f3n por validaci\u00f3n <p>Si se desea forzar una excepci\u00f3n para fines de prueba, puede intentarse acceder a un campo inexistente o provocar un error deliberado. Al crear una tarea, se mostrar\u00e1 el mensaje de validaci\u00f3n definido.</p> <p>Por ejemplo si cambiamos la l\u00ednea </p> <pre><code>    tarea.codigo = str(tarea.sprint.name).upper()+\"_\"+str(tarea.id)\n</code></pre> <p>por </p> <pre><code>    tarea.codigo = str(tarea.sprint.name).upper()+\"_\"+str(tarea.id_)\n</code></pre> <p>introduciendo el campo <code>id_</code> que efectivamente no existe, entonces tambi\u00e9n generamos un error. </p> Mensaje de excepci\u00f3n por un error <p>Seguro que durante el desarrollo de este m\u00f3dulo, no hemos encontrado con errores que podr\u00edamos haber capturado de forma adecuada.</p>"},{"location":"7_4_EjemploExcepcionesMensajes/#gestion-de-mensajes-de-log","title":"Gesti\u00f3n de mensajes de log","text":"<p>El registro de mensajes en el log es esencial para el seguimiento y diagn\u00f3stico de la aplicaci\u00f3n. Odoo utiliza el m\u00f3dulo est\u00e1ndar de Python <code>logging</code>, que permite definir distintos niveles de severidad: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code> y <code>ERROR</code>.</p> <p>Para utilizar el sistema de log, es necesario importar el m\u00f3dulo y crear un logger asociado al m\u00f3dulo actual:</p> <pre><code>import logging\n</code></pre> <p>Crearemos una variable para recoger acceder y recoger los logs</p> <pre><code>_logger = logging.getLogger(__name__)\n</code></pre> <p>Con esto se crea una instancia de un logger utilizando el m\u00f3dulo est\u00e1ndar <code>logging</code> de Python. La funci\u00f3n <code>getLogger(__name__)</code> obtiene un logger con el nombre del m\u00f3dulo actual, lo que permite identificar f\u00e1cilmente de d\u00f3nde provienen los mensajes de registro (logs) en aplicaciones grandes.</p> <p>Al asignar este logger a la variable <code>_logger</code>, se puede utilizar en el resto del c\u00f3digo para registrar mensajes de diferentes niveles (informaci\u00f3n, advertencia, error, etc.), facilitando la depuraci\u00f3n y el seguimiento del comportamiento de la aplicaci\u00f3n. Esta es una pr\u00e1ctica com\u00fan para mantener un registro estructurado y claro de los eventos que ocurren durante la ejecuci\u00f3n del programa.</p> <p>A continuaci\u00f3n, se pueden registrar mensajes en el log seg\u00fan el nivel deseado:</p> <pre><code>_logger.debug(\"Mensaje de depuraci\u00f3n\")\n_logger.info(\"Mensaje informativo\")\n_logger.warning(\"Mensaje de advertencia\")\n_logger.error(\"Mensaje de error\")\n</code></pre> <p>Nota</p> <p>Los mensajes de nivel <code>DEBUG</code> solo ser\u00e1n visibles si el nivel de log est\u00e1 configurado adecuadamente en el archivo de configuraci\u00f3n de Odoo.</p> <p>Por ejemplo, para habilitar el nivel de depuraci\u00f3n, a\u00f1ada la siguiente l\u00ednea en el archivo de configuraci\u00f3n (<code>odoo.conf</code>):</p> <pre><code>log_level = debug\n</code></pre> <p>Tras modificar la configuraci\u00f3n, reinicie el servicio de Odoo para aplicar los cambios.</p> <p>En entornos de desarrollo, el archivo de log suele estar mapeado a un directorio local mediante Docker Compose, lo que facilita su consulta y an\u00e1lisis.</p>"},{"location":"7_4_EjemploExcepcionesMensajes/#conclusiones","title":"Conclusiones","text":"<p>El manejo adecuado de excepciones y la correcta gesti\u00f3n de mensajes de log son pr\u00e1cticas recomendadas en el desarrollo de m\u00f3dulos para Odoo. Permiten detectar y resolver errores de manera eficiente, as\u00ed como mantener un registro detallado del comportamiento de la aplicaci\u00f3n, contribuyendo as\u00ed a la calidad y mantenibilidad del software.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/","title":"7.5. Campos computados relacionales","text":"<p>En este apartado se abordar\u00e1 el desarrollo de campos computados relacionales en Odoo, utilizando como ejemplo un m\u00f3dulo de gesti\u00f3n de proyectos de software que estamos desarrollando. </p> <p>El objetivo es mostrar, de manera estructurada y formal, c\u00f3mo modelar entidades y relaciones, as\u00ed como implementar campos computados tanto de tipo <code>Many2one</code> como <code>Many2many</code>.</p> <p>Los campos computados relacionales resultan fundamentales en Odoo cuando se requiere que ciertos datos se mantengan actualizados de forma autom\u00e1tica en funci\u00f3n de la informaci\u00f3n relacionada en otros modelos. Por ejemplo, permiten que un campo refleje siempre el estado m\u00e1s reciente de una relaci\u00f3n, sin necesidad de intervenci\u00f3n manual.</p> <p>En el contexto de la gesti\u00f3n de proyectos, estos campos facilitan la automatizaci\u00f3n de procesos como la asignaci\u00f3n de sprints a tareas o la recopilaci\u00f3n de tecnolog\u00edas utilizadas en una historia de usuario. As\u00ed, se reduce el riesgo de errores y se mejora la coherencia de los datos, ya que la informaci\u00f3n se actualiza din\u00e1micamente conforme cambian las relaciones entre los distintos modelos.</p> <p>Adem\u00e1s, los campos computados relacionales contribuyen a simplificar la l\u00f3gica de negocio y la experiencia de usuario, ya que presentan informaci\u00f3n relevante de manera centralizada y siempre actualizada, sin requerir acciones adicionales por parte de los usuarios.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#diseno-y-situacion-actual-modelos-y-relaciones","title":"Dise\u00f1o y situaci\u00f3n actual: Modelos y relaciones","text":"<p>Hasta este punto, el m\u00f3dulo cuenta con los siguientes modelos principales:</p> <ul> <li>Tarea</li> <li>Sprint</li> <li>Tecnolog\u00eda</li> </ul> <p>Las relaciones existentes son:</p> <ul> <li>Una tarea est\u00e1 relacionada con un sprint mediante una relaci\u00f3n <code>Many2one</code>.</li> <li>Una tarea puede estar asociada a varias tecnolog\u00edas mediante una relaci\u00f3n <code>Many2many</code>.</li> <li>Un sprint puede contener varias tareas (<code>One2many</code>).</li> <li>Una tecnolog\u00eda puede estar asociada a varias tareas (<code>Many2many</code>).</li> </ul> <p>Adem\u00e1s tambi\u00e9n tenemos campos computados como: </p> <ul> <li>El campo <code>codigo</code> en tareas en generado autom\u00e1ticamente mediante la funci\u00f3n <code>_get_codigo</code>.</li> <li>El campo <code>fecha_fin</code> en sprints, calculado a partir de la funci\u00f3n <code>_compute_fecha_fin</code>.</li> </ul>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#nuevos-modelos-y-relaciones-permisos-y-vistas","title":"Nuevos modelos y relaciones, permisos y vistas","text":"<p>Vamos a avanzar en la creaci\u00f3n de un m\u00f3dulo para gestionar el desarrollo de software mediante una metodolog\u00eda Scrum</p> <p>Metodolog\u00eda \u00e1gil scrum</p> <p>En la metodolog\u00eda Scrum, un proyecto se organiza en ciclos cortos llamados sprints, durante los cuales se desarrollan incrementos funcionales del producto. El trabajo a realizar se descompone en historias de usuario, que representan funcionalidades o requisitos desde la perspectiva del usuario final. Cada historia de usuario puede dividirse en tareas m\u00e1s peque\u00f1as y manejables, que son asignadas al equipo durante el sprint. </p> <p>De este modo, Scrum facilita la planificaci\u00f3n iterativa, la adaptaci\u00f3n continua y la entrega incremental de valor, asegurando que el equipo mantenga el enfoque en los objetivos del proyecto y pueda responder r\u00e1pidamente a los cambios en los requisitos.</p> <p>M\u00e1s info: Flowlu: Gu\u00eda Paso a Paso para Proyectos y Sprints \u00c1giles</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#nuevos-modelos-y-sus-relaciones","title":"Nuevos modelos y sus relaciones","text":"<p>Para enriquecer el modelo de datos y adaptarlo a una gesti\u00f3n de proyectos basada en metodolog\u00edas \u00e1giles (por ejemplo, Scrum), se a\u00f1aden los siguientes modelos:</p> <ul> <li> <p>Proyecto (<code>Proyextos</code>): Representa un proyecto de software. Incluye campos como nombre y descripci\u00f3n, y est\u00e1 asociado a un conjunto de historias de usuario.</p> <ul> <li>Nombre (<code>name</code>)</li> <li><code>Descripci\u00f3n</code></li> <li><code>Historias</code>: (Se define a continuaci\u00f3n qu\u00e9 es una historia). Cada historia tiene un proyecto, pero un proyecto tiene muchas historias. (<code>One2many</code>)</li> </ul> </li> </ul> <p>Relaci\u00f3n Proyecto - Historias (One2Many)</p> <pre><code>              +-------------------+      (One2many)      +-----------------------+\n              |     Proyecto      |---------------------&gt;|   Historia Usuario    |\n              +-------------------+                      +-----------------------+\n</code></pre> <p>Si tenemos una relaci\u00f3n One2many del modelo que estamos definiendo con otro modelo, a la hora de impementar la relaci\u00f3n, ponemos lo mismo: One2many</p> <pre><code>historias = fields.One2many(\n    'gestion_tareas_sergio.proyectos_sergio',   # Modelo con el que nos relacionamos\n    'proyectos')                                # Campo del modelo que tendr\u00e1 el Many2one\n</code></pre> <ul> <li> <p>Historia de Usuario (<code>Historias</code>): Cada historia de usuario pertenece a un proyecto y puede estar asociada a varias tareas.</p> <ul> <li>Nombre (<code>name</code>)</li> <li><code>descripci\u00f3n</code></li> <li><code>proyecto</code>: Relaci\u00f3n con proyectos. Un proyecto tiene muchas historias y cada historia tiene un proyecto (<code>Many2one</code>)</li> <li><code>tareas</code>: Relaci\u00f3n con tareas. Una historia tiene muchos tareas y cada tarea tiene un proyecto (<code>One2many</code>)</li> </ul> </li> <li> <p>Tareas: A\u00f1adimos la relaci\u00f3n inversa con Historias:</p> <ul> <li><code>historia</code>: Una tarea pertenece a una historia de usuario y una historia tiene muchas tareas (<code>Many2one</code>).</li> </ul> </li> </ul> <p>Vamos a crear estas tablas y establecer las relaciones.</p> models.py <pre><code># *******************************************************\n# PROYECTOS\nclass proyectos_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.proyectos_sergio'\n    _description = 'gestion_tareas_sergio.proyectos_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre del proyecto\")\n    descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n del proyecto\")\n    historias_om = fields.One2many( 'gestion_tareas_sergio.historias_sergio', 'proyecto_mo', string='Historias de Usuario')\n\n\n\n# *******************************************************\n# HISTORIAS DE USUARIO\nclass historias_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.historias_sergio'\n    _description = 'gestion_tareas_sergio.historias_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre de la historia de usuario\")\n    descripcion = fields.Text(string=\"Descripci\u00f3n\", help=\"Breve descripci\u00f3n de la hisoria de usuario\")\n    proyecto_mo = fields.Many2one( 'gestion_tareas_sergio.proyectos_sergio', string='Poryecto')\n    tareas_om = fields.One2many( 'gestion_tareas_sergio.tareas_sergio', 'historia_mo', string='Tareas')\n\n# *******************************************************\n# TAREAS\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    _description = 'gestion_tareas_sergio.tareas_sergio'\n\n    name = fields.Char(string=\"Nombre\", readonly=False, required=True, help=\"Introduzca el nombre\")\n\n    historia_mo = fields.Many2one( 'gestion_tareas_sergio.historias_sergio', string='Historias de usuario')\n</code></pre> <p>Nota</p> <p>Ya que estamos modificando modelos, vamos a eliminar el campo <code>fecha_creacion</code> de los modelos, ya que Odoo crea autom\u00e1ticamente un campo de fecha de creaci\u00f3n para cada registro.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#seguridad-vistas-acciones-y-menu","title":"Seguridad, vistas, acciones y men\u00fa","text":"<p>Una vez realizadas todas las modificaciones y comprobado que todo funciona correctamente, se deben actualizar los permisos para los nuevos modelos y modificar y/o crear vistas de formulario si procede facilitar la gesti\u00f3n de proyectos e historias de usuario. Adem\u00e1s, se a\u00f1aden acciones de ventana y opciones de men\u00fa para acceder a estos modelos desde la interfaz de Odoo.</p> <p>Intenta completar todos los cambios sin ver la soluci\u00f3n que se va publicando.... </p> ir.model.access.csv <pre><code>id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\n. . . \naccess_gestion_tareas_sergio_proyectos_sergio,acceso_proyectos_sergio,model_gestion_tareas_sergio_proyectos_sergio,base.group_user,1,1,1,1\naccess_gestion_tareas_sergio_historias_sergio,acceso_historias_sergio,model_gestion_tareas_sergio_historias_sergio,base.group_user,1,1,1,1\n</code></pre> views.xml <pre><code>&lt;!-- explicit FORM view definition --&gt;\n&lt;record model=\"ir.ui.view\" id=\"tareas_form\"&gt;\n  &lt;field name=\"name\"&gt;gestion_tareas_sergio.tareas_sergio.form&lt;/field&gt;\n  &lt;field name=\"model\"&gt;gestion_tareas_sergio.tareas_sergio&lt;/field&gt;\n  &lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;form&gt;\n      &lt;sheet&gt;\n        &lt;group&gt;\n          &lt;field name=\"codigo\"/&gt;\n          &lt;field name=\"name\"/&gt;\n          &lt;field name=\"descripcion\"/&gt;\n          &lt;field name=\"fecha_ini\"/&gt;\n          &lt;field name=\"fecha_fin\"/&gt;\n          &lt;field name=\"finalizado\"/&gt;\n          &lt;field name=\"sprint\"/&gt;\n          &lt;field name=\"rel_tecnologias\" widget=\"many2many_tags\"/&gt;\n          &lt;field name=\"historia_mo\"/&gt;\n        &lt;/group&gt;\n      &lt;/sheet&gt;\n    &lt;/form&gt;\n  &lt;/field&gt;\n&lt;/record&gt;\n\n&lt;!-- actions opening views on models --&gt;\n&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_proyectos\"&gt;\n  &lt;field name=\"name\"&gt;Gestion Tareas Sergio Proyectos&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;gestion_tareas_sergio.proyectos_sergio&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n&lt;/record&gt;\n\n&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_historias\"&gt;\n  &lt;field name=\"name\"&gt;Gestion Tareas Sergio Historias de Usuarios&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;gestion_tareas_sergio.historias_sergio&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n&lt;/record&gt;\n\n&lt;!-- actions --&gt;\n&lt;menuitem name=\"Proyectos\" id=\"gestion_tareas_sergio.gestion_proyectos\" \n  parent=\"gestion_tareas_sergio.gestion\" \n  action=\"gestion_tareas_sergio.action_proyectos\"/&gt;\n\n&lt;menuitem name=\"Historias de Usuarios\" id=\"gestion_tareas_sergio.gestion_historias\" \n  parent=\"gestion_tareas_sergio.gestion\" \n  action=\"gestion_tareas_sergio.action_historias\"/&gt;\n</code></pre> <p>Ten en cuenta que en este c\u00f3digo se omite la parte que no se ha modificado</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#campos-computados-relacionales","title":"Campos computados relacionales","text":"<p>Una vez ya tenemos ampliado nuestro m\u00f3dulo con nuevos modelos, ahora vamos a platear una realaciones mas avanzadas entre estos modelos.</p> <p>En concreto vamos a crear vamos a crear dos:</p> <ul> <li>Teniendo en cuenta que los sprints son intervalos de tiempo en los que dividimos nuestro proyecto, y que adem\u00e1s vamos a tener la precauci\u00f3n de que que en cada momento solo tenemos activo un sprint, una tarea puede pertenecer a un sprint en un momento determinado y un tiempo m\u00e1s tarde, si la tarea no se ha finalizado puede pertenecer a otro sprint, esto se puede conseguir calculando en cada momento el sprint que tenemos abierto en un proyecto determinado y las tareas que tenemos asociado a ese proyecto mediante las diferentes historias de usuario.</li> <li>Por otra parte, podemos asociar las diferentes tecnolog\u00edas que se usan en cada Historia de Usuario teniendo en cuenta que las tecnolog\u00edas estan asociadas a las tareas, y a su vez, las tareas a las historias. De esta forma, podemos calcular qu\u00e9 tecnolog\u00edas se utilizan en las diferentes tareas asociadas a cada Historia de Usuario de forma autom\u00e1tica.</li> </ul> <p>Veamos c\u00f3mo implementamos todo esto a continuaci\u00f3n.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#campo-computado-relacional-many2one-para-sprint","title":"Campo computado relacional <code>Many2one</code> para Sprint","text":"<p>Se implementa un campo computado que asocia autom\u00e1ticamente una tarea al sprint abierto correspondiente, en funci\u00f3n de la fecha actual y el proyecto al que pertenece la historia de usuario.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#ejemplo-de-implementacion","title":"Ejemplo de implementaci\u00f3n","text":"<pre><code>class tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    . . .\n    sprint_moc = fields.Many2one('gestion_tareas_sergio.sprints_sergio', string='Sprint', compute='_compute_sprint', store=True)\n\n    # @api.depends('codigo')\n    @api.depends('fecha_ini', 'fecha_fin', 'historia_mo')\n    def _compute_sprint(self):\n        for tarea in self:\n            tarea.sprint_moc = False\n            if tarea.historia_mo and tarea.historia_mo.proyecto_mo:\n                sprints = self.env['gestion_tareas_sergio.sprints_sergio'].search([('proyecto_om.id', '=', tarea.historia_mo.proyecto_mo.id)])\n                if sprints: \n                    for sprint in sprints:\n                        if isinstance(sprint.fecha_fin, datetime) and sprint.fecha_fin &gt; datetime.now():\n                            tarea.sprint_moc = sprint.id\n</code></pre> <p>El campo <code>sprint_moc</code> es un campo relacional de tipo <code>Many2one</code> que enlaza cada tarea con un sprint del modelo <code>gestion_tareas_sergio.sprints_sergio</code>. Este campo es computado, lo que significa que su valor se calcula autom\u00e1ticamente mediante el m\u00e9todo <code>_compute_sprint</code> y se almacena en la base de datos (<code>store=True</code>).</p> <p>El decorador <code>@api.depends('fecha_ini', 'fecha_fin', 'historia_mo')</code> indica que el c\u00e1lculo de <code>sprint_moc</code> depende de los campos <code>fecha_ini</code>, <code>fecha_fin</code> y <code>historia_mo</code>. Cuando alguno de estos campos cambia, se ejecuta el m\u00e9todo <code>_compute_sprint</code>. Tambi\u00e9n podemos decidir que el c\u00e1lculo dependa del c\u00f3digo, con lo cual si cambiamos las fechas de la tarea, no cambiar\u00e1 el sprint. </p> <p>Dentro del m\u00e9todo, para cada tarea, primero se inicializa <code>sprint_moc</code> en <code>False</code>. Luego, si la tarea tiene asociada una historia de usuario (<code>historia_mo</code>) y esta historia est\u00e1 vinculada a un proyecto (<code>proyecto_mo</code>), se buscan todos los sprints relacionados con ese proyecto.</p> <p>Para cada sprint encontrado, se verifica si la fecha de finalizaci\u00f3n (<code>fecha_fin</code>) es un objeto <code>datetime</code> y si es posterior al momento actual. Si se cumple esta condici\u00f3n, se asigna el identificador del sprint a <code>sprint_moc</code>. De este modo, la tarea queda asociada autom\u00e1ticamente al sprint activo m\u00e1s pr\u00f3ximo, facilitando la organizaci\u00f3n y planificaci\u00f3n de las tareas dentro de los sprints del proyecto.</p> <p>Este enfoque automatiza la asignaci\u00f3n del sprint adecuado a cada tarea, facilitando la gesti\u00f3n y organizaci\u00f3n del trabajo en funci\u00f3n de la planificaci\u00f3n temporal de los sprints.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#campo-computado-relacional-many2many-para-tecnologias-usadas","title":"Campo computado relacional <code>Many2many</code> para tecnolog\u00edas usadas","text":"<p>Se crea un campo computado en el modelo de historia de usuario que recopila todas las tecnolog\u00edas utilizadas en las tareas asociadas a dicha historia.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#ejemplo-de-implementacion_1","title":"Ejemplo de implementaci\u00f3n","text":"<pre><code>class historias_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.historias_sergio'\n    . . .\n    tecnologias_mmc = fields.Many2many( \"gestion_tareas_sergio.tecnologias_sergio\", compute=\"_compute_tecnologias\", string=\"Tecnolog\u00edas\")\n\n    def _compute_tecnologias(self):\n        for historias in self:\n            tecnologias = None\n            for tareas in historias.tareas_om:\n                if not tecnologias:\n                    tecnologias = tareas.tecnologias_mm\n                else:\n                    tecnologias = tecnologias + tareas.tecnologias_mm\n            historias.tecnologias_mmc = tecnologias\n</code></pre> <p>El campo <code>tecnologias_mmc</code> es un campo relacional de tipo <code>Many2many</code> que enlaza cada historia con m\u00faltiples tecnolog\u00edas del modelo <code>gestion_tareas_sergio.tecnologias_sergio</code>. Este campo es computado, es decir, su valor se calcula autom\u00e1ticamente mediante el m\u00e9todo <code>_compute_tecnologias</code>.</p> <p>El m\u00e9todo <code>_compute_tecnologias</code> recorre cada registro de historia y, para cada uno, inicializa la variable <code>tecnologias</code> en <code>None</code>. Luego, itera sobre todas las tareas asociadas a la historia (<code>tareas_om</code>). Para cada tarea, si <code>tecnologias</code> a\u00fan no tiene valor, se le asignan las tecnolog\u00edas de la primera tarea; en caso contrario, se suman (concatenan) las tecnolog\u00edas de la tarea actual a las ya acumuladas. Finalmente, el campo <code>tecnologias_mmc</code> de la historia se actualiza con el conjunto total de tecnolog\u00edas recopiladas de todas sus tareas.</p> <p>Este enfoque permite que el campo de tecnolog\u00edas de la historia de usuario refleje autom\u00e1ticamente todas las tecnolog\u00edas utilizadas en sus tareas asociadas, facilitando la consulta y gesti\u00f3n de la informaci\u00f3n relacionada.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#related-campos-relacionales-no-almacenados-en-base-de-datos","title":"Related. Campos relacionales no almacenados en base de datos","text":"<p>Hasta ahora, los campos relacionales que hemos tratado han sido de tipo <code>Many2one</code>, <code>One2many</code> o <code>Many2many</code>, y en ocasiones, campos relacionales computados, es decir, calculados autom\u00e1ticamente mediante c\u00f3digo Python.</p> <p>Sin embargo, existe una situaci\u00f3n particular en la que podemos necesitar un campo relacional que no requiera almacenamiento en la base de datos y que tampoco sea calculado mediante c\u00f3digo Python. Esto ocurre cuando, en un modelo, queremos a\u00f1adir un campo relacional que ya existe en otro modelo y simplemente queremos mostrarlo, sin duplicar la informaci\u00f3n ni crear una nueva relaci\u00f3n en la base de datos.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#ejemplo-de-implementacion_2","title":"Ejemplo de implementaci\u00f3n","text":"<p>Supongamos que tenemos el siguiente escenario:</p> <ul> <li>El modelo Proyecto est\u00e1 relacionado con las Historias de Usuario.</li> <li>Cada Historia de Usuario pertenece a un Proyecto y est\u00e1 asociada a un conjunto de Tareas.</li> <li>Las Tareas est\u00e1n relacionadas con un Sprint, con las Tecnolog\u00edas utilizadas y con la Historia de Usuario a la que pertenecen.</li> </ul> <p>Ahora, imaginemos que queremos que, en el formulario de Tarea, adem\u00e1s de la historia de usuario, se muestre tambi\u00e9n el Proyecto al que pertenece la tarea. Podr\u00edamos crear un campo <code>Many2one</code> directamente en el modelo de tareas, pero esto generar\u00eda una columna adicional en la base de datos, lo cual no es necesario, ya que la relaci\u00f3n ya existe a trav\u00e9s de la historia de usuario.</p> <p>Para resolver esto, Odoo permite definir un campo relacional utilizando el atributo <code>related</code>. De este modo, el campo en el modelo de tareas simplemente referencia el campo <code>proyecto</code> del modelo de historia de usuario, sin necesidad de almacenamiento adicional ni l\u00f3gica de c\u00e1lculo.</p> <p>Por ejemplo:</p> <pre><code>class tareas_sergio(models.Model):\n  _name = 'gestion_tareas_sergio.tareas_sergio'\n  # ...\n  historia_mo = fields.Many2one( 'gestion_tareas_sergio.historias_sergio', string='Historias de usuario')\n  # Nuevo campo que relaciona directamente con el proyecto a partir de la historia de usuario\n  proyecto_no = fields.Many2one(\n      'gestion_tareas_sergio.proyectos_sergio',\n      string='Proyecto',\n      related='historia_mo.proyecto_mo',\n      readonly=True)\n</code></pre> <p>En este caso, el campo <code>proyecto_no</code> en el modelo de tareas obtiene autom\u00e1ticamente el proyecto asociado a la historia de usuario seleccionada. Adem\u00e1s, al establecer <code>readonly=True</code>, evitamos que el usuario pueda modificar este valor manualmente.</p> <p>Para que este campo sea visible en el formulario de tareas, basta con a\u00f1adirlo a la vista correspondiente:</p> <pre><code>&lt;field name=\"proyecto_no\"/&gt;\n</code></pre> <p>De este modo, cuando se seleccione una historia de usuario en una tarea, el campo de proyecto se actualizar\u00e1 autom\u00e1ticamente mostrando el valor correspondiente, sin que el usuario pueda modificarlo.</p> Asignaci\u00f3n autom\u00e1tica de proyecto <p>Este tipo de campos relacionales son \u00fatiles cuando queremos mostrar informaci\u00f3n relacionada sin duplicar datos ni realizar c\u00e1lculos adicionales. Utilizando el atributo <code>related</code>, podemos mantener la integridad y simplicidad del modelo de datos, facilitando la navegaci\u00f3n y consulta de informaci\u00f3n en la interfaz de Odoo.</p>"},{"location":"7_5_EjemploCamposComputadosRelacionales/#conclusiones","title":"Conclusiones","text":"<p>En este apartado se ha mostrado c\u00f3mo crear campos computados relacionales en Odoo, tanto para relaciones <code>Many2one</code> como <code>Many2many</code>. Adem\u00e1s, se ha ampliado la estructura del m\u00f3dulo para incluir proyectos e historias de usuario, permitiendo una gesti\u00f3n m\u00e1s completa y alineada con metodolog\u00edas \u00e1giles como Scrum.</p> <p>La estructura resultante permite:</p> <ul> <li>Gestionar m\u00faltiples proyectos, cada uno con sus historias de usuario.</li> <li>Desglosar historias de usuario en tareas, que a su vez se asocian a sprints y tecnolog\u00edas.</li> <li>Automatizar la asignaci\u00f3n de sprints y la recopilaci\u00f3n de tecnolog\u00edas mediante campos computados relacionales.</li> </ul> <p>Este enfoque facilita la escalabilidad y el mantenimiento del m\u00f3dulo, y sienta las bases para futuras ampliaciones, como la gesti\u00f3n de usuarios y permisos avanzados.</p>"},{"location":"7_6_EjemploCamposValoresDefecto/","title":"7.6. Campos con valores por defecto","text":"<p>En este apartado se abordar\u00e1 la creaci\u00f3n de campos con valores por defecto en Odoo, diferenci\u00e1ndolos de los campos computados y mostrando diversas formas de establecer estos valores. </p>"},{"location":"7_6_EjemploCamposValoresDefecto/#campos-con-valores-por-defecto","title":"Campos con valores por defecto","text":"<p>Los campos con valores por defecto permiten asignar un valor inicial a un campo cuando se crea un nuevo registro. A diferencia de los campos computados, el usuario puede modificar este valor tras la creaci\u00f3n del registro. Existen varias formas de definir valores por defecto en Odoo:</p>"},{"location":"7_6_EjemploCamposValoresDefecto/#1-asignacion-directa-de-valores-por-defecto","title":"1. Asignaci\u00f3n directa de valores por defecto","text":"<p>Supongamos que en el modelo <code>Sprint</code> existe un campo <code>duracion</code> de tipo entero. Se puede establecer un valor por defecto por ejemplo de 2 semanas o 14 d\u00edas de la siguiente manera:</p> <pre><code>duracion = fields.Integer(\n  string=\"Duraci\u00f3n (d\u00edas)\",\n  default=14\n)\n</code></pre> <p>Nota</p> <p>El valor asignado a <code>default</code> debe coincidir con el tipo de dato del campo. Por ejemplo, para campos de tipo <code>Char</code> o <code>Text</code>, el valor debe ir entre comillas.</p> <p>Al reiniciar el servicio y actualizar el m\u00f3dulo, los nuevos registros de <code>Sprint</code> tendr\u00e1n por defecto una duraci\u00f3n de 15 d\u00edas, aunque el usuario podr\u00e1 modificar este valor al crear o editar el registro.</p>"},{"location":"7_6_EjemploCamposValoresDefecto/#2-valores-por-defecto-calculados-mediante-funcion","title":"2. Valores por defecto calculados mediante funci\u00f3n","text":"<p>Tambi\u00e9n es posible calcular el valor por defecto utilizando una funci\u00f3n. Por ejemplo, en el modelo <code>Tarea</code>, supongamos que queremos definir un campo <code>fecha_definicion</code> que guarde la fecha de creaci\u00f3n de la tarea. Esto lo podemos realizar de la siguiente forma:</p> <pre><code>from datetime import datetime\n\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    # ...\n\n    # primero definici\u00f3n de la funci\u00f3n\n    def get_fecha_definicion(self):\n      return datetime.now()\n\n    # despu\u00e9s definimos cl campo que la usa\n    fecha_definicion = fields.Datetime(\n      string=\"Fecha de definici\u00f3n\",\n      default=get_fecha_definicion\n\n)\n</code></pre> <p>Puede parecer que esto es un campo computado, pero hay unas diferencias con los campos computados: </p> <ul> <li>En los campos computados, se utiliza el par\u00e1metro <code>compute</code> y el nombre de la funci\u00f3n entre comillas (<code>compute='_compute_field'</code>).</li> <li>En los campos con valor por defecto, la funci\u00f3n se pasa sin comillas y se ejecuta una sola vez al crear el registro.</li> <li>Para los valores por defecto, primero debemos definir las funciones puesto que deben existir antes de ser usadas. Para los campos computados a usar comillas, cuando la va a utilizar el sistema la busca, por lo que puede ser definida con posterioridad</li> <li>El usuario puede modificar el valor por defecto, mientras que en los campos computados el valor es gestionado autom\u00e1ticamente por Odoo y no es editable por el usuario.</li> </ul>"},{"location":"7_6_EjemploCamposValoresDefecto/#3-uso-de-funciones-lambda-para-valores-por-defecto","title":"3. Uso de funciones lambda para valores por defecto","text":"<p>Cuando la l\u00f3gica para calcular el valor por defecto es sencilla, se puede utilizar una funci\u00f3n lambda. </p> <p>Por ejemplo:</p> <pre><code>from datetime import datetime\n\nclass tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    # ...\n    fecha_definicion = fields.Datetime(\n      string=\"Fecha de definici\u00f3n\",\n      default=lambda self: datetime.now()\n)\n</code></pre> <p>Esto simplifica el c\u00f3digo y permite mantener la definici\u00f3n del campo m\u00e1s concisa, puesto que no necesitamos definir la funci\u00f3n a parte antes de la definici\u00f3n del campo.</p>"},{"location":"7_6_EjemploCamposValoresDefecto/#visualizacion-en-la-vista","title":"Visualizaci\u00f3n en la vista","text":"<p>Para que el usuario pueda ver y modificar el valor por defecto, es necesario incluir el campo en la vista correspondiente. Por ejemplo, en la siguiente vista de formulario de <code>Tareas</code> se han a\u00f1adidos dos campos:</p> <p></p><pre><code>&lt;field name=\"fecha_definicion\"/&gt;\n&lt;field name=\"fecha_definicion_lambda\"/&gt;\n</code></pre> En el siguiente ejemplo, se pueden ver los dos campos con dos fechas diferentes, puesto que cada fecha se a asignado en el momento en que se ha reiniciado el servidor y se ha encontrado por primera vez el valor por defecto definido.<p></p> Valores por defecto"},{"location":"7_7_EjemploHerencias/","title":"7.7. Herencias","text":"<p>Odoo ofrece diferentes mecanismos de herencia, que permiten extender o modificar la funcionalidad de los modelos existentes de manera flexible y eficiente.</p> <p>La herencia en Odoo permite reutilizar, ampliar o personalizar la funcionalidad de modelos ya existentes sin necesidad de reescribir todo el c\u00f3digo. Gracias a estos mecanismos, los desarrolladores pueden adaptar los m\u00f3dulos est\u00e1ndar a las necesidades espec\u00edficas de cada proyecto, a\u00f1adiendo nuevos campos, m\u00e9todos o modificando el comportamiento de los modelos de forma estructurada y mantenible. Esto facilita la evoluci\u00f3n y el mantenimiento de las aplicaciones desarrolladas sobre la plataforma Odoo.</p> <p>En este apartado se abordar\u00e1n los principales tipos de herencia que pueden implementarse en Odoo, centr\u00e1ndonos especialmente en la herencia de clase mediante un ejemplo pr\u00e1ctico. </p>"},{"location":"7_7_EjemploHerencias/#tipos-de-herencia-en-odoo","title":"Tipos de herencia en Odoo","text":"<p>Seg\u00fan la documentaci\u00f3n oficial de Odoo, existen varios tipos de herencia:</p> <ul> <li>Herencia de clase (cl\u00e1sica): Permite extender un modelo existente a\u00f1adiendo nuevos campos o m\u00e9todos, o sobrescribiendo los ya existentes. Los datos se almacenan en la misma tabla que el modelo original, y las vistas existentes pueden mostrar los nuevos campos a\u00f1adidos.</li> <li>Herencia por prototipo: Se crea un nuevo modelo que hereda los atributos del modelo original, pero los datos se almacenan en tablas diferentes. Este tipo de herencia es \u00fatil cuando se requiere crear variantes de un modelo base, manteniendo la independencia de los datos.</li> <li>Herencia por delegaci\u00f3n: Se crea un nuevo modelo que contiene una relaci\u00f3n con el modelo original. Cada vez que se crea un registro en el modelo hijo, se crea tambi\u00e9n un registro asociado en el modelo padre, sincronizando los datos entre ambos. Este enfoque permite implementar herencia m\u00faltiple y mantener la separaci\u00f3n de datos en tablas distintas.</li> </ul> Tipos de herencia <p>En Odoo, la herencia de clase es la m\u00e1s utilizada, ya que permite ampliar o adaptar modelos existentes a nuevas necesidades sin duplicar informaci\u00f3n ni perder compatibilidad con las vistas y funcionalidades ya implementadas.</p>"},{"location":"7_7_EjemploHerencias/#situacion-actual-en-los-modelos-del-proyecto","title":"Situaci\u00f3n actual en los modelos del proyecto","text":"<p>Actualmente, el m\u00f3dulo de gesti\u00f3n de proyectos cuenta con los siguientes modelos:</p> <ul> <li>Proyecto: Representa un proyecto y est\u00e1 relacionado con varias historias.</li> <li>Historia: Cada historia puede contener varias tareas.</li> <li>Tarea: Las tareas est\u00e1n asociadas a las tecnolog\u00edas necesarias para su desarrollo, pertenecen a una historia y se desarrollan en un sprint.</li> <li>Sprint: Relacionado con las tareas que se desarrollan durante el mismo.</li> <li>Tecnolog\u00eda: Representa las tecnolog\u00edas empleadas en las distintas tareas.</li> </ul> <p>Hasta el momento, no se ha implementado ning\u00fan modelo para representar a las personas involucradas en el desarrollo (desarrolladores) ni a los clientes relacionados con los proyectos, es momento de abordar este aspecto, pero ayud\u00e1ndonos de la herencia.</p>"},{"location":"7_7_EjemploHerencias/#herencia-de-clase-en-odoo","title":"Herencia de clase en Odoo","text":"<p>Odoo dispone de un modelo nativo denominado <code>res.partner</code>, que almacena todos los contactos del sistema (empleados, compa\u00f1\u00edas, clientes, etc.). Crear un modelo nuevo para desarrolladores no tendr\u00eda sentido, ya que un desarrollador es, en esencia, un tipo de contacto. Por tanto, se opta por extender el modelo <code>res.partner</code> mediante herencia de clase.</p>"},{"location":"7_7_EjemploHerencias/#implementacion","title":"Implementaci\u00f3n","text":"<p>Para crear un modelo que represente a los desarrolladores y permita asociarles tecnolog\u00edas, se define una clase que hereda de <code>res.partner</code> utilizando el atributo <code>inherit</code>. De este modo, cualquier campo a\u00f1adido en la nueva clase se incorporar\u00e1 directamente a la tabla de <code>res.partner</code>.</p> <p>Por ejemplo, para asociar tecnolog\u00edas a los desarrolladores, se a\u00f1ade un campo <code>Many2many</code> relacionado con el modelo de tecnolog\u00edas:</p> <pre><code># *******************************************************\n# DESARROLADORES\nclass desarrollador(models.Model):\n  _name = 'res.partner'\n  _inherit = 'res.partner'\n\n  tecnologias = fields.Many2many( 'gestion_tareas_sergio.tecnologias_sergio',\n                                  relation='relacion_desarrollador_technologies',\n                                  column1='rel_desarrollador',\n                                  column2='rel_tecnologias',\n                                  string='Technolog\u00edas'\n  )\n</code></pre> <p>Donde </p> <ul> <li><code>-name</code> no es imprescindible identificarlo. Lo podemos poner por habito o costubre, pero al ser heredado, lo importante es de qu\u00e9 modelo hereda</li> <li><code>inherit</code> este si es b\u00e1sico e indica el modelo del que hereda. Con esta implementaci\u00f3n, no se crea una nueva tabla para desarrolladores, sino que se ampl\u00eda la existente de contactos. Si se a\u00f1ade un campo que ya existe en <code>res.partner</code>, este ser\u00e1 sobrescrito.</li> <li><code>tecnologias</code> de momento solo definimos un nuevo campo que ser\u00e1 una relaci\u00f3n muchos a muchos con tecnolog\u00edas</li> </ul>"},{"location":"7_7_EjemploHerencias/#verificacion","title":"Verificaci\u00f3n","text":"<p>Tras actualizar el m\u00f3dulo, se puede comprobar que el modelo <code>desarrollador</code> no existe como tal, sino que los nuevos campos aparecen en el modelo <code>res.partner</code>.</p> <p>Hagamos una verificaci\u00f3n de qu\u00e9 ha pasado en la base de datos usando cualquiera de los m\u00e9todos descritos en el apartado Revisi\u00f3n de la base de datos del primer punto del ejemplo. </p> <p>Por ejemplo, desde el propio entorno de Odoo en desarrollo, vamos a Ajustes -&gt; T\u00e9cnico y ah\u00ed buscamos el modelo <code>res.partner</code> ( si buscas <code>desarrollador</code> como hemos comentado, no lo encontrar\u00e1s). Entrando en este modelo, accedemos al listado de campos y si buscamos nuestro nuevo campo debe estar ah\u00ed.</p> Herencia de modelo. Nuevo campo definido. <p>Como podemos ver, se trata de un modelo que guarda los contactos pero realmente contiene todos los campos extra que son necesarios para reutilizar este modelo el cualquier aplicaci\u00f3n instalada.</p> <p>Para hacer visible el nuevo campo en la interfaz, es necesario modificar las vistas correspondientes, lo cual se abordar\u00e1 en el siguiente apartado.</p>"},{"location":"7_7_EjemploHerencias/#acceso-desde-el-menu","title":"Acceso desde el men\u00fa","text":"<p>Para facilitar el acceso a los desarrolladores desde el men\u00fa, se puede crear una nueva acci\u00f3n y una opci\u00f3n de men\u00fa que apunten al modelo <code>res.partner</code>, aprovechando las vistas ya existentes. </p> views.xml <pre><code>&lt;-- Nueva acci\u00f3n --&gt;\n&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_desarrolladores\"&gt;\n  &lt;field name=\"name\"&gt;Gestion Tareas Sergio Desarrolladores&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n&lt;/record&gt;\n\n\n&lt;-- Nuevo men\u00fa --&gt;\n&lt;menuitem name=\"Desarrolladores\" id=\"gestion_tareas_sergio.gestion_desarrolladores\" \n  parent=\"gestion_tareas_sergio.gestion\" \n  action=\"gestion_tareas_sergio.action_desarrolladores\"/&gt;\n</code></pre> <p>Sin embargo, es importante tener en cuenta que, por defecto, se mostrar\u00e1n todos los contactos, no solo los desarrolladores. Necesitamos personalizar vistas y filtros para poder a\u00f1adir el nuevo campo que hemos establecido y filtrar solo los contactos que nos interesen.</p>"},{"location":"7_7_EjemploHerencias/#herencia-y-modificacion-de-vistas-en-odoo","title":"Herencia y modificaci\u00f3n de vistas en Odoo","text":"<p>Para la correcta visualizaci\u00f3n de los desarrolladores, debemos reutilizar las vistas que ya existen en el sistema de Contactos y sobre ella realizar modificaciones.</p> <p>Los pasos a seguir ser\u00edan los siguientes</p>"},{"location":"7_7_EjemploHerencias/#herencia-del-formulario-de-contactos","title":"Herencia del formulario de contactos","text":"<p>Para heredar y modificar una vista en Odoo, se debe crear una nueva vista XML que extienda la vista base, n este caso, se hereda el formulario de <code>res.partner</code> y lo que haremos es a\u00f1adir una nueva pesta\u00f1a para mostrar el campo de tecnolog\u00edas. </p> <p>Al importante utilizar el atributo <code>mode=\"primary\"</code> para que la nueva vista no sobrescriba la original, sino que se trate como una vista alternativa.</p> <p>La localizaci\u00f3n de los elementos dentro de la vista se realiza mediante expresiones XPath, que permiten ubicar el punto exacto donde insertar nuevos campos o modificar los existentes. Por ejemplo, para a\u00f1adir una nueva pesta\u00f1a despu\u00e9s de la \u00faltima existente, se puede localizar la p\u00e1gina con nombre <code>internal_notes</code> y a\u00f1adir una nueva p\u00e1gina a continuaci\u00f3n.</p> <p>Veamos el c\u00f3digo necesario y despu\u00e9s comentamos punto por punto:</p> <pre><code>    &lt;record model=\"ir.ui.view\" id=\"desarrolladores_form\"&gt;\n      &lt;field name=\"name\"&gt;gestion_tareas_sergio.Desarrolladores&lt;/field&gt;\n      &lt;field name=\"model\"&gt;res.partner&lt;/field&gt;\n      &lt;field name=\"inherit_id\" ref=\"base.view_partner_form\"&gt;&lt;/field&gt;\n      &lt;field name=\"mode\"&gt;primary&lt;/field&gt;\n      &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;xpath expr=\"//sheet/notebook/page[@name='internal_notes']\" position=\"after\"&gt;\n          &lt;page name=\"desarrolladores\" string=\"Desarrolladores\" &gt;\n            &lt;group&gt;\n              &lt;group&gt;\n                &lt;field name=\"tecnologias\"&gt;&lt;/field&gt;\n              &lt;/group&gt;\n            &lt;/group&gt;\n          &lt;/page&gt;\n        &lt;/xpath&gt;\n      &lt;/field&gt;\n    &lt;/record&gt;\n</code></pre> <p>Con este c\u00f3digo redefinimos el formulario para la visualizaci\u00f3n de contactos a\u00f1adiendo una nueva pesta\u00f1a que contendr\u00e1 las tecnolog\u00edas que domina el desarrollador. </p> <ul> <li>Se modifica el formulario del modelo <code>res.partner</code> (contactos) mediante herencia de vistas. Se utiliza el atributo <code>inherit_id</code> para indicar que se extiende la vista base <code>base.view_partner_form</code>.</li> </ul> <p>Aqu\u00ed hay mucho m\u00e1s que explicar, por una parte, debemos saber c\u00f3mo se llama la vista base a heredar. Esto lo podemos conseguir si estamos en modo desarrollador y vamos al formulario est\u00e1ndar de contactos y desde ah\u00ed accedemos a la informaci\u00f3n de la vista</p> Acceso a la informaci\u00f3n de modelos y vistas <p>Una vez en la informaci\u00f3n de la vista, ya tenemos todos los datos de la misma, y en concreto el que nos interesa, su <code>id externo</code> que es el que vamos a utilizar para heredar</p> Obtenci\u00f3n del nombre de la vista a heredar <ul> <li>Dentro del campo <code>arch</code>, se emplea una expresi\u00f3n <code>xpath</code> para insertar una nueva pesta\u00f1a llamada \"Desarrolladores\" justo despu\u00e9s de la pesta\u00f1a de notas internas (<code>internal_notes</code>). En esta nueva pesta\u00f1a se a\u00f1ade un grupo que contiene el campo <code>tecnologias</code>. De este modo, al editar un contacto, los usuarios ver\u00e1n una pesta\u00f1a adicional donde podr\u00e1n gestionar las tecnolog\u00edas asociadas al desarrollador, sin modificar la estructura original de la vista, aprovechando as\u00ed el mecanismo de herencia de vistas de Odoo.</li> </ul> <p>Con todo esto finalmente, obtenemos una vista heredada, en la que hemos introducido una nueva pesta\u00f1a.</p> Nueva pesta\u00f1a en contactos"},{"location":"7_7_EjemploHerencias/#acceso-al-nuevo-formulario","title":"Acceso al nuevo formulario","text":"<p>Para acceder al nuevo formulario, deber\u00edamos modificar tambi\u00e9n las acciones, de forma que vamos a especificar una acci\u00f3n para mostrar el listado y otra para el formulario.</p> <p>El c\u00f3digo necesario ser\u00eda el siguiente: </p> <pre><code>    &lt;!-- Action desarrolladores --&gt;\n    &lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_desarrolladores\"&gt;\n      &lt;field name=\"name\"&gt;Gestion Tareas Sergio Desarrolladores&lt;/field&gt;\n      &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n      &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n    &lt;/record&gt;\n    &lt;!-- Mostrando los desarrolladores heredados de res.partner, pero especificamente listado --&gt;\n    &lt;record model=\"ir.actions.act_window.view\" id=\"gestion_tareas_sergio.action_desarrolladores_list\"&gt;\n      &lt;field name=\"sequence\" eval=\"1\"&gt;&lt;/field&gt;\n      &lt;field name=\"view_mode\"&gt;list&lt;/field&gt;\n      &lt;field name=\"view_id\" ref=\"base.view_partner_tree\"&gt;&lt;/field&gt;\n      &lt;field name=\"act_window_id\" ref=\"gestion_tareas_sergio.action_desarrolladores\"&gt;&lt;/field&gt;\n    &lt;/record&gt;\n\n    &lt;!-- Mostrando los desarrolladores heredados de res.partner, pero especificamente formulario --&gt;\n    &lt;record model=\"ir.actions.act_window.view\" id=\"gestion_tareas_sergio.action_desarrolladores_form\"&gt;\n      &lt;field name=\"sequence\" eval=\"2\"&gt;&lt;/field&gt;\n      &lt;field name=\"view_mode\"&gt;form&lt;/field&gt;\n      &lt;field name=\"view_id\" ref=\"desarrolladores_form\"&gt;&lt;/field&gt;\n      &lt;field name=\"act_window_id\" ref=\"gestion_tareas_sergio.action_desarrolladores\"&gt;&lt;/field&gt;\n    &lt;/record&gt; \n</code></pre> <p>El primer bloque ya lo ten\u00edamos en la versi\u00f3n anterior, es la acci\u00f3n t\u00edpica que hemos utilizado para acceso a los diferentes men\u00fas, en este caso los asociados a los desarrolladores.</p> <p>El segundo y tercer bloques tienen como objetivo redefinir los accesos espec\u00edficos al listado y formulario. </p> <p>En concreto el segundo <code>record</code> tiene como  prop\u00f3sito asociar una vista de tipo lista. De esta forma </p> <ul> <li><code>sequence</code> con valor <code>1</code> determina el orden en que se aplican las vistas si hay varias asociadas a la misma acci\u00f3n. </li> <li><code>view_mode</code> igual a <code>list</code> que especifica que es una lista</li> <li><code>view_id</code> referencia la vista de \u00e1rbol est\u00e1ndar de contactos (<code>base.view_partner_tree</code>), lo que indica que se reutiliza esa vista para mostrar los registros. El nombre de esta vista lo podemos saber seg\u00fan lo indicado anteriormente desde entorno de desarrollador.</li> <li><code>act_window_id</code> enlaza este registro con la acci\u00f3n de ventana <code>gestion_tareas_sergio.action_desarrolladores</code> especificada en el primer bloque, asegurando que al ejecutar dicha acci\u00f3n se muestre la vista de lista especificada. Este mecanismo permite personalizar c\u00f3mo se presentan los datos al usuario en las distintas acciones del sistema.</li> </ul> <p>Referente al tercer y \u00faltimo de los bloques, es similar al anterior con alguna diferencia que pasamos a explicar:</p> <ul> <li><code>view_mode</code> igual a <code>form</code> que especifica que es un formulario</li> <li><code>view_id</code> referencia la vista definida anteriormente <code>desarrolladores_form</code>. En esta propia vista ya se defin\u00eda la herencia tal y como e vi\u00f3 en el anterior subapartado.</li> </ul> <p>Con todo esto, ahora si tenemos redefinidas las acciones para mostrar el formulario especifico (y heredado) que hemos desarrollado.</p>"},{"location":"7_7_EjemploHerencias/#filtrado-de-registros-solo-desarrolladores","title":"Filtrado de registros: solo desarrolladores","text":"<p>Con lo realizado, no tenemos suficiente, puesto que cada vez que accedemos a desarrolladores vemos el listado de todos los contactos, sean o no desarrolladores. Realmente no hemos especificado una forma de identificar si un contacto es o no desarrollador, por lo tanto debemos solucionar este problema.</p>"},{"location":"7_7_EjemploHerencias/#contactos-que-son-desarrolladores","title":"Contactos que son desarrolladores","text":"<p>Para distinguir los desarrolladores del resto de contactos, se a\u00f1ade un campo booleano <code>es_desarrollador</code> al modelo <code>res.partner</code>. Este campo act\u00faa como bandera para identificar si un contacto es desarrollador. Al crear un nuevo desarrollador desde el men\u00fa correspondiente, este campo se establece autom\u00e1ticamente a <code>True</code>.</p> <p>A\u00f1adamos pues este nuevo campo a nuestro modelo <code>desarrollador</code>.</p> models.py - desarrollador <pre><code># *******************************************************\n# DESARROLADORES\nclass desarrollador(models.Model):\n  _name = 'res.partner'\n  _inherit = 'res.partner'\n\n  es_desarrollador = fields.Boolean()  \n  tecnologias = fields.Many2many( 'gestion_tareas_sergio.tecnologias_sergio',\n                                  relation='relacion_desarrollador_technologies',\n                                  column1='rel_desarrollador',\n                                  column2='rel_tecnologias',\n                                  string='Technolog\u00edas'\n  )\n</code></pre> <p>Ahora debemos modificar la vista para poder mostar el campo desarrollador, a\u00f1adamos pues en la vista encima de tecnolog\u00edas el nuevo campo para poder indicar si es o no desarrollador.</p> views.xml <pre><code>    &lt;record model=\"ir.ui.view\" id=\"desarrolladores_form\"&gt;\n    . . . \n            &lt;group&gt;\n              &lt;field name=\"es_desarrollador\" &gt;&lt;/field&gt;\n              &lt;field name=\"tecnologias\"&gt;&lt;/field&gt;\n            &lt;/group&gt;\n    . . .\n    &lt;/record&gt;\n</code></pre> <p>Ahora que ya hemos indicado que un contacto res un desarrollador, deber\u00edamos tener alg\u00fan filtro para que si estamos dentro de nuestra aplicaci\u00f3n y mostramos los contactos con nuestro men\u00fa, solo aparezcan usuarios desarrolladores.</p>"},{"location":"7_7_EjemploHerencias/#filtrado-de-la-accion","title":"Filtrado de la acci\u00f3n","text":"<p>Para poder filtrar, en la acci\u00f3n de men\u00fa que muestra los desarrolladores vamos a cambiar la acci\u00f3n generica de acceso a desarrolladores, o sea, primero definimos una gen\u00e9rica y despues especificas para listado y formulario, pues escogemos la primera y la modificamos.</p> <p>As\u00ed pues, se utiliza el atributo <code>domain</code> para filtrar los registros y mostrar \u00fanicamente aquellos con <code>es_desarrollador=True</code>. Simplemente con esta l\u00ednea, hacemos un filtrado de los elementos del listado (por lo tanto los accesobles) son \u00fanicamente lo que tienen este nuevo campo a <code>True</code></p> <p>Adem\u00e1s, vamos a utilizar el atributo <code>context</code> para establecer el valor por defecto de este campo al crear nuevos registros desde esta acci\u00f3n. <code>context</code> es como un diccionario de elementos que se le pasan al servidor, y en este caso se utiliza este elemento para expecificar al servidor que en el caso de que se cree un elemento nuevo, entonces establezca el valor de <code>es_desarrollador</code> a <code>True</code>.</p> <p>Veamos en c\u00f3digo c\u00f3mo se aplican estos cambios: </p> <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"gestion_tareas_sergio.action_desarrolladores\"&gt;\n  &lt;field name=\"name\"&gt;Gestion Tareas Sergio Desarrolladores&lt;/field&gt;\n  &lt;field name=\"res_model\"&gt;res.partner&lt;/field&gt;\n  &lt;field name=\"view_mode\"&gt;list,form&lt;/field&gt;\n  &lt;field name=\"domain\"&gt;[('es_desarrollador', '=', True)]&lt;/field&gt;\n  &lt;field name=\"context\"&gt;{'default_es_desarrollador': True}&lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Es importante observar la sintaxis que se utiliza en el ejemplo, por una parte en <code>domain</code> generamos un filtro que realmente se lo pasamos a python  para que lo evalue (por eso esta todo enrre corchetes <code>[]</code>), por eso tiene esa sint\u00e1xis tan especifica y por otra parte tambi\u00e9n podemos ver que en <code>context</code> indicamos anteponiendo <code>default_</code> el nombre del campo al cual vamos a asignar un valor por defecto. y adem\u00e1s en este caso de nuevo la sintaxis es diferente, porque los especificamos mediante un diccionario que se parar\u00e1 al cliente web.</p> <p>Ahora al acceder al listado nos aparecer\u00e1n solo los desarrolladores, y si cremos un desarrollador nuevo veremos que esta activo por defecto el indicador de que es desarrollador.</p>"},{"location":"7_7_EjemploHerencias/#visibilidad-condicional-de-la-pestana-de-desarrollador","title":"Visibilidad condicional de la pesta\u00f1a de desarrollador","text":"<p>Para asegurar que la pesta\u00f1a de desarrollador solo sea visible para los contactos que realmente sean desarrolladores, se utiliza el atributo <code>modifiers</code> en la definici\u00f3n de la p\u00e1gina tal y como se muestra a continuaci\u00f3n:</p> <pre><code>```xml\n    &lt;record model=\"ir.ui.view\" id=\"desarrolladores_form\"&gt;\n    . . .\n          &lt;page name=\"desarrolladores\" string=\"Desarrolladores\" modifiers=\"{'invisible':[('es_desarrollador', '=', False)]}\"&gt;\n            &lt;group&gt;\n              &lt;group&gt;\n                &lt;field name=\"es_desarrollador\" &gt;&lt;/field&gt;\n                &lt;field name=\"tecnologias\"&gt;&lt;/field&gt;\n              &lt;/group&gt;\n            &lt;/group&gt;\n          &lt;/page&gt;\n    . . . \n    &lt;/record&gt;\n</code></pre> <p>Vemos que la sintasis es imilar a la vista anteriormente. Mediante <code>modifiers</code>  indicamos una serie de condiciones que deben cumplir los atributos, en este caso, el campo <code>es_desarrollador</code> debe ser <code>True</code> para mostrar la pesta\u00f1a, por lo que mediante una condicion (<code>('es_desarrollador', '=', False)</code>) que le pasamos a python, comprobamos o no si mostramos el elemento</p> <p><code>modifiers</code> y <code>attrs</code></p> <p>Odoo ha cambiado en la version 18 la forma en la que identifica los atributos de una vista, ha pasado de llamarlos atributos (identificados por <code>attrs</code>) a modificadores (identificados por <code>modifiers</code>), por lo que si encuentras c\u00f3digo con <code>attrs</code> debes cambiarlo por <code>modifiers</code></p> <p>Este \u00faltimo paso puede ser prescindible, pero nos asegura que esta pesta\u00f1a se muestra \u00fanicamente para desarrollares, y con ella hemos teminado lo que ser\u00eda puramente la herencia de una vista como la de Contactos para gestionar \u00fanicamente los Desarolladores</p>"},{"location":"7_7_EjemploHerencias/#relacion-entre-tareas-y-desarrolladores","title":"Relaci\u00f3n entre tareas y desarrolladores","text":"<p>Llegados a este punto, vamos a mejorar nuestra aplicaci\u00f3n generando una relac\u00f3n obvia entre desarrolladores y tareas, de forma que cada tarea tendr\u00e1 un desarrollador asociado, y cada desarrolador podr\u00e1 realizar diferntes tareas durante el transcurso del proyecto. </p> <p>As\u00ed pues, se a\u00f1ade un campo de relaci\u00f3n en el modelo de tareas para asociar cada tarea a un desarrollador. Dado que los desarrolladores son contactos (<code>res.partner</code>), la relaci\u00f3n se establece directamente con este modelo. </p> <pre><code>class tareas_sergio(models.Model):\n    _name = 'gestion_tareas_sergio.tareas_sergio'\n    #...\n    desarrollador_mo = fields.Many2one('res.partner', string='Desarrollador')\n</code></pre> <p>Ahora, deber\u00edamos modificar nuestra vista de tareas para mostrar el nuevo campo en cada tareas. </p> views.xml <pre><code>&lt;record model=\"ir.ui.view\" id=\"tareas_form\"&gt;\n. . . \n           &lt;field name=\"desarrollador_mo\" /&gt;\n. . . \n&lt;/record&gt;\n</code></pre> <p>Si lo hacemos observaremos que funciona correctamente mostrando la relaci\u00f3n establecida por lo que tenemo un desplegable para seleccionar el desarrollador, pero aqu\u00ed observaremos que hay algo que no funciona correctamente y es que se muestran de nuevo todos los contactos, por lo tanto, lo adecuado ser\u00eda que en la vista de tareas, se filtrara el campo para que solo muestren los contactos que sean desarrolladores y adem\u00e1s, puesto que desde este desplegable podemos acceder al formulario de contactos, tambi\u00e9n se especifica la vista de formulario personalizada al acceder desde este campo.</p> <pre><code>    &lt;record model=\"ir.ui.view\" id=\"tareas_form\"&gt;\n    . . . \n              &lt;field \n                name=\"desarrollador_mo\" \n                domain=\"[('es_desarrollador', '=', True)]\"\n                context=\"{'form_view_ref': 'desarrolladores_form'}\"/&gt;\n    . . . \n    &lt;/record&gt;\n</code></pre>"},{"location":"7_7_EjemploHerencias/#ocultamos-campo-de-es_desarrollador-en-formulario","title":"Ocultamos campo de <code>es_desarrollador</code> en formulario","text":"<p>Otra mejora que podr\u00edamos plantear es ocultar un campo dentro del formualrio de desarrolladores. Si vamos es ese formulario, creamo un nuevo desarrollador y pulsamos cobre el check del valor boleano, el efecto que nos encontramos es que al indicar a <code>es_desarrollador</code> a <code>False</code> autom\u00e1ticamente desaparece del formulario la pesta\u00f1a que hemos a\u00f1adido, puesto que ese contacto ha dejado de ser un programador. </p> <p>Una soluci\u00f3n posible es hacer el campo inivisble, de forma que no se pueda modificar. Tambi\u00e9n servir\u00eda directamente no mostrar el campo, pero por motivos did\u00e1cicos veamos el c\u00f3digo que realizar\u00eda la accion de ocultar:</p> <pre><code>   &lt;record model=\"ir.ui.view\" id=\"desarrolladores_form\"&gt;\n      &lt;field name=\"name\"&gt;gestion_tareas_sergio.Desarrolladores&lt;/field&gt;\n      &lt;field name=\"model\"&gt;res.partner&lt;/field&gt;\n      &lt;field name=\"inherit_id\" ref=\"base.view_partner_form\"&gt;&lt;/field&gt;\n      &lt;field name=\"mode\"&gt;primary&lt;/field&gt;\n      &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;xpath expr=\"//sheet/notebook/page[@name='internal_notes']\" position=\"after\"&gt;\n          &lt;page name=\"desarrolladores\" string=\"Desarrolladores\" modifiers=\"{'invisible':[('es_desarrollador', '=', False)]}\"&gt;\n            &lt;group&gt;\n              &lt;group&gt;\n                &lt;!-- &lt;field name=\"es_desarrollador\" readonly=\"1\"&gt;&lt;/field&gt; --&gt;\n                &lt;field name=\"es_desarrollador\" invisible=\"1\"&gt;&lt;/field&gt;\n                &lt;field name=\"tecnologias\"&gt;&lt;/field&gt;\n              &lt;/group&gt;\n            &lt;/group&gt;\n          &lt;/page&gt;\n        &lt;/xpath&gt;\n      &lt;/field&gt;\n    &lt;/record&gt;\n</code></pre> <p>Como se puede ver en este caso, el campo se ha modificado para que sea invisible aunque tambi\u00e9n se ha dejado comentado el c\u00f3digo para hacerlo de solo lectura. Comprueba que esto te funciona.</p>"},{"location":"7_7_EjemploHerencias/#asignacion-automatica-de-la-categoria-desarrolladores","title":"Asignaci\u00f3n autom\u00e1tica de la categor\u00eda \"Desarrolladores\"","text":"<p>Realizaremos un \u00faltimo cambio en nuestro modelo para ver una nueva posibilidad dentro de la herencia de modelo y vista que estamos realizado.</p> <p>Cualquier contacto tiene un campo llamado <code>etiquetas</code> o <code>tags</code> que permiten asignar caractar\u00edsticas a los contactos como pueden ser \"consultor\", \"VIP\", \"Temporal\", etc..., a partir de aqu\u00ed, nuestro comentido ser\u00e1 asignar de forma autom\u00e1tica la etiqueta \"Desarrollador\" al crear un nuevo desarrollador. </p> <p>Esto se realiza mediante un m\u00e9todo decorado con <code>@api.onchange</code>, que comprueba si la categor\u00eda existe y la asigna al campo <code>category_id</code> del contacto. Si la categor\u00eda no existe, se crea autom\u00e1ticamente.</p> <p>Veamos el c\u00f3digo resultante c\u00f3mo ser\u00eda:</p> <pre><code>class desarrollador(models.Model):\n    _name = 'res.partner'\n    # ...\n    es_desarrollador = fields.Boolean( string='Desarrollador') \n    # ...\n\n    # Asignar una etiqueta como desarrollador al marcar como desarrollador a un usuario\n    @api.onchange('es_desarrollador')\n    def _onchange_es_desarrollador(self):\n        categorias = self.env['res.partner.category'].search([('name','=','Desarrollador')])\n        if len(categorias) &gt; 0:\n            category = categorias[0]\n        else:\n            category = self.env['res.partner.category'].create({'name':'Desarrollador'})\n        self.category_id = [(4, category.id)]    \n</code></pre> <p>Y con esto conseguimos que al asignar la varible <code>es_desarrollador</code> se a\u00f1ada directamente la categor\u00eda de <code>Desarrollador</code>.</p> <p>Cabe resalta, que el decorador <code>@api.onchange('es_desarrollador')</code> indica a Odoo que debe llamar al m\u00e9todo <code>_onchange_es_desarrollador</code> cada vez que el usuario modifique ese campo en la interfaz. Es algo que ya hemos visto anteiormente.</p>"},{"location":"7_8_EjemploMejorandoVistas/","title":"7.8. Mejorando vistas","text":"<p>POR REVISAR</p> <p>En este apartado vamos a aprender c\u00f3mo crear y personalizar una vista tipo tree en Odoo, aprovechando todas las posibilidades que nos brinda el framework. </p>"},{"location":"7_8_EjemploMejorandoVistas/#que-es-una-vista-list","title":"\u00bfQu\u00e9 es una vista List?","text":"<p>La vista tree (o lista) es la m\u00e1s sencilla y tambi\u00e9n la m\u00e1s f\u00e1cil de personalizar en Odoo. Por defecto, si no definimos una vista tree para un modelo, Odoo genera una autom\u00e1ticamente mostrando el campo <code>name</code> y otros campos b\u00e1sicos. Por ejemplo, en el m\u00f3dulo que estamos desarrollando, llamado <code>manage</code>, aparecen varias vistas tree generadas por defecto para los modelos que hemos creado, como <code>sprint</code>, <code>task</code> y <code>project</code>.</p> <p>Si revisamos el c\u00f3digo de nuestra aplicaci\u00f3n, veremos que la mayor\u00eda de las vistas personalizadas que hemos creado hasta ahora son de tipo formulario (form), y apenas hemos definido vistas tree. Cuando no a\u00f1adimos una vista tree personalizada, Odoo muestra la predeterminada, que suele ser muy b\u00e1sica.</p> <p>Por ejemplo, en el modelo <code>devs</code>, que hereda de <code>res.partner</code> (contactos), la vista tree por defecto muestra varios campos heredados de contactos. Si queremos personalizarla, debemos definir nuestra propia vista tree en el archivo XML correspondiente.</p>"},{"location":"7_8_EjemploMejorandoVistas/#codificacion-de-una-vista-tree","title":"Codificaci\u00f3n de una vista Tree","text":"<p>Para crear una vista tree personalizada, debemos definir un registro en la tabla <code>ir.ui.view</code> con un identificador \u00fanico (<code>id</code>), un nombre descriptivo, el modelo al que aplica y la definici\u00f3n XML de la vista. Por ejemplo, para el modelo <code>task</code> ya tenemos una vista tree personalizada, aunque sea muy similar a la predeterminada.</p> <p>Supongamos que queremos crear una vista tree personalizada para el modelo <code>sprint</code>. Copiamos la estructura de la vista tree de <code>task</code> y la adaptamos:</p> <ul> <li>Cambiamos el <code>id</code> por uno \u00fanico, como <code>sprint_list</code>.</li> <li>El nombre tambi\u00e9n debe ser descriptivo, por ejemplo, <code>Sprint list</code>.</li> <li>El modelo ser\u00e1 <code>sprint</code>.</li> <li>A\u00f1adimos los campos que queremos mostrar: <code>name</code>, <code>description</code>, <code>duration</code>, <code>start_date</code>, <code>end_date</code>, etc.</li> </ul> <p>Una vez definida la vista y actualizado el m\u00f3dulo, veremos que la lista de sprints muestra los campos seleccionados. Si creamos un nuevo sprint, veremos c\u00f3mo se actualizan los valores autom\u00e1ticamente, por ejemplo, la fecha de fin calculada a partir de la duraci\u00f3n y la fecha de inicio.</p>"},{"location":"7_8_EjemploMejorandoVistas/#decoraciones-condicionales-en-vistas-tree","title":"Decoraciones condicionales en vistas Tree","text":"<p>Odoo permite resaltar filas en la vista tree seg\u00fan condiciones usando el atributo <code>decoration</code>. Por ejemplo, si queremos que los sprints con una duraci\u00f3n exacta de 15 d\u00edas aparezcan en amarillo, podemos usar <code>decoration-warning</code> con la condici\u00f3n correspondiente.</p> <pre><code>&lt;tree decoration-warning=\"duration == 15\"&gt;\n  ...\n&lt;/tree&gt;\n</code></pre> <p>En la documentaci\u00f3n oficial de Odoo puedes consultar todas las opciones de decoraci\u00f3n disponibles.</p> <p>Si queremos resaltar los sprints que est\u00e1n actualmente en curso (es decir, que ya han comenzado pero a\u00fan no han terminado), podemos crear un campo computado booleano llamado <code>active</code> en el modelo <code>sprint</code>. Este campo se calcular\u00e1 autom\u00e1ticamente comprobando si la fecha de inicio es anterior o igual a la fecha actual y la fecha de fin es posterior o igual a hoy.</p> <p>El m\u00e9todo computado podr\u00eda verse as\u00ed (en Python):</p> <pre><code>from odoo import models, fields, api\nfrom datetime import date\n\nclass Sprint(models.Model):\n  _name = 'sprint'\n\n  start_date = fields.Date()\n  end_date = fields.Date()\n  duration = fields.Integer()\n  active = fields.Boolean(compute='_compute_active')\n\n  @api.depends('start_date', 'duration')\n  def _compute_active(self):\n    today = date.today()\n    for sprint in self:\n      if sprint.start_date and sprint.end_date:\n        sprint.active = sprint.start_date &lt;= today &lt;= sprint.end_date\n      else:\n        sprint.active = False\n</code></pre> <p>Para poder usar este campo en la vista tree (aunque no lo mostremos), debemos incluirlo en la definici\u00f3n de la vista. As\u00ed, podemos aplicar una decoraci\u00f3n, por ejemplo, en azul (<code>decoration-info</code>) cuando <code>active</code> sea <code>True</code>:</p> <pre><code>&lt;tree decoration-info=\"active\" ...&gt;\n  ...\n  &lt;field name=\"active\" invisible=\"1\"/&gt;\n&lt;/tree&gt;\n</code></pre> <p>El orden de las decoraciones es importante: si un registro cumple varias condiciones, se aplicar\u00e1 la \u00faltima que coincida.</p>"},{"location":"7_8_EjemploMejorandoVistas/#uso-de-operadores-en-condiciones","title":"Uso de operadores en condiciones","text":"<p>Si queremos resaltar los sprints cuya duraci\u00f3n sea menor que 15 d\u00edas, debemos usar el operador <code>&lt;</code>. Sin embargo, en XML debemos escribirlo como <code>&amp;lt;</code> para evitar conflictos con las etiquetas:</p> <pre><code>&lt;tree decoration-warning=\"duration &amp;lt; 15\"&gt;\n  ...\n&lt;/tree&gt;\n</code></pre>"},{"location":"7_8_EjemploMejorandoVistas/#vistas-tree-editables","title":"Vistas Tree editables","text":"<p>Odoo permite hacer las vistas tree editables a\u00f1adiendo el atributo <code>editable=\"top\"</code> (o <code>bottom</code>). Esto permite modificar los registros directamente desde la lista, pero limita los campos editables a los que se muestran en la vista. Por lo general, no se recomienda usar esta opci\u00f3n salvo casos muy concretos, ya que se pierde la funcionalidad del formulario completo.</p>"},{"location":"7_8_EjemploMejorandoVistas/#sumatorios-en-vistas-tree","title":"Sumatorios en vistas Tree","text":"<p>Otra funcionalidad interesante es la posibilidad de mostrar sumatorios en la vista tree. Por ejemplo, podemos sumar la duraci\u00f3n total de todos los sprints programados, lo cual es \u00fatil en contextos como presupuestos o informes de ventas. Para ello, basta con a\u00f1adir el atributo <code>sum=\"Total\"</code> en el campo correspondiente:</p> <pre><code>&lt;field name=\"duration\" sum=\"Total\"/&gt;\n</code></pre> <p>Esto mostrar\u00e1 el total de la columna al final de la lista.</p>"},{"location":"7_8_EjemploMejorandoVistas/#recursos-y-documentacion","title":"Recursos y documentaci\u00f3n","text":"<p>En la documentaci\u00f3n oficial de Odoo encontrar\u00e1s informaci\u00f3n detallada sobre todas las opciones de personalizaci\u00f3n de vistas. Adem\u00e1s, en el repositorio de GitHub del proyecto tienes disponibles todos los fuentes y los distintos commits con el progreso realizado.</p>"},{"location":"7_9_EjemploDatosDemo/","title":"7.9. Datos de demostraci\u00f3n","text":"<p>POR REVISAR</p> <p>En este apartado vamos a ver c\u00f3mo a\u00f1adir datos de demo a nuestra aplicaci\u00f3n en Odoo. Nuestra aplicaci\u00f3n, que no ten\u00eda datos, acaba de introducir un ejemplo para un desarrollador, un proyecto y un sprint. Lo que queremos es que, cuando se instale nuestro m\u00f3dulo, se generen una serie de datos de demo autom\u00e1ticamente.</p>"},{"location":"7_9_EjemploDatosDemo/#casilla-datos-de-demo-en-la-bdd","title":"Casilla \"Datos de demo\" en la BDD","text":"<p>Recordad que, para que esto funcione, cuando creamos la base de datos debemos marcar la casilla de datos de demo. Por ejemplo, si estamos en <code>localhost</code> en la URL web database selector, al crear una base de datos, si marcamos la casilla de datos de demo, cualquier m\u00f3dulo que instalemos se instalar\u00e1 con datos de demo. Si no la marcamos, la aplicaci\u00f3n, independientemente de que tenga desarrollados esos datos demo, no los instalar\u00e1.</p>"},{"location":"7_9_EjemploDatosDemo/#como-generar-nuestros-datos-de-demo","title":"C\u00f3mo generar nuestros datos de demo","text":""},{"location":"7_9_EjemploDatosDemo/#1-archivo-__manifest__py","title":"1. Archivo <code>__manifest__.py</code>","text":"<p>Hay un fichero, el manifiesto (<code>__manifest__.py</code>), que en la \u00faltima secci\u00f3n tiene la parte de datos de demo, que solo ser\u00e1n cargados si estamos en el modo demo. Por defecto, se cargan ficheros XML. Normalmente generamos uno por cada uno de los modelos. En este caso, el fichero <code>demo.xml</code> est\u00e1 en la carpeta <code>demo</code> y dentro tenemos el registro b\u00e1sico en XML.</p>"},{"location":"7_9_EjemploDatosDemo/#ejemplo-de-registro-basico-en-xml","title":"Ejemplo de registro b\u00e1sico en XML","text":"<pre><code>&lt;record id=\"dev_1\" model=\"res.partner\"&gt;\n  &lt;field name=\"name\"&gt;Nombre Desarrollador&lt;/field&gt;\n  &lt;field name=\"access_code\"&gt;12345678A&lt;/field&gt;\n  &lt;field name=\"is_dev\"&gt;True&lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>El ID debe ser \u00fanico. No podemos tener un contacto u objeto de <code>res.partner</code> con ese mismo ID. Adem\u00e1s, el campo <code>access_code</code> tiene restricciones: debe cumplir un patr\u00f3n (ocho d\u00edgitos y una letra) y ser \u00fanico (restricci\u00f3n SQL de unicidad).</p>"},{"location":"7_9_EjemploDatosDemo/#generacion-automatica-de-datos-de-demo","title":"Generaci\u00f3n autom\u00e1tica de datos de demo","text":"<p>Si solo tenemos que generar un par de registros, podemos hacerlo manualmente. Pero para generar muchos, normalmente se hace autom\u00e1ticamente.</p>"},{"location":"7_9_EjemploDatosDemo/#2-datos-aleatorios-con-mockaroo","title":"2. Datos aleatorios con Mockaroo","text":"<p>Mockaroo permite generar datos aleatorios configurando los campos que queremos. Por ejemplo, para 10 desarrolladores:</p> <ul> <li>ID: generado aleatoriamente</li> <li>name: tipo <code>Full Name</code></li> <li>is_dev: siempre <code>True</code></li> <li>access_code: patr\u00f3n de 8 d\u00edgitos y una letra may\u00fascula (<code>########^</code>)</li> </ul> <p>Configuramos Mockaroo para generar 10 filas en formato CSV (sin cabecera) y descargamos el archivo.</p>"},{"location":"7_9_EjemploDatosDemo/#3-script-en-python-para-generar-datos-de-demo","title":"3. Script en Python para generar datos de demo","text":"<p>Queremos convertir el CSV en un fichero <code>demo.xml</code> v\u00e1lido. Creamos un script en Python, por ejemplo <code>data_gen.py</code>, que:</p> <ul> <li>Lee el fichero CSV</li> <li>Escribe en el directorio <code>demo</code> un XML con la estructura correcta para los datos de demo de <code>res.partner</code></li> </ul>"},{"location":"7_9_EjemploDatosDemo/#ejemplo-de-funcion-en-python","title":"Ejemplo de funci\u00f3n en Python","text":"<pre><code>import os\n\ndef write_text(text, file):\n  with open(file, \"a\") as f:\n    f.write(text)\n\ndef write_dev(line, file):\n  xml = f'''\n  &lt;record id=\"dev_{line[0]}\" model=\"res.partner\"&gt;\n    &lt;field name=\"name\"&gt;{line[1]}&lt;/field&gt;\n    &lt;field name=\"access_code\"&gt;{line[2]}&lt;/field&gt;\n    &lt;field name=\"is_dev\"&gt;True&lt;/field&gt;\n  &lt;/record&gt;\n  '''\n  write_text(xml, file)\n\ndef devs(source, demo_file):\n  if os.path.exists(demo_file):\n    os.remove(demo_file)\n  write_text('&lt;odoo&gt;&lt;data&gt;\\n', demo_file)\n  with open(source) as file:\n    for line in file:\n      fields = line.strip().split(',')\n      write_dev(fields, demo_file)\n  write_text('&lt;/data&gt;&lt;/odoo&gt;\\n', demo_file)\n\n# Uso:\n# devs('devels.csv', 'demo/devs.xml')\n</code></pre> <p>Este script:</p> <ul> <li>Borra el fichero destino si ya existe</li> <li>A\u00f1ade las etiquetas <code>&lt;odoo&gt;&lt;data&gt;</code> al principio y <code>&lt;/data&gt;&lt;/odoo&gt;</code> al final</li> <li>Genera un registro por cada l\u00ednea del CSV</li> </ul>"},{"location":"7_9_EjemploDatosDemo/#prueba-y-anadir-al-manifest","title":"Prueba y a\u00f1adir al manifest","text":"<p>Probamos el script y comprobamos que genera el fichero <code>devs.xml</code> con los registros correctamente estructurados.</p> <p>Para que Odoo cargue estos datos de demo, debemos a\u00f1adir el nuevo fichero generado en la secci\u00f3n <code>demo</code> del <code>__manifest__.py</code>:</p> <pre><code>'demo': [\n  'demo/demo.xml',\n  'demo/devs.xml',\n],\n</code></pre> <p>Nota: Para que Odoo cargue los datos de demo correctamente, hay que reiniciar Docker (o el servidor Odoo) y actualizar el m\u00f3dulo.</p>"},{"location":"8_1_Modulos/","title":"8.1. Introducci\u00f3n a los m\u00f3dulos en Odoo","text":"<p>Hemos hecho una introducci\u00f3n creando unos m\u00f3dulos de prueba en Odoo. Ahora vamos a profundizar y explicar qu\u00e9 es cada uno de los elementos y c\u00f3mo se utilizar, al menos con una profundidad m\u00ednima para poder desarrollar m\u00f3dulos b\u00e1sicos.</p>"},{"location":"8_1_Modulos/#los-modulos","title":"Los m\u00f3dulos","text":"<p>Tanto el servidor como los clientes son m\u00f3dulos. Todos est\u00e1n guardados en una base de datos. Todo lo que se pueda hacer para modificar Odoo se hace en m\u00f3dulos.</p>"},{"location":"8_1_Modulos/#composicion-de-un-modulo","title":"Composici\u00f3n de un m\u00f3dulo","text":"<p>Los m\u00f3dulos de Odoo ampl\u00edan o modifican partes del Modelo-Vista-Controlador. De esta manera, un m\u00f3dulo puede tener:</p> <ul> <li>Objetos de negocio: Son la parte del modelo, definidos en clases de Python seg\u00fan una sintaxis propia del ORM de Odoo.</li> <li>Archivos de datos: Son archivos XML que pueden definir datos, vistas o configuraciones.</li> <li>Controladores web: Gestionan las peticiones de los navegadores web.</li> <li>Datos est\u00e1ticos: Im\u00e1genes, CSS o JavaScript utilizados por la interfaz web. Es necesario que los datos est\u00e1ticos se guarden en el directorio static. Por ejemplo, el icono del m\u00f3dulo va en <code>static/description/icon.png</code>.</li> </ul>"},{"location":"8_1_Modulos/#estructura-de-archivos-de-un-modulo","title":"Estructura de archivos de un m\u00f3dulo","text":"<p>Ya vimos en la secci\u00f3n anterior alguna de las caracter\u00edsticas de los m\u00f3dulos: </p> <ul> <li>Todos los m\u00f3dulos est\u00e1n en un directorio definido en la opci\u00f3n --addons-path o en el archivo de configuraci\u00f3n, normalmente <code>addons</code>. Cada m\u00f3dulo esta un un subdirectorio dentro de esta carpeta y por lo que puede haber m\u00e1s de un directorio.</li> <li>Un m\u00f3dulo de Python se declara en un archivo de manifest (<code>__manigest__.py</code>) que da informaci\u00f3n sobre el m\u00f3dulo, lo que hace, los m\u00f3dulos de los que depende y c\u00f3mo se debe instalar o actualizar. Manifest in Odoo</li> <li>Un m\u00f3dulo es un paquete de Python que necesita un archivo __init__.py para instanciar todos los archivos Python.</li> </ul>"},{"location":"8_1_Modulos/#creacion-de-modulos","title":"Creaci\u00f3n de m\u00f3dulos","text":"<p>Tambi\u00e9n hemos visto que podemos crear un m\u00f3dulo de forma manual a\u00f1adiendo cada una de las carpetas y ficheros de configuraci\u00f3n o vimos que para ayudar al programador, Odoo contiene le comando <code>scaffold</code> para crear m\u00f3dulos vac\u00edos. Este crea la estructura de archivos necesaria para empezar a trabajar:</p> <pre><code>$ odoo scaffold &lt;nombre_del_m\u00f3dulo&gt; &lt;d\u00f3nde_crearlo&gt;\n</code></pre> <p>Posteriormente veremos m\u00e1s sobre <code>scaffold</code>, pero si quieres m\u00e1s informaci\u00f3n puedes recurrir al Manual oficial Scaffolding</p> <p>El par\u00e1metro scaffold puede tener la opci\u00f3n -t para indicar el directorio de la plantilla. Esta est\u00e1 hecha utilizando jinja2, que es un motor de plantillas para Python.</p> <p>Las plantillas est\u00e1n en el directorio de instalaci\u00f3n de Odoo, en el directorio cli. En nuestro caso: cli/templates/ dentro del directorio de instalaci\u00f3n de Odoo.</p> Plantillas de m\u00f3dulos Odoo utilizadas por `scaffold`. <p>Como podemos observar, el ejemplo de la secci\u00f3n anterior *HolaMundo_V3\" tiene exactamente esta estructura.</p> <p>Podemos crear una nueva plantilla copiando el directorio <code>default</code> o <code>theme</code> y modificando los archivos. Esto puede ser \u00fatil si siempre hacemos m\u00f3dulos con la misma plantilla. Por ejemplo, para poner nuestro logo, copyright, etc.</p>"},{"location":"8_1_Modulos/#orm","title":"ORM","text":"<p>El ORM (\"Object-Relational Mapping\" o \"Mapeo Objeto-Relacional\") es una t\u00e9cnica de programaci\u00f3n que permite convertir datos entre sistemas incompatibles utilizando lenguajes de programaci\u00f3n orientados a objetos. En Odoo, el ORM permite a los desarrolladores trabajar con la base de datos de manera m\u00e1s intuitiva y eficiente, sin necesidad de escribir consultas SQL directamente.</p> <p>El ORM es como una capa de abstracci\u00f3n que mapea las tablas de la base de datos a clases de Python y las filas de esas tablas a instancias de esas clases. Esto significa que puedes manipular los datos de la base de datos utilizando objetos y m\u00e9todos de Python, lo que simplifica enormemente el desarrollo y mantenimiento del c\u00f3digo.</p> ORM dentro de la arquitectura de Odoo. <p>Con ORM en Odoo se puede  - Definici\u00f3n de modelos: Puedes definir modelos de datos utilizando clases de Python. Cada modelo corresponde a una tabla en la base de datos. - Operaciones CRUD: El ORM proporciona m\u00e9todos para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) de manera sencilla. Por ejemplo, puedes crear un nuevo registro utilizando el m\u00e9todo <code>create()</code>, leer registros con el m\u00e9todo <code>search()</code>, actualizar registros con el m\u00e9todo <code>write()</code>, y eliminar registros con el m\u00e9todo <code>unlink()</code>. - Relaciones entre modelos: Puedes definir relaciones entre modelos, como relaciones uno a muchos, muchos a uno, y muchos a muchos, utilizando campos espec\u00edficos como <code>One2many</code>, <code>Many2one</code>, y <code>Many2many</code>. - Validaciones y restricciones: Puedes definir validaciones y restricciones en los modelos para asegurar la integridad de los datos. Por ejemplo, puedes utilizar el decorador <code>@api.constrains</code> para definir restricciones personalizadas.</p> <p>A continuaci\u00f3n se muestra un ejemplo sencillo de c\u00f3mo definir un modelo en Odoo utilizando el ORM:</p> <pre><code>from odoo import models, fields, api\n\nclass ModeloEjemplo(models.Model):\n    _name = 'modelo.ejemplo'\n    _description = 'Descripci\u00f3n de modelo de ejemplo'\n\n    name = fields.Char(string='Nombre', required=True)\n    descripcion = fields.Text(string='Descripci\u00f3n')\n    fecha = fields.Date(string='Fecha')\n\n    @api.constrains('name')\n    def _check_nombre(self):\n       for record in self:\n          if len(record.name) &lt; 3:\n             raise ValidationError('El nombre debe tener al menos 3 caracteres.')\n</code></pre> <p>En este ejemplo:</p> <ul> <li>Definimos un modelo llamado <code>ModeloEjemplo</code> que corresponde a una tabla en la base de datos.</li> <li>El modelo tiene tres campos: <code>nombre</code>, <code>descripcion</code>, y <code>fecha</code>.</li> <li>Utilizamos el decorador <code>@api.constrains</code> para definir una restricci\u00f3n que asegura que el campo <code>nombre</code> tenga al menos 3 caracteres.</li> </ul> <p>Mediante ORM, Odoo mapea sus objetos en una base de datos, evitando al programador la mayor\u00eda de consultas SQL. De esta manera, el desarrollo de los m\u00f3dulos es muy r\u00e1pido y se evitan errores de programaci\u00f3n.</p> <p>Los modelos se crean como clases de Python que extienden la clase models.Model, que contiene los campos y m\u00e9todos \u00fatiles para trabajar con el ORM.</p> <p>Nota</p> <p>Los modelos, al heredar de models.Model, necesitan obligatoriamente asignar valores a algunas variables, como por ejemplo _name.</p> <p>Odoo considera que un modelo es la referencia a una o m\u00e1s tablas en la base de datos. Un modelo no es una fila en la tabla, es toda la tabla.</p> <p>En programaci\u00f3n, el Modelo es una forma de relacionar el programa con la base de datos. Es de m\u00e1s alto nivel que las consultas directas a la base de datos y que las clases y objetos respecto a la programaci\u00f3n orientada a objetos. El modelo une en un \u00fanico concepto las estructuras de datos, las restricciones de integridad y las opciones de manipulaci\u00f3n de los datos.</p> <p>Los modelos en Odoo pueden</p> <ul> <li>Heredar de models.Model y ser los normales, mapeados y permanentes en la base de datos. </li> <li>Pueden ser models.TransientModel, que son iguales pero no tienen persistencia definitiva en la base de datos. Estos son los recomendados para crear <code>wizards</code>. </li> <li>Tambi\u00e9n pueden ser models.AbstractModel para definir modelos abstractos que luego ser\u00e1n heredados.</li> </ul> <p>En Odoo, existen tres tipos principales de modelos que heredan de clases base diferentes seg\u00fan su prop\u00f3sito, se trata de <code>models.Model</code>, <code>models.TransientModel</code> y <code>models.AbstractModel</code>:</p> <ul> <li><code>models.Model</code> se trata de Modelos persistentes. Representa una tabla real en la base de datos. Los datos almacenados en este modelo son permanentes. Por ejemplo Clientes, productos, facturas, etc.</li> <li><code>models.TransientModel</code> son datos temporales (como asistentes o formularios r\u00e1pidos), por lo tanto es un modelo no persistente. Los registros se eliminan autom\u00e1ticamente despu\u00e9s de un tiempo (por defecto, 7 d\u00edas). Se utilizan para Wizards, asistentes de importaci\u00f3n/exportaci\u00f3n, formularios temporales.</li> <li><code>models.AbstractModel</code> que son modelos base reutilizables, o sea, se trata de modelos abstractos que no crea una tabla en la base de datos. Se utiliza para definir funcionalidades comunes que pueden ser heredadas por otros modelos.</li> </ul> <p>Comparativa r\u00e1pida</p> Caracter\u00edstica <code>models.Model</code> <code>models.TransientModel</code> <code>models.AbstractModel</code> Persistencia S\u00ed No (temporal) No Crea tabla en BD S\u00ed S\u00ed No Uso t\u00edpico Datos reales Formularios/Wizards Funcionalidad com\u00fan Eliminaci\u00f3n autom\u00e1tica No S\u00ed No"},{"location":"8_1_Modulos/#inspeccionar-los-modelos","title":"Inspeccionar los modelos","text":"<p>Para ver los modelos existentes, se puede acceder a la base de datos PostgreSQL o consultar en Configuraci\u00f3n &gt; Estructura de la base de datos &gt; Modelos dentro del modo desarrollador.</p> <p>Cabe destacar el campo modules, donde se indican los m\u00f3dulos instalados en los que se define o hereda el modelo observado.</p>"},{"location":"8_2_Campos/","title":"8.2. Definici\u00f3n de Campos (Fields)","text":"<p>Hemos visto c\u00f3mo se configura gen\u00e9ricamente un modelo, ahora vamos a profuncizan en la caracter\u00edsticas de los campos que lo definen.</p>"},{"location":"8_2_Campos/#fields","title":"Fields","text":"<p>Las \"columnas\" del modelo son los fields (campos). Estos pueden ser de datos normales como Integer, Float, Boolean, Date, Char... o especiales como Many2one, One2many, Related...</p> <p>Hay algunos fields reservados:</p> <ul> <li>id (Id): identificador \u00fanico para un registro en su modelo.</li> <li>create_date (Datetime): fecha de creaci\u00f3n del registro.</li> <li>create_uid (Many2one): usuario que cre\u00f3 el registro.</li> <li>write_date (Datetime): fecha de la \u00faltima modificaci\u00f3n del registro.</li> <li>write_uid (Many2one): usuario que realiz\u00f3 la \u00faltima modificaci\u00f3n.</li> </ul> <p>Hay otros fields que podemos declarar y que tienen propiedades especiales. Estos son los m\u00e1s importantes:</p> <ul> <li>name: es el campo utilizado para el Identificador Externo o cuando se hace referencia en los many2one en la vista.</li> <li>active: indica si el registro est\u00e1 activo. Permite ocultar productos que ya no se necesitan, por ejemplo.</li> <li>sequence: permite definir el orden de los registros a mostrar en una lista.</li> </ul> <p>Los fields se declaran con un constructor:</p> <pre><code>from odoo import models, fields\n\nclass LessMinimalModel(models.Model):\n    _name = 'test.model2'\n\n    name = fields.Char()\n</code></pre> <p>Tienen unos atributos comunes:</p> <ul> <li>string (unicode, por defecto: el nombre del field): la etiqueta que ver\u00e1n los usuarios en la vista.</li> <li>required (bool, por defecto: False): si es True, el campo no puede quedar vac\u00edo.</li> <li>help (unicode, por defecto: ''): en los formularios proporciona ayuda al usuario para rellenar el campo.</li> <li>index (bool, por defecto: False): pide a Odoo que sea el \u00edndice de la base de datos. En otro caso, el ORM crea un campo id.</li> </ul> <p>Y algunos, sobre todo los especiales, tienen atributos particulares.</p> <p>Ejemplo completo:</p> <pre><code>class AModel(models.Model):\n\n    _name = 'a_name'\n\n    name = fields.Char(\n       string=\"Name\",                   # Etiqueta opcional del campo\n       compute=\"_compute_name_custom\",  # Convierte el campo en calculado\n       store=True,                      # Si es calculado, almacena el resultado\n       select=True,                     # Fuerza \u00edndice en el campo\n       readonly=True,                   # El campo ser\u00e1 solo lectura en las vistas\n       inverse=\"_write_name\",           # Al actualizar, dispara esta funci\u00f3n\n       required=True,                   # Campo obligatorio\n       translate=True,                  # Habilita traducci\u00f3n\n       help='blabla',                   # Texto de ayuda\n       company_dependent=True,          # Convierte columnas a ir.property\n       search='_search_function',       # B\u00fasqueda personalizada, usado sobre todo con compute\n       copy=True                        # Si se puede copiar con el m\u00e9todo copy()\n    )\n\n    # La clave string no es obligatoria\n    # Por defecto usar\u00e1 el nombre de la propiedad capitalizado\n\n    name = fields.Char()  # Definici\u00f3n v\u00e1lida\n</code></pre> <p>Si queremos valores por defecto, se pueden indicar como un atributo del field.</p> <p></p><pre><code>name = fields.Char(default='Alberto')\n</code></pre> o <pre><code>name = fields.Char(default=a_fun)\n...\ndef a_fun(self):\n    return self.do_something()\n</code></pre><p></p>"},{"location":"8_2_Campos/#campos-normales","title":"Campos normales","text":"<p>Estos son los campos para datos normales que proporciona Odoo:</p> <ul> <li><code>Integer</code></li> <li><code>Char</code></li> <li><code>Text</code></li> <li><code>Date</code>: Muestra un calendario en la vista.</li> <li><code>Datetime</code></li> <li><code>Float</code></li> <li><code>Boolean</code></li> <li><code>Html</code>: Guarda un texto, pero se representa de manera especial en el cliente.</li> <li><code>Binary</code>: Para guardar, por ejemplo, im\u00e1genes. Utiliza codificaci\u00f3n base64 al enviar los archivos al cliente. En realidad los guarda en /var/lib/odoo/.local/share/Odoo/filestore y la ruta a los archivos la indica la tabla ir_attachment junto con el id, nombre del campo y el modelo.</li> <li><code>Image</code> (Odoo13): En el caso de im\u00e1genes, acepta los atributos max_width y max_height donde se puede indicar en p\u00edxeles que debe redimensionar la imagen a ese tama\u00f1o m\u00e1ximo.</li> <li>Sele`ction: Muestra un select con las opciones indicadas.</li> </ul> <pre><code>type = fields.Selection([('1','B\u00e1sico'),('2','Intermedio'),('3','Completado')])\naselection = fields.Selection(selection='a_function_name') # Se puede llamar a una funci\u00f3n que define las opciones.\n</code></pre>"},{"location":"8_2_Campos/#campos-relacionales","title":"Campos relacionales","text":"<p>Las relaciones entre los modelos (en definitiva, entre las tablas de la base de datos) tambi\u00e9n las simplifica el ORM. As\u00ed, las relaciones 1 a muchos se hacen en lo que Odoo llama Many2one y las relaciones Muchos a Muchos se hacen con Many2many. Las relaciones muchos a muchos, en una base de datos relacional, implican una tercera tabla intermedia, pero en Odoo no tenemos que preocuparnos de estos detalles si no queremos, el mapeo de los objetos lo detectar\u00e1 y crear\u00e1 las tablas, claves y restricciones de integridad necesarias. Vamos a repasar uno a uno estos campos:</p>"},{"location":"8_2_Campos/#reference","title":"Reference","text":"<p>Una referencia arbitraria a un modelo y un campo.</p> <pre><code>aref = fields.Reference([('model_name', 'String')])\naref = fields.Reference(selection=[('model_name', 'String')])\naref = fields.Reference(selection='a_function_name')\n\n# Fragmento de test_new_api:\nreference = fields.Reference(string='Documento relacionado', selection='_reference_models')\n@api.model\ndef _reference_models(self):\n    models = self.env['ir.model'].search([('state', '!=', 'manual')])\n    return [(model.model, model.name)\n            for model in models\n            if not model.model.startswith('ir.')]\n</code></pre> <p>Los campos reference no son muy utilizados, ya que normalmente las relaciones entre modelos son siempre las mismas.</p>"},{"location":"8_2_Campos/#many2one","title":"Many2one","text":"<p>Relaci\u00f3n con otro modelo</p> <pre><code>arel_id = fields.Many2one('res.users')\narel_id = fields.Many2one(comodel_name='res.users')\nan_other_rel_id = fields.Many2one(comodel_name='res.partner', delegate=True)\n</code></pre> <p>En este caso:</p> <pre><code>----------              -----------\n| Pa\u00eds   |  uno         |  Ciudad | \n---------- -----        -----------\n| * id   |     |        | * id    |\n| * name |     | muchos | * name  |\n----------     ---------| * pa\u00eds  |\n                        -----------\n</code></pre> <p>El c\u00f3digo resultante ser\u00eda:</p> <pre><code>class ciudad(models.Model):\n    _name = 'mon.ciutat'\n    pais = fields.Many2one(\"mon.pais\", string='Pa\u00eds', ondelete='restrict')\n</code></pre> <p>delegate est\u00e1 en True para hacer que los campos del modelo apuntado sean accesibles desde el modelo actual.</p> <p>Tambi\u00e9n acepta context y domain como en la vista. As\u00ed queda disponible para todas las posibles vistas.</p> <p>Otro argumento adicional es ondelete que permite definir el comportamiento al borrar el elemento referenciado: set null, restrict o cascade.</p> <p><code>ondelete cascade</code> borra los hijos a nivel de PostgreSQL, pero no elimina en External Id, eso se hace en unlink(), pero no ejecuta unlink() de los hijos. Por tanto, si queremos que se eliminen por completo, hay que heredar el unlink del padre y a\u00f1adir la llamada al de los hijos.</p>"},{"location":"8_2_Campos/#one2many","title":"One2many","text":"<p>Inversa del Many2one. Necesita la existencia de un Many2one en el otro modelo:</p> <pre><code>arel_ids = fields.One2many('res.users', 'arel_id')\narel_ids = fields.One2many(comodel_name='res.users', inverse_name='arel_id')\n</code></pre> <p>Un One2many funciona porque hay un many2one en el otro modelo. As\u00ed, siempre hay que especificar el nombre del modelo y el nombre del campo Many2one del modelo que hace referencia al actual, como se puede ver en el ejemplo.</p> <p>En el ejemplo anterior, quedar\u00eda as\u00ed:</p> <pre><code>class pais(models.Model):\n    _name = 'mon.pais'\n    ciudades = fields.One2many('mon.ciutat', 'pais', string='Ciudades')\n</code></pre> <p>Nota</p> <p>Es importante entender que el One2many no implica datos adicionales en la base de datos y siempre es calculado como un ''select'' en la base de datos donde el id del modelo actual coincida con el Many2one (clave for\u00e1nea) del otro modelo. Esto hace que no tenga sentido hacer One2many computed o poner un domain para restringir los que se pueden a\u00f1adir.</p> <p>Tip</p> <p>Los One2many pueden tener domain para no mostrar los que no cumplen una condici\u00f3n, esto no significa que no exista esa relaci\u00f3n.</p>"},{"location":"8_2_Campos/#many2many","title":"Many2many","text":"<p>Relaci\u00f3n muchos a muchos.</p> <pre><code>arel_ids = fields.Many2many('res.users')\narel_ids = fields.Many2many(\n    comodel_name='res.users', # El modelo con el que se relaciona\n    relation='table_name', # (opcional) el nombre de la tabla intermedia\n    column1='col_name', # (opcional) el nombre en la tabla intermedia de la columna de este modelo\n    column2='other_col_name')  # (opcional) el nombre de la columna del otro modelo.\n</code></pre> <p>El primer ejemplo suele funcionar directamente, pero si queremos tener m\u00e1s de una relaci\u00f3n Many2many entre los dos mismos modelos, hay que usar la sintaxis completa donde especificamos el nombre de la relaci\u00f3n y el nombre de las columnas que identifican los dos modelos. Recuerda que una relaci\u00f3n Many2many implica una tabla intermedia y estamos especificando sus claves for\u00e1neas.</p> <p>Tip</p> <p>Tambi\u00e9n es necesario especificar la tabla intermedia si se hace una relaci\u00f3n Many2many al propio modelo.</p> <p>Un Many2many implica una tabla intermedia. Si queremos a\u00f1adir atributos a esta relaci\u00f3n, hay que crear expl\u00edcitamente el modelo intermedio.</p> <p>El many2many puede ser ''computed'' y en el c\u00e1lculo se puede ordenar o filtrar. Un Many2many computed no crea la tabla intermedia.</p>"},{"location":"8_2_Campos/#related","title":"Related","text":"<p>Un campo de otro modelo, necesita una relaci\u00f3n Many2one. As\u00ed se pueden aprovechar las funcionalidades de guardado, como b\u00fasquedas o referencias en funciones. En t\u00e9rminos de bases de datos, un campo related rompe la tercera forma normal. Esto suele ser problem\u00e1tico, pero Odoo tiene mecanismos para que no pase nada. De todas formas, si nos preocupa esto, con store=False no guarda nada en la tabla.</p> <pre><code>participant_nick = fields.Char(\n    string='Nick name',\n    store=True,\n    related='partner_id.name'\n</code></pre> <p>Un campo related puede ser de cualquier tipo. Por ejemplo, many2one:</p> <pre><code>sala = fields.Many2one(\n    'cine.sala', \n    related='sessio.sala', \n    store=True, \n    readonly=True)\n</code></pre>"},{"location":"8_2_Campos/#many2onereference","title":"Many2oneReference","text":"<p>Un Many2one donde tambi\u00e9n se guarda el modelo al que hace referencia con el atributo: model_field. M\u00e1s info</p>"},{"location":"8_2_Campos/#one2one","title":"One2one","text":"<p>Los campos One2one no existen en Odoo. Pero si queremos esta funcionalidad podemos usar varias t\u00e9cnicas:</p> <ul> <li>Hacer dos campos Many2many y restringir con constrains que solo puede existir una relaci\u00f3n. Problemas:<ul> <li>En la vista no podemos poner un widget como en el Many2one y es complicado evitar relaciones cruzadas.</li> <li>Se puede poner un limit en la vista, pero seguir\u00e1 comport\u00e1ndose como un Many2many.</li> </ul> </li> <li>Hacer dos Many2one y restringir con constrains o sql constrains que solo puede existir una relaci\u00f3n mutua. (Hay que sobreescribir los m\u00e9todos create y write para que se cree la asociaci\u00f3n autom\u00e1ticamente). Problemas:<ul> <li>Si sobreescribimos el write de ambos, se puede producir una llamada recursiva sin fin y es complicado evitar referencias cruzadas.</li> </ul> </li> <li>Hacer un Many2one y en el otro modelo un Many2one computed que busque en los del primer modelo. Para poder editar en ambos hay que hacer una funci\u00f3n inversa para el campo computed. Esta es una de las opciones m\u00e1s elegantes. </li> </ul> <p>One2one</p> <pre><code>class orderline(models.Model):\n    _name = 'sale.order.line'\n    _inherit = 'sale.order.line'\n    booking = fields.Many2one('reserves.bookings')\n\n    _sql_constraints = [\n    ('booking_uniq', 'unique(booking)', 'Ya existe otra l\u00ednea de pedido para esta reserva'),\n    ]\n\nclass bookings(models.Model):\n    _name = 'reserves.bookings'\n\n    name = fields.Char()\n    order_line = fields.Many2one('sale.order.line', compute='_get_order_line', inverse='_set_order_line')\n\n    @api.multi\n    def _get_order_line(self):\n        for b in self:\n            b.order_line = self.env['sale.order.line'].search([('booking.id','=',b.id)]).id\n\n    @api.one\n    def _set_order_line(self):\n        o = self.order_line.id\n        self.env['sale.order.line'].search([('id','=',o)]).write({'booking':self.id})\n</code></pre> <ul> <li>Hacer un Many2one y un One2many y restringir el m\u00e1ximo del One2many (+info). Problemas:<ul> <li>Los mismos que en los dos many2many. Es m\u00e1s simple restringir las relaciones cruzadas.</li> </ul> </li> <li>Hacer una herencia m\u00faltiple (+info](http://blog.odoobiz.com/2014/10/openerp-one2one-relational-field-example.html)). Problemas:<ul> <li>Esta es, en teor\u00eda, la forma m\u00e1s oficial de hacerlo, pero obliga a crear siempre la relaci\u00f3n y los modelos en un orden determinado.</li> </ul> </li> </ul>"},{"location":"8_2_Campos/#filtros-domains","title":"Filtros (Domains)","text":"<p>En ocasiones es necesario a\u00f1adir un filtro en el c\u00f3digo python para que un campo relacional no pueda tener ciertas referencias. El comportamiento del domain es diferente seg\u00fan el tipo de campo.</p> <ul> <li>Domain en Many2one: Filtra los elementos del modelo referenciado que pueden ser elegidos para el campo:</li> </ul> <pre><code>parent = fields.Many2one('game.resource', domain=\"[('template', '=', True)]\")\n</code></pre> <ul> <li>Domain en Many2many: La lista de elementos a elegir se filtra seg\u00fan el domain:</li> </ul> <pre><code>allowed_value_ids = fields.Many2many(\n    comodel_name=\"x\",\n    compute=\"_compute_allowed_value_ids\"\n)\n\ndef _compute_allowed_value_ids(self):\n    for record in self:\n        record.allowed_value_ids = self.env[\"x\"].search(...)\n\nvalue_id = fields.Many2many(\n    comodel_name=\"x\",\n    domain=\"[('id', 'in', allowed_value_ids)]\",\n)\n</code></pre> <ul> <li>Domain en One2many: Al ser una relaci\u00f3n que depende de otro Many2one, no se puede filtrar, si ponemos un domain, solo dejar\u00e1 de mostrar los que no cumplen el domain, pero no dejan de existir.</li> </ul>"},{"location":"8_2_Campos/#fields-computed","title":"Fields Computed","text":"<p>Muchas veces queremos que el contenido de un campo sea calculado en el momento en que lo vamos a visualizar. Todos los tipos de campos pueden ser computed (calculados). Veamos algunos ejemplos:</p> <p>Ejemplo</p> <pre><code># Este campo no se guarda en la base de datos \n# y siempre se recalcula cuando ejecutamos una acci\u00f3n que lo muestra\ntaken_seats = fields.Float(string=\"Plazas ocupadas\", compute='_taken_seats')   \n\n# El decorador @api.depends() indica que se llamar\u00e1 a la funci\u00f3n \n# siempre que se modifiquen los campos seats y attendee_ids. \n# Si no lo ponemos, solo se recalcula al recargar la acci\u00f3n.\n@api.depends('seats', 'attendee_ids')  \ndef _taken_seats(self):          \n    # El for recorre self, que es un recordset con todos los elementos del modelo mostrados \n    # por la vista. Si es un tree, ser\u00e1n todos los visibles y si es un form, ser\u00e1 un singleton.\n    for r in self:  \n        # r es un singleton y se puede acceder a los campos como variables del objeto.      \n        if not r.seats: \n            r.taken_seats = 0.0 \n        else:\n            r.taken_seats = 100.0 * len(r.attendee_ids) / r.seats\n</code></pre> <p>En este ejemplo se ve c\u00f3mo el campo float <code>taken_seats</code> se calcula en una funci\u00f3n privada <code>_taken_seats</code>. Es interesante observar el for porque recorre todas las instancias a las que hace referencia el modelo. Esta funci\u00f3n solo se ejecutar\u00e1 una vez aunque tenga que calcular todos los elementos de una lista. Por eso, la propia funci\u00f3n es la que debe iterar los elementos de self. self es un <code>recordset</code>, es decir, es como una lista en la que cada elemento es un registro del modelo. Si el campo computed se llama al entrar en un formulario, el recordset tendr\u00e1 solo un elemento, pero si el campo computed se ve en una lista (tree), puede que sean varios registros. Es importante recordar hacer el for record in self: aunque pensemos que el campo computed solo lo utilizaremos en un formulario.</p> <p>Ejemplo de campos computed de todos los tipos</p> <pre><code># -*- coding: utf-8 -*-\n\nfrom openerp import models, fields, api, tools\nfrom datetime import date, datetime\n\nclass pruebas_computed(models.Model):\n    _name = 'pruebas_computed.pruebas_computed'\n\n    name = fields.Char()\n    value = fields.Integer()\n    image = fields.Binary(string=\"Imagen original\")\n    computedfloat = fields.Float(compute=\"_value_pc\", store=True)\n    computedchar = fields.Char(compute=\"_value_pc\", store=False)\n    medium_image = fields.Binary(compute=\"_redimensionar\", store=True)\n    small_image = fields.Binary(compute=\"_redimensionar\", store=True)\n    computedm2o = fields.Many2one('res.partner', compute=\"_value_pc\", store=False)\n    computedm2m = fields.Many2many(comodel_name='product.template', compute=\"_value_pc\", store=False)\n    computeddate = fields.Date(compute=\"_value_pc\", store=False)\n    computeddatetime = fields.Datetime(compute=\"_value_pc\", store=False)\n\n    description = fields.Text()\n\n    @api.depends('value')\n    def _value_pc(self):\n        for r in self:\n            r.computedfloat = float(r.value) / 100 \n            r.computedchar = \"(\" + str(r.value) + \")\"\n            r.computedm2o = self.env['res.partner'].search([('id', '=', r.value)]).id # Many2one espera un id, que es un campo Integer. \n            print('\\033[93m' + str(self.env['product.product'].search([('id', '&gt;', r.value)]).ids) + '\\033[0m')\n            r.computedm2m = self.env['product.template'].search([('id', '&gt;', r.value)]).ids # Many2many espera un array de ids o un recordset. \n            # El c\u00f3digo comentado a continuaci\u00f3n hace lo mismo, por si queremos hacer otras cosas dentro del for.\n            # ids = []\n            # for t in self.env['product.template'].search([('id','&gt;',r.value)]):\n            #     ids.append(t.id)\n            # r.computedm2m = ids\n\n            # r.computeddate = date.today() # Esto depende de Python\n            r.computeddate = fields.date.today() # Recomendamos este, ya que es propio de la clase fields de Odoo\n            # r.computeddate = datetime.now()\n            r.computeddatetime = fields.datetime.now()\n\n\n    @api.depends('image')\n    def _redimensionar(self):\n        for r in self:\n            image_original = r.image\n            if image_original:\n                images = tools.image_get_resized_images(image_original)\n                r.medium_image = images['image_medium']                        \n                r.small_image = images['image_small']                \n            else:\n                r.medium_image = \"\"                        \n                r.small_image = \"\"\n</code></pre> <p>(C\u00f3digo completo)</p> <p>Note</p> <p>En el apartado del <code>controlador</code> se explican m\u00e1s detalles de las funciones en python-odoo.</p>"},{"location":"8_2_Campos/#buscar-y-escribir-en-campos-computed","title":"Buscar y escribir en campos computed","text":"<p>Con api.depends podemos hacer que los campos calculados puedan ser buscados o referenciados desde otros modelos, ya que podemos indicar que s\u00ed se guarden en la base de datos. Si se guarda en la base de datos, no se recalcula hasta que no cambia el contenido del field del que depende. Pero si el campo calculado no depende de valores est\u00e1ticos de otros fields y/o necesitamos que siempre se calcule, no tenemos muchas opciones elegantes. Una de ellas puede ser hacer dos campos, uno calculado store=False y otro no, y hacer un write en la funci\u00f3n. Otra posibilidad es hacer una funci\u00f3n p\u00fablica que pueda ser llamada desde otro modelo. La m\u00e1s elegante, aunque no siempre funciona, es utilizar la opci\u00f3n search y asignarle una funci\u00f3n que debe retornar un dominio de b\u00fasqueda. El problema es que no acepta mucha complejidad, ya que supone una b\u00fasqueda por toda la base de datos y puede ser muy ineficiente.</p> <p>Por defecto no se puede escribir en un campo computed. No tiene mucho sentido en la mayor\u00eda de los casos, ya que es un campo que depende de otros. Pero puede ser que, a veces, queramos escribir el resultado y que modifique el campo origen. Imaginemos, por ejemplo, que sabemos el precio final y queremos que calcule el precio sin IVA. Para hacerlo, la mejor manera es crear una funci\u00f3n y hacer que est\u00e9 en la opci\u00f3n inverse.</p> <p>Ejemplo:</p> <pre><code>preu = fields.Float('Precio', compute=\"_get_price\", search='_search_price', inverse='_set_price')\n\n@api.depends('pelicula', 'descuento')\ndef _get_price(self):\n    for r in self:\n        price = r.pelicula.precio\n        price = price - (price * r.descuento / 100)\n        r.preu = price\n\ndef _search_price(self, operator, value): # De momento este search solo es para ==\n    precios = self.search([]).mapped(lambda e: [e.id, e.pelicula.precio - (e.pelicula.precio * e.descuento / 100)]) # Un buen ejemplo de mapped en lambda\n    print(precios)\n    p = [num[0] for num in precios if num[1] == value]  # condici\u00f3n if en una lista python sin hacer un for (list comprehension)\n    # tambi\u00e9n se puede probar en un filter() de python\n    print(p)\n    # p es una lista de las id que ya cumplen la condici\u00f3n, por tanto solo hay que hacer que la id est\u00e9 en la lista.\n    return [('id', 'in', p)]\n\ndef _set_price(self):\n    self.pelicula.precio = self.preu  # Esto es un ejemplo, pero est\u00e1 mal, ya que modificas el precio de la peli en todas las sesiones\n</code></pre> <p>Documentaci\u00f3n oficial: https://www.odoo.com/documentation/master/developer/reference/backend/orm.html</p>"},{"location":"8_2_Campos/#valores-por-defecto","title":"Valores por defecto","text":"<p>En Odoo es muy f\u00e1cil definir valores por defecto, ya que es un argumento m\u00e1s en el constructor de los campos:</p> <pre><code>name = fields.Char(default=\"Desconocido\")\nuser_id = fields.Many2one('res.users', default=lambda self: self.env.user)\nstart_date = fields.Date(default=fields.Date.today())\nactive = fields.Boolean(default=True)\ndef compute_default_value(self):\n    return self.get_value()\na_field = fields.Char(default=compute_default_value)\n</code></pre> <p>Si queremos, por ejemplo, poner la fecha del momento de crear, no podemos hacer esto:</p> <pre><code>start_date = fields.Date(default=fields.Date.today())  # INCORRECTO\n</code></pre> <p>Porque calcula la fecha en el momento de actualizar el m\u00f3dulo, no al crear el elemento en el modelo. Hay que hacer:</p> <pre><code>start_date = fields.Date(default=lambda self: fields.Date.today())  # CORRECTO\n</code></pre> <p>o</p> <pre><code>start_date = fields.Datetime(default=lambda self: fields.Datetime.now()) # CORRECTO\n</code></pre> <p>El valor por defecto no puede depender de un campo que se est\u00e1 creando en ese momento. En ese caso se puede utilizar un on_change.</p> <p>En caso de tener muchos valores por defecto o que dependan del contexto, se puede utilizar la funci\u00f3n default_get que ya tienen los modelos.</p> <pre><code>@api.model\ndef default_get(self, default_fields):\n    result = super(SelectSalePrice, self).default_get(default_fields)\n    if self._context.get('default_picking_id') is not None:\n        result['picking_id'] = self._context.get('default_picking_id')\n    return result\n</code></pre> <p>Lo que hace esta funci\u00f3n es un poco avanzado de momento, ya que hace uso del <code>context</code> y la herencia para a\u00f1adir un valor por defecto al diccionario que retorna esta funci\u00f3n en la clase Model.</p>"},{"location":"8_2_Campos/#restricciones-constrains","title":"Restricciones (constrains)","text":"<p>Los objetos pueden incorporar, de forma opcional, restricciones de integridad, adicionales a las de la base de datos. Odoo valida estas restricciones en las modificaciones de datos y, en caso de violaci\u00f3n, muestra una pantalla de error.</p> <pre><code>from odoo.exceptions import ValidationError\n\n@api.constrains('age')\ndef _check_something(self):\n    for record in self:\n        if record.age &gt; 20:\n            raise ValidationError(\"El registro es demasiado antiguo: %s\" % record.age)\n    # todos los registros pasaron la prueba, no retornar nada\n</code></pre> <p>En ocasiones, cuando tenemos claro c\u00f3mo har\u00edamos esta restricci\u00f3n en SQL, tal vez nos resulte m\u00e1s interesante hacer una restricci\u00f3n de base de datos con una sql constraint. Estas se definen con 3 strings (name, sql_definition, message). Por ejemplo:</p> <pre><code>_sql_constraints = [\n    ('name_uniq', 'unique(name)', 'Mensaje de advertencia personalizado'),\n    ('contact_uniq', 'unique(contact)', 'Mensaje de advertencia personalizado')\n]\n</code></pre> <p>En este caso, se trata de una restricci\u00f3n de unicidad, que es m\u00e1s sencilla de implementar que realizar una b\u00fasqueda en Python.</p>"},{"location":"8_3_ArchivosDeDatos/","title":"8.3. Archivos de Datos","text":""},{"location":"8_3_ArchivosDeDatos/#archivos-de-datos","title":"Archivos de datos","text":"<p>Cuando desarrollamos un m\u00f3dulo en Odoo, podemos definir datos que se almacenar\u00e1n en la base de datos. Estos datos pueden ser necesarios para el funcionamiento del m\u00f3dulo, para demostraci\u00f3n o incluso formar parte de la vista.</p> <p>Tip</p> <p>Algunos m\u00f3dulos solo existen para insertar datos en Odoo.</p> <p>Todos los archivos de datos son en formato XML y tienen una estructura como la siguiente:</p> <pre><code>&lt;odoo&gt;\n    &lt;record model=\"{nombre_modelo}\" id=\"{identificador_registro}\"&gt;\n        &lt;field name=\"{nombre_campo}\"&gt;{valor}&lt;/field&gt;\n    &lt;/record&gt;\n&lt;/odoo&gt;\n</code></pre> <p>Dentro de las etiquetas odoo podemos encontrar una etiqueta record por cada fila de la tabla que queremos introducir. Es necesario especificar el modelo y el id. El id es un identificador externo, que no tiene por qu\u00e9 coincidir con la clave primaria que el ORM utilizar\u00e1 despu\u00e9s. Cada field tendr\u00e1 un nombre y un valor.</p>"},{"location":"8_3_ArchivosDeDatos/#identificadores-externos-external-ids","title":"Identificadores Externos (External Ids)","text":"<p>Todos los registros de la base de datos tienen un identificador \u00fanico en su tabla, el id, que es un n\u00famero autoincremental asignado por la base de datos. Sin embargo, si queremos referenciarlo en archivos de datos u otros lugares, no siempre conocemos ese id. La soluci\u00f3n de Odoo son los Identificadores Externos. Se trata de una tabla que relaciona cada id de cada tabla con un nombre. Es el modelo ir.model.data. Para encontrarlos, accede a:</p> <p><code>Ajustes &gt; T\u00e9cnico &gt; Secuencias e identificadores &gt; Identificadores externos</code></p> <p>Ah\u00ed encontrar\u00e1s la columna Complete ID.</p> <p>Para encontrar los id al crear archivos de demostraci\u00f3n o de datos, podemos ir al men\u00fa, pero esos ids cambian de una instalaci\u00f3n a otra. Por tanto, es recomendable utilizar los external id. Para obtenerlo, puedes activar el modo desarrollador y abrir el men\u00fa Ver metadatos.</p> <p>En los datos de demo, los external ids se utilizan para no depender de los ids, que pueden variar al ser autoincrementales. Para que funcione, hay que usar el atributo ref:</p> <pre><code>&lt;field name=\"product_id\" ref=\"product.product1\"/&gt;\n</code></pre> <p>Tip</p> <p>Se recomienda usar el atributo <code>id</code> en el record, aunque no sobrescribe el id real, sirve para declarar el External Id y es m\u00e1s f\u00e1cil referenciarlo despu\u00e9s.</p> <p>Ver tambi\u00e9n la funci\u00f3n ref() del ORM.</p>"},{"location":"8_3_ArchivosDeDatos/#expresiones","title":"Expresiones","text":"<p>A veces queremos que los campos se calculen cada vez que se actualiza el m\u00f3dulo. Esto se puede hacer con el atributo eval, que eval\u00faa una expresi\u00f3n de Python.</p> <pre><code>&lt;field name=\"date\" eval=\"(datetime.now()+timedelta(-1)).strftime('%Y-%m-%d')\"/&gt;\n&lt;field name=\"product_id\" eval=\"ref('product.product1')\"/&gt; &lt;!-- Equivalente al ejemplo anterior --&gt;\n&lt;field name=\"price\" eval=\"ref('product.product1').price\"/&gt;\n&lt;field name=\"avatar\" model=\"school.template\" eval=\"obj().env.ref('school.template_student1').image\" /&gt;\n</code></pre> <p>Para los campos x2many, se puede usar eval para asignar una lista de elementos:</p> <pre><code>&lt;field name=\"tag_ids\" eval=\"[(6,0,[ref('vehicle_tag_leasing'),ref('fleet.vehicle_tag_compact'),ref('fleet.vehicle_tag_senior')])]\" /&gt;\n</code></pre> <p>Observa que hemos pasado una tupla con un 6, un 0 y una lista de refs. Las tuplas pueden ser:</p> <ul> <li>(0, _, {'field': value}): Crea un nuevo registro y lo vincula.</li> <li>(1, id, {'field': value}): Actualiza los valores en un registro ya vinculado.</li> <li>(2, id, _): Desvincula y elimina el registro.</li> <li>(3, id, _): Desvincula pero no elimina el registro de la relaci\u00f3n.</li> <li>(4, id, _): Vincula un registro ya existente.</li> <li>(5, , ): Desvincula pero no elimina todos los registros vinculados.</li> <li>(6, _, [ids]): Reemplaza la lista de registros vinculados.</li> </ul>"},{"location":"8_3_ArchivosDeDatos/#datos-para-campos-binary-e-image","title":"Datos para campos Binary e Image","text":"<p>Algunos datos como im\u00e1genes o archivos pueden incluirse en los registros. Hay dos formas:</p> <ul> <li>Convertir el archivo a Base64 y pegar el resultado en el campo.</li> <li>A\u00f1adir el atributo <code>type=\"base64\"</code> y el atributo <code>file=\"modulo/demo/archivo\"</code>.</li> </ul> <pre><code>&lt;field name=\"image_1920\" type=\"base64\" file=\"ejemplo/demo/caritas/1000.jpg\"/&gt;\n</code></pre> <p>Observa que la ruta parte desde el directorio del m\u00f3dulo.</p>"},{"location":"8_3_ArchivosDeDatos/#eliminar-registros","title":"Eliminar registros","text":"<p>Con la etiqueta delete se pueden especificar los elementos a eliminar usando el external ID o mediante una b\u00fasqueda:</p> <pre><code>&lt;delete model=\"cine.sessio\" id=\"sessio_cine1_1\"&gt;&lt;/delete&gt;\n</code></pre> <p>Cuidado</p> <p>Si falla la actualizaci\u00f3n con datos de demo, es posible que Odoo desactive la posibilidad de volver a instalarlos. Esto es el campo demo de ir.module.module, que es de solo lectura, por lo que hay que modificarlo manualmente en la base de datos:</p> <p><code>update ir_module_module set demo = 't' where name='school';</code></p> <p>M\u00e1s informaci\u00f3n: https://www.odoo.com/documentation/master/developer/reference/backend/data.html</p> <p>Aqu\u00ed tienes el fragmento corregido, traducido al castellano y formateado correctamente en Markdown:</p>"},{"location":"8_4_AccionesYMenu/","title":"8.4. Acciones y Men\u00fas","text":""},{"location":"8_4_AccionesYMenu/#acciones-y-menus","title":"Acciones y men\u00fas","text":"<p>Si quieres conocer en m\u00e1s detalle c\u00f3mo funcionan las acciones en Odoo, consulta el art\u00edculo Acciones y men\u00fas en Odoo.</p> <p>El cliente web de Odoo contiene men\u00fas en la parte superior y a la izquierda. Estos men\u00fas, al ser activados, muestran otros men\u00fas y las pantallas del programa. Cuando pulsamos en un men\u00fa, la pantalla cambia porque hemos ejecutado una acci\u00f3n.</p> <p>Una acci\u00f3n b\u00e1sicamente tiene:</p> <ul> <li>type: El tipo de acci\u00f3n y c\u00f3mo debe interpretarse. Cuando se define en XML, no es necesario especificar el tipo, ya que lo indica el modelo en el que se guarda.</li> <li>name: El nombre, que puede mostrarse o no en pantalla. Se recomienda que sea legible para humanos.</li> </ul> <p>Las acciones y los men\u00fas se declaran en archivos de datos XML o directamente si una funci\u00f3n devuelve un diccionario que las define. Las acciones pueden ser llamadas de tres maneras:</p> <ul> <li>Haciendo clic en un men\u00fa.</li> <li>Haciendo clic en botones de las vistas (deben estar conectados con acciones).</li> <li>Como acciones contextuales en los objetos.</li> </ul> <p>De esta forma, el cliente web puede saber qu\u00e9 acci\u00f3n debe ejecutar si recibe alguna de estas cosas:</p> <ul> <li>false: Indica que se debe cerrar el di\u00e1logo actual.</li> <li>Una cadena de texto: Con la etiqueta de la acci\u00f3n de cliente a ejecutar.</li> <li>Un n\u00famero: Con el ID o ID externo de la acci\u00f3n a buscar en la base de datos.</li> <li>Un diccionario: Con la definici\u00f3n de la acci\u00f3n, que no est\u00e1 ni en XML ni en la base de datos. Generalmente, se utiliza para llamar a una acci\u00f3n al finalizar una funci\u00f3n.</li> </ul>"},{"location":"8_4_AccionesYMenu/#acciones-tipo-window","title":"Acciones tipo window","text":"<p>Las acciones de tipo window son registros del modelo ir.actions.act_window. Sin embargo, los men\u00fas que las llaman pueden declararse de forma m\u00e1s r\u00e1pida mediante la etiqueta menuitem:</p> <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"action_list_ideas\"&gt;\n    &lt;field name=\"name\"&gt;Ideas&lt;/field&gt;\n    &lt;field name=\"res_model\"&gt;idea.idea&lt;/field&gt;\n    &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n&lt;/record&gt;\n\n&lt;menuitem id=\"menu_ideas\" parent=\"menu_root\" name=\"Ideas\" sequence=\"10\"\n          action=\"action_list_ideas\"/&gt;\n</code></pre> <p>Tip</p> <p>Las acciones deben declararse en el XML antes que los men\u00fas que las utilizan.</p> <p>Ejemplo</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;openerp&gt;\n    &lt;data&gt;\n        &lt;!-- window action --&gt;\n        &lt;!--\n            The following tag is an action definition for a \"window action\",\n            that is an action opening a view or a set of views\n        --&gt;\n        &lt;record model=\"ir.actions.act_window\" id=\"course_list_action\"&gt;\n            &lt;field name=\"name\"&gt;Courses&lt;/field&gt;\n            &lt;field name=\"res_model\"&gt;openacademy.course&lt;/field&gt;\n            &lt;field name=\"view_type\"&gt;form&lt;/field&gt;\n            &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n            &lt;field name=\"help\" type=\"html\"&gt;\n                &lt;p class=\"oe_view_nocontent_create\"&gt;Create the first course\n                &lt;/p&gt;\n            &lt;/field&gt;\n        &lt;/record&gt;\n\n        &lt;!-- top level menu: no parent --&gt;\n        &lt;menuitem id=\"main_openacademy_menu\" name=\"Open Academy\"/&gt;\n        &lt;!-- A first level in the left side menu is needed\n            before using action= attribute --&gt;\n        &lt;menuitem id=\"openacademy_menu\" name=\"Open Academy\"\n                parent=\"main_openacademy_menu\"/&gt;\n        &lt;!-- the following menuitem should appear *after*\n            its parent openacademy_menu and *after* its\n            action course_list_action --&gt;\n        &lt;menuitem id=\"courses_menu\" name=\"Courses\" parent=\"openacademy_menu\"\n                action=\"course_list_action\"/&gt;\n        &lt;!-- Full id location:\n            action=\"openacademy.course_list_action\"\n            It is not required when it is the same module --&gt;\n    &lt;/data&gt;\n&lt;/openerp&gt;\n</code></pre> <p>Solo el tercer nivel de men\u00fas puede tener asociada una acci\u00f3n. El primer nivel es el men\u00fa superior y el segundo no es \"clicable\".</p> <p>Tip</p> <p>Lo que hemos visto en esta secci\u00f3n es la definici\u00f3n de una acci\u00f3n en XML como parte de la vista, pero una acci\u00f3n no es m\u00e1s que una forma c\u00f3moda de escribir muchas cosas que har\u00e1 el cliente en JavaScript para pedir algo al servidor. Las acciones separan y simplifican el desarrollo de la interfaz de usuario del cliente web. Un men\u00fa o bot\u00f3n en HTML activa una funci\u00f3n JavaScript que, en principio, no sabe qu\u00e9 hacer. Esta solicita la definici\u00f3n de su acci\u00f3n. Una vez cargada, queda claro todo lo que debe solicitar (vistas, contexto, dominios, vistas de b\u00fasqueda, lugar donde cargarlo todo...). Entonces solicita las vistas y, con ayuda de estas y de los campos, solicita los registros que son los datos a mostrar. Por tanto, una acci\u00f3n es la definici\u00f3n \u2014sin programar JavaScript\u2014 de lo que debe hacer el cliente. Odoo permite declarar acciones como respuesta de funciones. Estas acciones no est\u00e1n en la base de datos, pero se env\u00edan igualmente al cliente, que las trata como si fueran acciones normales. Un ejemplo de esto son las acciones que devuelven los botones de los wizards. De hecho, podemos hacer que un bot\u00f3n devuelva una acci\u00f3n y, por tanto, abra una vista diferente.</p>"},{"location":"8_5_Vistas/","title":"8.5. Vistas","text":"<p>En este cap\u00edtulo exploraremos c\u00f3mo funcionan las vistas en Odoo, qu\u00e9 tipos de vistas existen y c\u00f3mo personalizarlas mediante XML y acciones de servidor. Aprender\u00e1s a estructurar correctamente una interfaz de usuario, definir formularios, listas, kanban y gr\u00e1ficos, y gestionar la navegaci\u00f3n entre ellos.</p> <p>Las vistas son la forma en la que se representan los modelos. Si no declaramos vistas, Odoo generar\u00e1 autom\u00e1ticamente una vista de lista o formulario est\u00e1ndar para poder ver los registros de cada modelo. Sin embargo, casi siempre queremos personalizar las vistas, y en ese caso se referencian por un identificador.</p> <p>Las vistas tienen una prioridad y, si no se especifica el identificador de la que queremos mostrar, se mostrar\u00e1 la de mayor prioridad.</p> <pre><code>&lt;record model=\"ir.ui.view\" id=\"view_id\"&gt;\n    &lt;field name=\"name\"&gt;view.name&lt;/field&gt;\n    &lt;field name=\"model\"&gt;object_name&lt;/field&gt;\n    &lt;field name=\"priority\" eval=\"16\"/&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;!-- contenido de la vista: &lt;form&gt;, &lt;list&gt;, &lt;graph&gt;, ... --&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Tip</p> <p>Las vistas se guardan en el modelo <code>ir.ui.view</code>. Todos los elementos de interfaz tienen en su nombre <code>ir.ui</code> (Information Repository, User Interface). Los men\u00fas est\u00e1n en <code>ir.ui.menu</code> y las acciones en <code>ir.actions.window</code>.</p>"},{"location":"8_5_Vistas/#ejemplo-de-vista-formulario","title":"Ejemplo de vista formulario","text":"<pre><code>&lt;record model=\"ir.ui.view\" id=\"course_form_view\"&gt;\n    &lt;field name=\"name\"&gt;course.form&lt;/field&gt;\n    &lt;field name=\"model\"&gt;openacademy.course&lt;/field&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;form string=\"Course Form\"&gt;\n            &lt;sheet&gt;\n                &lt;group&gt;\n                    &lt;field name=\"name\"/&gt;\n                    &lt;field name=\"description\"/&gt;\n                &lt;/group&gt;\n            &lt;/sheet&gt;\n        &lt;/form&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Aunque Odoo proporciona una lista y un formulario por defecto, normalmente es necesario mejorarlos. Todas las vistas tienen campos que pueden tener diferentes widgets. En los formularios, podemos adaptar mucho el aspecto con grupos de campos, pesta\u00f1as, campos ocultos condicionalmente, etc.</p>"},{"location":"8_5_Vistas/#vistas-de-lista","title":"Vistas de lista","text":"<p>A partir de Odoo 18 ya no existen vistas <code>tree</code>, todas son <code>list</code>. Los ejemplos antiguos funcionar\u00e1n cambiando la palabra.</p> <p>Las vistas list permiten mostrar registros en formato de tabla, facilitando la visualizaci\u00f3n y gesti\u00f3n de grandes cantidades de datos. Son \u00fatiles para mostrar informaci\u00f3n resumida de un conjunto de registros, con columnas que muestran los campos m\u00e1s relevantes. Adem\u00e1s, pueden incluir funcionalidades como ordenaci\u00f3n, filtros y acciones r\u00e1pidas.</p> <p>Ejemplo b\u00e1sico de vista list para el modelo de clientes (<code>res.partner</code>):</p> <pre><code>&lt;record id=\"view_partner_list\" model=\"ir.ui.view\"&gt;\n    &lt;field name=\"name\"&gt;res.partner.list&lt;/field&gt;\n    &lt;field name=\"model\"&gt;res.partner&lt;/field&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;list&gt;\n            &lt;field name=\"name\"/&gt;\n            &lt;field name=\"phone\"/&gt;\n            &lt;field name=\"email\"/&gt;\n            &lt;field name=\"company_id\"/&gt;\n        &lt;/list&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Elementos principales:</p> <ul> <li><code>&lt;record&gt;</code>: Define un nuevo registro en el modelo <code>ir.ui.view</code>.</li> <li><code>&lt;field name=\"name\"&gt;</code>: Nombre \u00fanico de la vista.</li> <li><code>&lt;field name=\"model\"&gt;</code>: Modelo al que pertenece la vista.</li> <li><code>&lt;field name=\"arch\" type=\"xml\"&gt;</code>: Estructura XML de la vista.</li> <li><code>&lt;list&gt;</code>: Define una vista de tipo lista.</li> <li><code>&lt;field name=\"...\"/&gt;</code>: Columnas que se mostrar\u00e1n en la lista.</li> </ul>"},{"location":"8_5_Vistas/#colores-en-listas","title":"Colores en listas","text":"<p>En las vistas de lista se puede modificar el color de las filas seg\u00fan el contenido de un campo usando la etiqueta decoration, que utiliza colores contextuales de Bootstrap:</p> <ul> <li><code>decoration-bf</code>: Negrita</li> <li><code>decoration-it</code>: Cursiva</li> <li><code>decoration-danger</code>: Rojo claro</li> <li><code>decoration-info</code>: Azul claro</li> <li><code>decoration-muted</code>: Gris claro</li> <li><code>decoration-primary</code>: P\u00farpura claro</li> <li><code>decoration-success</code>: Verde claro</li> <li><code>decoration-warning</code>: Marr\u00f3n claro</li> </ul> <pre><code>&lt;list decoration-info=\"state=='draft'\" decoration-danger=\"state=='trashed'\"&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"state\"/&gt;\n&lt;/list&gt;\n</code></pre> <p>Para comparar un campo de tipo Date o Datetime se puede usar la variable global de QWeb <code>current_date</code>:</p> <pre><code>&lt;list decoration-info=\"start_date==current_date\"&gt;\n    ...\n&lt;/list&gt;\n</code></pre> <p>Tambi\u00e9n se puede aplicar decoration a campos individuales.</p>"},{"location":"8_5_Vistas/#editable","title":"Editable","text":"<p>Las listas pueden ser editables para no tener que abrir un formulario: <code>editable=\"[top | bottom]\"</code>. Indica d\u00f3nde se crear\u00e1n los nuevos registros. El atributo <code>on_write</code> permite ejecutar un m\u00e9todo al editar o crear un elemento.</p>"},{"location":"8_5_Vistas/#campos-invisibles","title":"Campos invisibles","text":"<p>Para ocultar un campo en la lista pero seguir us\u00e1ndolo:</p> <pre><code>&lt;list decoration-info=\"duration==0\"&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"course_id\"/&gt;\n    &lt;field name=\"duration\" invisible=\"1\"/&gt;\n    &lt;field name=\"taken_seats\" widget=\"progressbar\"/&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"8_5_Vistas/#botones-en-listas","title":"Botones en listas","text":"<p>Las listas pueden tener botones con los mismos atributos que los de los formularios.</p> <p>Tip</p> <p>En listas dentro de formularios (X2many), el bot\u00f3n se ejecuta en el modelo de la lista, no en el del formulario padre. Para acceder al padre, usa el atributo <code>parent</code>.</p>"},{"location":"8_5_Vistas/#totales","title":"Totales","text":"<p>Se pueden calcular totales en listas:</p> <pre><code>&lt;field name=\"amount\" sum=\"Total Amount\"/&gt;\n</code></pre>"},{"location":"8_5_Vistas/#ordenar-por-un-campo","title":"Ordenar por un campo","text":"<p>Para ordenar por defecto por un campo no calculado:</p> <pre><code>&lt;list default_order=\"sequence,name desc\"&gt;\n</code></pre> <p>Si quieres que siempre se ordene as\u00ed, a\u00f1ade el atributo <code>_order</code> al modelo.</p>"},{"location":"8_5_Vistas/#agrupar-por-un-campo","title":"Agrupar por un campo","text":"<p>Con <code>default_group_by</code> (solo funciona con campos almacenados en la base de datos):</p> <pre><code>&lt;list default_group_by=\"born_year\"&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"born_year\"/&gt;\n    &lt;field name=\"age\"/&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"8_5_Vistas/#banner_route","title":"banner_route","text":"<p>Desde Odoo 12, puedes a\u00f1adir un banner HTML en listas, formularios, etc., usando <code>banner_route</code>:</p> <pre><code>&lt;list banner_route=\"/negocity/city_banner\"&gt;\n</code></pre> <p>Debes crear un controlador web que devuelva el HTML para esa ruta.</p> <pre><code>from odoo import http\n\nclass BannerCityController(http.Controller):\n    @http.route('/negocity/city_banner', auth='user', type='json')\n    def banner(self):\n        return {\n            'html': \"\"\"\n                &lt;div class=\"negocity_banner\" style=\"height: 200px; background-size:100%; background-image: url(/negocity/static/src/img/negocity_city.jpg)\"&gt;\n                    &lt;div class=\"negocity_button\" style=\"position: static; color:#fff;\"&gt;&lt;a&gt;Generate Cities&lt;/a&gt;&lt;/div&gt;\n                &lt;/div&gt;\n            \"\"\"\n        }\n</code></pre> <p>Para dar funcionalidad al enlace, usa un <code>&lt;a&gt;</code> con <code>type=\"action\"</code> y los atributos necesarios:</p> <pre><code>&lt;a class=\"banner_button\" type=\"action\" data-reload-on-close=\"true\" \n   role=\"button\" data-method=\"action_generate_cities\" data-model=\"negocity.city\"&gt;Generate Cities&lt;/a&gt;\n</code></pre>"},{"location":"8_5_Vistas/#vistas-formulario","title":"Vistas formulario","text":"<p>Para que un formulario quede bien, incluye la etiqueta <code>&lt;sheet&gt;</code>, que limita el ancho. Dentro de <code>&lt;sheet&gt;</code>, usa <code>&lt;group&gt;</code> para organizar los campos. Puedes usar varios grupos y a\u00f1adir t\u00edtulos con el atributo <code>string</code>.</p> <p>Para pesta\u00f1as tem\u00e1ticas, usa <code>&lt;notebook&gt;</code> y <code>&lt;page string=\"T\u00edtulo\"&gt;</code>. Para separar grupos, usa <code>&lt;separator string=\"Descripci\u00f3n\"/&gt;</code>.</p> <p>Si un campo One2many muestra una lista no adecuada, puedes modificar la vista de lista por defecto:</p> <pre><code>&lt;field name=\"subscriptions\" colspan=\"4\"&gt;\n   &lt;list&gt;...&lt;/list&gt;\n&lt;/field&gt;\n</code></pre> <p>O especificar la vista que quieres:</p> <pre><code>&lt;field name=\"subscriptions\" context=\"{'list_view_ref': 'modulo.view_subscriptions_tree'}\"/&gt;\n</code></pre> <p>Tambi\u00e9n puedes especificar la vista formulario para el One2many:</p> <pre><code>&lt;field name=\"m2o_id\" context=\"{'form_view_ref': 'module_name.form_id'}\"/&gt;\n</code></pre> <p>Warning</p> <p>Las vistas tree embebidas tienen limitaciones respecto a las llamadas con un action. Por ejemplo, no pueden ser agrupadas.</p>"},{"location":"8_5_Vistas/#valores-por-defecto-en-one2many","title":"Valores por defecto en One2many","text":"<p>Para que al crear un registro en un One2many el campo Many2one apunte al padre:</p> <pre><code>context=\"{'default_&lt;campo_many2one&gt;': active_id}\"\n</code></pre> <p>O en un action:</p> <pre><code>&lt;field name=\"context\"&gt;{\"default_doctor\": True}&lt;/field&gt;\n</code></pre> <p>Tip</p> <p>Esta sintaxis sirve para pasar valores por defecto a un formulario llamado desde un action, One2many, bot\u00f3n o men\u00fa.</p> <p>Tip</p> <p><code>active_id</code> apunta al id del elemento activo. En creaci\u00f3n, a\u00fan no existe en la base de datos, pero funciona internamente.</p> <p>Tip</p> <p>En Odoo 14 ya no es necesario, pero sigue siendo \u00fatil para otros Many2one o valores por defecto.</p>"},{"location":"8_5_Vistas/#domains-en-many2one","title":"Domains en Many2one","text":"<p>Puedes filtrar los campos Many2one:</p> <pre><code>&lt;field name=\"hotel\" domain=\"[('ishotel', '=', True)]\"/&gt;\n</code></pre> <p>Funciona tambi\u00e9n para Many2many.</p>"},{"location":"8_5_Vistas/#widgets","title":"Widgets","text":"<p>Algunos campos pueden mostrarse con un widget diferente al predeterminado:</p> <pre><code>&lt;field name=\"image\" widget=\"image\" class=\"oe_left oe_avatar\"/&gt;\n&lt;field name=\"taken_seats\" widget=\"progressbar\"/&gt;\n&lt;field name=\"country_id\" widget=\"selection\"/&gt;\n&lt;field name=\"state\" widget=\"statusbar\"/&gt;\n</code></pre>"},{"location":"8_5_Vistas/#integer-y-float","title":"Integer y Float","text":"<ul> <li><code>widget=\"integer\"</code>: Muestra el n\u00famero sin decimales.</li> <li><code>widget=\"char\"</code>: Muestra el n\u00famero como texto.</li> <li><code>widget=\"id\"</code>: Muestra el n\u00famero, no editable.</li> <li><code>widget=\"float\"</code>: Muestra el n\u00famero con decimales.</li> <li><code>widget=\"percentpie\"</code>: Gr\u00e1fico circular de porcentaje.</li> <li><code>widget=\"float_time\"</code>: Muestra floats como tiempo.</li> <li><code>widget=\"progressbar\"</code>: Barra de progreso (en tree y form).</li> <li><code>widget=\"monetary\"</code>: N\u00famero con 2 decimales.</li> <li><code>widget=\"gauge\"</code>: Gr\u00e1fico semicircular (solo kanban).</li> </ul> <p>Ejemplo de Gauge:</p> <pre><code>&lt;field name=\"current\" widget=\"gauge\" options=\"{'max_field': 'target_goal', 'label_field': 'definition_suffix', 'style': 'width:160px; height: 120px;'}\" /&gt;\n</code></pre>"},{"location":"8_5_Vistas/#char-y-text","title":"Char y Text","text":"<ul> <li><code>widget=\"char\"</code>: Editor de una l\u00ednea.</li> <li><code>widget=\"text\"</code>: Editor multil\u00ednea.</li> <li><code>widget=\"email\"</code>: Enlace para enviar correo.</li> <li><code>widget=\"url\"</code>: Enlace http.</li> <li><code>widget=\"date\"</code>: Guarda fechas como texto.</li> <li><code>widget=\"html\"</code>: Editor WYSIWYG.</li> <li><code>dashboard_graph</code>: Gr\u00e1fico peque\u00f1o con datos en JSON.</li> </ul> <p>Ejemplo de dashboard_graph:</p> <pre><code>&lt;field name=\"week_ocupation\" widget=\"dashboard_graph\" graph_type=\"bar\"/&gt;\n</code></pre> <p>El valor debe ser un JSON generado en Python, por ejemplo con <code>json.dumps()</code>.</p>"},{"location":"8_5_Vistas/#boolean","title":"Boolean","text":"<ul> <li><code>web_ribbon</code>: (Odoo 13) Muestra una cinta en el formulario.</li> <li><code>boolean_toggle</code>: Permite activar un booleano en una lista.</li> </ul>"},{"location":"8_5_Vistas/#date","title":"Date","text":"<ul> <li><code>daterange</code>: Muestra un rango de fechas.</li> </ul>"},{"location":"8_5_Vistas/#many2one","title":"Many2one","text":"<ul> <li><code>widget=\"many2one\"</code>: Selector con opci\u00f3n de crear nuevos.</li> <li><code>widget=\"many2onebutton\"</code>: Bot\u00f3n para abrir el formulario.</li> </ul>"},{"location":"8_5_Vistas/#many2many","title":"Many2many","text":"<ul> <li><code>widget=\"many2many\"</code>: Lista con opci\u00f3n de a\u00f1adir/eliminar.</li> <li><code>widget=\"many2many_tags\"</code>: Etiquetas.</li> <li><code>widget=\"many2many_checkboxes\"</code>: Lista de checkboxes.</li> <li><code>widget=\"many2many_kanban\"</code>: Kanban de los asociados.</li> <li><code>widget=\"x2many_counter\"</code>: Solo muestra la cantidad.</li> <li><code>many2many_tags_avatar</code>: Muestra avatares.</li> </ul>"},{"location":"8_5_Vistas/#one2many","title":"One2many","text":"<ul> <li><code>widget=\"one2many\"</code>: Por defecto.</li> <li><code>widget=\"one2many_list\"</code>: Igual, se mantiene por compatibilidad.</li> </ul>"},{"location":"8_5_Vistas/#modificar-el-tree-del-one2many","title":"Modificar el tree del One2many","text":"<p>Puedes especificar el tree a mostrar:</p> <pre><code>&lt;field name=\"fortress\"&gt;\n   &lt;tree&gt;\n     &lt;field name=\"name\"/&gt;&lt;field name=\"level\"/&gt;\n   &lt;/tree&gt;\n&lt;/field&gt;\n</code></pre> <p>O forzar un kanban:</p> <pre><code>&lt;field name=\"gallery\" mode=\"kanban,tree\" context=\"{'default_hotel_id':active_id}\"&gt;\n    &lt;kanban&gt;\n        &lt;field name=\"name\"/&gt;\n        &lt;field name=\"image\"/&gt;\n        &lt;templates&gt;\n            &lt;t t-name=\"kanban-box\"&gt;\n                &lt;div class=\"oe_product_vignette\"&gt;\n                    &lt;a type=\"open\"&gt;\n                        &lt;img class=\"oe_kanban_image\" style=\"width:300px; height:auto;\"\n                        t-att-src=\"kanban_image('marsans.hotel.galley', 'image', record.id.value)\" /&gt;\n                    &lt;/a&gt;\n                    &lt;div class=\"oe_product_desc\"&gt;\n                        &lt;h4&gt;\n                            &lt;a type=\"edit\"&gt;\n                                &lt;field name=\"name\"&gt;&lt;/field&gt;\n                            &lt;/a&gt;\n                        &lt;/h4&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/t&gt;\n        &lt;/templates&gt;\n    &lt;/kanban&gt;\n&lt;/field&gt;\n</code></pre>"},{"location":"8_5_Vistas/#binary-o-image","title":"Binary o Image","text":"<ul> <li><code>signature</code>: Permite firmar en pantalla.</li> <li><code>image</code>: Permite opciones como zoom o previsualizaci\u00f3n.</li> </ul> <pre><code>&lt;field name=\"image\" widget=\"image\" options='{\"zoom\": true, \"preview_image\": \"image_128\"}'/&gt;\n</code></pre>"},{"location":"8_5_Vistas/#selection","title":"Selection","text":"<pre><code>&lt;field name=\"state\" decoration-success=\"state == 'sale' or state == 'done'\" decoration-info=\"state == 'draft' or state == 'sent'\" widget=\"badge\" optional=\"show\"/&gt;\n</code></pre>"},{"location":"8_5_Vistas/#fields-en-trees","title":"Fields en trees","text":"<ul> <li><code>handle</code>: Permite ordenar manualmente (el campo debe ser el criterio de ordenaci\u00f3n).</li> </ul>"},{"location":"8_5_Vistas/#redimensionar-imagenes","title":"Redimensionar im\u00e1genes","text":"<p>Desde Odoo 13, el campo Image permite tener diferentes resoluciones con varios related.</p>"},{"location":"8_5_Vistas/#botones-en-formularios","title":"Botones en formularios","text":"<p>Puedes a\u00f1adir un bot\u00f3n en el formulario:</p> <pre><code>&lt;button name=\"update_progress\" type=\"object\" string=\"Actualizar\" class=\"oe_highlight\"/&gt;\n</code></pre> <p>El atributo <code>name</code> debe coincidir con la funci\u00f3n a la que llama. El tipo puede ser: <code>object</code>, <code>action</code>, <code>url</code>, <code>client</code>.</p> <p>Para llamar a un action externo:</p> <pre><code>&lt;button name=\"%(launch_mmog_fortress_wizard)d\" type=\"action\" string=\"Lanzar ataque\" class=\"oe_highlight\"/&gt;\n</code></pre> <p>Los botones pueden tener iconos (ver Odoo Iconos):</p> <pre><code>&lt;button name=\"test\" icon=\"fa-star-o\" confirm=\"\u00bfEst\u00e1s seguro?\"/&gt;\n&lt;button type=\"object\" icon=\"fa-trash-o\" name=\"unlink\"/&gt;\n</code></pre> <p>Se recomienda poner los botones en el <code>&lt;header&gt;</code>:</p> <pre><code>&lt;header&gt;\n    &lt;field name=\"state\" widget=\"statusbar\"/&gt;\n    &lt;button name=\"accept\" type=\"object\" string=\"Aceptar\" class=\"oe_highlight\"/&gt;\n    &lt;button special=\"cancel\" string=\"Cancelar\"/&gt;\n&lt;/header&gt;\n</code></pre> <p>Los botones pueden tener contexto para enviar informaci\u00f3n extra al servidor.</p>"},{"location":"8_5_Vistas/#smart-buttons","title":"Smart Buttons","text":"<p>Son botones que, adem\u00e1s de ejecutarse, muestran informaci\u00f3n resumida y una icono. El texto y forma del bot\u00f3n se modifica din\u00e1micamente.</p> <pre><code>&lt;div class=\"oe_button_box\"&gt;\n    &lt;button type=\"object\" class=\"oe_stat_button\" icon=\"fa-pencil-square-o\" name=\"regenerate_password\"&gt;\n        &lt;div class=\"o_form_field o_stat_info\"&gt;\n            &lt;span class=\"o_stat_value\"&gt;\n                &lt;field name=\"password\" string=\"Password\"/&gt;\n            &lt;/span&gt;\n            &lt;span class=\"o_stat_text\"&gt;Password&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"8_5_Vistas/#formularios-dinamicos","title":"Formularios din\u00e1micos","text":"<p>Puedes modificar el comportamiento de los campos seg\u00fan condiciones: ocultar con <code>invisible</code>, hacer solo lectura con <code>readonly</code> o requerir con <code>required</code>.</p> <p>Ejemplo de ocultar condicionalmente:</p> <pre><code>&lt;field name=\"boyfriend_name\" invisible=\"married != False\"/&gt;\n</code></pre> <p>Mostrar solo en modo edici\u00f3n o lectura:</p> <pre><code>&lt;field name=\"partit\" class=\"oe_edit_only\"/&gt;\n&lt;field name=\"equip\" class=\"oe_read_only\"/&gt;\n</code></pre> <p>Ocultar un grupo seg\u00fan el valor de un campo:</p> <pre><code>&lt;group invisible=\"state in ['player', 'stats']\"&gt;\n    &lt;field name=\"dia\"/&gt;\n&lt;/group&gt;\n</code></pre> <p>Ocultar una columna en una lista y usar el valor del padre:</p> <pre><code>&lt;field name=\"lot_id\" attrs=\"{'column_invisible': [('parent.state', 'not in', ['sale', 'done'])]}\"/&gt;\n</code></pre> <p>Editar condicionalmente:</p> <pre><code>&lt;field name=\"name2\" readonly=\"condition == False\"/&gt;\n</code></pre> <p>Combinando atributos:</p> <pre><code>&lt;field name=\"name\" invisible=\"condition1 == False\" required=\"condition2 == True\" readonly=\"condition3 == True\"/&gt;\n&lt;field name=\"suma\" readonly=\"valor == 'calculat'\" invisible=\"servicio in ['Reparaciones','Mantenimiento'] or cliente == 'Pepe'\"/&gt;\n</code></pre> <p>readonly con force_save:</p> <pre><code>&lt;field name=\"salary\" readonly=\"1\" force_save=\"1\"/&gt;\n</code></pre>"},{"location":"8_5_Vistas/#vistas-kanban","title":"Vistas Kanban","text":"<p>Las vistas kanban muestran el modelo en forma de \"tarjetas\". Se declaran con una mezcla de XML, HTML y plantillas QWeb.</p> <p>Ejemplo b\u00e1sico:</p> <pre><code>&lt;record model=\"ir.ui.view\" id=\"socio_kanban_view\"&gt;\n    &lt;field name=\"name\"&gt;cooperativa.socio&lt;/field&gt;\n    &lt;field name=\"model\"&gt;cooperativa.socio&lt;/field&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;kanban&gt;\n            &lt;field name=\"name\"/&gt;\n            &lt;field name=\"id\"/&gt;\n            &lt;field name=\"foto\"/&gt;\n            &lt;field name=\"arrobas\"/&gt;\n            &lt;templates&gt;\n                &lt;t t-name=\"kanban-box\"&gt;\n                    &lt;div class=\"oe_product_vignette\"&gt;\n                        &lt;a type=\"open\"&gt;\n                            &lt;img class=\"oe_kanban_image\"\n                                 t-att-alt=\"record.name.value\"\n                                 t-att-src=\"kanban_image('cooperativa.socio', 'foto', record.id.value)\" /&gt;\n                        &lt;/a&gt;\n                        &lt;div class=\"oe_product_desc\"&gt;\n                            &lt;h4&gt;\n                                &lt;a type=\"edit\"&gt;\n                                    &lt;field name=\"name\"&gt;&lt;/field&gt;\n                                &lt;/a&gt;\n                            &lt;/h4&gt;\n                            &lt;ul&gt;\n                                &lt;li&gt;Arrobas: &lt;field name=\"arrobas\"&gt;&lt;/field&gt;&lt;/li&gt;\n                            &lt;/ul&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/t&gt;\n            &lt;/templates&gt;\n        &lt;/kanban&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>En el template QWeb, define <code>&lt;t t-name=\"kanban-box\"&gt;</code> que se renderiza una vez por cada registro. Puedes usar clases CSS de Odoo como <code>oe_kanban_vignette</code> o <code>oe_kanban_card</code>.</p> <p>Opciones avanzadas:</p> <ul> <li>En <code>&lt;kanban&gt;</code>:<ul> <li><code>default_group_by</code>: Agrupa por un campo.</li> <li><code>default_order</code>: Ordena por un campo.</li> <li><code>quick_create</code>: Permite crear elementos r\u00e1pidamente.</li> </ul> </li> <li>En cada <code>&lt;field&gt;</code>:<ul> <li><code>sum</code>, <code>avg</code>, <code>min</code>, <code>max</code>, <code>count</code>: Funciones de agregaci\u00f3n.</li> </ul> </li> <li>En el template:<ul> <li><code>&lt;a type=\"open\"&gt;</code>, <code>&lt;a type=\"edit\"&gt;</code>, <code>&lt;a type=\"delete\"&gt;</code>: Acciones sobre el registro.</li> </ul> </li> </ul> <p>Funciones \u00fatiles en QWeb:</p> <ul> <li><code>kanban_image(model, field, id)</code>: Devuelve la URL de la imagen.</li> <li><code>kanban_text_ellipsis(string, size=160)</code>: Acorta textos largos.</li> <li><code>kanban_getcolor(raw_value)</code>: Devuelve un color predefinido.</li> <li><code>kanban_color(raw_value)</code>: Usa el campo <code>color</code> para definir el color.</li> </ul> <p>Forms dentro de kanban:</p> <p>Desde Odoo 12 se puede incluir un formulario simple dentro de un kanban, \u00fatil con <code>quick_create</code> activado y agrupado por Many2one.</p> <pre><code>&lt;kanban default_group_by=\"stage_id\" class=\"o_kanban_small_column o_kanban_project_tasks\" on_create=\"quick_create\"\n quick_create_view=\"project.quick_create_task_form\" examples=\"project\"&gt;\n...\n&lt;/kanban&gt;\n</code></pre> <p>El formulario referenciado debe ser sencillo:</p> <pre><code>&lt;form&gt;\n  &lt;group&gt;\n     &lt;field name=\"name\" string=\"T\u00edtulo de la tarea\"/&gt;\n     &lt;field name=\"user_id\" options=\"{'no_open': True,'no_create': True}\"/&gt;\n  &lt;/group&gt;\n&lt;/form&gt;\n</code></pre> <p>Im\u00e1genes en kanban:</p> <p>Puedes usar <code>kanban_image</code> o el widget <code>image</code> como en los formularios.</p>"},{"location":"8_5_Vistas/#vistas-de-busqueda-search","title":"Vistas de b\u00fasqueda (search)","text":"<p>Las vistas de b\u00fasqueda tienen tres tipos de elementos:</p> <ul> <li>field: Permite buscar en un campo.</li> <li>filter: Filtro por un valor predeterminado.</li> <li>group: Agrupa por un criterio.</li> </ul> <p>Ejemplo b\u00e1sico:</p> <pre><code>&lt;search&gt;\n    &lt;field name=\"name\"/&gt;\n    &lt;field name=\"inventor_id\"/&gt;\n&lt;/search&gt;\n</code></pre> <p>Tip</p> <p>Los campos deben estar almacenados en la base de datos, aunque sean computed.</p> <p>Puedes a\u00f1adir un dominio para b\u00fasquedas personalizadas:</p> <pre><code>&lt;field name=\"description\" string=\"Nombre y descripci\u00f3n\"\n    filter_domain=\"['|', ('name', 'ilike', self), ('description', 'ilike', self)]\"/&gt;\n</code></pre> <p>Filtros predefinidos:</p> <pre><code>&lt;filter name=\"my_ideas\" string=\"Mis ideas\" domain=\"[('inventor_id', '=', uid)]\"/&gt;\n&lt;filter name=\"more_100\" string=\"M\u00e1s de 100 cajas\" domain=\"[('cajones','&gt;',100)]\"/&gt;\n&lt;filter name=\"Today\" string=\"Hoy\" domain=\"[('date', '&amp;gt;=', datetime.datetime.now().strftime('%Y-%m-%d 00:00:00')),\n                                             ('date', '&amp;lt;=',datetime.datetime.now().strftime('%Y-%m-%d 23:23:59'))]\"/&gt;\n</code></pre> <p>Tip</p> <p>Los filtros solo pueden comparar un campo con un valor espec\u00edfico. Si necesitas comparar dos campos, usa una funci\u00f3n.</p>"},{"location":"8_5_Vistas/#operadores-para-domains","title":"Operadores para domains","text":"<ul> <li><code>like</code>, <code>not like</code>, <code>=like</code>, <code>ilike</code>, <code>not ilike</code>, <code>=ilike</code></li> <li><code>=?</code>: Hace el t\u00e9rmino TRUE si el valor es None o False.</li> <li><code>in</code>, <code>not in</code></li> <li><code>=</code>, <code>!=</code></li> <li><code>child_of</code></li> <li><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></li> </ul> <p>Agrupar por un campo:</p> <pre><code>&lt;group string=\"Agrupar por\"&gt;\n    &lt;filter name=\"group_by_inventor\" string=\"Inventor\" context=\"{'group_by': 'inventor_id'}\"/&gt;\n&lt;/group&gt;\n</code></pre> <p>Para agrupar por fecha por d\u00eda:</p> <pre><code>&lt;filter name=\"group_by_exit_day\" string=\"Salida\" context=\"{'group_by': 'exit_day:day'}\"/&gt;\n</code></pre> <p>Filtro predefinido en un action:</p> <pre><code>&lt;field name=\"context\"&gt;{'search_default_clients':1,\"default_is_client\": True}&lt;/field&gt;\n</code></pre>"},{"location":"8_5_Vistas/#vistas-calendario","title":"Vistas calendario","text":"<p>Si el modelo tiene un campo date o datetime, puedes mostrar los registros ordenados por tiempo.</p> <p>Atributos principales:</p> <ul> <li><code>string</code>: T\u00edtulo de la vista.</li> <li><code>date_start</code>: Campo de inicio (date/datetime).</li> <li><code>date_delay</code>: Duraci\u00f3n en horas.</li> <li><code>date_stop</code>: Campo de fin (ignorado si existe <code>date_delay</code>).</li> <li><code>day_length</code>: Duraci\u00f3n de un d\u00eda (por defecto 8 horas).</li> <li><code>color</code>: Campo para distinguir con colores.</li> <li><code>mode</code>: Vista inicial (day, week, month).</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;record model=\"ir.ui.view\" id=\"session_calendar_view\"&gt;\n    &lt;field name=\"name\"&gt;session.calendar&lt;/field&gt;\n    &lt;field name=\"model\"&gt;openacademy.session&lt;/field&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;calendar string=\"Calendario de sesiones\" date_start=\"start_date\"\n                  date_stop=\"end_date\"\n                  color=\"instructor_id\"&gt;\n            &lt;field name=\"name\"/&gt;\n        &lt;/calendar&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre>"},{"location":"8_5_Vistas/#vistas-graficas-graph","title":"Vistas gr\u00e1ficas (graph)","text":"<p>Se usan para ver agregaciones sobre los datos.</p> <p>Atributos:</p> <ul> <li><code>string</code>: T\u00edtulo.</li> <li><code>type</code>: Tipo de gr\u00e1fico (bar, pie, line).</li> <li><code>stacked</code>: Solo para bar, muestra datos apilados.</li> </ul> <p>El primer campo es el eje X, el segundo el eje Y.</p> <p>Atributos de los campos:</p> <ul> <li><code>name</code>: Nombre del campo.</li> <li><code>title</code>: Nombre en el gr\u00e1fico.</li> <li><code>invisible</code>: No aparece.</li> <li><code>type</code>: <code>row</code> para agrupar, <code>col</code> para l\u00edneas, <code>measure</code> para datos agregados.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;record model=\"ir.ui.view\" id=\"terraform.planet_changes_graph\"&gt;\n    &lt;field name=\"name\"&gt;Planet Changes graph&lt;/field&gt;\n    &lt;field name=\"model\"&gt;terraform.planetary_changes&lt;/field&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;graph string=\"Historial de cambios\" type=\"line\"&gt;\n            &lt;field name=\"time\" type=\"row\"/&gt;\n            &lt;field name=\"planet\" type=\"col\"/&gt;\n            &lt;field name=\"greenhouse\" type=\"measure\"/&gt;\n        &lt;/graph&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Tip</p> <p>Las vistas graph en Odoo son limitadas: solo aceptan un elemento en X y los campos deben estar almacenados en la base de datos.</p>"},{"location":"8_6_Controladores/","title":"8.6. Controladores","text":""},{"location":"8_6_Controladores/#el-controlador","title":"El controlador","text":"<p>Ya hemos mencionado parte del controlador al hablar de los campos computed. Sin embargo, es importante destacar las facilidades que proporciona Odoo para evitar tener que acceder directamente a la base de datos.</p> <p>La capa ORM de Odoo ofrece m\u00e9todos que se encargan del mapeo entre los objetos Python y las tablas de PostgreSQL. As\u00ed, disponemos de m\u00e9todos para crear, modificar, eliminar y buscar registros en la base de datos.</p> <p>En ocasiones, puede ser necesario alterar la acci\u00f3n autom\u00e1tica de b\u00fasqueda, creaci\u00f3n, modificaci\u00f3n o eliminaci\u00f3n facilitada por Odoo, y deberemos sobreescribir los m\u00e9todos correspondientes en nuestras clases.</p> <p>Como desarrolladores en el framework de Odoo, debemos conocer los m\u00e9todos proporcionados por la capa ORM y dominar el dise\u00f1o de m\u00e9todos para:</p> <ul> <li>Definir campos funcionales en el dise\u00f1o del modelo.</li> <li>Definir la acci\u00f3n a ejecutar al modificar el contenido de un campo en una vista formulario (<code>@api.onchange</code>).</li> <li>Alterar las acciones autom\u00e1ticas de b\u00fasqueda, creaci\u00f3n, modificaci\u00f3n y eliminaci\u00f3n de recursos.</li> </ul> <p>Una \u00faltima consideraci\u00f3n a tener en cuenta al escribir m\u00e9todos y funciones en Odoo es que los textos de los mensajes incluidos deben ser traducibles. Para ello, deben introducirse con la sintaxis <code>_(\u2018texto\u2019)</code> y el archivo <code>.py</code> debe contener <code>from odoo.tools.translate import _</code> en la cabecera.</p>"},{"location":"8_6_Controladores/#api-del-orm","title":"API del ORM","text":"<p>Interactuar en la terminal</p> <pre><code>$ odoo shell -d castillo -u containers\n</code></pre> <p>Observa c\u00f3mo hemos a\u00f1adido el par\u00e1metro <code>shell</code>. Las operaciones realizadas en la terminal no son persistentes en la base de datos hasta que se ejecuta <code>self.env.cr.commit()</code>. Dentro de la terminal, puedes obtener ayuda de los m\u00e9todos de Odoo con <code>help()</code>, por ejemplo: <code>help(tools.image)</code>.</p> <p>Tambi\u00e9n puedes arrancar Odoo en modo shell sin interferir con la instancia en ejecuci\u00f3n redefiniendo los puertos:</p> <pre><code>$ odoo shell -c /ruta/a/odoo.conf --xmlrpc-port 8888 --longpolling-port 8899\n</code></pre> <p>Un m\u00e9todo creado dentro de un modelo act\u00faa sobre todos los elementos del modelo que est\u00e9n activos en el momento de llamar al m\u00e9todo. Si es una vista tipo \u00e1rbol (tree), ser\u00e1n varios; si es un formulario (form), solo uno. En cualquier caso, se trata de una \"lista\" de elementos llamada recordset.</p> <p>La interacci\u00f3n con los modelos en el controlador se realiza mediante los llamados recordsets, que son colecciones de objetos sobre un modelo. Si iteramos sobre un recordset, obtenemos los singletons, que son objetos individuales correspondientes a cada fila en la base de datos.</p> <pre><code>def do_operation(self):\n    print(self)  # =&gt; a.model(1, 2, 3, 4, 5)\n    for record in self:\n        print(record)  # =&gt; a.model(1), luego a.model(2), luego a.model(3), ...\n</code></pre> <p>Podemos acceder a todos los campos de un modelo siempre que estemos en un singleton, no en un recordset:</p> <pre><code>&gt;&gt;&gt; record.name\n'Nombre de ejemplo'\n&gt;&gt;&gt; record.company_id.name\n'Nombre de la empresa'\n&gt;&gt;&gt; record.name = \"Bob\"\n</code></pre> <p>Intentar leer o escribir un campo en un recordset dar\u00e1 un error. Acceder a un campo many2one, one2many o many2many devolver\u00e1 un recordset.</p>"},{"location":"8_6_Controladores/#operaciones-con-conjuntos-set-operations","title":"Operaciones con conjuntos (Set operations)","text":"<p>Los recordsets pueden combinarse mediante operaciones t\u00edpicas de conjuntos:</p> <ul> <li><code>record in set</code>: Devuelve si el registro est\u00e1 en el conjunto.</li> <li><code>set1 | set2</code>: Uni\u00f3n de conjuntos.</li> <li><code>set1 &amp; set2</code>: Intersecci\u00f3n de conjuntos.</li> <li><code>set1 - set2</code>: Diferencia de conjuntos.</li> </ul> <p>Adem\u00e1s, un recordset no tiene elementos repetidos y permite acceder a recordsets dentro de \u00e9l. Por ejemplo:</p> <pre><code>&gt;&gt;&gt; record.students.classrooms\n</code></pre> <p>Devuelve la lista de todas las clases de todos los estudiantes, sin repetir ninguna.</p>"},{"location":"8_6_Controladores/#programacion-funcional-en-el-orm","title":"Programaci\u00f3n funcional en el ORM","text":"<p>Python dispone de varias funciones para iterar listas y aplicar funciones a sus elementos, como <code>map()</code>, <code>filter()</code>, <code>reduce()</code>, <code>sort()</code>, <code>zip()</code>, etc. Sin embargo, Odoo trabaja con recordsets en lugar de listas y proporciona sus propios m\u00e9todos para imitar estas operaciones:</p> <ul> <li> <p>filtered(): Filtra el recordset para que solo contenga los registros que cumplen una condici\u00f3n.</p> <pre><code>records.filtered(lambda r: r.company_id == user.company_id)\nrecords.filtered(\"partner_id.is_company\")\n</code></pre> </li> <li> <p>sorted(): Ordena los registros seg\u00fan una funci\u00f3n, normalmente una funci\u00f3n lambda que indica el campo por el que ordenar.</p> <pre><code># Ordenar registros por el campo 'name'\nrecords.sorted(key=lambda r: r.name)\nrecords.sorted(key=lambda r: r.name, reverse=True)\n</code></pre> </li> <li> <p>mapped(): Aplica una funci\u00f3n a cada registro del recordset y devuelve una lista con los resultados.</p> <pre><code># Devuelve una lista sumando dos campos para cada registro\nrecords.mapped(lambda r: r.field1 + r.field2)\n# Devuelve una lista de nombres\nrecords.mapped('name')\n# Devuelve un recordset de partners\nrecord.mapped('partner_id')\n# Devuelve la uni\u00f3n de todos los bancos de los partners, sin duplicados\nrecord.mapped('partner_id.bank_ids')\n</code></pre> </li> </ul> <p>Estas funciones son \u00fatiles para aplicar t\u00e9cnicas de programaci\u00f3n funcional.</p>"},{"location":"8_6_Controladores/#entorno-environment","title":"Entorno (Environment)","text":"<p>El llamado environment o env almacena informaci\u00f3n contextual relevante para trabajar con el ORM, como el cursor de la base de datos, el usuario actual o el contexto (que contiene metadatos).</p> <p>Todos los recordsets tienen acceso al environment mediante <code>env</code>. Cuando queremos crear un recordset dentro de otro, podemos usar <code>env</code>:</p> <pre><code>&gt;&gt;&gt; self.env['res.partner']\nres.partner\n&gt;&gt;&gt; self.env['res.partner'].search([['is_company', '=', True], ['customer', '=', True]])\nres.partner(7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74)\n</code></pre> <p>El primer caso crea un recordset vac\u00edo pero referenciado al modelo <code>res.partner</code>, sobre el que se pueden ejecutar las funciones del ORM.</p>"},{"location":"8_6_Controladores/#contexto","title":"Contexto","text":"<p>El contexto es un diccionario de Python que contiene datos \u00fatiles para todas las vistas y m\u00e9todos. Las funciones de Odoo reciben el contexto y lo consultan si es necesario. El contexto suele incluir, al menos, el ID de usuario, el idioma o la zona horaria. Cuando Odoo va a renderizar una vista XML, consulta el contexto para ver si debe aplicar alg\u00fan par\u00e1metro.</p> <pre><code>print(self.env.context)\n</code></pre> <p>Algunos par\u00e1metros habituales en el contexto:</p> <ul> <li><code>active_id</code>: ID del elemento del modelo que est\u00e1 en pantalla.</li> <li><code>active_ids</code>: Lista de los IDs seleccionados en una vista tipo \u00e1rbol.</li> <li><code>active_model</code>: El modelo actual.</li> <li><code>default_&lt;campo&gt;</code>: Permite asignar un valor por defecto a un campo en una acci\u00f3n o en un One2many.</li> <li><code>search_default_&lt;filtro&gt;</code>: Aplica un filtro por defecto en la vista de una acci\u00f3n.</li> <li><code>group_by</code>: Para crear agrupaciones en vistas de tipo search.</li> <li><code>graph_mode</code>: En vistas graph, cambia el tipo de gr\u00e1fico.</li> <li><code>context.get</code>: Permite extraer datos del contexto en vistas o para domains.</li> </ul> <p>El contexto se transmite entre m\u00e9todos y vistas, y a veces queremos modificarlo. Por ejemplo, para pasar par\u00e1metros a un wizard desde un bot\u00f3n:</p> <pre><code>&lt;button name=\"%(reserves.act_w_clients_bookings)d\" type=\"action\" string=\"Seleccionar reservas\" context=\"{'b_fs':bookings_fs}\"/&gt;\n</code></pre> <p>En el wizard (modelo transitorio), podemos definir un campo con el valor recibido por contexto:</p> <pre><code>def _default_bookings(self):\n    return self._context.get('b_fs')\nbookings_fs = fields.Many2many('reserves.bookings', readonly=True, default=_default_bookings)\n</code></pre> <p>Tambi\u00e9n se puede usar el contexto para definir un domain en un campo Many2one o Many2many:</p> <pre><code>def _domain_bookings(self):\n    return [('id', '=', self._context.get('b_fs').ids)]\nbookings_fs = fields.Many2many('reserves.bookings', readonly=True, domain=_domain_bookings)\n</code></pre> <p>Para modificar el contexto actual y enviarlo a una acci\u00f3n o llamar a una funci\u00f3n de un modelo con otro contexto, se puede usar <code>with_context</code>:</p> <pre><code># El contexto actual es {'key1': True}\nr2 = records.with_context({}, key2=True)\n# -&gt; r2._context es {'key2': True}\nr2 = records.with_context(key2=True)\n# -&gt; r2._context es {'key1': True, 'key2': True}\n</code></pre> <p>Si es necesario modificar el contexto:</p> <p></p><pre><code>self.env.context = dict(self.env.context)\nself.env.context.update({'key': 'val'})\n</code></pre> o<p></p> <pre><code>self = self.with_context(get_sizes=True)\nprint(self.env.context)\n</code></pre> <p>Esto solo afecta al recordset actual y no modifica el contexto global.</p> <p>En acciones, el contexto puede pasarse y utilizarse en la vista, ya que est\u00e1 disponible en QWeb. Por ejemplo, para pasar un domain por contexto a un campo en una vista:</p> <pre><code>return {\n    'name': 'Travel wizard action',\n    'type': 'ir.actions.act_window',\n    'res_model': self._name,\n    'res_id': self.id,\n    'view_mode': 'form',\n    'target': 'new',\n    'context': dict(self._context, cities_available_context=(self.cities_available.city).ids),\n}\n</code></pre> <pre><code>&lt;field name=\"destiny\"\n       domain=\"[('id','in',context.get('cities_available_context',[]))]\"\n/&gt;\n</code></pre>"},{"location":"8_6_Controladores/#metodos-del-orm","title":"M\u00e9todos del ORM","text":""},{"location":"8_6_Controladores/#search","title":"search()","text":"<p>A partir de un domain de Odoo, devuelve un recordset con todos los elementos que cumplen la condici\u00f3n:</p> <pre><code># Busca en el modelo actual\nself.search([('is_company', '=', True), ('customer', '=', True)])\nself.search([('is_company', '=', True)], limit=1).name\n</code></pre> <p>Tip</p> <p>Puedes obtener la cantidad de elementos con el m\u00e9todo <code>search_count()</code>.</p> <p>Par\u00e1metros principales:</p> <ul> <li><code>args</code>: Dominio de b\u00fasqueda. Usa una lista vac\u00eda para todos los registros.</li> <li><code>offset</code>: N\u00famero de resultados a ignorar (por defecto: ninguno).</li> <li><code>limit</code>: M\u00e1ximo de registros a devolver (por defecto: todos).</li> <li><code>order</code>: Cadena de ordenaci\u00f3n.</li> <li><code>count</code>: Si es <code>True</code>, solo cuenta y devuelve el n\u00famero de registros encontrados.</li> </ul>"},{"location":"8_6_Controladores/#create","title":"create()","text":"<p>Crea un registro a partir de un diccionario de campos:</p> <pre><code>self.create({'name': \"Nuevo Nombre\"})\n</code></pre> <p>El m\u00e9todo create suele sobreescribirse en herencia para realizar acciones adicionales al crear un registro.</p>"},{"location":"8_6_Controladores/#write","title":"write()","text":"<p>Escribe valores en los campos de todos los registros del recordset:</p> <pre><code>self.write({'name': \"Nombre actualizado\"})\n</code></pre> <p>Para campos Many2many, se pueden usar c\u00f3digos especiales para modificar la relaci\u00f3n (ver Expresiones en Odoo):</p> <pre><code>self.sessions = [(4, s.id)]\nself.write({'sessions': [(4, s.id)]})\nself.write({'sessions': [(6, 0, [ref('vehicle_tag_leasing'), ref('fleet.vehicle_tag_compact'), ref('fleet.vehicle_tag_senior')])]})\n</code></pre>"},{"location":"8_6_Controladores/#browse","title":"browse()","text":"<p>A partir de una lista de IDs, devuelve un recordset:</p> <pre><code>self.browse([7, 18, 12])\n</code></pre>"},{"location":"8_6_Controladores/#exists","title":"exists()","text":"<p>Devuelve si un registro sigue existiendo en la base de datos:</p> <pre><code>if not record.exists():\n    raise Exception(\"El registro ha sido eliminado\")\n# O para refrescar un recordset:\nrecords = records.exists()\n</code></pre>"},{"location":"8_6_Controladores/#ref","title":"ref()","text":"<p>Devuelve un singleton a partir de un External ID:</p> <pre><code>env.ref('base.group_public')\n</code></pre>"},{"location":"8_6_Controladores/#ensure_one","title":"ensure_one()","text":"<p>Asegura que el recordset contiene un solo registro (singleton):</p> <pre><code>records.ensure_one()\n# Equivalente a:\nassert len(records) == 1, \"Expected singleton\"\n</code></pre>"},{"location":"8_6_Controladores/#unlink","title":"unlink()","text":"<p>Elimina de la base de datos los registros del recordset actual.</p> <p>Ejemplo de sobreescritura para eliminar en cascada:</p> <pre><code>def unlink(self):\n    for x in self:\n        x.catid.unlink()\n    return super(product_uom_class, self).unlink()\n</code></pre>"},{"location":"8_6_Controladores/#otros-metodos-y-atributos-utiles","title":"Otros m\u00e9todos y atributos \u00fatiles","text":"<ul> <li>read(): M\u00e9todo de bajo nivel para leer campos concretos. Se recomienda usar <code>browse()</code>.</li> <li>name_search(): Busca registros cuyo nombre visible coincida con un patr\u00f3n.</li> <li>ids: Lista de IDs del recordset actual.</li> <li>sorted(key=None, reverse=False): Devuelve el recordset ordenado por un criterio.</li> <li>display_name: Por defecto, muestra el campo <code>name</code>. Se puede sobreescribir <code>_compute_display_name</code> o cambiar <code>_rec_name</code> para mostrar otro campo.</li> <li>copy(): Crea una copia del singleton, permitiendo nuevos valores para los campos. En campos One2many, hay que indicar <code>copy=True</code> para permitir la copia.</li> </ul>"},{"location":"8_6_Controladores/#onchange","title":"onchange","text":"<p>Si queremos que un valor se modifique en tiempo real al cambiar otro campo (sin guardar a\u00fan), podemos usar los m\u00e9todos onchange.</p> <p>Tip</p> <p>Los campos computed ya tienen su propio onchange, por lo que no es necesario definirlo aparte.</p> <p>Tip</p> <p>Retornar un domain en onchange est\u00e1 deprecado en versiones recientes de Odoo.</p> <p>En onchange se modifica el valor de uno o m\u00e1s campos directamente y, si es necesario, se puede devolver un aviso o un filtro:</p> <pre><code>return {\n    'warning': {'title': \"Aviso\", 'message': \"Algo ha ocurrido\", 'type': 'notification'},\n}\n</code></pre> <p>Ejemplo de onchange:</p> <pre><code>@api.onchange('amount', 'unit_price')\ndef _onchange_price(self):\n    self.price = self.amount * self.unit_price\n    return {\n        'warning': {\n            'title': \"Algo ha ocurrido\",\n            'message': \"Revisa los valores introducidos\",\n        }\n    }\n\n@api.onchange('seats', 'attendee_ids')\ndef _verify_valid_seats(self):\n    if self.seats &lt; 0:\n        return {\n            'warning': {\n                'title': \"Valor incorrecto\",\n                'message': \"El n\u00famero de plazas no puede ser negativo\",\n            },\n        }\n    if self.seats &lt; len(self.attendee_ids):\n        return {\n            'warning': {\n                'title': \"Demasiados asistentes\",\n                'message': \"Aumenta las plazas o elimina asistentes\",\n            },\n        }\n</code></pre> <p>Tip</p> <p>Para evitar errores de usuario, Odoo ofrece varias opciones: - Constraints - onchange con mensaje de error y restablecimiento de valores - Sobrescritura de los m\u00e9todos <code>write</code> o <code>create</code> para validar antes de guardar</p>"},{"location":"8_6_Controladores/#tareas-programadas-cron-jobs","title":"Tareas programadas (Cron Jobs)","text":"<p>Para crear tareas autom\u00e1ticas, hay que crear un registro en el modelo <code>ir.cron</code>:</p> <pre><code>&lt;record model=\"ir.cron\" forcecreate=\"True\" id=\"game.cron_update\"&gt;\n    &lt;field name=\"name\"&gt;Game: Cron Update&lt;/field&gt;\n    &lt;field name=\"model_id\" ref=\"model_game_player\"/&gt;\n    &lt;field name=\"state\"&gt;code&lt;/field&gt;\n    &lt;field name=\"code\"&gt;model.update_resources()&lt;/field&gt;\n    &lt;field name=\"user_id\" ref=\"base.user_root\"/&gt;\n    &lt;field name=\"interval_number\"&gt;1&lt;/field&gt;\n    &lt;field name=\"interval_type\"&gt;minutes&lt;/field&gt;\n    &lt;field name=\"numbercall\"&gt;-1&lt;/field&gt;\n    &lt;field name=\"activity_user_type\"&gt;specific&lt;/field&gt;\n    &lt;field name=\"doall\" eval=\"False\" /&gt;\n&lt;/record&gt;\n</code></pre> <p>Y un m\u00e9todo decorado con <code>@api.model</code>:</p> <pre><code>@api.model\ndef update_resources(self):\n    ...\n</code></pre> <p>El modelo ir.cron tiene un Many2one con ir.actions.server y, al crearse, genera la acci\u00f3n de servidor correspondiente. Es importante declarar la dependencia del m\u00f3dulo <code>mail</code> en el manifest, ya que a\u00f1ade campos a <code>ir.actions.server</code>.</p> <p>M\u00e1s informaci\u00f3n: - Creaci\u00f3n de m\u00e9todos automatizados en Odoo - Creating cron server action Odoo 11 - Odoo ir.cron documentation</p>"},{"location":"8_6_Controladores/#decoradores-en-odoo","title":"Decoradores en Odoo","text":"<p>Los decoradores modifican la forma en que se llama a una funci\u00f3n, alterando el contenido de <code>self</code>, el n\u00famero de llamadas y el momento de ejecuci\u00f3n.</p> <ul> <li>@api.depends(): Llama a la funci\u00f3n siempre que el campo del que depende se modifica. Si el campo tiene <code>store=True</code>, tambi\u00e9n se recalcula. Por defecto, <code>self</code> es un recordset, por lo que hay que iterar.</li> <li>@api.model: Para funciones que afectan al modelo y no a los recordsets.</li> <li>@api.constrains(): Para comprobar restricciones. <code>self</code> es un recordset.</li> <li>@api.onchange(): Se ejecuta cada vez que se modifica el campo indicado en la vista. <code>self</code> suele ser un singleton.</li> </ul>"},{"location":"8_6_Controladores/#calculos-con-fechas","title":"C\u00e1lculos con fechas","text":"<p>Odoo gestiona las fechas como cadenas de texto, mientras que Python tiene sus propios tipos de datos (<code>datetime</code>, <code>date</code>, <code>timedelta</code>). Para facilitar los c\u00e1lculos, Odoo proporciona utilidades adicionales.</p> <p>Importar los m\u00f3dulos necesarios:</p> <pre><code>from odoo import models, fields, api\nfrom datetime import datetime, timedelta\n</code></pre>"},{"location":"8_6_Controladores/#conversion-entre-string-y-datetime","title":"Conversi\u00f3n entre string y datetime","text":"<p>Supongamos que tenemos un campo:</p> <pre><code>start_date = fields.Datetime()\n</code></pre> <p>Para convertir de string a <code>datetime</code>:</p> <pre><code>fmt = '%Y-%m-%d %H:%M:%S'\ndata = datetime.strptime(self.start_date, fmt)\n</code></pre> <p>O usando la utilidad de Odoo:</p> <pre><code>data = fields.Datetime.from_string(self.start_date)\n</code></pre> <p>Para convertir de <code>datetime</code> a string:</p> <pre><code>self.start_date = fields.Datetime.to_string(data)\n</code></pre>"},{"location":"8_6_Controladores/#sumar-o-restar-tiempo-a-una-fecha","title":"Sumar o restar tiempo a una fecha","text":"<p>Para sumar tiempo:</p> <pre><code>data = fields.Datetime.from_string(self.start_date)\ndata = data + timedelta(hours=3)\nself.end_date = fields.Datetime.to_string(data)\n</code></pre>"},{"location":"8_6_Controladores/#calcular-la-diferencia-entre-dos-fechas","title":"Calcular la diferencia entre dos fechas","text":"<p>Con <code>relativedelta</code>:</p> <pre><code>from dateutil.relativedelta import relativedelta\n\nstart = fields.Datetime.from_string(self.start_date)\nend = fields.Datetime.from_string(self.end_date)\n\nrelative = relativedelta(end, start)\nprint(relative.years)\nprint(relative.months)\nprint(relative.days)\n</code></pre> <p>O solo con <code>datetime</code>:</p> <pre><code>start = fields.Datetime.from_string(self.start_date)\nend = fields.Datetime.from_string(self.end_date)\n\nprint((end - start).days * 24 * 60)\nprint((end - start).total_seconds() / 60 / 60 / 24)\n</code></pre>"},{"location":"8_6_Controladores/#comparar-fechas","title":"Comparar fechas","text":"<p>Las fechas en formato <code>Datetime</code> o <code>Date</code> pueden compararse directamente:</p> <pre><code>d3 = fields.Datetime.from_string(self.d3)\nd4 = datetime.now()\nif d3 &lt; d4:\n    print(\"La fecha es anterior\")\n</code></pre> <p>Para comparar solo la fecha (sin hora):</p> <pre><code>if d3.date() == d4.date():\n    ...\n</code></pre>"},{"location":"8_7_Herencia/","title":"8.7. Herencia","text":""},{"location":"8_7_Herencia/#herencia","title":"Herencia","text":"<p>El framework de Odoo facilita el mecanismo de herencia para que los programadores puedan adaptar m\u00f3dulos existentes y, al mismo tiempo, garantizar que las actualizaciones de los m\u00f3dulos no rompan las personalizaciones desarrolladas.</p> <p>La herencia se puede aplicar en los tres componentes del patr\u00f3n MVC:</p> <ul> <li>En el modelo: permite ampliar clases existentes o dise\u00f1ar nuevas clases a partir de las existentes.</li> <li>En la vista: permite modificar el comportamiento de vistas existentes o dise\u00f1ar nuevas vistas.</li> <li>En el controlador: permite sobrescribir m\u00e9todos existentes o dise\u00f1ar nuevos.</li> </ul> <p>Odoo proporciona tres mecanismos de herencia: herencia de clase, herencia por prototipo y herencia por delegaci\u00f3n.</p> Mecanismo Caracter\u00edsticas C\u00f3mo se define De clase - Herencia simple.- La clase original queda sustituida o ampliada.- A\u00f1ade nuevas funcionalidades (atributos y/o m\u00e9todos) a la clase original.- Las vistas definidas sobre la clase original siguen funcionando.- Permite sobrescribir m\u00e9todos de la clase original.- En PostgreSQL, sigue mapeada en la misma tabla que la clase original, ampliada con los nuevos atributos. - Se utiliza el atributo <code>_inherit</code> en la definici\u00f3n de la nueva clase Python: <code>_inherit = 'obj'</code>.- El nombre de la nueva clase debe ser el mismo que el de la clase original: <code>_name = 'obj'</code>. Por prototipo - Herencia simple.- Aprovecha la definici\u00f3n de la clase original (como si fuera un \"prototipo\").- La clase original sigue existiendo.- A\u00f1ade nuevas funcionalidades (atributos y/o m\u00e9todos) a las de la clase original.- Las vistas definidas sobre la clase original no existen (hay que dise\u00f1arlas de nuevo).- Permite sobrescribir m\u00e9todos de la clase original.- En PostgreSQL, se mapea en una nueva tabla. - Se utiliza el atributo <code>_inherit</code> en la definici\u00f3n de la nueva clase Python: <code>_inherit = 'obj'</code>.- Se debe indicar el nombre de la nueva clase: <code>_name = 'nuevo_nombre'</code>. Por delegaci\u00f3n - Herencia simple o m\u00faltiple.- La nueva clase \"delega\" ciertos comportamientos a otras clases que incorpora internamente.- Los recursos de la nueva clase contienen un recurso de cada clase de la que derivan.- Las clases base siguen existiendo.- A\u00f1ade sus propias funcionalidades (atributos y/o m\u00e9todos).- Las vistas definidas sobre las clases base no existen en la nueva clase.- En PostgreSQL, se mapea en diferentes tablas: una para los atributos propios y otras para los recursos de las clases base. - Se utiliza el atributo <code>_inherits</code> en la definici\u00f3n de la nueva clase Python: <code>_inherits = {'obj': 'field_id'}</code>.- Se debe indicar el nombre de la nueva clase: <code>_name = 'nuevo_nombre'</code>. Herencia en Odoo"},{"location":"8_7_Herencia/#herencia-en-el-modelo","title":"Herencia en el Modelo","text":"<p>El dise\u00f1o de un modelo heredado en Odoo es similar al de un modelo no heredado, con dos diferencias principales:</p> <ul> <li> <p>Aparece el atributo _inherit o _inherits para indicar el objeto (herencia simple) o los objetos (herencia m\u00faltiple) de los que deriva el nuevo objeto. La sintaxis es:</p> <pre><code>_inherit = 'nombre.objeto.del.que.se.hereda'\n_inherits = {'nombre.objeto1': 'nombre_campo_FK1', ...}\n</code></pre> </li> <li> <p>En caso de herencia simple, el nombre (atributo <code>_name</code>) del objeto derivado puede coincidir o no con el del objeto padre. Si no se indica el atributo <code>_name</code>, el nuevo objeto mantiene el nombre del objeto padre.</p> </li> </ul>"},{"location":"8_7_Herencia/#herencia-de-clase","title":"Herencia de clase","text":"<p>La herencia simple (<code>_inherit</code>) con atributo <code>_name</code> id\u00e9ntico al del objeto padre se denomina herencia de clase. En este caso, el nuevo objeto sustituye al objeto padre, aunque las vistas sobre el objeto padre siguen funcionando. Es el tipo de herencia m\u00e1s habitual y se utiliza para a\u00f1adir campos y/o modificar propiedades o m\u00e9todos existentes. Los nuevos campos se a\u00f1aden a la tabla de la base de datos donde estaba mapeado el objeto padre.</p> <p>Ejemplo de herencia de clase:</p> <pre><code>class ResPartner(models.Model):\n        _inherit = 'res.partner'\n        debit_limit = fields.Float('L\u00edmite de cr\u00e9dito')\n        # ...\n</code></pre> <p>Puedes comprobar que la tabla <code>res_partner</code> de una empresa sin el m\u00f3dulo de contabilidad instalado no contiene el campo <code>debit_limit</code>, pero s\u00ed aparece una vez instalado el m\u00f3dulo.</p>"},{"location":"8_7_Herencia/#herencia-por-prototipo","title":"Herencia por prototipo","text":"<p>La herencia simple (<code>_inherit</code>) con atributo <code>_name</code> diferente al del objeto padre se denomina herencia por prototipo. En este caso, se crea un nuevo objeto que agrupa los datos y m\u00e9todos del objeto del que deriva, junto con los nuevos datos y m\u00e9todos que incorpore. Siempre se crea una nueva tabla en la base de datos para mapear el nuevo objeto.</p> <p>Ejemplo de herencia por prototipo:</p> <pre><code>class ResAlarm(models.Model):\n        _name = 'res.alarm'\n        # ...\n\nclass CalendarAlarm(models.Model):\n        _name = 'calendar.alarm'\n        _inherit = 'res.alarm'\n        # ...\n</code></pre> <p>En este ejemplo, la tabla <code>calendar_alarm</code> tendr\u00e1 los campos de <code>res_alarm</code> m\u00e1s los propios.</p> <p>Nota: La herencia por prototipo es la tradicional en los lenguajes orientados a objetos, ya que crea una nueva clase vinculada.</p>"},{"location":"8_7_Herencia/#herencia-por-delegacion","title":"Herencia por delegaci\u00f3n","text":"<p>La herencia m\u00faltiple (<code>_inherits</code>) se denomina herencia por delegaci\u00f3n y siempre crea una nueva tabla en la base de datos. El objeto derivado debe incluir, por cada derivaci\u00f3n, un campo Many2one apuntando al objeto del que deriva, con la propiedad <code>ondelete='cascade'</code>. Cada recurso del objeto derivado apunta a un recurso de cada uno de los objetos de los que deriva.</p> <p>Ejemplo de herencia por delegaci\u00f3n:</p> <pre><code>class ResAlarm(models.Model):\n        _name = 'res.alarm'\n        # ...\n\nclass CalendarAlarm(models.Model):\n        _name = 'calendar.alarm'\n        _inherits = {'res.alarm': 'alarm_id'}\n        alarm_id = fields.Many2one('res.alarm', required=True, ondelete='cascade')\n        # ...\n</code></pre>"},{"location":"8_7_Herencia/#herencia-en-la-vista","title":"Herencia en la Vista","text":"<p>La herencia de clase permite seguir utilizando las vistas definidas sobre el objeto padre, pero a menudo interesa disponer de una versi\u00f3n modificada. En este caso, es mejor heredar de las vistas existentes (para a\u00f1adir, modificar o eliminar campos) que reemplazarlas completamente.</p> <p>Para heredar una vista, se utiliza el campo <code>inherit_id</code>:</p> <pre><code>&lt;field name=\"inherit_id\" ref=\"id_xml_vista_padre\"/&gt;\n</code></pre> <p>Si la vista est\u00e1 en otro m\u00f3dulo, se debe anteponer el nombre del m\u00f3dulo:</p> <pre><code>&lt;field name=\"inherit_id\" ref=\"modulo.id_xml_vista_padre\"/&gt;\n</code></pre> <p>El motor de herencia de Odoo procesa el contenido del elemento <code>arch</code> y, por cada hijo con atributos, busca en la vista padre una etiqueta con atributos coincidentes (excepto el de posici\u00f3n). Luego, combina los campos de la vista padre con los de la vista heredada y establece la posici\u00f3n de los nuevos elementos seg\u00fan los siguientes valores:</p> <ul> <li>inside (por defecto): los valores se a\u00f1aden \"dentro\" de la etiqueta.</li> <li>after: a\u00f1ade el contenido despu\u00e9s de la etiqueta.</li> <li>before: a\u00f1ade el contenido antes de la etiqueta.</li> <li>replace: reemplaza el contenido de la etiqueta.</li> <li>attributes: modifica solo los atributos de la etiqueta.</li> </ul> <p>Ejemplos:</p> <ul> <li> <p>Reemplazar un campo:</p> <pre><code>&lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;field name=\"campo\" position=\"replace\"&gt;\n        &lt;field name=\"nuevo_campo\" ... /&gt;\n    &lt;/field&gt;\n&lt;/field&gt;\n</code></pre> </li> <li> <p>Eliminar un campo:</p> <pre><code>&lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;field name=\"campo\" position=\"replace\"/&gt;\n&lt;/field&gt;\n</code></pre> </li> <li> <p>Insertar nuevos campos:</p> <pre><code>&lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;field name=\"campo\" position=\"before\"&gt;\n        &lt;field name=\"nuevo_campo\" .../&gt;\n    &lt;/field&gt;\n&lt;/field&gt;\n</code></pre> </li> <li> <p>Combinaciones:</p> <pre><code>&lt;field name=\"arch\" type=\"xml\"&gt;\n    &lt;data&gt;\n        &lt;field name=\"campo1\" position=\"after\"&gt;\n            &lt;field name=\"nuevo_campo1\"/&gt;\n        &lt;/field&gt;\n        &lt;field name=\"campo2\" position=\"replace\"/&gt;\n        &lt;field name=\"campo3\" position=\"before\"&gt;\n            &lt;field name=\"nuevo_campo3\"/&gt;\n        &lt;/field&gt;\n    &lt;/data&gt;\n&lt;/field&gt;\n</code></pre> </li> <li> <p>Usar expresiones XPath:</p> <pre><code>&lt;xpath expr=\"//field[@name='order_line']/tree/field[@name='price_unit']\" position=\"before\"/&gt;\n&lt;xpath expr=\"//form/*\" position=\"before\"&gt;\n    &lt;header&gt;\n        &lt;field name=\"status\" widget=\"statusbar\"/&gt;\n    &lt;/header&gt;\n&lt;/xpath&gt;\n</code></pre> </li> <li> <p>Vista personalizada en una acci\u00f3n:</p> <pre><code>&lt;record model=\"ir.actions.act_window\" id=\"mi_accion\"&gt;\n    &lt;field name=\"name\"&gt;Mi Acci\u00f3n&lt;/field&gt;\n    &lt;field name=\"res_model\"&gt;mi.modelo&lt;/field&gt;\n    &lt;field name=\"view_mode\"&gt;tree,form&lt;/field&gt;\n    &lt;field name=\"view_ids\" eval=\"[(5, 0, 0),\n        (0, 0, {'view_mode': 'tree', 'view_id': ref('mi_modulo.mi_vista_tree')}),\n        (0, 0, {'view_mode': 'form', 'view_id': ref('mi_modulo.mi_vista_form')}),\n    ]\"/&gt;\n&lt;/record&gt;\n</code></pre> </li> <li> <p>Vista de b\u00fasqueda personalizada:</p> <pre><code>&lt;field name=\"search_view_id\" ref=\"mi_modulo.mi_vista_search\"/&gt;\n</code></pre> </li> <li> <p>Domain en la acci\u00f3n:</p> <pre><code>&lt;field name=\"domain\"&gt;[('is_player','=',True)]&lt;/field&gt;\n</code></pre> </li> <li> <p>Contexto por defecto:</p> <pre><code>&lt;field name=\"context\"&gt;{'default_is_player': True}&lt;/field&gt;\n</code></pre> </li> <li> <p>Filtro por defecto en la vista search:</p> <pre><code>&lt;search&gt;\n    &lt;filter name=\"player_partner\" string=\"Es jugador\" domain=\"[('is_player','=',True)]\"/&gt;\n&lt;/search&gt;\n&lt;field name=\"context\"&gt;{'default_is_player': True, 'search_default_player_partner': 1}&lt;/field&gt;\n</code></pre> </li> </ul>"},{"location":"8_7_Herencia/#herencia-en-el-controlador","title":"Herencia en el Controlador","text":"<p>La herencia en el controlador es habitual cuando necesitamos sobrescribir m\u00e9todos de la capa ORM de Odoo en el dise\u00f1o de m\u00f3dulos.</p> <pre><code>**Funci\u00f3n `super()`**\n\nPython recomienda utilizar la funci\u00f3n `super()` para invocar el m\u00e9todo de la clase base al sobrescribirlo, en lugar de usar la sintaxis `NombreClaseBase.metodo(self, ...)`.\n</code></pre> <p>Al sobrescribir un m\u00e9todo en el objeto derivado, se pueden dar dos situaciones:</p> <ul> <li>A veces queremos sustituir completamente el m\u00e9todo de la clase base: el m\u00e9todo derivado no invoca al m\u00e9todo sobrescrito.</li> <li>Otras veces queremos aprovechar la funcionalidad del m\u00e9todo base: el m\u00e9todo derivado s\u00ed invoca al m\u00e9todo sobrescrito usando <code>super()</code>.</li> </ul> <p>Ejemplo sobrescribiendo el m\u00e9todo <code>create</code>:</p> <pre><code>class ResPartner(models.Model):\n        _inherit = 'res.partner'\n        passed_override_write_function = fields.Boolean(string='Ha pasado por nuestro m\u00e9todo super')\n\n        @api.model\n        def create(self, values):\n                # Sobrescribimos la funci\u00f3n create original del modelo res.partner\n                record = super(ResPartner, self).create(values)\n                # Modificamos el valor de un campo en este m\u00e9todo\n                record.passed_override_write_function = True\n                print('Ha pasado por esta funci\u00f3n. Valor de passed_override_write_function: ' + str(record.passed_override_write_function))\n                # Devolvemos el registro para que se apliquen los cambios\n                return record\n</code></pre>"},{"location":"8_8_Security/","title":"8.8. Security","text":""},{"location":"8_9_Miscelanea/","title":"8.9. Miscelanea","text":""},{"location":"8_9_Miscelanea/#miscelanea","title":"Miscel\u00e1nea","text":"<ul> <li>Para imprimir en color en consola: <code>\\033[93m</code> para abrir color y <code>\\033[0m</code> para cerrar.</li> <li>Para obtener la menor potencia de 2 mayor o igual a un n\u00famero: stackoverflow.com/a/14267557</li> </ul>"},{"location":"8_9_Miscelanea/#alertas-y-excepciones-en-odoo","title":"Alertas y excepciones en Odoo","text":"<p>Odoo puede mostrar diferentes tipos de alertas, todas en <code>openerp.exceptions</code> (o <code>odoo.exceptions</code> en versiones recientes):</p> <ul> <li><code>AccessDenied</code></li> <li><code>DeferredException</code></li> <li><code>QWebException</code></li> <li><code>RedirectWarning</code></li> <li><code>AccessError</code></li> <li><code>MissingError</code></li> <li><code>UserError</code></li> <li><code>ValidationError</code></li> </ul> <p>Por ejemplo, para mostrar un aviso:</p> <pre><code>from odoo import _\nfrom odoo.exceptions import Warning\nraise Warning(_('\u00a1Algo ha fallado!'))\n</code></pre> <p>Para mostrar una advertencia con opci\u00f3n de redirecci\u00f3n:</p> <pre><code>action = self.env.ref('base.action_res_users')\nmsg = _(\"No puedes crear un nuevo usuario desde aqu\u00ed.\\nPara crear uno nuevo, ve al panel de configuraci\u00f3n.\")\nraise odoo.exceptions.RedirectWarning(msg, action.id, _('Ir al panel de configuraci\u00f3n'))\n</code></pre> <p>En las restricciones (constrains) se debe lanzar un <code>ValidationError</code>.</p>"},{"location":"8_9_Miscelanea/#funciones-lambda","title":"Funciones lambda","text":"<p>Las funciones lambda permiten definir funciones an\u00f3nimas de una sola l\u00ednea, \u00fatiles para pasar como par\u00e1metro a m\u00e9todos del ORM:</p> <pre><code>a = lambda x, y: x * y\na(2, 3)  # Devuelve 6\n</code></pre> <p>Si se necesita m\u00e1s l\u00f3gica, es mejor definir una funci\u00f3n normal.</p>"},{"location":"8_9_Miscelanea/#configuracion-de-modulos","title":"Configuraci\u00f3n de m\u00f3dulos","text":"<p>Para a\u00f1adir opciones de configuraci\u00f3n a un m\u00f3dulo, se puede heredar el modelo <code>res.config.settings</code>:</p> <pre><code>class Config(models.TransientModel):\n    _inherit = 'res.config.settings'\n    players = fields.Char(string='Jugadores', config_parameter=\"expanse.players\")\n\n    def reset_universe(self):\n        print(\"reset\", self)\n</code></pre> <p>Y en la vista:</p> <pre><code>&lt;record id=\"res_config_settings_view_form_inherit\" model=\"ir.ui.view\"&gt;\n    &lt;field name=\"name\"&gt;res.config.settings.view.form.&lt;/field&gt;\n    &lt;field name=\"model\"&gt;res.config.settings&lt;/field&gt;\n    &lt;field name=\"priority\" eval=\"25\" /&gt;\n    &lt;field name=\"inherit_id\" ref=\"base.res_config_settings_view_form\" /&gt;\n    &lt;field name=\"arch\" type=\"xml\"&gt;\n        &lt;xpath expr=\"//div[hasclass('settings')]\" position=\"inside\"&gt;\n            &lt;div class=\"app_settings_block\" data-string=\"Expanse Settings\" string=\"Expanse Settings\" data-key=\"expanse\"&gt;\n                &lt;div id=\"players\"&gt;\n                    &lt;h2&gt;Expanse&lt;/h2&gt;\n                    &lt;button type=\"object\" name=\"reset_universe\" string=\"Reset Universe\" class=\"btn-primary\"/&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/xpath&gt;\n    &lt;/field&gt;\n&lt;/record&gt;\n</code></pre> <p>Si en <code>data-key</code> se pone el nombre del m\u00f3dulo, se a\u00f1adir\u00e1 el icono al men\u00fa de configuraci\u00f3n.</p>"}]}